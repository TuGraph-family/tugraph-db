#include "fma-common/logger.h"
#include "lgraph/lgraph_spatial.h"
#include "gtest/gtest.h"
#include "./ut_utils.h"
#include <iostream>

class TestSpatial : public TuGraphTest {};

TEST_F(TestSpatial, Spatial) {
    using namespace lgraph_api;

    {
        UT_LOG() << "Testing encode and decode";
        
        Spatial<Wsg84> point_w(SRID::WSG84, SpatialType::POINT, 0, "0101000000000000000000f03f0000000000000040");
        UT_EXPECT_EQ(point_w.AsEWKB(), "0101000020E6100000000000000000f03f0000000000000040");
        UT_EXPECT_EQ(point_w.AsEWKT(), "SRID=4326;POINT(1 2)");

        // testing wrong wkb format;
        UT_EXPECT_ANY_THROW(Spatial<Wsg84>(SRID::WSG84, SpatialType::POINT, 0, "1111111"));
        

        Spatial<Cartesian> point_c(SRID::CARTESIAN, SpatialType::POINT, 1, "POINT(1.0 1.0)");
        UT_EXPECT_EQ(point_c.AsEWKB(), "0101000020231C0000000000000000F03F000000000000F03F");
        UT_EXPECT_EQ(point_c.AsEWKT(), "SRID=7203;POINT(1 1)");

        // testing wrong wkt format;
        UT_EXPECT_ANY_THROW(Spatial<Cartesian>(SRID::CARTESIAN, SpatialType::POINT, 1, "POINT(1.0 2.0 3.0)"));
        UT_EXPECT_ANY_THROW(Spatial<Cartesian>(SRID::CARTESIAN, SpatialType::POINT, 1, "POINT(a)"));

        Spatial<Wsg84> line_w(SRID::WSG84, SpatialType::LINESTRING, 0, "010200000003000000000000000000000000000"
        "00000000000000000000000004000000000000000400000000000000840000000000000F03F");
        UT_EXPECT_EQ(line_w.AsEWKB(), "0102000020E610000003000000000000000000000000000000000000000"
        "00000000000004000000000000000400000000000000840000000000000F03F");
        UT_EXPECT_EQ(line_w.AsEWKT(), "SRID=4326;LINESTRING(0 0,2 2,3 1)");

        UT_EXPECT_ANY_THROW(Spatial<Wsg84>(SRID::WSG84, SpatialType::LINESTRING, 0, "1111111"));

        Spatial<Cartesian> line_c(SRID::CARTESIAN, SpatialType::LINESTRING, 1, "LINESTRING(0 0,2 2,3 1)");
        UT_EXPECT_EQ(line_c.AsEWKB(), "0102000020231C000003000000000000000000000000000000000000000000000"
        "00000004000000000000000400000000000000840000000000000F03F");
        UT_EXPECT_EQ(line_c.AsEWKT(), "SRID=7203;LINESTRING(0 0,2 2,3 1)");

        UT_EXPECT_ANY_THROW(Spatial<Wsg84>(SRID::WSG84, SpatialType::LINESTRING, 1, "LINESTRING(1.0 2.0 a)"));
        UT_EXPECT_ANY_THROW(Spatial<Cartesian>(SRID::CARTESIAN, SpatialType::LINESTRING, 1, "LINE(0 0,2 2,3 1)"));

        Spatial<Wsg84> polygon_w(SRID::WSG84, SpatialType::POLYGON, 0, "0103000000010000000500000000000000000000000000000000000000000"
        "00000000000000000000000001C400000000000001040000000000000004000000000000000400000000000000000000000000000000"
        "00000000000000000");
        UT_EXPECT_EQ(polygon_w.AsEWKB(), "0103000020E610000001000000050000000000000000000000000000000000000000"
        "000000000000000000000000001C4000000000000010400000000000000040000000000000004000000000000000000000000"
        "0000000000000000000000000");
        UT_EXPECT_EQ(polygon_w.AsEWKT(), "SRID=4326;POLYGON((0 0,0 7,4 2,2 0,0 0))");
        UT_EXPECT_ANY_THROW(Spatial<Wsg84>(SRID::WSG84, SpatialType::POLYGON, 1, "abcde"));

        Spatial<Cartesian> polygon_c(SRID::CARTESIAN, SpatialType::POLYGON, 1, "POLYGON((0 0,0 7,4 2,2 0,0 0))");
        UT_EXPECT_EQ(polygon_c.AsEWKB(), "0103000020231C0000010000000500000000000000000000000000000000000000000"
        "00000000000000000000000001C400000000000001040000000000000004000000000000000400000000000000000000000000"
        "00000000000000000000000");
        UT_EXPECT_EQ(polygon_c.AsEWKT(), "SRID=7203;POLYGON((0 0,0 7,4 2,2 0,0 0))");
        UT_EXPECT_ANY_THROW(Spatial<Cartesian>(SRID::WSG84, SpatialType::POLYGON, 1, "POLYGON(122)"));
        UT_EXPECT_ANY_THROW(Spatial<Cartesian>(SRID::CARTESIAN, SpatialType::POLYGON, 1, "POL((0 0,0 7,4 2,2 0,0 0))"));
    }
    
}