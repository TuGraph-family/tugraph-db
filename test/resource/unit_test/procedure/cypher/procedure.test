-- loadProcedure scan_graph ../../test/test_procedures/scan_graph.cpp read_only=true
-- loadProcedure standard ../../test/test_procedures/standard_result.cpp read_only=true
-- loadProcedure custom_shortestpath ../../test/test_procedures/v2_path_process.cpp read_only=true
-- loadProcedure custom_pagerank ../../test/test_procedures/v2_pagerank.cpp read_only=true
-- loadProcedure peek_some_node_salt ../../test/test_procedures/peek_some_node_salt.cpp read_only=true
-- loadProcedure custom_path_process ../../test/test_procedures/v2_path_process.cpp read_only=true
-- loadProcedure custom_algo ../../test/test_procedures/v2_algo.cpp read_only=true
CALL db.createVertexLabel('Director', 'name', 'name', 'STRING', false, 'age', 'INT16', true);
CALL db.createVertexLabel('P2', 'flag1', 'flag1', 'BOOL', false, 'flag2', 'Bool', true);
CALL db.createEdgeLabel('LIKE', '[]');
CALL db.addIndex('Person', 'birthyear', false);
CAll db.subgraph([1,2,3]);
CALL db.vertexLabels;
CALL db.edgeLabels;
CALL db.indexes;
CALL dbms.procedures;
CALL dbms.procedures YIELD signature;
CALL dbms.procedures YIELD signature, name;
CALL dbms.graph.createGraph('demo1');
CALL dbms.graph.listGraphs();
CALL dbms.graph.deleteGraph('demo1');
CALL dbms.graph.listGraphs();
CALL dbms.security.showCurrentUser();
CALL dbms.security.changePassword('73@TuGraph','000');
CALL dbms.security.changePassword('000','73@TuGraph');
CALL dbms.security.createUser('guest1','123');
CALL dbms.security.listUsers();
CALL dbms.security.changeUserPassword('guest1','abc');
CALL dbms.security.listUsers();
CALL dbms.security.deleteUser('guest1');
CALL dbms.security.listUsers();
CALL dbms.graph.createGraph('demo2');
CALL dbms.security.createUser('guest2','123');
#CALL dbms.system.info();
CALL dbms.config.list();
CALL dbms.security.listAllowedHosts();
CALL dbms.security.addAllowedHosts('192.168.1.2', '192.168.1.3');
CALL dbms.security.deleteAllowedHosts('192.168.1.2');
CALL dbms.security.createUser('guest1','123');
CALL dbms.security.getUserInfo('guest1');
CALL dbms.security.listRoles();
CALL dbms.security.createRole('test_role', 'test desc');
CALL dbms.security.getRoleInfo('test_role');
CALL dbms.security.modRoleDesc('test_role', 'modify test desc');
CALL dbms.security.disableRole('test_role', true);
CALL dbms.security.getRoleInfo('test_role');
CALL dbms.security.disableRole('test_role', false);
CALL dbms.graph.createGraph('tgraph1', 'test graph tgraph1', 1);
CALL dbms.graph.createGraph('tgraph2', 'test graph tgraph2', 2);
CALL dbms.graph.createGraph('tgraph3', 'test graph tgraph3', 3);
CALL dbms.security.rebuildRoleAccessLevel('test_role', {tgraph1: 'READ', tgraph2: 'WRITE', tgraph3: 'FULL'});
CALL dbms.security.getRoleInfo('test_role');
CALL dbms.security.modRoleAccessLevel('test_role', {tgraph1: 'NONE', tgraph2: 'NONE', tgraph3: 'WRITE'});
CALL dbms.security.getRoleInfo('test_role');
CALL dbms.security.disableUser('guest1', true);
CALL dbms.security.setUserDesc('guest1', 'modify guest1 desc');
CALL dbms.security.setCurrentDesc('modify root desc');
CALL dbms.security.listUsers();
CALL dbms.security.createRole('test_role1', 'test desc');
CALL dbms.security.createRole('test_role2', 'test desc');
CALL dbms.security.createRole('test_role3', 'test desc');
CALL dbms.security.listRoles();
CALL dbms.security.rebuildUserRoles('guest1', ['test_role1', 'test_role2', 'test_role3']);
CALL dbms.security.listUsers();
CALL dbms.security.deleteUserRoles('guest1', ['test_role2', 'test_role3']);
CALL dbms.security.listUsers();
CALL dbms.security.addUserRoles('guest1', ['test_role2', 'test_role3']);
CALL dbms.security.listUsers();
CALL dbms.security.deleteRole('test_role');
CALL dbms.security.deleteUser('guest1');
CALL db.plugin.listPlugin('CPP', 'any');
CALL db.listLabelIndexes('Person', 'vertex');
CALL dbms.security.getUserPermissions('admin');
CALL dbms.graph.getGraphInfo('default');
CALL dbms.task.listTasks();
CALL plugin.cpp.scan_graph({scan_edges:true,times:2});
CALL plugin.cpp.standard({});
CALL dbms.procedures() YIELD name RETURN name,1;
MATCH (n1 {name:'Michael Redgrave'}),(n2 {name:'Rachel Kempson'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost /* 2,1.0 */;
MATCH (n1 {name:'Michael Redgrave'}),(n2 {name:'Rachel Kempson'}) CALL algo.shortestPath(n1,n2) YIELD path RETURN path /* [V[vid0],E[vid0_vid1_type_eid],V[vid1]] */;
MATCH (n1 {name:'Michael Redgrave'}),(n2 {name:'Houston'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost /* 6,5.0 */;
MATCH (n1 {name:'Michael Redgrave'}),(n2:City) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN n2.name,nodeCount,totalCost /* 3 results */;
MATCH (n1 {name:'Michael Redgrave'}),(n2:City) CALL algo.shortestPath(n1,n2,{maxHops:3}) YIELD nodeCount RETURN n2.name,nodeCount /* 2 results */;
MATCH (n1 {name:'Michael Redgrave'}),(n2 {name:'Rachel Kempson'}) CALL algo.shortestPath(n1,n2,{relationshipQuery:[{label:'HAS_CHILD'}]}) YIELD nodeCount,totalCost RETURN nodeCount,totalCost /* 3,2.0 */;
MATCH (n1 {name:'Corin Redgrave'}),(n2 {name:'London'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,cost RETURN nodeIds,cost /* 2 */;
MATCH (n1 {name:'Corin Redgrave'}),(n2 {name:'Liam Neeson'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,cost RETURN nodeIds,cost /* 4 */;
MATCH (n1 {name:'Corin Redgrave'}),(n2 {name:'Liam Neeson'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,relationshipIds,cost RETURN nodeIds,relationshipIds,cost /* 4 */;
CALL algo.pagerank(10) YIELD node, pr RETURN node, pr ORDER by pr desc LIMIT 1 /* V[9], 0.0187 */;
CALL algo.pagerank(10) YIELD node, pr RETURN node.name, pr LIMIT 1 /* Rachel Kempson0.010590751202103139 */;
CALL algo.pagerank(10) YIELD node, pr with node MATCH(node)-[r]->(n)return node, r, n LIMIT 1/* V[0] E[0_2_0_0] E[0_2_0_0] V[2] */;
CALL dbms.procedures() YIELD name, signature WHERE name='db.subgraph' RETURN signature;
CALL dbms.meta.count();
CALL dbms.meta.countDetail();
CALL dbms.meta.refreshCount();
MATCH (a:Person {name: "Christopher Nolan"}), (b:Person {name: "Corin Redgrave"}) CALL plugin.cpp.custom_shortestpath(a, b) YIELD length, nodeIds RETURN length, nodeIds AS path;
CALL plugin.cpp.custom_pagerank(10) YIELD node, weight WITH node, weight MATCH(node)-[r]->(n) RETURN node, r, n, weight;
MATCH (a:Person {name: "Christopher Nolan"}), (b:Person {name: "Corin Redgrave"}) CALL plugin.cpp.custom_shortestpath(a, b) YIELD length, nodeIds WITH length, nodeIds UNWIND nodeIds AS id RETURN id, length;
CALL plugin.cpp.peek_some_node_salt(10) YIELD node, salt WITH node, salt MATCH(node)-[r]->(n) RETURN node, r, n, salt;
MATCH p = (n {name:"Rachel Kempson"})-[*0..3]->() CALL plugin.cpp.custom_path_process(nodes(p)) YIELD idSum RETURN idSum;
CALL plugin.cpp.custom_algo() YIELD res RETURN res;
CALL plugin.cpp.custom_algo();
CALL dbms.procedures() YIELD namea, signature;
CALL db.getLabelSchema('vertex', 'Person') YIELD type;