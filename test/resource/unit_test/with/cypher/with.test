match (n {name:'Liam Neeson'}) with n as n1 match (n {name:'John Williams'}) return n,n1;
match (n {name:'Liam Neeson'}) with n as n1 match (n {name:'Dennis Quaid'}) with n as n2, n1 match (n {name:'John Williams'}) return n,n2,n1;
match (n {name:'Liam Neeson'}) with n as n1 match (n {name:'Dennis Quaid'}) with n as n2, n1.name as n1name match (n {name:'John Williams'}) return n,n2,n1name;
match (n {name:'Liam Neeson'}) with n return n;
match (n {name:'Liam Neeson'}) with n match (n)-->(m) return n,m;
match (n {name:'London'}) with n optional match (n)-->(m) return n,m;
match (a {name:'Liam Neeson'})-[r]->(b) with b match (b)-[]->(c) return c;
match (a {name:'Liam Neeson'}),(b {name:'London'}) with a, b match (c:Film) return a,b,c;
match (n {name:'Liam Neeson'}) with n match (n) return n.name;
match (a {name:'Liam Neeson'}), (b {name:'London'}) with a, b match (a), (b) return a.name, b.name;
MATCH (a {name:'Liam Neeson'})-[r]->(b) RETURN a,count(b) AS out_num;
MATCH (a {name:'Liam Neeson'})-[r]->(b) WITH a,count(b) AS out_num MATCH (a)<-[]-(c) RETURN count(c) AS in_num,out_num;
match (a {name:'Liam Neeson'})-[r]->(b) with a,b match (b)-[]->(c) return a,b,c;
match (n {name:'Liam Neeson'}),(m {name:'Natasha Richardson'}),(n)-[r]->(m) return r,type(r);
match (n {name:'Liam Neeson'}),(m {name:'Natasha Richardson'}) with n,m match (n)-[r]->(m) return r,type(r);
match (n {name:'Liam Neeson'}),(m {name:'Liam Neeson'}) with n,m optional match (n)-[r]->(m) return r,type(r);
match (n {name:'Liam Neeson'})-[r]->(m) with r return r,type(r);
match (n:City) with count (n) as num_city match (n:Film) return count(n) as num_film, num_city;
match (n:Person {name:'Vanessa Redgrave'})-->(m) with m as m1 match (n:Person {name:'Vanessa Redgrave'})<--(m) return m as m2, m1;
match (n:Person {name:'Vanessa Redgrave'})-->(m) with count(m) as c1 match (n:Person {name:'Vanessa Redgrave'})<--(m) return count(m) as c2, c1;
match (n:Person {name:'Vanessa Redgrave'})-->(m) with count(m) as cm1 match (n:Person {name:'Vanessa Redgrave'})<--(m) with count(m) as cm2, cm1 match (n:Person {name:'Natasha Richardson'})-->(m) return count(m) as cm3, cm2, cm1;
match (n:Person {name:'Michael Redgrave'})-->(m:Person) where m.birthyear > 1938 with count(m) as p38 match (n:Person {name:'Michael Redgrave'})-->(m:Person) where m.birthyear > 1908 return count(m) as p08,p38 /* 3,1 */;
WITH 2020 AS x WHERE x > 2020 RETURN x;
MATCH (n:City) WITH 2020 AS x, n.name AS y ORDER BY y WHERE x = 2020 RETURN x,y;
MATCH (n) WITH n WHERE n.name = 'Liam Neeson' MATCH (m {name:'John Williams'}) RETURN n,m;
MATCH (n:Person {name:'Michael Redgrave'})-->(m:Person) WHERE m.birthyear > 1908 WITH count(m) AS p08 RETURN p08 /* 3 */;
MATCH (n:Person {name:'Michael Redgrave'})--(m) WITH m, count(*) AS edge_num WHERE edge_num > 1.0 RETURN m.name,edge_num;
MATCH (n:Person {name:'Michael Redgrave'})--(m) WITH n, m, count(*) AS edge_num WHERE edge_num > 1.0 OR n.birthyear > 1900 RETURN m.name,edge_num;
MATCH (n:Person {name:'Michael Redgrave'})--(m) WITH m, count(*) AS edge_num WHERE edge_num > 1.0 AND m.birthyear > 1900 RETURN m.name,edge_num;
MATCH (n:Person {name:'Michael Redgrave'})--(nbr)-->() WITH nbr, count(*) AS foaf WHERE foaf > 1.0 RETURN nbr.name,foaf;
MATCH (n:Person {name:'Michael Redgrave'}) WHERE n.birthyear > 1900 AND n.birthyear < 2000 RETURN n.name;
MATCH (n:Person {name:'Michael Redgrave'})--(m) WITH m, count(*) AS edge_num WHERE toInteger(edge_num) > 1 RETURN m.name,edge_num;
MATCH (n:Person {name:'Michael Redgrave'})--(nbr)-->() WITH nbr, count(*) AS foaf WHERE toInteger(foaf) > 1 RETURN nbr.name,foaf;
MATCH (a:City) WITH a MATCH (b:Person {name:'Liam Neeson'}) RETURN a,b;
WITH 'Vanessa Redgrave' AS varName MATCH (n:Film) RETURN n,varName;
WITH 'Vanessa Redgrave' AS varName MATCH (n {name:varName}) RETURN n;
MATCH (n {birthyear:1952}) WITH n,n.name AS varName MATCH (m {name:varName}) RETURN n,m;
WITH 1 AS a MATCH (n:City) RETURN DISTINCT a,n;
MATCH (n {name:'Rachel Kempson'})-[]->(m:Person) WITH m MATCH (m)-[:ACTED_IN]->(film) RETURN m.name,film;
MATCH (n {name:'Rachel Kempson'})-[]->(m:Person) WITH m OPTIONAL MATCH (m)-[:ACTED_IN]->(film) RETURN m.name,film;
MATCH (n {name:'Rachel Kempson'})-[]->(m:Person) WITH m OPTIONAL MATCH (m)-[:ACTED_IN]->(film)<-[:ACTED_IN]-(coactor) RETURN m.name,film,coactor;
MATCH (n {name:'Rachel Kempson'})-[]->(m:Person) WITH m OPTIONAL MATCH (m)-[:ACTED_IN]->(film) WITH m,film RETURN m.name,film;
MATCH (n {name:'Rachel Kempson'})-[]->(m:Person) WITH m OPTIONAL MATCH (m)-[:ACTED_IN]->(film) WITH m,film OPTIONAL MATCH (film)<-[:WROTE_MUSIC_FOR]-(musician) RETURN m.name,film,musician;
match (n:Person) where n.name='Michael Redgrave' with n.birthyear as nb match (p)-[:HAS_CHILD]->(c) where p.birthyear=nb return c.name;
match (n:Person) where n.name='Roy Redgrave' or n.name='Michael Redgrave' with collect(id(n)) as cn match (p:Person) where id(p) in cn return p.name;
match (n:Person) where n.name='Roy Redgrave' or n.name='Michael Redgrave' with n, collect(id(n)) as cn match (p:Person) where id(p) in cn return p.name;
match (c:Person)-[:HAS_CHILD]->(f:Person) where c.name='Roy Redgrave' with c, f match (m:Person)-[:ACTED_IN]->(film:Film)<-[:WROTE_MUSIC_FOR]-(p:Person) where m.name=f.name return c.name, p.name;