CALL db.createVertexLabel('Person', 'name', 'name', 'STRING', false, 'age', 'INT16', true, 'eyes', 'STRING', true);
CALL db.createEdgeLabel('KNOWS', '[]');
 CREATE (a:Person {name:'A', age:13}) CREATE (b:Person {name:'B', age:33, eyes:'blue'}) CREATE (c:Person {name:'C', age:44, eyes:'blue'}) CREATE (d:Person {name:'D', eyes:'brown'}) CREATE (e:Person {name:'E'}) CREATE (a)-[:KNOWS]->(b), (a)-[:KNOWS]->(c), (a)-[:KNOWS]->(d), (b)-[:KNOWS]->(e), (c)-[:KNOWS]->(e) ;
MATCH (n:Person) RETURN avg(n.age) /* 30.0 */;
MATCH (n { name: 'A' })-->(x) RETURN count(x) /* 3 */;
MATCH (n:Person) RETURN count(n.age) /* 3 */;
MATCH (n:Person) RETURN max(n.age) /* 44 */;
MATCH (n:Person) RETURN min(n.age) /* 13 */;
MATCH (n:Person) RETURN percentileCont(n.age, 0.4) /* 29 */;
MATCH (n:Person) RETURN percentileDisc(n.age, 0.5) /* 33 */;
MATCH (n:Person) RETURN stDev(n.age) /* 15.716234 */;
MATCH (n:Person) RETURN stDevP(n.age) /* 12.832251 */;
MATCH (n:Person) RETURN variance(n.age);
MATCH (n:Person) RETURN varianceP(n.age);
MATCH (n:Person) RETURN collect(n.age) /* 13,33,44 */;
MATCH (n:Person) RETURN collect([n.name,n.age]) /* [[A, 13], [B, 33], [C, 44], [D, null], [E, null]] */;
MATCH (n {name: 'A'})-[]->(x) RETURN label(n), n.age, count(*) /* Person,13,3.000000 */;
MATCH (n {name: 'A'})-[]->(x) RETURN label(n), n, count(*) /* Person,V[0],3.000000 */;
MATCH (n {name: 'A'})-[r]->() RETURN type(r), count(*) /* KNOWS,3.00000 */;
MATCH (n:Person) WHERE n.age = 13 OR n.age > 40 RETURN count(n) AS nCount;