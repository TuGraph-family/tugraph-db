CALL db.createVertexLabel('Loc', 'name', 'name', 'STRING', false);
[]
CALL db.createEdgeLabel('ROAD', '[]', 'cost', 'FLOAT', false);
[]
 CREATE (a:Loc {name:'A'}) CREATE (b:Loc {name:'B'}) CREATE (c:Loc {name:'C'}) CREATE (d:Loc {name:'D'}) CREATE (e:Loc {name:'E'}) CREATE (f:Loc {name:'F'}) CREATE (g:Loc {name:'G'})  CREATE (a)-[:ROAD {cost:50}]->(b) CREATE (a)-[:ROAD {cost:50}]->(c) CREATE (a)-[:ROAD {cost:100}]->(d) CREATE (b)-[:ROAD {cost:40}]->(d) CREATE (c)-[:ROAD {cost:40}]->(d) CREATE (c)-[:ROAD {cost:80}]->(e) CREATE (d)-[:ROAD {cost:30}]->(e) CREATE (d)-[:ROAD {cost:80}]->(f) CREATE (e)-[:ROAD {cost:40}]->(f);
[{"<SUMMARY>":"created 7 vertices, created 9 edges."}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'F'}) CALL algo.shortestPath(n1, n2) YIELD nodeCount RETURN nodeCount;
[{"nodeCount":3}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'G'}) CALL algo.shortestPath(n1, n2) YIELD nodeCount RETURN nodeCount;
[{"nodeCount":0}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'E'}) CALL algo.allShortestPaths(n1, n2) YIELD nodeIds,relationshipIds,cost RETURN nodeIds,relationshipIds,cost;
[{"cost":2.0,"nodeIds":[0,2,4],"relationshipIds":"[0_2_0_0_0,2_4_0_0_0]"},{"cost":2.0,"nodeIds":[0,3,4],"relationshipIds":"[0_3_0_0_0,3_4_0_0_0]"}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'E'}) CALL algo.allShortestPaths(n1, n2) YIELD nodeIds,relationshipIds,cost WITH nodeIds,relationshipIds,cost UNWIND relationshipIds AS rid CALL algo.native.extract(rid, {isNode:false, field:'cost'}) YIELD value RETURN value;
[{"value":50.0},{"value":80.0},{"value":100.0},{"value":30.0}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'E'}) CALL algo.allShortestPaths(n1, n2, {relationshipQuery:[{label:'ROAD'}]}) YIELD nodeIds,relationshipIds WITH nodeIds,relationshipIds UNWIND relationshipIds AS rid CALL algo.native.extract(rid, {isNode:false, field:'cost'}) YIELD value RETURN nodeIds, sum(value) AS score;
[{"nodeIds":[0,3,4],"score":130.0},{"nodeIds":[0,2,4],"score":130.0}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'E'}) CALL algo.allShortestPaths(n1, n2, {relationshipQuery:[{label:'ROAD'}]}) YIELD nodeIds,relationshipIds,cost WITH nodeIds,relationshipIds,cost UNWIND relationshipIds AS rid CALL algo.native.extract(rid, {isNode:false, field:'cost'}) YIELD value WITH nodeIds, sum(value) AS score CALL algo.native.extract(nodeIds, {isNode:true, field:'name'}) YIELD value RETURN value, score;
[{"score":130.0,"value":"[A,D,E]"},{"score":130.0,"value":"[A,C,E]"}]
MATCH (n1:Loc {name:'A'}), (n2:Loc {name:'E'}) CALL algo.allShortestPaths(n1, n2, {relationshipQuery:'ROAD'}) YIELD nodeIds,relationshipIds,cost WITH nodeIds,relationshipIds,cost UNWIND relationshipIds AS rid CALL algo.native.extract(rid, {isNode:false, field:'cost'}) YIELD value WITH nodeIds, sum(value) AS score CALL algo.native.extract(nodeIds, {isNode:true, field:'name'}) YIELD value RETURN value, score;
[{"score":130.0,"value":"[A,D,E]"},{"score":130.0,"value":"[A,C,E]"}]
