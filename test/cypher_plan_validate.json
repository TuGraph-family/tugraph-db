{
  "title": "cypher plan validate",
  "description": "validate file used to check cypher plan opt",
  "testCases": [
    {
      "dataset": "yago",
      "querys": {
        "vid": [
          {
            "query": "MATCH (n) WHERE id(n)=10 RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node By Id Seek[10,]\n",
            "res": 1
          },
          {
            "query": "MATCH (n) WHERE id(n) IN [1,2,4] RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node By Id Seek[1,2,4,]\n",
            "res": 3
          },
          {
            "query": "MATCH (n) WHERE id(n)=1 OR id(n)=3 OR id(n)=4 OR id(n)=18 OR id(n)=1111 RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node By Id Seek[1,3,4,18,1111,]\n",
            "res": 4
          },
          {
            "query": "MATCH (n) WHERE id(n)=1 OR id(n)=3 AND id(n)=4 OR id(n)=18 OR id(n)=1111 RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Filter [((((id(n)=1) or ((id(n)=3) and (id(n)=4))) or (id(n)=18)) or (id(n)=1111))]\n            All Node Scan [n]\n",
            "res": 2
          }
        ],
        "uid": [
          {
            "query": "MATCH (n) where n.name=\"Rachel Kempson\" RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node Index Seek [n] name IN [Rachel Kempson,]\n",
            "res": 1
          },
          {
            "query": "MATCH (n) where n.name in [\"Rachel Kempson\",\"Dennis Quaid\",\"none\"] RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node Index Seek [n] name IN [Dennis Quaid,Rachel Kempson,none,]\n",
            "res": 2
          },
          {
            "query": "MATCH (n) where n.name =\"Rachel Kempson\" or n.name= \"Dennis Quaid\" or n.name=\"none\" RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node Index Seek [n] name IN [Dennis Quaid,Rachel Kempson,none,]\n",
            "res": 2
          },
          {
            "query": "MATCH (n) where n.name = \"Rachel Kempson\" and n.name = \"Dennis Quaid\" or n.name = \"Vanessa Redgrave\" RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Filter [(((n.name=\"Rachel Kempson\") and (n.name=\"Dennis Quaid\")) or (n.name=\"Vanessa Redgrave\"))]\n            All Node Scan [n]\n",
            "res": 1
          },
          {
            "query": "MATCH (n) where n.name = \"Rachel Kempson\" or n.name = \"Dennis Quaid\" or n.name = \"Vanessa Redgrave\" RETURN n",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n]\n        Node Index Seek [n] name IN [Dennis Quaid,Rachel Kempson,Vanessa Redgrave,]\n",
            "res": 3
          }
        ],
        "list": [
          {
            "query": "MATCH (n) RETURN id(n),label(n),properties(n);",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [id(n),label(n),properties(n)]\n        All Node Scan [n]\n",
            "res": 21
          }
        ],
        "parallel_traversal": [
          {
            "query": "MATCH (n:Person) return count(n)",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Gql Traversal [n]\n",
            "res": 1
          },
          {
            "query": "MATCH (n:Person) where n.birthyear > 1900 and n.birthyear < 2000 return count(n) ",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Gql Traversal [n]\n",
            "res": 1
          },
          {
            "query": "MATCH (n:Person) return n.birthyear, count(n)",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Gql Traversal [n]\n",
            "res": 13
          },
          {
            "query": "MATCH (f:Film)<-[:ACTED_IN]-(p:Person)-[:BORN_IN]->(c:City) return c.name, count(f)",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Gql Traversal [f<--p-->c]\n",
            "res": 3
          }
        ],
        "issue148": [
          {
            "query": "WITH 'a' as a UNWIND ['a', 'b'] as k RETURN a, k",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [a,k]\n        Apply\n            Unwind [{\"a\", \"b\"},k]\n                Argument [a]\n            Project [a]\n",
            "res": 2
          },
          {
            "query": "WITH 'a' as a UNWIND ['b']+a as k RETURN a, k",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [a,k]\n        Apply\n            Unwind [({\"b\"}+a),k]\n                Argument [a]\n            Project [a]\n",
            "res": 2
          }
        ],
        "where_rewrite": [
          {
            "query": "match(p:Person),(c:City) where p.name = 'Christopher Nolan' and c.name = 'Houston' return p,c",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [p,c]\n        Cartesian Product\n            Node Index Seek [p]  IN []\n            Node Index Seek [c]  IN []\n",
            "res": 1
          },
          {
            "query": "match(p1:Person)-[r:HAS_CHILD]->(p2:Person) where p1.name = 'Vanessa Redgrave' and p2.name = 'Natasha Richardson' return r",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [r]\n        Filter [(p2.name=\"Natasha Richardson\")]\n            Expand(All) [p1 --> p2 ]\n                Node Index Seek [p1]  IN []\n",
            "res": 1
          },
          {
            "query": "match(p1:Person)-[r:HAS_CHILD]->(p2:Person) where p1.name = 'Vanessa Redgrave' and p2.name = 'Natasha Richardson' return r union match(p1:Person)-[r:HAS_CHILD]->(p2:Person) where p1.name = 'Michael Redgrave' and p2.name = 'Vanessa Redgrave' return r",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Union\n        Project [r]\n            Filter [(p2.name=\"Natasha Richardson\")]\n                Expand(All) [p1 --> p2 ]\n                    Node Index Seek [p1]  IN []\n        Project [r]\n            Filter [(p2.name=\"Vanessa Redgrave\")]\n                Expand(All) [p1 --> p2 ]\n                    Node Index Seek [p1]  IN []\n",
            "res": 2
          },
          {
            "query": "match(c:City)<-[r:BORN_IN]-(p:Person) where c.name = 'London' and p.name <> 'Christopher Nolan' return r",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [r]\n        Filter [(p.name!=\"Christopher Nolan\")]\n            Expand(All) [c <-- p ]\n                Node Index Seek [c]  IN []\n",
            "res": 2
          },
          {
            "query": "match(n:Person) where n.birthyear > 1900 return n limit 5",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Limit [5]\n        Project [n]\n            Filter [(n.birthyear>1900)]\n                Node By Label Scan [n:Person] n.birthyear[1900,NUL)\n",
            "res": 5
          },
          {
            "query": "match(n:Person) where n.birthyear < 2000 return n limit 5",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Limit [5]\n        Project [n]\n            Filter [(n.birthyear<2000)]\n                Node By Label Scan [n:Person] n.birthyear[NUL,2000)\n",
            "res": 5
          },
          {
            "query": "match(n:Person) where n.birthyear > 1900 and n.birthyear < 2000 return n limit 5",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Limit [5]\n        Project [n]\n            Filter [((n.birthyear>1900) and (n.birthyear<2000))]\n                Node By Label Scan [n:Person] n.birthyear[1900,2000)\n",
            "res": 5
          },
          {
            "query": "match(n:Person) where n.birthyear > 1900 or n.birthyear > 2000 return n limit 5",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Limit [5]\n        Project [n]\n            Filter [((n.birthyear>1900) or (n.birthyear>2000))]\n                Node By Label Scan [n:Person] n.birthyear[1900,NUL)\n",
            "res": 5
          }
        ],
        "start_vertex": [
          {
            "query": "match(c:City)<-[r:BORN_IN]-(p:Person {name:'Christopher Nolan'}) return r",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [r]\n        Expand(All) [p --> c ]\n            Node Index Seek [p]  IN []\n",
            "res": 1
          },
          {
            "query": "match(c:City)<-[r:BORN_IN]-(p:Person) where p.name = 'Christopher Nolan' return r",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [r]\n        Expand(All) [p --> c ]\n            Node Index Seek [p]  IN []\n",
            "res": 1
          },
          {
            "query": "match (n:Person)-[r:HAS_CHILD]->(m:Person)<-[r1:MARRIED]-(m1:Person) where m.name = 'Michael Redgrave' return n,m1",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n,m1]\n        Expand(All) [m <-- m1 ]\n            Expand(All) [m <-- n ]\n                Node Index Seek [m]  IN []\n",
            "res": 1
          },
          {
            "query": "match (n)-[r:HAS_CHILD]->(m:Person)<-[r1:MARRIED]-(m1) return n,m1",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [n,m1]\n        Expand(All) [m <-- m1 ]\n            Expand(All) [m <-- n ]\n                Node By Label Scan [m:Person]\n",
            "res": 2
          },
          {
            "query": "match p = (n)<-[r]-(m)-[r1]->(m1:City) RETURN p",
            "plan": "ReadOnly:1\nExecution Plan:\nProduce Results\n    Project [p]\n        Expand(All) [m --> n ]\n            Expand(All) [m1 <-- m ]\n                Node By Label Scan [m1:City]\n",
            "res": 9
          }
        ]
      }
    }
  ]
}
