{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TuGraph-DB Documentation This is the documentation for TuGraph-DB.","title":"Home"},{"location":"#tugraph-db-documentation","text":"This is the documentation for TuGraph-DB.","title":"TuGraph-DB Documentation"},{"location":"en-US/1.guide/1.what-is-graph/","text":"What is a graph The graph that we're going to introduce today, it's neither a picture, nor a diagram\uff0cit's a class of mathematics called graph theory. We can see on the screen that there are two graphs on the left and right, which represent things and their relationship. We abstract it out in a form, and we call such a form a graph. The basic elements of a graph are a vertex, and an edge, a vertex is a representation of the thing, of the entity, and an edge is a representation of the relationship between them. We see the graph on the left, the dots have companies, they have employees, and they have projects. What are their sides? The relationship between the company and the employees is an employment relationship, and there can be a friend relationship between the employees, and there can be a participation relationship between the project and the employees. That is, we can use graphs to abstract things and their relationships. The diagram on the right is a schematic diagram of a financial transaction. Each of us has a bank account, and when our bank account makes a consumption or makes a transfer, this account is the point on the graph, and this edge can indicate that there is such a transfer relationship between us. We can also see from this example that edges can attach information and points can attach information. The point can attach which bank this account is in and what the account is. The value of the transaction can be attached to the edge, and many times, if your transaction is large, it indicates that special attention is needed. This edge might not necessarily be the amount of a particular transfer, it might be the amount accumulated over a period of time and so on. Graphs can actually be very expressive. On the other hand, for a graph like finance, it can be very large. There could be more than a billion points, a hundred billion or even a trillion edges. As you can imagine, it's actually quite challenging to actually work with these graphs.","title":"What is Graph"},{"location":"en-US/1.guide/1.what-is-graph/#what-is-a-graph","text":"The graph that we're going to introduce today, it's neither a picture, nor a diagram\uff0cit's a class of mathematics called graph theory. We can see on the screen that there are two graphs on the left and right, which represent things and their relationship. We abstract it out in a form, and we call such a form a graph. The basic elements of a graph are a vertex, and an edge, a vertex is a representation of the thing, of the entity, and an edge is a representation of the relationship between them. We see the graph on the left, the dots have companies, they have employees, and they have projects. What are their sides? The relationship between the company and the employees is an employment relationship, and there can be a friend relationship between the employees, and there can be a participation relationship between the project and the employees. That is, we can use graphs to abstract things and their relationships. The diagram on the right is a schematic diagram of a financial transaction. Each of us has a bank account, and when our bank account makes a consumption or makes a transfer, this account is the point on the graph, and this edge can indicate that there is such a transfer relationship between us. We can also see from this example that edges can attach information and points can attach information. The point can attach which bank this account is in and what the account is. The value of the transaction can be attached to the edge, and many times, if your transaction is large, it indicates that special attention is needed. This edge might not necessarily be the amount of a particular transfer, it might be the amount accumulated over a period of time and so on. Graphs can actually be very expressive. On the other hand, for a graph like finance, it can be very large. There could be more than a billion points, a hundred billion or even a trillion edges. As you can imagine, it's actually quite challenging to actually work with these graphs.","title":"What is a graph"},{"location":"en-US/1.guide/2.what-is-GDBMS/","text":"What is a graph database This document mainly introduce what is a graph database, the advantages of graph database compared with relational database, and the comparison between graph database and relational database 1. Introduction to Graph Database Graph database is a database based on graph model. The main function of graph database is to manage graph data, so it needs to support efficient vertex/edge query and update; To facilitate user use, it is usually necessary to add transaction support to ensure the normal operation of concurrent operations. 2. Advantages of graph databases over relational databases The function of graph database is an extension of traditional relational database. Compared with relational database, the graph structure supported by graph data is more flexible. Graph database is different from other databases in terms of data addition, deletion, query and modification based on graph. On the operation abstraction of graph data, a vertex-based perspective is adopted, for example, a vertex accesses its neighboring vertices through all its outgoing edges. This kind of operation is also the core of the design of graph database system. The uniqueness of graph database can be reflected in the following three aspects: 2.1 Performance Handling the relationship between data, it is inevitable to use table JOIN operation in relational database, which has a great impact on performance. Graph database is a direct access, similar to pointer access, which is more efficient operation of associated data, compared with relational database performance improvement of 2 to 4 orders of magnitude. 2.2 Compatibility In reality, the process of a project is often evolutionary. The content and even the format of the data are constantly changing. In a relational database, this means that a change in the table structure, or the creation of multiple new tables, significantly changes the source data. In the graph database, you simply add new vertices, edges, and attributes, and set them to the corresponding types. In essence, a table represents a type of data, and a vertex represents a specific data, meaning that relational databases pay more attention to the type of data, while graph databases pay more attention to the individuals of data and identify their association relationships. 2.3 Intuitive Using graphs (or nets) to express real-world relationships is more straightforward and natural, especially in the Internet of Things era. If relational data used, a high degree of abstract thinking required to build a table of characters first, then a table of relations, and finally a map of data. When analyzing and querying the graph data, you can also intuitively find the desired data interactively through the point-edge connection topology, without any professional knowledge. 3. Comparison between graph database and relational database classification model advantage disadvantage example Relational database Table structure Data is highly structured, consistent, and software maturity is high The multi-hop association query is inefficient or not supported MySQL\u3001Oracle Graph database graph structure Modeling and manipulating associations is very efficient Highly structured data processing is not as powerful as relational databases Neo4j\u3001TuGraph In a word, in the face of massive data storage and processing problems, the traditional relational database has been unable to meet most of the daily data storage needs. Graph database technology can store relational information as entities and expand data model flexibly. Because it provides the most direct expression of related data, and the graph model is naturally tolerant to heterogeneous data. In the future, graph database technology will become one of the most popular technologies, which will provide powerful support for enterprises to store and analyze large-scale graph data.","title":"What is GDBMS"},{"location":"en-US/1.guide/2.what-is-GDBMS/#what-is-a-graph-database","text":"This document mainly introduce what is a graph database, the advantages of graph database compared with relational database, and the comparison between graph database and relational database","title":"What is a graph database"},{"location":"en-US/1.guide/2.what-is-GDBMS/#1-introduction-to-graph-database","text":"Graph database is a database based on graph model. The main function of graph database is to manage graph data, so it needs to support efficient vertex/edge query and update; To facilitate user use, it is usually necessary to add transaction support to ensure the normal operation of concurrent operations.","title":"1. Introduction to Graph Database"},{"location":"en-US/1.guide/2.what-is-GDBMS/#2-advantages-of-graph-databases-over-relational-databases","text":"The function of graph database is an extension of traditional relational database. Compared with relational database, the graph structure supported by graph data is more flexible. Graph database is different from other databases in terms of data addition, deletion, query and modification based on graph. On the operation abstraction of graph data, a vertex-based perspective is adopted, for example, a vertex accesses its neighboring vertices through all its outgoing edges. This kind of operation is also the core of the design of graph database system. The uniqueness of graph database can be reflected in the following three aspects:","title":"2. Advantages of graph databases over relational databases"},{"location":"en-US/1.guide/2.what-is-GDBMS/#21-performance","text":"Handling the relationship between data, it is inevitable to use table JOIN operation in relational database, which has a great impact on performance. Graph database is a direct access, similar to pointer access, which is more efficient operation of associated data, compared with relational database performance improvement of 2 to 4 orders of magnitude.","title":"2.1 Performance"},{"location":"en-US/1.guide/2.what-is-GDBMS/#22-compatibility","text":"In reality, the process of a project is often evolutionary. The content and even the format of the data are constantly changing. In a relational database, this means that a change in the table structure, or the creation of multiple new tables, significantly changes the source data. In the graph database, you simply add new vertices, edges, and attributes, and set them to the corresponding types. In essence, a table represents a type of data, and a vertex represents a specific data, meaning that relational databases pay more attention to the type of data, while graph databases pay more attention to the individuals of data and identify their association relationships.","title":"2.2 Compatibility"},{"location":"en-US/1.guide/2.what-is-GDBMS/#23-intuitive","text":"Using graphs (or nets) to express real-world relationships is more straightforward and natural, especially in the Internet of Things era. If relational data used, a high degree of abstract thinking required to build a table of characters first, then a table of relations, and finally a map of data. When analyzing and querying the graph data, you can also intuitively find the desired data interactively through the point-edge connection topology, without any professional knowledge.","title":"2.3 Intuitive"},{"location":"en-US/1.guide/2.what-is-GDBMS/#3-comparison-between-graph-database-and-relational-database","text":"classification model advantage disadvantage example Relational database Table structure Data is highly structured, consistent, and software maturity is high The multi-hop association query is inefficient or not supported MySQL\u3001Oracle Graph database graph structure Modeling and manipulating associations is very efficient Highly structured data processing is not as powerful as relational databases Neo4j\u3001TuGraph In a word, in the face of massive data storage and processing problems, the traditional relational database has been unable to meet most of the daily data storage needs. Graph database technology can store relational information as entities and expand data model flexibly. Because it provides the most direct expression of related data, and the graph model is naturally tolerant to heterogeneous data. In the future, graph database technology will become one of the most popular technologies, which will provide powerful support for enterprises to store and analyze large-scale graph data.","title":"3. Comparison between graph database and relational database"},{"location":"en-US/1.guide/3.quick-start/","text":"TuGraph Quick Start This document is intended for new users to get started quickly and contains an introduction, features, installation, and use of TuGraph. 1. Introduction TuGraph is a large-scale graph computing system independently developed by Ant Group, providing graph database engine and graph analysis engine. Its main features are large data storage and computation, high throughput, and flexible API, while supporting efficient online transaction processing (OLTP) and online analytical processing (OLAP). LightGraph and GeaGraph are former names of TuGraph. The main functional features include: Labeled property Graph Model Support multiple Graphs Full ACID transaction processing Built-in 25+ graph analysis algorithm Graph visualization tool based on Web client RESTful API and RPC are supported OpenCypher graph query language Stored procedure based on C++/Python/Java The Traversal API for efficient graph algorithm development Performance and scalability features include: TB large capacity High throughput of ten million vertices per second High Availability Support (Enterprise Edition) High-performance Batch Import Online/offline backup 2. The installation TuGraph can be installed quickly via Docker Image or locally via RPM /deb packages. rpm/deb/docker images download address: https://www.tugraph.org/download Fast experience through Docker The Docker environment installed locally The docker official documentation\uff1ahttps://docs.docker.com/get-started/ Pull the docker images shell docker pull tugraph/tugraph-runtime-centos7 Start docker shell docker run -d -p 7070:7070 -p 9090:9090 --name tugraph_demo tugraph/tugraph-runtime-centos7 lgraph_server # 7070 is default http port\uff0cfor web visiting\u3002 # 9090 is default RPC port\uff0cfor RPC client visiting\u3002 Open by browser http://x.x.x.x:7070 Default account admin ,Default password 73@TuGraph Start shell docker run -dt -p 7070:7070 --name tugraph_demo tugraph/tugraph-runtime-centos7 docker exec -it tugraph_demo bash # start the service lgraph_server -d start Web operations Create schema and import data After login, click \"Help\", click \"Quick Start\", click \"new schema\", and click \"import data\" to complete the creation of Movie Graph. Movie Graph\uff1a Label Type Description movie node Represents a specific movie person node An individual, in the case of a film, may be an actor, director, or screenwriter. genre node The genre of the film, e.g. drama, horror\u3002 keyword node It means some keywords related to the movie, such as \"Save the world\", \"virtual reality\", \"subway\". user node Represents the audience of the movie. produce node Represents the producer of the film. acted_in relationship Which films the actor appeared in. direct relationship Who is the director of the film. write relationship Represents the screenwriter relationship of the film. has_genre relationship Represents the type of a movie\u3002 has_keyword relationship Tags that represent some keywords of the movie, that is, more granular categories. rate relationship Represents the user's rating of the movie. Query demo demo 1 Query all the actors in the movie 'Forrest Gump' and return a subgraph of the movie and the actors. MATCH (m:movie {title: 'Forrest Gump'})<-[:acted_in]-(a:person) RETURN a, m demo 2 Query all actors in the movie 'Forrest Gump' and list the roles the actors played in the movie. MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name,r.role demo 3 Query all Michael's movies rated below 3. MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars demo 4 Search for users who have the same hated movies as Michael, with the dislike criteria being less than three points. MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v) WHERE r.stars < 3 AND s.stars < 3 RETURN u, m, v demo5 To recommend movies to Michael, the method is to find out the users who hate the same movies as Michael, and then screen out the movies that these users like. MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2 demo 6 Find out what Michael's friends like. MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m demo 7 Recommend similar movies to users who like 'Forrest Gump' by finding out which movies people who rate 'Forrest Gump' high also like. MATCH (m:movie {title:'Forrest Gump'})<-[r:rate]-(u:user)-[r2:rate]->(m2:movie) WHERE r.stars>3 AND r2.stars>3 RETURN m, u,m2","title":"Quick Start"},{"location":"en-US/1.guide/3.quick-start/#tugraph-quick-start","text":"This document is intended for new users to get started quickly and contains an introduction, features, installation, and use of TuGraph.","title":"TuGraph Quick Start"},{"location":"en-US/1.guide/3.quick-start/#1-introduction","text":"TuGraph is a large-scale graph computing system independently developed by Ant Group, providing graph database engine and graph analysis engine. Its main features are large data storage and computation, high throughput, and flexible API, while supporting efficient online transaction processing (OLTP) and online analytical processing (OLAP). LightGraph and GeaGraph are former names of TuGraph. The main functional features include: Labeled property Graph Model Support multiple Graphs Full ACID transaction processing Built-in 25+ graph analysis algorithm Graph visualization tool based on Web client RESTful API and RPC are supported OpenCypher graph query language Stored procedure based on C++/Python/Java The Traversal API for efficient graph algorithm development Performance and scalability features include: TB large capacity High throughput of ten million vertices per second High Availability Support (Enterprise Edition) High-performance Batch Import Online/offline backup","title":"1. Introduction"},{"location":"en-US/1.guide/3.quick-start/#2-the-installation","text":"TuGraph can be installed quickly via Docker Image or locally via RPM /deb packages. rpm/deb/docker images download address: https://www.tugraph.org/download","title":"2. The installation"},{"location":"en-US/1.guide/3.quick-start/#fast-experience-through-docker","text":"The Docker environment installed locally The docker official documentation\uff1ahttps://docs.docker.com/get-started/ Pull the docker images shell docker pull tugraph/tugraph-runtime-centos7 Start docker shell docker run -d -p 7070:7070 -p 9090:9090 --name tugraph_demo tugraph/tugraph-runtime-centos7 lgraph_server # 7070 is default http port\uff0cfor web visiting\u3002 # 9090 is default RPC port\uff0cfor RPC client visiting\u3002 Open by browser http://x.x.x.x:7070 Default account admin ,Default password 73@TuGraph Start shell docker run -dt -p 7070:7070 --name tugraph_demo tugraph/tugraph-runtime-centos7 docker exec -it tugraph_demo bash # start the service lgraph_server -d start","title":"Fast experience through Docker"},{"location":"en-US/1.guide/3.quick-start/#web-operations","text":"","title":"Web operations"},{"location":"en-US/1.guide/3.quick-start/#create-schema-and-import-data","text":"After login, click \"Help\", click \"Quick Start\", click \"new schema\", and click \"import data\" to complete the creation of Movie Graph. Movie Graph\uff1a Label Type Description movie node Represents a specific movie person node An individual, in the case of a film, may be an actor, director, or screenwriter. genre node The genre of the film, e.g. drama, horror\u3002 keyword node It means some keywords related to the movie, such as \"Save the world\", \"virtual reality\", \"subway\". user node Represents the audience of the movie. produce node Represents the producer of the film. acted_in relationship Which films the actor appeared in. direct relationship Who is the director of the film. write relationship Represents the screenwriter relationship of the film. has_genre relationship Represents the type of a movie\u3002 has_keyword relationship Tags that represent some keywords of the movie, that is, more granular categories. rate relationship Represents the user's rating of the movie.","title":"Create schema and import data"},{"location":"en-US/1.guide/3.quick-start/#query-demo","text":"","title":"Query demo"},{"location":"en-US/1.guide/3.quick-start/#demo-1","text":"Query all the actors in the movie 'Forrest Gump' and return a subgraph of the movie and the actors. MATCH (m:movie {title: 'Forrest Gump'})<-[:acted_in]-(a:person) RETURN a, m","title":"demo 1"},{"location":"en-US/1.guide/3.quick-start/#demo-2","text":"Query all actors in the movie 'Forrest Gump' and list the roles the actors played in the movie. MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name,r.role","title":"demo 2"},{"location":"en-US/1.guide/3.quick-start/#demo-3","text":"Query all Michael's movies rated below 3. MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars","title":"demo 3"},{"location":"en-US/1.guide/3.quick-start/#demo-4","text":"Search for users who have the same hated movies as Michael, with the dislike criteria being less than three points. MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v) WHERE r.stars < 3 AND s.stars < 3 RETURN u, m, v","title":"demo 4"},{"location":"en-US/1.guide/3.quick-start/#demo5","text":"To recommend movies to Michael, the method is to find out the users who hate the same movies as Michael, and then screen out the movies that these users like. MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2","title":"demo5"},{"location":"en-US/1.guide/3.quick-start/#demo-6","text":"Find out what Michael's friends like. MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m","title":"demo 6"},{"location":"en-US/1.guide/3.quick-start/#demo-7","text":"Recommend similar movies to users who like 'Forrest Gump' by finding out which movies people who rate 'Forrest Gump' high also like. MATCH (m:movie {title:'Forrest Gump'})<-[r:rate]-(u:user)-[r2:rate]->(m2:movie) WHERE r.stars>3 AND r2.stars>3 RETURN m, u,m2","title":"demo 7"},{"location":"en-US/2.operating/1.introduce/","text":"Introduction This document describes the differences between TuGraph Enterprise and TuGraph Community , TuGraph features, and TuGraph version number control. What is Graph Database Graph database is a non-relational database that stores data by vertices and edges. It can be used to store complex data network models, such as social networks and transaction networks. TuGraph is a graph database developed by Ant Group. This manual introduces the functions and usage of TuGraph. TuGraph Community Edition The Community Edition is a fully functional version of TuGraph, suitable for single-instance deployment. It provides complete basic fuctions of graph database, such as ACID-compatible transactions, programming APIs, and associated tools. It is ideal for learning TuGraph and implementing small projects. TuGraph Enterprise Edition The enterprise version extends TuGraph's basic functions. For example, the deployment mode includes high-availability and distributed, the underlying storage engine with faster performance improvement, and the role permission control with finer function improvement. It is ideal for commercial solutions. Difference between community and enterprise Feature Community version Enterprise version Labeled property Graph Model \u2705 \u2705 Dynamic model changes \u2705 \u2705 Support multiple graph \u2705 \u2705 Full ACID transaction processing \u2705 \u2705 Graph analysis algorithm \u2705 \u2705 Graph visualization tool based on Web client \u2705 \u2705 OpenCypher graph query language \u2705 \u2705 Stored procedure based on C++/Python/Java \u2705 \u2705 The Traversal API for efficient graph algorithm development \u2705 \u2705 TB large capacity \u2705 \u2705 High throughput of ten million vertices per second \u2705 \u2705 High-performance Batch Import \u2705 \u2705 Online/offline backup \u2705 \u2705 Rights management \u2705 \u2705 High availability support \u274c \u2705 Graph database expert support services \u274c \u2705 Advanced cypher optimizer \u274c \u2705 Property level permission management \u274c \u2705 TuGraph features TuGraph is a large-scale graph computing system independently developed by Ant Group, providing graph database engine and graph analysis engine. Its main features are large data storage and computation, high throughput, and flexible API, while supporting efficient online transaction processing (OLTP) and online analytical processing (OLAP). LightGraph and GeaGraph are former names of TuGraph. The main functional features include: Labeled property graph model Support multiple Graphs Full ACID transaction processing Built-in 25+ graph analysis algorithm Graph visualization tool based on Web client RESTful API and RPC are supported OpenCypher graph query language Stored procedure based on C++/Python/Java The Traversal API for efficient graph algorithm development Performance and scalability features include: TB large capacity High throughput of ten million vertices per second High Availability Support (Enterprise Edition) High-performance Batch Import Online/offline backup The data model Graph model TuGraph is a strong schema property graph database with multi-graph capability. It supports the construction of directed graphs with up to one trillion vertices. Multiple graphs: In TuGraph, each database server can host multiple graph models, each graph model can have its own access control configuration, and the database administrator can create or delete specified graph models. Property graph: vertices and edges in TuGraph can have properties associated with them, and each attribute can have a different type. Strong schema: Each vertex and edge must have a label, and the number and type of properties are difficult to change after the label created. Directed edges: The edges in TuGraph are directed edges. To simulate an undirected edge, the user can create two opposite edges. The data type TuGraph Supports a variety of data types that can be used as attributes, the specific supported data types are as follows\uff1a Table 1. TuGraph supported data types Type Min Max Description BOOL false true Boolean INT8 -128 127 8-bit int INT16 -32768 32767 16-bit int INT32 - 2^31 2^31 - 1 32-bit int INT64 - 2^63 2^63 - 1 64-bit int DATE 0000-00-00 9999-12-31 \"YYYY-MM-DD\" Date of format DATETIME 0000-00-00 00:00:00 9999-12-31 23:59:59 \"YYYY-MM-DD hh:mm:ss\"Format of the date and time FLOAT 32-bit float DOUBLE 64-bit float STRING A string of variable length BLOB Binary data BLOB data is BASE64 encoded in input and output Index TuGraph supports indexing vertex fields. Indexes can be unique or non-unique. If a unique index is created for a vertex label, TuGraph will perform a data integrity check to ensure the uniqueness of the index before modifying the vertex of the label. Each index built on a single field of a label, and multiple fields can be indexed using the same label. BLOB fields cannot be indexed. Software license Email \uff1a tugraph@service.alipay.com Phone\uff1a 0571-85022088\uff0cext. 83789993# Version number control for TuGraph TuGraph use [semantic 2.0.0 version control standard] (https://semver.org/lang/zh-CN/)\uff0cversion format: the major version number. Revision number. The increment rule is as follows: Major version number: Incompatible API changes have been made Version number: Downward compatible functionality added Revision number: Downward compatibility issue has been fixed","title":"Introduction"},{"location":"en-US/2.operating/1.introduce/#introduction","text":"This document describes the differences between TuGraph Enterprise and TuGraph Community , TuGraph features, and TuGraph version number control.","title":"Introduction"},{"location":"en-US/2.operating/1.introduce/#what-is-graph-database","text":"Graph database is a non-relational database that stores data by vertices and edges. It can be used to store complex data network models, such as social networks and transaction networks. TuGraph is a graph database developed by Ant Group. This manual introduces the functions and usage of TuGraph.","title":"What is Graph Database"},{"location":"en-US/2.operating/1.introduce/#tugraph-community-edition","text":"The Community Edition is a fully functional version of TuGraph, suitable for single-instance deployment. It provides complete basic fuctions of graph database, such as ACID-compatible transactions, programming APIs, and associated tools. It is ideal for learning TuGraph and implementing small projects.","title":"TuGraph Community Edition"},{"location":"en-US/2.operating/1.introduce/#tugraph-enterprise-edition","text":"The enterprise version extends TuGraph's basic functions. For example, the deployment mode includes high-availability and distributed, the underlying storage engine with faster performance improvement, and the role permission control with finer function improvement. It is ideal for commercial solutions.","title":"TuGraph Enterprise Edition"},{"location":"en-US/2.operating/1.introduce/#difference-between-community-and-enterprise","text":"Feature Community version Enterprise version Labeled property Graph Model \u2705 \u2705 Dynamic model changes \u2705 \u2705 Support multiple graph \u2705 \u2705 Full ACID transaction processing \u2705 \u2705 Graph analysis algorithm \u2705 \u2705 Graph visualization tool based on Web client \u2705 \u2705 OpenCypher graph query language \u2705 \u2705 Stored procedure based on C++/Python/Java \u2705 \u2705 The Traversal API for efficient graph algorithm development \u2705 \u2705 TB large capacity \u2705 \u2705 High throughput of ten million vertices per second \u2705 \u2705 High-performance Batch Import \u2705 \u2705 Online/offline backup \u2705 \u2705 Rights management \u2705 \u2705 High availability support \u274c \u2705 Graph database expert support services \u274c \u2705 Advanced cypher optimizer \u274c \u2705 Property level permission management \u274c \u2705","title":"Difference between community and enterprise"},{"location":"en-US/2.operating/1.introduce/#tugraph-features","text":"TuGraph is a large-scale graph computing system independently developed by Ant Group, providing graph database engine and graph analysis engine. Its main features are large data storage and computation, high throughput, and flexible API, while supporting efficient online transaction processing (OLTP) and online analytical processing (OLAP). LightGraph and GeaGraph are former names of TuGraph. The main functional features include: Labeled property graph model Support multiple Graphs Full ACID transaction processing Built-in 25+ graph analysis algorithm Graph visualization tool based on Web client RESTful API and RPC are supported OpenCypher graph query language Stored procedure based on C++/Python/Java The Traversal API for efficient graph algorithm development Performance and scalability features include: TB large capacity High throughput of ten million vertices per second High Availability Support (Enterprise Edition) High-performance Batch Import Online/offline backup","title":"TuGraph features"},{"location":"en-US/2.operating/1.introduce/#the-data-model","text":"","title":"The data model"},{"location":"en-US/2.operating/1.introduce/#graph-model","text":"TuGraph is a strong schema property graph database with multi-graph capability. It supports the construction of directed graphs with up to one trillion vertices. Multiple graphs: In TuGraph, each database server can host multiple graph models, each graph model can have its own access control configuration, and the database administrator can create or delete specified graph models. Property graph: vertices and edges in TuGraph can have properties associated with them, and each attribute can have a different type. Strong schema: Each vertex and edge must have a label, and the number and type of properties are difficult to change after the label created. Directed edges: The edges in TuGraph are directed edges. To simulate an undirected edge, the user can create two opposite edges.","title":"Graph model"},{"location":"en-US/2.operating/1.introduce/#the-data-type","text":"TuGraph Supports a variety of data types that can be used as attributes, the specific supported data types are as follows\uff1a Table 1. TuGraph supported data types Type Min Max Description BOOL false true Boolean INT8 -128 127 8-bit int INT16 -32768 32767 16-bit int INT32 - 2^31 2^31 - 1 32-bit int INT64 - 2^63 2^63 - 1 64-bit int DATE 0000-00-00 9999-12-31 \"YYYY-MM-DD\" Date of format DATETIME 0000-00-00 00:00:00 9999-12-31 23:59:59 \"YYYY-MM-DD hh:mm:ss\"Format of the date and time FLOAT 32-bit float DOUBLE 64-bit float STRING A string of variable length BLOB Binary data BLOB data is BASE64 encoded in input and output","title":"The data type"},{"location":"en-US/2.operating/1.introduce/#index","text":"TuGraph supports indexing vertex fields. Indexes can be unique or non-unique. If a unique index is created for a vertex label, TuGraph will perform a data integrity check to ensure the uniqueness of the index before modifying the vertex of the label. Each index built on a single field of a label, and multiple fields can be indexed using the same label. BLOB fields cannot be indexed.","title":"Index"},{"location":"en-US/2.operating/1.introduce/#software-license","text":"Email \uff1a tugraph@service.alipay.com Phone\uff1a 0571-85022088\uff0cext. 83789993#","title":"Software license"},{"location":"en-US/2.operating/1.introduce/#version-number-control-for-tugraph","text":"TuGraph use [semantic 2.0.0 version control standard] (https://semver.org/lang/zh-CN/)\uff0cversion format: the major version number. Revision number. The increment rule is as follows: Major version number: Incompatible API changes have been made Version number: Downward compatible functionality added Revision number: Downward compatibility issue has been fixed","title":"Version number control for TuGraph"},{"location":"en-US/2.operating/2.Install/","text":"Installation This document describes three different TuGraph installation methods: Ubuntu system, CentOS system, docker image. Supported Platforms TuGraph supports both X86_64 and ARM64 architectures in physical, virtual, and containerized environments. Hardware requirements You are advised to use NVMe SSDS with large memory configurations for optimal performance\u3002 Hardware Minimum Configuration Recommended configuration CPU X86_64 Xeon E5 2670 v4 Memory 4GB 256GB Disk 100GB 1TB NVMe SSD System Linux 2.6 Ubuntu 18.04, CentOS 7.3 Install through docker image To use docker image for installation, users need to first ensure that docker has been installed in their server. The following command can determine whether docker has been installed: $ sudo docker --version If the above command can print the docker version number successfully, it proves that the docker environment has been installed. Otherwise, docker needs to be installed first. For the process of installing docker, please refer to its official website:[https://docs.docker.com/install/](https://docs.docker.com/install/) \u3002 Currently, TuGraph provides images based on Ubuntu 16.04 LTS and CentOS 7.3 systems. The image file is a compressed file named 'lgraph_x.y.z.ar', where 'x.y.z' is the version number of TuGraph. The compressed package can be loaded into the docker image using the following command: $ sudo docker load -i ./tugraph_x.y.z.tar If the loading is successful, you should have a docker image named tugraph_x.y.z on your computer. You can run the image using the following command: # Run the image $ sudo docker run -v {data_dir_on_host}:/data_dir_in_docker -it tugraph/tugraph-runtime-centos7:x.y.z /bin/bash # Enter the docker container $ docker exec -it {container_id} bash -v Directory mapping\uff0c {host_data_dir} is a directory where the user wants to store data, such as /home/user1/workspace\u3002 -p The feature of Docker is port mapping. In this example, Docker port 7090 is mapped to local port 7090. {container_id} is the id of container. It can be obtained by 'docker ps' Ubuntu The.deb installation package for TuGraph installed on Ubuntu, which contains the TuGraph executable along with the header files and associated library files needed to write embedded programs and stored procedures. To install the tugraph_x.y.z.deb 'installation package on the terminal, run the following command: $ sudo dpkg -i tugraph-x.y.z.deb This command installs TuGraph in the /usr/local directory by default. Users can also change the installation directory by specifying the --instdir=<directory> option. CentOS rpm installation package for TuGraph installed on CentOS, which contains TuGraph executables as well as headers and associated libraries for writing embedded programs and stored procedures. To install the tugraph_x.y.z.rpm package on the terminal, run the following command: $ rpm -ivh tugraph-x.y.z.rpm The user can also specify the installation directory by specifying the --prefix option.","title":"Install"},{"location":"en-US/2.operating/2.Install/#installation","text":"This document describes three different TuGraph installation methods: Ubuntu system, CentOS system, docker image.","title":"Installation"},{"location":"en-US/2.operating/2.Install/#supported-platforms","text":"TuGraph supports both X86_64 and ARM64 architectures in physical, virtual, and containerized environments.","title":"Supported Platforms"},{"location":"en-US/2.operating/2.Install/#hardware-requirements","text":"You are advised to use NVMe SSDS with large memory configurations for optimal performance\u3002 Hardware Minimum Configuration Recommended configuration CPU X86_64 Xeon E5 2670 v4 Memory 4GB 256GB Disk 100GB 1TB NVMe SSD System Linux 2.6 Ubuntu 18.04, CentOS 7.3","title":"Hardware requirements"},{"location":"en-US/2.operating/2.Install/#install-through-docker-image","text":"To use docker image for installation, users need to first ensure that docker has been installed in their server. The following command can determine whether docker has been installed: $ sudo docker --version If the above command can print the docker version number successfully, it proves that the docker environment has been installed. Otherwise, docker needs to be installed first. For the process of installing docker, please refer to its official website:[https://docs.docker.com/install/](https://docs.docker.com/install/) \u3002 Currently, TuGraph provides images based on Ubuntu 16.04 LTS and CentOS 7.3 systems. The image file is a compressed file named 'lgraph_x.y.z.ar', where 'x.y.z' is the version number of TuGraph. The compressed package can be loaded into the docker image using the following command: $ sudo docker load -i ./tugraph_x.y.z.tar If the loading is successful, you should have a docker image named tugraph_x.y.z on your computer. You can run the image using the following command: # Run the image $ sudo docker run -v {data_dir_on_host}:/data_dir_in_docker -it tugraph/tugraph-runtime-centos7:x.y.z /bin/bash # Enter the docker container $ docker exec -it {container_id} bash -v Directory mapping\uff0c {host_data_dir} is a directory where the user wants to store data, such as /home/user1/workspace\u3002 -p The feature of Docker is port mapping. In this example, Docker port 7090 is mapped to local port 7090. {container_id} is the id of container. It can be obtained by 'docker ps'","title":"Install through docker image"},{"location":"en-US/2.operating/2.Install/#ubuntu","text":"The.deb installation package for TuGraph installed on Ubuntu, which contains the TuGraph executable along with the header files and associated library files needed to write embedded programs and stored procedures. To install the tugraph_x.y.z.deb 'installation package on the terminal, run the following command: $ sudo dpkg -i tugraph-x.y.z.deb This command installs TuGraph in the /usr/local directory by default. Users can also change the installation directory by specifying the --instdir=<directory> option.","title":"Ubuntu"},{"location":"en-US/2.operating/2.Install/#centos","text":"rpm installation package for TuGraph installed on CentOS, which contains TuGraph executables as well as headers and associated libraries for writing embedded programs and stored procedures. To install the tugraph_x.y.z.rpm package on the terminal, run the following command: $ rpm -ivh tugraph-x.y.z.rpm The user can also specify the installation directory by specifying the --prefix option.","title":"CentOS"},{"location":"en-US/2.operating/3.data-import/","text":"Data Importing This document describes the data import function of TuGraph. These include delimiters in CSV format, sample formats for jsonline, and two modes for importing online and offline. After the installation is successful, you can use the lgraph_import batch import tool to import existing data into TuGraph. lgraph_import supports importing data from CSV files and JSON data sources. sonline format, a row of a json array string CSV format [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 jsonline format [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] TuGraph supports two data importing modes\uff1a offline \uff1aRead the data and import it into a data file for the specified server, it should only be done when the server is offline. online \uff1aRead the data and send it to the running server, which then imports the data into its database. CSV file format delimiter CSV delimiters can be single-character or multi-character strings, which cannot contain 'r' or 'n'. Note that different shells handle input strings differently, so different escape handling may be required for different shell input parameters. In addition, 'lgraph_import' also supports the following escape characters for entering special symbols: Escape character Instructions \\ The backslash \\\\ \\a ASCII code 0x07 \\f form-feed\uff0cASCII code 0x0c \\t Horizontal tab characters\uff0c ASCII code 0x09 \\v Vertical tab characters\uff0c ASCII code 0x0b \\xnn Two hexadecimal digits representing one byte\uff0cexample \\x9A \\nnn A three-digit octal number representing a single byte\uff0cexample \\001, \\443\uff0cdata range cannot exceed 255 Demo\uff1a $ ./lgraph_import -c ./import.config --delimiter \"\\001\\002\" The configuration file `lgraph_import`tool configures the environment using the specified configuration file. The configuration file describes the paths to the input files, the vertices/edges they represent, and the vertex/edge format. Configuration File Format The configuration file consists of two parts: schema and files. The 'schema' part defines label, and the 'files' part describes the data files to be imported. The keyword schema (Array\uff09 label\uff08required\uff0cstring\uff09 type\uff08required\uff0c VERTEX or EDGE\uff09 properties\uff08Array\uff0crequired for vertex\uff0cIf there is no property for the edge, you can leave it unconfigured\uff09 name\uff08required, string\uff09 type \uff08required,\uff0cBOOL\uff0cINT8\uff0cINT16\uff0cINT32\uff0cINT64\uff0cDATE\uff0cDATETIME\uff0cFLOAT\uff0cDOUBLE\uff0cSTRING\uff0cBLOB\uff09 optional\uff08optional\uff0cIndicates that the field can be configured or not configured\uff09 index\uff08optional\uff0cWhether the field needs to be indexed\uff09 unique\uff08Optional, whether the field indexed and is of type unique\uff09 primary (Specify a property that uniquely identifies a point in the primary key field) constraints (Edge-only configuration, optional, array form, start and end labels, unconfigured or empty means unrestricted) files \uff08Array\uff09 path\uff08required\uff0cstring\uff0cThe value can be a file path or a directory path. If it is a directory, all files in the directory will be imported. Ensure that they have the same schema\uff09 header\uff08Optional, numeric, header in the first few lines of the file, or 0\uff09 format\uff08required\uff0cJSON or CSV\uff09 label\uff08required\uff0cstring\uff09 columns\uff08Array\uff09 SRC_ID (Special string\uff0conly on the edges,That means this column is the source data) DST_ID (A special string, only on the edges, indicates that this column is the destination data) SKIP (A special string to skip this column of data) [property] SRC_ID (Edge-only configuration. The value is the start label) DST_ID (Edge-only configuration. The value is the destination point label) Example Configuration File { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } For the above Example Configuration File, three labels defined: two point types' actor 'and' movie ', and one edge type 'role'. Each label describes: the name of the label, the type (dot or edge), which attribute fields are available, and the type of each field. For points, the primary field also defined; For edges, the constraints field also defined, which limits the starting and ending points of the edges. It also describes three data files, two dot data files' actors.csv 'and' movies.csv ', and one edge data file 'roles.csv'. Each section describes the path of the file, the format of the data, the first few lines of the header, the label of the data, and the corresponding field of each column in each row of data in the file. For the above configuration files, the import tool will first create labels' actor ', 'movie', and 'role' in TuGraph, and then perform data import of the three files. Offline full import The offline mode can be used only on offline servers. An offline import creates a new graph, so it's more suitable for your first data import on a newly installed TuGraph server. To use the 'lgraph_import' tool in offline mode, you can specify the 'lgraph_import --online false' option. To see the command-line options available, use 'lgraph_import --online false --help' : $ ./lgraph_import --online false -help Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. ... -h, --help Print this help message. Default=0. Command line arguments: -c, --config_file config_file : Import the configuration file name in the following format: --log log_dir : Log directory. The default is an empty string, in which case the log information output to the console. --verbose 0/1/2 : Log level. The higher the log level, the more detailed the output information is. The default value is 1. -i, --continue_on_error true/false : If an error occurs, skip the error and continue. The default is false. If an error occurs, exit. -d, --dir {diretory} :The database directory to which the import tool will write data. Default is'./db '. --delimiter {delimiter} : Data file separator. This is used only when the data source is in CSV format. The default is', '\u3002 -u, --username {user} : Username of the database. You need to be an administrator to perform offline import. -p, --password {password} : Specifies the password of the database user --overwrite true/false : Whether to overwrite data. When set to true, the data directory overwritten if it already exists. Default to 'false'. -g, --graph {graph_name} : Specify the kind of graph to import. -h, --help : The help information displayed. Offline Import Example In this example, we use the movie-actor data described above to demonstrate the use of the import tool. The data to be imported is divided into three files: 'movies.csv', 'actors.csv', and 'roles.csv'. 'movies.csv' contains information about movies, where each movie has an id (as a primary key for retrieval), and each movie also has attributes such as title, year, and rating. (Data from IMDb ). [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 The jsonline format is as follows: All fields can be strings, which will be converted to the corresponding type when imported [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] [\"tt0188766\",\"King of Comedy\",\"1999\",\"7.3\"] [\"tt0286112\",\"Shaolin Soccer\",\"2001\",\"7.3\"] [\"tt4701660\",\"The Mermaid\",\"2016\",\"6.3\"] actors.csv It contains information about the actors. Each actor also has an id, as well as properties such as name. [actors.csv] id, name nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang The corresponding jsonline format is as follows: [\"nm015950\",\"Stephen Chow\"] [\"nm0628806\",\"Man-Tat Ng\"] [\"nm0156444\",\"Cecilia Cheung\"] [\"nm2514879\",\"Yuqi Zhang\"] roles.csv It contains information about which role an actor played in which movie. Each row records a character played by a given actor in a given movie, corresponding to an edge in the database. SRC_ID and DST_ID are the source and target vertices of the edge, which are the 'primary' properties defined in 'actors.csv' and 'movies.csv', respectively. [roles.csv] actor, role, movie nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 The corresponding jsonline format is as follows: [\"nm015950\",\"Tianchou Yin\",\"tt0188766\"] [\"nm015950\",\"Steel Leg\",\"tt0286112\"] [\"nm0628806\",null,\"tt0188766\"] [\"nm0628806\",\"coach\",\"tt0286112\"] [\"nm0156444\",\"PiaoPiao Liu\",\"tt0188766\"] [\"nm2514879\",\"Ruolan Li\",\"tt4701660\"] 'configuration file import.conf', notice that there are two HEADER lines in each file, so we need to specify the 'HEADER=2' option. { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } Using the import configuration file, we can now import data using the following command: $ ./lgraph_import -c import.conf # Read configuration information from import.conf --dir /data/lgraph_db # Store the data in /data/lgraph_db --graph mygraph # Import the graph named mygraph Notice \uff1a If a graph named 'mygraph' already exists, the import tool will print an error message and exit. To force a graph to be overwritten, use the '--overwrite true' option. Configuration and data files must be stored in UTF-8 encoding (or normal ASCII encoding, which is a subset of UTF-8). If any file uses an encoding other than UTF-8 (for example, UTF-8 with BOM or GBK), the import will fail and output a profiler error. Online incremental Import The online import mode can be used to import a batch of files into an already running instance of TuGraph. This is handy for processing incremental batch updates that typically occur at fixed intervals. The 'lgraph_import --online true' option enables the import tool to work in online mode. Like offline mode, online mode has its own set of command-line options, which can be printed using the '-h, --help' options: $ lgraph_import --online true -h Available command line options: --online Whether to import online. -h, --help Print this help message. Default=0. Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. -c, --config_file Config file path. -r, --url DB REST API address. -u, --username DB username. -p, --password DB password. -i, --continue_on_error When we hit a duplicate uid or missing uid, should we continue or abort. Default=0. -g, --graph The name of the graph to import into. Default=default. --skip_packages How many packages should we skip. Default=0. --delimiter Delimiter used in the CSV files --breakpoint_continue When the transmission process is interrupted,whether to re-transmit from zero package next time. Default=false -h, --help Print this help message. Default=0. The configuration related to the file specified in the configuration file, and its format is exactly the same as' offline mode '. However, instead of importing the data into a local database, we are now sending the data to a running TuGraph instance, which is typically running on a different computer than the client machine on which the import tool is running. Therefore, we need to specify the URL, DB user, and password for the HTTP address of the remote machine. If the user and password are valid, and the specified graph exists, the import tool sends the data to the server, which then parses the data and writes it to the specified graph. The data will be sent in a packet of about 16 MB, interrupted at the nearest newline. Each package imported atomically, which means that if the package is successfully imported, all data is successfully imported; otherwise, none of the data enters the database. If '--continue_on_error true' is specified, data integrity errors are ignored and offending lines are ignored. Otherwise, the import stops at the first error package and prints out the number of packages that have been imported. In this case, the user can modify the data to eliminate errors, and then use '--skip_packages N' to redo the import to skip the imported packages.","title":"Data Import"},{"location":"en-US/2.operating/3.data-import/#data-importing","text":"This document describes the data import function of TuGraph. These include delimiters in CSV format, sample formats for jsonline, and two modes for importing online and offline. After the installation is successful, you can use the lgraph_import batch import tool to import existing data into TuGraph. lgraph_import supports importing data from CSV files and JSON data sources. sonline format, a row of a json array string CSV format [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 jsonline format [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] TuGraph supports two data importing modes\uff1a offline \uff1aRead the data and import it into a data file for the specified server, it should only be done when the server is offline. online \uff1aRead the data and send it to the running server, which then imports the data into its database.","title":"Data Importing"},{"location":"en-US/2.operating/3.data-import/#csv-file-format-delimiter","text":"CSV delimiters can be single-character or multi-character strings, which cannot contain 'r' or 'n'. Note that different shells handle input strings differently, so different escape handling may be required for different shell input parameters. In addition, 'lgraph_import' also supports the following escape characters for entering special symbols: Escape character Instructions \\ The backslash \\\\ \\a ASCII code 0x07 \\f form-feed\uff0cASCII code 0x0c \\t Horizontal tab characters\uff0c ASCII code 0x09 \\v Vertical tab characters\uff0c ASCII code 0x0b \\xnn Two hexadecimal digits representing one byte\uff0cexample \\x9A \\nnn A three-digit octal number representing a single byte\uff0cexample \\001, \\443\uff0cdata range cannot exceed 255 Demo\uff1a $ ./lgraph_import -c ./import.config --delimiter \"\\001\\002\"","title":"CSV file format delimiter"},{"location":"en-US/2.operating/3.data-import/#the-configuration-file","text":"`lgraph_import`tool configures the environment using the specified configuration file. The configuration file describes the paths to the input files, the vertices/edges they represent, and the vertex/edge format.","title":"The configuration file"},{"location":"en-US/2.operating/3.data-import/#configuration-file-format","text":"The configuration file consists of two parts: schema and files. The 'schema' part defines label, and the 'files' part describes the data files to be imported.","title":"Configuration File Format"},{"location":"en-US/2.operating/3.data-import/#the-keyword","text":"schema (Array\uff09 label\uff08required\uff0cstring\uff09 type\uff08required\uff0c VERTEX or EDGE\uff09 properties\uff08Array\uff0crequired for vertex\uff0cIf there is no property for the edge, you can leave it unconfigured\uff09 name\uff08required, string\uff09 type \uff08required,\uff0cBOOL\uff0cINT8\uff0cINT16\uff0cINT32\uff0cINT64\uff0cDATE\uff0cDATETIME\uff0cFLOAT\uff0cDOUBLE\uff0cSTRING\uff0cBLOB\uff09 optional\uff08optional\uff0cIndicates that the field can be configured or not configured\uff09 index\uff08optional\uff0cWhether the field needs to be indexed\uff09 unique\uff08Optional, whether the field indexed and is of type unique\uff09 primary (Specify a property that uniquely identifies a point in the primary key field) constraints (Edge-only configuration, optional, array form, start and end labels, unconfigured or empty means unrestricted) files \uff08Array\uff09 path\uff08required\uff0cstring\uff0cThe value can be a file path or a directory path. If it is a directory, all files in the directory will be imported. Ensure that they have the same schema\uff09 header\uff08Optional, numeric, header in the first few lines of the file, or 0\uff09 format\uff08required\uff0cJSON or CSV\uff09 label\uff08required\uff0cstring\uff09 columns\uff08Array\uff09 SRC_ID (Special string\uff0conly on the edges,That means this column is the source data) DST_ID (A special string, only on the edges, indicates that this column is the destination data) SKIP (A special string to skip this column of data) [property] SRC_ID (Edge-only configuration. The value is the start label) DST_ID (Edge-only configuration. The value is the destination point label)","title":"The keyword"},{"location":"en-US/2.operating/3.data-import/#example-configuration-file","text":"{ \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } For the above Example Configuration File, three labels defined: two point types' actor 'and' movie ', and one edge type 'role'. Each label describes: the name of the label, the type (dot or edge), which attribute fields are available, and the type of each field. For points, the primary field also defined; For edges, the constraints field also defined, which limits the starting and ending points of the edges. It also describes three data files, two dot data files' actors.csv 'and' movies.csv ', and one edge data file 'roles.csv'. Each section describes the path of the file, the format of the data, the first few lines of the header, the label of the data, and the corresponding field of each column in each row of data in the file. For the above configuration files, the import tool will first create labels' actor ', 'movie', and 'role' in TuGraph, and then perform data import of the three files.","title":"Example Configuration File"},{"location":"en-US/2.operating/3.data-import/#offline-full-import","text":"The offline mode can be used only on offline servers. An offline import creates a new graph, so it's more suitable for your first data import on a newly installed TuGraph server. To use the 'lgraph_import' tool in offline mode, you can specify the 'lgraph_import --online false' option. To see the command-line options available, use 'lgraph_import --online false --help' : $ ./lgraph_import --online false -help Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. ... -h, --help Print this help message. Default=0. Command line arguments: -c, --config_file config_file : Import the configuration file name in the following format: --log log_dir : Log directory. The default is an empty string, in which case the log information output to the console. --verbose 0/1/2 : Log level. The higher the log level, the more detailed the output information is. The default value is 1. -i, --continue_on_error true/false : If an error occurs, skip the error and continue. The default is false. If an error occurs, exit. -d, --dir {diretory} :The database directory to which the import tool will write data. Default is'./db '. --delimiter {delimiter} : Data file separator. This is used only when the data source is in CSV format. The default is', '\u3002 -u, --username {user} : Username of the database. You need to be an administrator to perform offline import. -p, --password {password} : Specifies the password of the database user --overwrite true/false : Whether to overwrite data. When set to true, the data directory overwritten if it already exists. Default to 'false'. -g, --graph {graph_name} : Specify the kind of graph to import. -h, --help : The help information displayed.","title":"Offline full import"},{"location":"en-US/2.operating/3.data-import/#offline-import-example","text":"In this example, we use the movie-actor data described above to demonstrate the use of the import tool. The data to be imported is divided into three files: 'movies.csv', 'actors.csv', and 'roles.csv'. 'movies.csv' contains information about movies, where each movie has an id (as a primary key for retrieval), and each movie also has attributes such as title, year, and rating. (Data from IMDb ). [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 The jsonline format is as follows: All fields can be strings, which will be converted to the corresponding type when imported [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] [\"tt0188766\",\"King of Comedy\",\"1999\",\"7.3\"] [\"tt0286112\",\"Shaolin Soccer\",\"2001\",\"7.3\"] [\"tt4701660\",\"The Mermaid\",\"2016\",\"6.3\"] actors.csv It contains information about the actors. Each actor also has an id, as well as properties such as name. [actors.csv] id, name nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang The corresponding jsonline format is as follows: [\"nm015950\",\"Stephen Chow\"] [\"nm0628806\",\"Man-Tat Ng\"] [\"nm0156444\",\"Cecilia Cheung\"] [\"nm2514879\",\"Yuqi Zhang\"] roles.csv It contains information about which role an actor played in which movie. Each row records a character played by a given actor in a given movie, corresponding to an edge in the database. SRC_ID and DST_ID are the source and target vertices of the edge, which are the 'primary' properties defined in 'actors.csv' and 'movies.csv', respectively. [roles.csv] actor, role, movie nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 The corresponding jsonline format is as follows: [\"nm015950\",\"Tianchou Yin\",\"tt0188766\"] [\"nm015950\",\"Steel Leg\",\"tt0286112\"] [\"nm0628806\",null,\"tt0188766\"] [\"nm0628806\",\"coach\",\"tt0286112\"] [\"nm0156444\",\"PiaoPiao Liu\",\"tt0188766\"] [\"nm2514879\",\"Ruolan Li\",\"tt4701660\"] 'configuration file import.conf', notice that there are two HEADER lines in each file, so we need to specify the 'HEADER=2' option. { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } Using the import configuration file, we can now import data using the following command: $ ./lgraph_import -c import.conf # Read configuration information from import.conf --dir /data/lgraph_db # Store the data in /data/lgraph_db --graph mygraph # Import the graph named mygraph Notice \uff1a If a graph named 'mygraph' already exists, the import tool will print an error message and exit. To force a graph to be overwritten, use the '--overwrite true' option. Configuration and data files must be stored in UTF-8 encoding (or normal ASCII encoding, which is a subset of UTF-8). If any file uses an encoding other than UTF-8 (for example, UTF-8 with BOM or GBK), the import will fail and output a profiler error.","title":"Offline Import Example"},{"location":"en-US/2.operating/3.data-import/#online-incremental-import","text":"The online import mode can be used to import a batch of files into an already running instance of TuGraph. This is handy for processing incremental batch updates that typically occur at fixed intervals. The 'lgraph_import --online true' option enables the import tool to work in online mode. Like offline mode, online mode has its own set of command-line options, which can be printed using the '-h, --help' options: $ lgraph_import --online true -h Available command line options: --online Whether to import online. -h, --help Print this help message. Default=0. Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. -c, --config_file Config file path. -r, --url DB REST API address. -u, --username DB username. -p, --password DB password. -i, --continue_on_error When we hit a duplicate uid or missing uid, should we continue or abort. Default=0. -g, --graph The name of the graph to import into. Default=default. --skip_packages How many packages should we skip. Default=0. --delimiter Delimiter used in the CSV files --breakpoint_continue When the transmission process is interrupted,whether to re-transmit from zero package next time. Default=false -h, --help Print this help message. Default=0. The configuration related to the file specified in the configuration file, and its format is exactly the same as' offline mode '. However, instead of importing the data into a local database, we are now sending the data to a running TuGraph instance, which is typically running on a different computer than the client machine on which the import tool is running. Therefore, we need to specify the URL, DB user, and password for the HTTP address of the remote machine. If the user and password are valid, and the specified graph exists, the import tool sends the data to the server, which then parses the data and writes it to the specified graph. The data will be sent in a packet of about 16 MB, interrupted at the nearest newline. Each package imported atomically, which means that if the package is successfully imported, all data is successfully imported; otherwise, none of the data enters the database. If '--continue_on_error true' is specified, data integrity errors are ignored and offending lines are ignored. Otherwise, the import stops at the first error package and prints out the number of packages that have been imported. In this case, the user can modify the data to eliminate errors, and then use '--skip_packages N' to redo the import to skip the imported packages.","title":"Online incremental Import"},{"location":"en-US/2.operating/4.server-config/","text":"Service configuration This document describes TuGraph's service configuration parameters, configuration file formats, and command line configuration parameters The TuGraph server loads configurations from the configuration file and command line options at startup, and if different values are specified for the same option in the configuration file and command line, the value specified in the command line will be used preferentially. Configuration parameters The parameters and their types are described as follows: Parameter names Type Instructions license string Path of the authorization file. The default value is /var/lib/lgraph/fma.lic. directory string Directory where data files are stored. If the directory does not exist, it is automatically created. The default directory is /var/lib/lgraph/data. async boolean Whether to use asynchronous mode. Asynchronous mode can reduce disk I/O overhead, but data can be lost in extreme cases such as machine power outages. The default value is false. host string The IP address on which the REST server listens. The default address is 0.0.0.0. port int The Port on which the REST server listens. The default port is 7070. enable_rpc boolean Whether to use RPC services. The default value is 0. rpc_port int Port used by RPC and HA services. The default port number is 9090. enable_ha boolean Whether to enable the HA mode. The default value is false. ha_log_dir string HA log directory. The HA mode needs to be enabled. The default value is null. master string Initialize a node based on host1:port1 and host2:port2. The default value is null. verbose int Detail level of log output information. The value can be 0,1,2. The larger the value, the more detailed the output information. The default value is 1. log_dir string Directory where log files are stored. The default directory is /var/log/lgraph/. ssl_auth boolean Whether to use SSL authentication. When HTTPS is enabled, only the HTTPS service is enabled on the REST server. The default value is false. web string The directory where the web files (including the visual part) are located. The default directory is/usr/local/share/lgraph/resource. server_cert string certificate file path used by the server when SSL authentication is enabled. The default path is/usr/local/etc/lgraph/server - cert.pem. server_key string The public key file used by the server when SSL authentication is enabled. The default directory is/usr/local/etc/lgraph/server - key.pem\u3002 enable_audit_log boolean Whether to enable audit logs. The default value is false. audit_log_expire int When audit logs are enabled, the validity period (hours) of audit logs is automatically cleared upon timeout. If the value is 0, the logs are not cleared. The default value is 0. audit_log_dir string Specifies the directory for storing log files when audit logs are enabled. The default directory is $directory/ audit_log . load_plugins boolean Import all stored procedures when starting the service. The default value is 1. optimistic_txn boolean Enable optimistic multithreaded write transactions for Cypher. The default is 0. disable_auth boolean Disable REST authentication. The default is 0. snapshot_interval int Snapshot interval (in seconds) The default value is 86400. heartbeat_interval_ms int Heartbeat interval in milliseconds. The default value is 1000. heartbeat_failure_duration_ms int The heartbeat times out and the interval (in milliseconds) between nodes going offline. The default value is 60000. node_dead_duration_ms int The interval (in milliseconds) at which a node is considered completely dead and removed from the list. The default value is 120000. enable_ip_check boolean Allow IP address whitelists. The default value is 0\u3002 idle_seconds int The maximum number of seconds a child process can be idle. The default value is 600. enable_backup_log boolean Whether to enable backup logging. The default value is 0. backup_log_dir string The directory where backup files are stored. The default value is null. snapshot_dir string Directory where snapshot files are stored. The default value is null. thread_limit int The maximum number of threads that can be used simultaneously. The default value is 0, which means that no restriction is imposed. The license file prevails. help boolean Print the help message. The default value is 0. Server configuration file TuGraph's configuration file is stored in JSON format. It is recommended that most configuration be stored in configuration files and that some configuration parameters be modified only temporarily using command-line options when needed. A typical configuration file looks like this: { \"directory\": \"/var/lib/lgraph/data\", \"license\": \"/var/lib/lgraph/fma.lic\", \"port\": 7090, \"rpc_port\": 9090, \"enable_ha\": false, \"verbose\": 1, \"log_dir\": \"/var/log/lgraph/\", \"ssl_auth\": false, \"server_key\": \"/usr/local/etc/lgraph/server-key.pem\", \"server_cert\": \"/usr/local/etc/lgraph/server-cert.pem\" }","title":"Server Config"},{"location":"en-US/2.operating/4.server-config/#service-configuration","text":"This document describes TuGraph's service configuration parameters, configuration file formats, and command line configuration parameters The TuGraph server loads configurations from the configuration file and command line options at startup, and if different values are specified for the same option in the configuration file and command line, the value specified in the command line will be used preferentially.","title":"Service configuration"},{"location":"en-US/2.operating/4.server-config/#configuration-parameters","text":"The parameters and their types are described as follows: Parameter names Type Instructions license string Path of the authorization file. The default value is /var/lib/lgraph/fma.lic. directory string Directory where data files are stored. If the directory does not exist, it is automatically created. The default directory is /var/lib/lgraph/data. async boolean Whether to use asynchronous mode. Asynchronous mode can reduce disk I/O overhead, but data can be lost in extreme cases such as machine power outages. The default value is false. host string The IP address on which the REST server listens. The default address is 0.0.0.0. port int The Port on which the REST server listens. The default port is 7070. enable_rpc boolean Whether to use RPC services. The default value is 0. rpc_port int Port used by RPC and HA services. The default port number is 9090. enable_ha boolean Whether to enable the HA mode. The default value is false. ha_log_dir string HA log directory. The HA mode needs to be enabled. The default value is null. master string Initialize a node based on host1:port1 and host2:port2. The default value is null. verbose int Detail level of log output information. The value can be 0,1,2. The larger the value, the more detailed the output information. The default value is 1. log_dir string Directory where log files are stored. The default directory is /var/log/lgraph/. ssl_auth boolean Whether to use SSL authentication. When HTTPS is enabled, only the HTTPS service is enabled on the REST server. The default value is false. web string The directory where the web files (including the visual part) are located. The default directory is/usr/local/share/lgraph/resource. server_cert string certificate file path used by the server when SSL authentication is enabled. The default path is/usr/local/etc/lgraph/server - cert.pem. server_key string The public key file used by the server when SSL authentication is enabled. The default directory is/usr/local/etc/lgraph/server - key.pem\u3002 enable_audit_log boolean Whether to enable audit logs. The default value is false. audit_log_expire int When audit logs are enabled, the validity period (hours) of audit logs is automatically cleared upon timeout. If the value is 0, the logs are not cleared. The default value is 0. audit_log_dir string Specifies the directory for storing log files when audit logs are enabled. The default directory is $directory/ audit_log . load_plugins boolean Import all stored procedures when starting the service. The default value is 1. optimistic_txn boolean Enable optimistic multithreaded write transactions for Cypher. The default is 0. disable_auth boolean Disable REST authentication. The default is 0. snapshot_interval int Snapshot interval (in seconds) The default value is 86400. heartbeat_interval_ms int Heartbeat interval in milliseconds. The default value is 1000. heartbeat_failure_duration_ms int The heartbeat times out and the interval (in milliseconds) between nodes going offline. The default value is 60000. node_dead_duration_ms int The interval (in milliseconds) at which a node is considered completely dead and removed from the list. The default value is 120000. enable_ip_check boolean Allow IP address whitelists. The default value is 0\u3002 idle_seconds int The maximum number of seconds a child process can be idle. The default value is 600. enable_backup_log boolean Whether to enable backup logging. The default value is 0. backup_log_dir string The directory where backup files are stored. The default value is null. snapshot_dir string Directory where snapshot files are stored. The default value is null. thread_limit int The maximum number of threads that can be used simultaneously. The default value is 0, which means that no restriction is imposed. The license file prevails. help boolean Print the help message. The default value is 0.","title":"Configuration parameters"},{"location":"en-US/2.operating/4.server-config/#server-configuration-file","text":"TuGraph's configuration file is stored in JSON format. It is recommended that most configuration be stored in configuration files and that some configuration parameters be modified only temporarily using command-line options when needed. A typical configuration file looks like this: { \"directory\": \"/var/lib/lgraph/data\", \"license\": \"/var/lib/lgraph/fma.lic\", \"port\": 7090, \"rpc_port\": 9090, \"enable_ha\": false, \"verbose\": 1, \"log_dir\": \"/var/log/lgraph/\", \"ssl_auth\": false, \"server_key\": \"/usr/local/etc/lgraph/server-key.pem\", \"server_cert\": \"/usr/local/etc/lgraph/server-cert.pem\" }","title":"Server configuration file"},{"location":"en-US/2.operating/5.operation/","text":"Service operations This document describes the operation mode of the TuGraph service, starting, stopping, and restarting operations. The operation mode TuGraph can be started as a normal process in the foreground or as a daemon in the background. When running as a normal process, TuGraph can print logs directly to the terminal, which is handy when debugging server configurations. However, because the foreground process is terminated after the terminal exits, the user must ensure that the terminal remains open while the TuGraph server is running. In daemon mode, on the other hand, the TuGraph server can continue to run even if the terminal that started it exits. If TuGraph needs to run for a long time, it is recommended to start the TuGraph server in daemon mode. Running a normal process The 'lgraph_server -d run' command runs TuGraph as a normal process. Normal processes depend on the command line terminal, so when the terminal ends, the TuGraph process is automatically terminated. Normal process mode with '--log_dir \"\"' can output the process log directly to the terminal, so it is easier to debug. Start the command\uff1a $ ./lgraph_server -c lgraph_standalone.json --log_dir \"\" Example of running output in normal mode\uff1a 20200508120723.039: ********************************************************************** 20200508120723.039: * TuGraph Graph Database v3.1.0 * 20200508120723.040: * * 20200508120723.041: * Copyright(C) 2018 Ant Group. All rights reserved. * 20200508120723.041: * * 20200508120723.044: * Licensed host: hostname threads:0, ha:0 * 20200508120723.044: ********************************************************************** 20200508120723.044: Server is configured with the following parameters: 20200508120723.045: data directory: ./lgraph_db 20200508120723.045: license: ./fma.lic 20200508120723.046: enable ha: 0 20200508120723.046: async: 0 20200508120723.047: host: 127.0.0.1 20200508120723.047: REST port: 7071 20200508120723.048: RPC port: 9091 20200508120723.048: enable rpc: 0 20200508120723.051: optimistic txn: 0 20200508120723.059: verbose: 1 20200508120723.074: log_dir: 20200508120723.074: ssl_auth: 0 20200508120723.075: resource dir: ./resource 20200508120723.077: Loading DB state from disk 20200508120723.110: [RestServer] Listening for REST on port 7090 20200508120723.110: [LGraphService] Server started. In normal process mode, the user can prematurely terminate the TuGraph process by pressing 'CTRL+C'. Run process daemon mode Start the command\uff1a $ ./lgraph_server -d start -c lgraph_daemon.json Example output from running in daemon mode: Starting lgraph... The service process is started at pid 12109. The TuGraph server process started by this command is a daemon process that loads the relevant configuration from the file 'lgraph_daemon.json'. After the server starts, it will start printing logs in a log file that can then be used to determine the status of the server. Service operation Start the service TuGraph needs to be started using the 'lgraph_server -d start' command line. The following is an example of the command to start TuGraph: $ ./lgraph_server -d start -c lgraph_daemon.json Starting lgraph... The service process is started at pid 12109. The TuGraph server process started by this command is a daemon process that loads the relevant configuration from the file 'lgraph_daemon.json'. After the server starts, it will start printing logs in a log file that can then be used to determine the status of the server. Stop the service You can stop the TuGraph daemon using the 'kill' command and the 'lgraph_server -d stop' command. Since it is possible to run multiple TuGraph server processes on the same computer, we distinguish between the different server processes using the '.pid 'file, which is written to the working directory where the process was started. Therefore, you need to run the command 'lgraph_server-d stop' in the same working directory to stop the correct server process. user@host:~/tugraph$ ./lgraph_server -d start -c lgraph_standalone.json 20200508122306.378: Starting lgraph... 20200508122306.379: The service process is started at pid 93. user@host:~/tugraph$ cat ./lgraph.pid 93 user@host:~/tugraph$ ./lgraph_server -d stop -c lgraph_standalone.json 20200508122334.857: Stopping lgraph... 20200508122334.857: Process stopped. Restart the service Users can also restart the TuGraph service by 'lgraph_server -d restart' : $ ./lgraph_server -d restart Stopping lgraph... Process stopped. Starting lgraph... The service process is started at pid 20899.","title":"Operation"},{"location":"en-US/2.operating/5.operation/#service-operations","text":"This document describes the operation mode of the TuGraph service, starting, stopping, and restarting operations.","title":"Service operations"},{"location":"en-US/2.operating/5.operation/#the-operation-mode","text":"TuGraph can be started as a normal process in the foreground or as a daemon in the background. When running as a normal process, TuGraph can print logs directly to the terminal, which is handy when debugging server configurations. However, because the foreground process is terminated after the terminal exits, the user must ensure that the terminal remains open while the TuGraph server is running. In daemon mode, on the other hand, the TuGraph server can continue to run even if the terminal that started it exits. If TuGraph needs to run for a long time, it is recommended to start the TuGraph server in daemon mode.","title":"The operation mode"},{"location":"en-US/2.operating/5.operation/#running-a-normal-process","text":"The 'lgraph_server -d run' command runs TuGraph as a normal process. Normal processes depend on the command line terminal, so when the terminal ends, the TuGraph process is automatically terminated. Normal process mode with '--log_dir \"\"' can output the process log directly to the terminal, so it is easier to debug. Start the command\uff1a $ ./lgraph_server -c lgraph_standalone.json --log_dir \"\" Example of running output in normal mode\uff1a 20200508120723.039: ********************************************************************** 20200508120723.039: * TuGraph Graph Database v3.1.0 * 20200508120723.040: * * 20200508120723.041: * Copyright(C) 2018 Ant Group. All rights reserved. * 20200508120723.041: * * 20200508120723.044: * Licensed host: hostname threads:0, ha:0 * 20200508120723.044: ********************************************************************** 20200508120723.044: Server is configured with the following parameters: 20200508120723.045: data directory: ./lgraph_db 20200508120723.045: license: ./fma.lic 20200508120723.046: enable ha: 0 20200508120723.046: async: 0 20200508120723.047: host: 127.0.0.1 20200508120723.047: REST port: 7071 20200508120723.048: RPC port: 9091 20200508120723.048: enable rpc: 0 20200508120723.051: optimistic txn: 0 20200508120723.059: verbose: 1 20200508120723.074: log_dir: 20200508120723.074: ssl_auth: 0 20200508120723.075: resource dir: ./resource 20200508120723.077: Loading DB state from disk 20200508120723.110: [RestServer] Listening for REST on port 7090 20200508120723.110: [LGraphService] Server started. In normal process mode, the user can prematurely terminate the TuGraph process by pressing 'CTRL+C'.","title":"Running a normal process"},{"location":"en-US/2.operating/5.operation/#run-process-daemon-mode","text":"Start the command\uff1a $ ./lgraph_server -d start -c lgraph_daemon.json Example output from running in daemon mode: Starting lgraph... The service process is started at pid 12109. The TuGraph server process started by this command is a daemon process that loads the relevant configuration from the file 'lgraph_daemon.json'. After the server starts, it will start printing logs in a log file that can then be used to determine the status of the server.","title":"Run process daemon mode"},{"location":"en-US/2.operating/5.operation/#service-operation","text":"","title":"Service operation"},{"location":"en-US/2.operating/5.operation/#start-the-service","text":"TuGraph needs to be started using the 'lgraph_server -d start' command line. The following is an example of the command to start TuGraph: $ ./lgraph_server -d start -c lgraph_daemon.json Starting lgraph... The service process is started at pid 12109. The TuGraph server process started by this command is a daemon process that loads the relevant configuration from the file 'lgraph_daemon.json'. After the server starts, it will start printing logs in a log file that can then be used to determine the status of the server.","title":"Start the service"},{"location":"en-US/2.operating/5.operation/#stop-the-service","text":"You can stop the TuGraph daemon using the 'kill' command and the 'lgraph_server -d stop' command. Since it is possible to run multiple TuGraph server processes on the same computer, we distinguish between the different server processes using the '.pid 'file, which is written to the working directory where the process was started. Therefore, you need to run the command 'lgraph_server-d stop' in the same working directory to stop the correct server process. user@host:~/tugraph$ ./lgraph_server -d start -c lgraph_standalone.json 20200508122306.378: Starting lgraph... 20200508122306.379: The service process is started at pid 93. user@host:~/tugraph$ cat ./lgraph.pid 93 user@host:~/tugraph$ ./lgraph_server -d stop -c lgraph_standalone.json 20200508122334.857: Stopping lgraph... 20200508122334.857: Process stopped.","title":"Stop the service"},{"location":"en-US/2.operating/5.operation/#restart-the-service","text":"Users can also restart the TuGraph service by 'lgraph_server -d restart' : $ ./lgraph_server -d restart Stopping lgraph... Process stopped. Starting lgraph... The service process is started at pid 20899.","title":"Restart the service"},{"location":"en-US/2.operating/7.ha-mode/","text":"High Availability mode This document describes the principles, preparations, and server operations of the high availability mode Theory TuGraph provides high availability mode (HA mode) through multiple server hot backups. In high availability mode, writes are synchronized to all servers so that service availability is not affected even if some servers go down. In high availability mode, multiple TuGraph servers form a backup group. Each backup group consists of three or more TuGraph servers, one of which serves as the 'leader' and the other replication group servers serve as the 'follower'. Write requests are serviced by the 'leader' who replicates each request to the 'follower' and responds to the client only after the request has been synchronized to the server. This way, if any server fails, the other servers will still have all the data that has been written so far. If the 'leader' server fails, other servers will automatically select a new 'leader'. The high availability mode is only available in the enterprise edition. The open-source Community Edition does not include this feature. Preparation To enable high availability mode, users need to: Three or more instances of TuGraph servers. To obtain a license file with high availability, please contact our distributor for details. To enable high availability mode when starting lgraph_server, the 'enable_ha' option can be set to 'true' using a configuration file or the command line. Set the correct rpc_port through the configuration file or command line Start the initial backup group The initial data is consistent When the data in all servers is the same or there is no data at startup, the user can specify --conf host1:port1,host2:port2 to start the server. In this way, all prepared TuGraph instances can be added to the initial backup group at one time, All servers in the backup group elect leader according to the RAFT protocol, and other servers join the backup group with the role of follower . An example command to start an initial backup group is as follows: $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090,172.22.224.16:9090,172.22.224.17:9090 After the first server is started, it will elect itself as the 'leader' and organize a backup group with only itself. The first server is started with the '--master \"\" or' --master BOOTSTRAP 'options, depending on whether the first server already has data. '--master \"\":' If there is no data in the first server, the user can start the server directly with the '--master \"\"' option. '--master BOOTSTRAP:' if the data already exists in the first server (imported using lgraph_import or transferred from a server not in high availability mode) and has not been used in high availability mode before, Then the user should use the 'BOOTSTRAP' option to start the server in boot mode. In boot mode, the server copies its data to the new server before adding the new server to the backup group, so that the data in each server is consistent. The following is an example of the command line for starting the first server that already has data: $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --master BOOTSTRAP Inconsistent initial data If there is already data in the first server (imported by the lgraph_import tool or transferred from a server in non-high availability mode), And it has not been used in high availability mode before, the user should use the enable_bootstrap parameter Start the server in boot mode. In bootstrap mode, the server will add its own The data is copied to the new server so that the data in each server is consistent. An example command to start a data server is as follows: $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 --enable_bootstrap true Other servers without data do not need to specify the enable_bootstrap parameter, just specify the leader through the conf parameter, the command example is as follows $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 Scale out other servers After starting the initial backup group, if you want to scale out the backup group, add new servers to the backup group, The --conf HOST:PORT option should be used, where HOST can be the IP address of any server already in this backup group, And PORT is its RPC port. E.g: ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 This command will start a TuGraph server in high availability mode and try to add it to the backup group containing the server 172.22.224.15:9090 . Note that joining a backup group requires a server to synchronize its data with the backup group's leader server, and this process may take a considerable amount of time, depending on the size of the data. Stopping the Server When a server goes offline via 'CTRL-C', it will notify the current 'leader' server to remove the server from the backup group. If the leader server goes offline, it will pass the leader identity permission to another server before going offline. If a server is terminated or disconnected from other servers in the backup group, the server is considered a failed node and the leader server will remove it from the backup group after a specified time limit. If any server leaves the backup group and wishes to rejoin, it must start with the '--master {HOST: PORT}' option, where 'HOST' is the IP address of a server in the current backup group. Restarting the Server Restarting the entire backup group is not recommended because it can interrupt service. You can shut down all servers if you need to. However, on a restart, the last server that went down must be started first. Server Status The current status of the backup group can be obtained from the TuGraph visualization tool, REST API, and Cypher query. In the TuGraph visualization tool, you can find the list of servers and their roles in the backup group in the DBInfo section. With the REST API, you can use GET /info/peers to request information. In Cypher, the CALL dbms.listServers() statement is used to query the status information of the current backup group. Data synchronization in high availability mode In high availability mode, different servers in the same backup group may not always be in the same state. For performance reasons, if a request has been synchronized to more than half of the servers, the leader server will consider the request to be in the committed state. Although the rest of the servers will eventually receive the new request, the inconsistent state of the servers will persist for some time. A client may also send a request to a server that has just restarted, thus having an older state and waiting to join a backup group. To ensure that the client sees consistently continuous data, and in particular to get rid of the 'reverse time travel' problem, where the client reads a state older than it has seen before, each TuGraph server keeps a monotonically increasing data version number. The mapping of the data version number to the database state in the backup group is globally consistent, meaning that if two servers have the same data version number, they must have the same data. When responding to a request, the server includes its data version number in the response. Thus, the client can tell which version it has seen. The client can choose to send this data version number along with the request. Upon receiving a request with a data version number, the server compares the data version number to its current version and rejects the request if its own version is lower than the requested version. This mechanism ensures that the client never reads a state that is older than before.","title":"HA Mode"},{"location":"en-US/2.operating/7.ha-mode/#high-availability-mode","text":"This document describes the principles, preparations, and server operations of the high availability mode","title":"High Availability mode"},{"location":"en-US/2.operating/7.ha-mode/#theory","text":"TuGraph provides high availability mode (HA mode) through multiple server hot backups. In high availability mode, writes are synchronized to all servers so that service availability is not affected even if some servers go down. In high availability mode, multiple TuGraph servers form a backup group. Each backup group consists of three or more TuGraph servers, one of which serves as the 'leader' and the other replication group servers serve as the 'follower'. Write requests are serviced by the 'leader' who replicates each request to the 'follower' and responds to the client only after the request has been synchronized to the server. This way, if any server fails, the other servers will still have all the data that has been written so far. If the 'leader' server fails, other servers will automatically select a new 'leader'. The high availability mode is only available in the enterprise edition. The open-source Community Edition does not include this feature.","title":"Theory"},{"location":"en-US/2.operating/7.ha-mode/#preparation","text":"To enable high availability mode, users need to: Three or more instances of TuGraph servers. To obtain a license file with high availability, please contact our distributor for details. To enable high availability mode when starting lgraph_server, the 'enable_ha' option can be set to 'true' using a configuration file or the command line. Set the correct rpc_port through the configuration file or command line","title":"Preparation"},{"location":"en-US/2.operating/7.ha-mode/#start-the-initial-backup-group","text":"","title":"Start the initial backup group"},{"location":"en-US/2.operating/7.ha-mode/#the-initial-data-is-consistent","text":"When the data in all servers is the same or there is no data at startup, the user can specify --conf host1:port1,host2:port2 to start the server. In this way, all prepared TuGraph instances can be added to the initial backup group at one time, All servers in the backup group elect leader according to the RAFT protocol, and other servers join the backup group with the role of follower . An example command to start an initial backup group is as follows: $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090,172.22.224.16:9090,172.22.224.17:9090 After the first server is started, it will elect itself as the 'leader' and organize a backup group with only itself. The first server is started with the '--master \"\" or' --master BOOTSTRAP 'options, depending on whether the first server already has data. '--master \"\":' If there is no data in the first server, the user can start the server directly with the '--master \"\"' option. '--master BOOTSTRAP:' if the data already exists in the first server (imported using lgraph_import or transferred from a server not in high availability mode) and has not been used in high availability mode before, Then the user should use the 'BOOTSTRAP' option to start the server in boot mode. In boot mode, the server copies its data to the new server before adding the new server to the backup group, so that the data in each server is consistent. The following is an example of the command line for starting the first server that already has data: $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --master BOOTSTRAP","title":"The initial data is consistent"},{"location":"en-US/2.operating/7.ha-mode/#inconsistent-initial-data","text":"If there is already data in the first server (imported by the lgraph_import tool or transferred from a server in non-high availability mode), And it has not been used in high availability mode before, the user should use the enable_bootstrap parameter Start the server in boot mode. In bootstrap mode, the server will add its own The data is copied to the new server so that the data in each server is consistent. An example command to start a data server is as follows: $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 --enable_bootstrap true Other servers without data do not need to specify the enable_bootstrap parameter, just specify the leader through the conf parameter, the command example is as follows $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090","title":"Inconsistent initial data"},{"location":"en-US/2.operating/7.ha-mode/#scale-out-other-servers","text":"After starting the initial backup group, if you want to scale out the backup group, add new servers to the backup group, The --conf HOST:PORT option should be used, where HOST can be the IP address of any server already in this backup group, And PORT is its RPC port. E.g: ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 This command will start a TuGraph server in high availability mode and try to add it to the backup group containing the server 172.22.224.15:9090 . Note that joining a backup group requires a server to synchronize its data with the backup group's leader server, and this process may take a considerable amount of time, depending on the size of the data.","title":"Scale out other servers"},{"location":"en-US/2.operating/7.ha-mode/#stopping-the-server","text":"When a server goes offline via 'CTRL-C', it will notify the current 'leader' server to remove the server from the backup group. If the leader server goes offline, it will pass the leader identity permission to another server before going offline. If a server is terminated or disconnected from other servers in the backup group, the server is considered a failed node and the leader server will remove it from the backup group after a specified time limit. If any server leaves the backup group and wishes to rejoin, it must start with the '--master {HOST: PORT}' option, where 'HOST' is the IP address of a server in the current backup group.","title":"Stopping the Server"},{"location":"en-US/2.operating/7.ha-mode/#restarting-the-server","text":"Restarting the entire backup group is not recommended because it can interrupt service. You can shut down all servers if you need to. However, on a restart, the last server that went down must be started first.","title":"Restarting the Server"},{"location":"en-US/2.operating/7.ha-mode/#server-status","text":"The current status of the backup group can be obtained from the TuGraph visualization tool, REST API, and Cypher query. In the TuGraph visualization tool, you can find the list of servers and their roles in the backup group in the DBInfo section. With the REST API, you can use GET /info/peers to request information. In Cypher, the CALL dbms.listServers() statement is used to query the status information of the current backup group.","title":"Server Status"},{"location":"en-US/2.operating/7.ha-mode/#data-synchronization-in-high-availability-mode","text":"In high availability mode, different servers in the same backup group may not always be in the same state. For performance reasons, if a request has been synchronized to more than half of the servers, the leader server will consider the request to be in the committed state. Although the rest of the servers will eventually receive the new request, the inconsistent state of the servers will persist for some time. A client may also send a request to a server that has just restarted, thus having an older state and waiting to join a backup group. To ensure that the client sees consistently continuous data, and in particular to get rid of the 'reverse time travel' problem, where the client reads a state older than it has seen before, each TuGraph server keeps a monotonically increasing data version number. The mapping of the data version number to the database state in the backup group is globally consistent, meaning that if two servers have the same data version number, they must have the same data. When responding to a request, the server includes its data version number in the response. Thus, the client can tell which version it has seen. The client can choose to send this data version number along with the request. Upon receiving a request with a data version number, the server compares the data version number to its current version and rejects the request if its own version is lower than the requested version. This mechanism ensures that the client never reads a state that is older than before.","title":"Data synchronization in high availability mode"},{"location":"en-US/2.operating/8.manage-database/","text":"Database Management This document describes common database management functions, such as log information, data export, data backup, and data warm-up Log information TuGraph keeps two types of logs: server logs and audit logs. Server logs record human-readable information about the state of the server, while audit logs maintain encrypted information about each operation performed on the server. Server log Server logs track server status (such as server startup/stop), and the requests that the server has provided and their corresponding responses. The details of server logs can be configured using the 'verbose' option. The log location is specified in the 'log_dir' option. The default 'verbose' level is' 1 '. Under this level, the server only prints logs about major events, such as server startup/stop. Requests and responses are not logged at this level. Audit log Audit logs record each request and response, as well as the user who sent the request and when the request received. Audit logging can only be turned on or off. The results can be queried using the TuGraph visualization tool and the REST API. Data export TuGraph can use the tool 'lgraph_export' to export data from the database that has been imported successfully. The 'lgraph_export' tool can export the data of the specified TuGraph database to the specified directory in the form of 'csv' or 'json' file, and export the configuration file 'import.config'. That required for re-importing the data. Detailed description see [] configuration file (# % E9%85% AE BD E7 8 d % % % % E6%96% % 87% % E4 BB B6). The following is an example of a command for the tool: $ lgraph_export -d {database_dir} -e {export_destination_dir} -g {graph_to_use} -u {username} -p {password} -f {output_format} Details: '-d {database_dir}' specifies the directory of the database from which the data will be exported. The default value is./testdb '. '-e {export_destination_dir}' specifies the directory where the export file is stored. The default value is./exportdir. '-g {graph_to_use}' specifies the type of graph database. default is' default '. '-u {username}' Specifies the name of the user who performs the export operation. '-p {password}' Specifies the password of the user who performs the export operation. '-s {field_separator}' specifies the separator for the exported file. The default is comma. '-f {output_format}' specifies the format of the exported data. It can be 'json' or 'csv'. '-h' In addition to the specified parameters, you can also use this parameter to view the help of the tool. Data backup TuGraph can use the 'lgraph_backup' tool to backup data. The 'lgraph_backup' tool can backup data from a TuGraph database to another directory. It can be used as follows: $ lgraph_backup -s {source_dir} -d {destination_dir} -c {true/false} Details: '-s {source_dir}' specifies the directory where the database (source database) to be backed up resides. '-d {destination_dir}' specifies the directory where the backup file (destination database) is stored. If the target database is not empty, 'lgraph_backup' prompts you whether to overwrite the database. '-c {true/false}' indicates whether a compaction occurs during backup. Every compaction creates a tighter backup, but every compaction takes longer to create. This option defaults to 'true'. Data Warm-up TuGraph is a disk-based database where data loaded into memory only when accessed. Therefore, for a period of time after the server just turned on, the system performance may be degraded due to frequent IO operations. At this point, we can improve this problem by data warm-up. Data warmup can be done using the tool lgraph_warmup. An example of its use is as follows: $ lgraph_warmup -d {directory} -g {graph_list} Details: The - '-d {db_dir}' option specifies the data directory for the TuGraph server The - '-g {graph_list}' option specifies the names of graphs to be warmed-up, separated by commas The warm-up process takes different times depending on the data size and the type of disk being used. Preheating a large database on a mechanical disk may take a long time. Please wait patiently.","title":"Manage Database"},{"location":"en-US/2.operating/8.manage-database/#database-management","text":"This document describes common database management functions, such as log information, data export, data backup, and data warm-up","title":"Database Management"},{"location":"en-US/2.operating/8.manage-database/#log-information","text":"TuGraph keeps two types of logs: server logs and audit logs. Server logs record human-readable information about the state of the server, while audit logs maintain encrypted information about each operation performed on the server.","title":"Log information"},{"location":"en-US/2.operating/8.manage-database/#server-log","text":"Server logs track server status (such as server startup/stop), and the requests that the server has provided and their corresponding responses. The details of server logs can be configured using the 'verbose' option. The log location is specified in the 'log_dir' option. The default 'verbose' level is' 1 '. Under this level, the server only prints logs about major events, such as server startup/stop. Requests and responses are not logged at this level.","title":"Server log"},{"location":"en-US/2.operating/8.manage-database/#audit-log","text":"Audit logs record each request and response, as well as the user who sent the request and when the request received. Audit logging can only be turned on or off. The results can be queried using the TuGraph visualization tool and the REST API.","title":"Audit log"},{"location":"en-US/2.operating/8.manage-database/#data-export","text":"TuGraph can use the tool 'lgraph_export' to export data from the database that has been imported successfully. The 'lgraph_export' tool can export the data of the specified TuGraph database to the specified directory in the form of 'csv' or 'json' file, and export the configuration file 'import.config'. That required for re-importing the data. Detailed description see [] configuration file (# % E9%85% AE BD E7 8 d % % % % E6%96% % 87% % E4 BB B6). The following is an example of a command for the tool: $ lgraph_export -d {database_dir} -e {export_destination_dir} -g {graph_to_use} -u {username} -p {password} -f {output_format} Details: '-d {database_dir}' specifies the directory of the database from which the data will be exported. The default value is./testdb '. '-e {export_destination_dir}' specifies the directory where the export file is stored. The default value is./exportdir. '-g {graph_to_use}' specifies the type of graph database. default is' default '. '-u {username}' Specifies the name of the user who performs the export operation. '-p {password}' Specifies the password of the user who performs the export operation. '-s {field_separator}' specifies the separator for the exported file. The default is comma. '-f {output_format}' specifies the format of the exported data. It can be 'json' or 'csv'. '-h' In addition to the specified parameters, you can also use this parameter to view the help of the tool.","title":"Data export"},{"location":"en-US/2.operating/8.manage-database/#data-backup","text":"TuGraph can use the 'lgraph_backup' tool to backup data. The 'lgraph_backup' tool can backup data from a TuGraph database to another directory. It can be used as follows: $ lgraph_backup -s {source_dir} -d {destination_dir} -c {true/false} Details: '-s {source_dir}' specifies the directory where the database (source database) to be backed up resides. '-d {destination_dir}' specifies the directory where the backup file (destination database) is stored. If the target database is not empty, 'lgraph_backup' prompts you whether to overwrite the database. '-c {true/false}' indicates whether a compaction occurs during backup. Every compaction creates a tighter backup, but every compaction takes longer to create. This option defaults to 'true'.","title":"Data backup"},{"location":"en-US/2.operating/8.manage-database/#data-warm-up","text":"TuGraph is a disk-based database where data loaded into memory only when accessed. Therefore, for a period of time after the server just turned on, the system performance may be degraded due to frequent IO operations. At this point, we can improve this problem by data warm-up. Data warmup can be done using the tool lgraph_warmup. An example of its use is as follows: $ lgraph_warmup -d {directory} -g {graph_list} Details: The - '-d {db_dir}' option specifies the data directory for the TuGraph server The - '-g {graph_list}' option specifies the names of graphs to be warmed-up, separated by commas The warm-up process takes different times depending on the data size and the type of disk being used. Preheating a large database on a mechanical disk may take a long time. Please wait patiently.","title":"Data Warm-up"},{"location":"en-US/2.operating/9.privilege/","text":"User rights Management Introduce The permissions of TuGraph are managed based on role-based access control. The permissions that define access control are assigned to roles, and the roles are then assigned to users. Level of permissions Global layer: indicates global permissions, which have permissions for management and graph operations. Graph layer: control permissions on each graph; Property level (Commercial version only) : control permissions on a property Permission keyword At present, the control of permissions is relatively simple The Global layer currently has admin permission, and the admin user is preset. The Graph layer has four operation permissions: none, read, write, and full none: No permission, no operation permission for the graph read: Read-only permission, only has read permission for the graph write: Read and write permission, not only has read permission for the graph, but also has write permission full: All permissions, not only have read and write permissions for graphs, but also have permissions to delete graphs, modify graphs, and modify schemas The Property layer (Commercial version only) has the following permissions: none, read, and write none: No permission, no operation permission for the property read: Read-only permission, only has read permission for the property write: Read and write permission, not only has read permission for the property, but also has write permission Common permission operations User action Creating a user CALL dbms.security.createUser(user_name::STRING,password::STRING) Deleting a user CALL dbms.security.deleteUser(user_name::STRING) Change the password of the current user CALL dbms.security.changePassword(current_password::STRING,new_password::STRING) Changes the password of a specified user CALL dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) Disable or enable a user CALL dbms.security.disableUser(user::STRING,disable::BOOLEAN) List all users CALL dbms.security.listUsers() Lists the current user information CALL dbms.security.showCurrentUser() Obtain user details CALL dbms.security.getUserInfo(user::STRING) # Role actions Create a role CALL dbms.security.createRole(role_name::STRING,desc::STRING) Delete a role CALL dbms.security.deleteRole(role_name::STRING List all characters CALL dbms.security.listRoles() Disable or enable the role CALL dbms.security.disableRole(role::STRING,disable::BOOLEAN) Assign roles to users Adds the association between the user and the role CALL dbms.security.addUserRoles(user::STRING,roles::LIST) Deletes the association between the user and the role CALL dbms.security.deleteUserRoles(user::STRING,roles::LIST) Clears the relationship between user roles and rebuilds them CALL dbms.security.rebuildUserRoles(user::STRING,roles::LIST) Role empowerment Modifies the access permission of a role to a specified graph CALL dbms.security.modSpecifiedAccessLevel(role::STRING,access_level::MAP)","title":"Privilege"},{"location":"en-US/2.operating/9.privilege/#user-rights-management","text":"","title":"User rights Management"},{"location":"en-US/2.operating/9.privilege/#introduce","text":"The permissions of TuGraph are managed based on role-based access control. The permissions that define access control are assigned to roles, and the roles are then assigned to users.","title":"Introduce"},{"location":"en-US/2.operating/9.privilege/#level-of-permissions","text":"Global layer: indicates global permissions, which have permissions for management and graph operations. Graph layer: control permissions on each graph; Property level (Commercial version only) : control permissions on a property","title":"Level of permissions"},{"location":"en-US/2.operating/9.privilege/#permission-keyword","text":"At present, the control of permissions is relatively simple The Global layer currently has admin permission, and the admin user is preset. The Graph layer has four operation permissions: none, read, write, and full none: No permission, no operation permission for the graph read: Read-only permission, only has read permission for the graph write: Read and write permission, not only has read permission for the graph, but also has write permission full: All permissions, not only have read and write permissions for graphs, but also have permissions to delete graphs, modify graphs, and modify schemas The Property layer (Commercial version only) has the following permissions: none, read, and write none: No permission, no operation permission for the property read: Read-only permission, only has read permission for the property write: Read and write permission, not only has read permission for the property, but also has write permission","title":"Permission keyword"},{"location":"en-US/2.operating/9.privilege/#common-permission-operations","text":"","title":"Common permission operations"},{"location":"en-US/2.operating/9.privilege/#user-action","text":"Creating a user CALL dbms.security.createUser(user_name::STRING,password::STRING) Deleting a user CALL dbms.security.deleteUser(user_name::STRING) Change the password of the current user CALL dbms.security.changePassword(current_password::STRING,new_password::STRING) Changes the password of a specified user CALL dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) Disable or enable a user CALL dbms.security.disableUser(user::STRING,disable::BOOLEAN) List all users CALL dbms.security.listUsers() Lists the current user information CALL dbms.security.showCurrentUser() Obtain user details CALL dbms.security.getUserInfo(user::STRING)","title":"User action"},{"location":"en-US/2.operating/9.privilege/#role-actions","text":"Create a role CALL dbms.security.createRole(role_name::STRING,desc::STRING) Delete a role CALL dbms.security.deleteRole(role_name::STRING List all characters CALL dbms.security.listRoles() Disable or enable the role CALL dbms.security.disableRole(role::STRING,disable::BOOLEAN)","title":"# Role actions"},{"location":"en-US/2.operating/9.privilege/#assign-roles-to-users","text":"Adds the association between the user and the role CALL dbms.security.addUserRoles(user::STRING,roles::LIST) Deletes the association between the user and the role CALL dbms.security.deleteUserRoles(user::STRING,roles::LIST) Clears the relationship between user roles and rebuilds them CALL dbms.security.rebuildUserRoles(user::STRING,roles::LIST)","title":"Assign roles to users"},{"location":"en-US/2.operating/9.privilege/#role-empowerment","text":"Modifies the access permission of a role to a specified graph CALL dbms.security.modSpecifiedAccessLevel(role::STRING,access_level::MAP)","title":"Role empowerment"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/","text":"tugraph_cypher Instructions This document describes the use of the lgraph_cypher The TuGraph release comes with a query client named 'lgraph_cypher' that can be used to submit OpenCypher requests to the TuGraph server. The 'lgraph_cypher' client has two execution modes: single command mode and interactive mode. Single command mode In single-command mode, 'lgraph_cypher' can be used to submit a single Cypher query and print the result directly to the terminal. The printed result can also be easily redirected to a specified file. This is handy when users need to get a lot of results from the server and save them in files. In this mode, the 'lgraph_cypher' tool has the following options: Command line Parameters: Parameter Type Instructions --help \\ List all parameters and descriptions. -example \\ List the command instances. -c string A database configuration file used to obtain ip and port information. -h string Database server IP address. Omit this parameter if you have a configuration file. The default value is' 127.0.0.1 ' -p string Database server port. Omit this parameter if you have a configuration file. The default value is 7071 -u string User name for logging in to the database. -P string Password for logging in to the database. -f string Contains the path to a single Cypher query single text file. -s string Single-line cypher query command. Start and end with \" . -t int Specifies the server timeout threshold for cypher queries. The default value is 150 seconds. -format string Query result display mode. Supports two formats: 'plain' and 'table'. The 'plain' format prints the query results in a single column. The 'table' format displays the query results in a tabular format. The default value is' table ' Examples: cypher command file query: $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -f /home/usr/cypher.json cypher command single-sentence query: $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" Interactive mode 'lgraph_cypher' can also be run in interactive mode. In interactive mode, the client stays connected to the server and interacts with the user in read-evaluate-print-loop. Enter lgraph_cypher interaction mode: If no '-f' or '-s' command line option added, 'lgraph_cypher' will enter interactive mode when running. how to use it: $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u admin -P 73@TuGraph If the login is successful, the corresponding login success message will be displayed: ********************************************************************** * TuGraph Graph Database X.Y.Z * * * * Copyright(C) 2018 Ant Group. All rights reserved. * * * ********************************************************************** login success ---------------------------------- Host: 127.0.0.1 Port: 7071 Username: admin ---------------------------------- type \":help\" to see all commands. > Now we also provide an interactive shell for users to enter Cypher queries or use the ':help' command to check for available commands. Command Description In addition to the Cypher query, the shell of 'lgraph_cypher' accepts the following commands: Command Parameters instructions :help \\ Displays the server information and the corresponding description of all commands. :db_info \\ Query the current server status. /db/info for the corresponding REST API. :clear \\ Clear the screen. :use {Graph Name} The graph specified with this name defaults to default :source -t {Query the timeout value} -f {The query file} cypher command file query in interactive mode. The default timeout threshold is 150 seconds. Query file format reference No interactive query parameters. :exit \\ Exit interactive mode and return to the original command line. :format plain or table Change the display mode of cypher query results. Support 'plain' and 'table' modes. :save all/command/result -f {The file path} {Cypher} The cypher command (command), query result (result) or both (all) are stored. The default location is' /saved_cypher.txt ' Note: Each command should start with a colon : . :save command example : :save all -f /home/usr/saved.txt match (n) where return n, n.name limit 1000 cypher query command: In interactive mode, users can also directly input a single sentence cypher command for query, with \"'; ` \"end. Enter commands that are case insensitive. Here's an example: login success >MATCH (n) RETURN n, n.name; +---+---+-------------+ | | n |n.name | +---+---+-------------+ | 0 | 0 |david | | 1 | 1 |Ann | | 2 | 2 |first movie | | 3 | 3 |Andres | +---+---+-------------+ time spent: 0.000520706176758 size of query: 4 > lgraph_cypher supports multi-line input when typing commands. Users can use the ENTER key to type long query statements into multiple lines. In the case of multi-line input, the beginning of the command line will change from > to => , and the user can continue to type the rest of the query. Example: login success >MATCH (n) =>WHERE n.uid='M11' =>RETURN n, n.name; Auxiliary Features: Input History: Press the up and down arrow keys in interactive mode to display the input history. Auto Completion: lgraph_cypher will automatically complete based on the input history. In the event of a completion prompt, pressing the right arrow key will automatically complete the command.","title":"TuGraph Cypher"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#tugraph_cypher-instructions","text":"This document describes the use of the lgraph_cypher The TuGraph release comes with a query client named 'lgraph_cypher' that can be used to submit OpenCypher requests to the TuGraph server. The 'lgraph_cypher' client has two execution modes: single command mode and interactive mode.","title":"tugraph_cypher Instructions"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#single-command-mode","text":"In single-command mode, 'lgraph_cypher' can be used to submit a single Cypher query and print the result directly to the terminal. The printed result can also be easily redirected to a specified file. This is handy when users need to get a lot of results from the server and save them in files. In this mode, the 'lgraph_cypher' tool has the following options:","title":"Single command mode"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#command-line-parameters","text":"Parameter Type Instructions --help \\ List all parameters and descriptions. -example \\ List the command instances. -c string A database configuration file used to obtain ip and port information. -h string Database server IP address. Omit this parameter if you have a configuration file. The default value is' 127.0.0.1 ' -p string Database server port. Omit this parameter if you have a configuration file. The default value is 7071 -u string User name for logging in to the database. -P string Password for logging in to the database. -f string Contains the path to a single Cypher query single text file. -s string Single-line cypher query command. Start and end with \" . -t int Specifies the server timeout threshold for cypher queries. The default value is 150 seconds. -format string Query result display mode. Supports two formats: 'plain' and 'table'. The 'plain' format prints the query results in a single column. The 'table' format displays the query results in a tabular format. The default value is' table '","title":"Command line Parameters:"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#examples","text":"cypher command file query: $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -f /home/usr/cypher.json cypher command single-sentence query: $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\"","title":"Examples:"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#interactive-mode","text":"'lgraph_cypher' can also be run in interactive mode. In interactive mode, the client stays connected to the server and interacts with the user in read-evaluate-print-loop.","title":"Interactive mode"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#enter-lgraph_cypher-interaction-mode","text":"If no '-f' or '-s' command line option added, 'lgraph_cypher' will enter interactive mode when running. how to use it: $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u admin -P 73@TuGraph If the login is successful, the corresponding login success message will be displayed: ********************************************************************** * TuGraph Graph Database X.Y.Z * * * * Copyright(C) 2018 Ant Group. All rights reserved. * * * ********************************************************************** login success ---------------------------------- Host: 127.0.0.1 Port: 7071 Username: admin ---------------------------------- type \":help\" to see all commands. > Now we also provide an interactive shell for users to enter Cypher queries or use the ':help' command to check for available commands.","title":"Enter lgraph_cypher interaction mode:"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#command-description","text":"In addition to the Cypher query, the shell of 'lgraph_cypher' accepts the following commands: Command Parameters instructions :help \\ Displays the server information and the corresponding description of all commands. :db_info \\ Query the current server status. /db/info for the corresponding REST API. :clear \\ Clear the screen. :use {Graph Name} The graph specified with this name defaults to default :source -t {Query the timeout value} -f {The query file} cypher command file query in interactive mode. The default timeout threshold is 150 seconds. Query file format reference No interactive query parameters. :exit \\ Exit interactive mode and return to the original command line. :format plain or table Change the display mode of cypher query results. Support 'plain' and 'table' modes. :save all/command/result -f {The file path} {Cypher} The cypher command (command), query result (result) or both (all) are stored. The default location is' /saved_cypher.txt ' Note: Each command should start with a colon : . :save command example : :save all -f /home/usr/saved.txt match (n) where return n, n.name limit 1000","title":"Command Description"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#cypher-query-command","text":"In interactive mode, users can also directly input a single sentence cypher command for query, with \"'; ` \"end. Enter commands that are case insensitive. Here's an example: login success >MATCH (n) RETURN n, n.name; +---+---+-------------+ | | n |n.name | +---+---+-------------+ | 0 | 0 |david | | 1 | 1 |Ann | | 2 | 2 |first movie | | 3 | 3 |Andres | +---+---+-------------+ time spent: 0.000520706176758 size of query: 4 > lgraph_cypher supports multi-line input when typing commands. Users can use the ENTER key to type long query statements into multiple lines. In the case of multi-line input, the beginning of the command line will change from > to => , and the user can continue to type the rest of the query. Example: login success >MATCH (n) =>WHERE n.uid='M11' =>RETURN n, n.name;","title":"cypher query command:"},{"location":"en-US/2.operating/6.tools/1.tugraph-cypher/#auxiliary-features","text":"Input History: Press the up and down arrow keys in interactive mode to display the input history. Auto Completion: lgraph_cypher will automatically complete based on the input history. In the event of a completion prompt, pressing the right arrow key will automatically complete the command.","title":"Auxiliary Features:"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/","text":"TuGraph Browser This document focuses on the use of TuGraph Browser Definition TuGraph Browser is a visual development tool provided by TuGraph. Functionality TuGraph Browser provides graph database developers with functions such as visual graph data development, graph data management and maintenance. How to use it 1. Connect to the database When the user completes the installation of the graph database, you can access it through the Browser, TuGraph Browser tool. The user only needs to type in the browser address bar: IP of the server where TuGraph is located :Port. The default port is 7090. 2. Login When the page is opened successfully, the first thing you see is the login page, and the user needs to fill in the account number and password to log in. Default account: admin Default password: 73@TuGraph It is recommended that users change the initialized password in time after logging in 3. Workbench 3.1 Quick Start When you log in for the first time, the system will create an empty graph by default The user clicks on the help option and selects Get Started quickly Then click \"One-click Create Model\" -- >\" One-click Create Data \"to complete the construction of the built-in Movie data graph 3.2 Create subgraphs and examples 3.2.1 Create a subgraph Click on New subgraph Fill in the form information Subgraph name Subgraph description Configuration information Click OK to prompt that creation succeeded Toggle the subgraph Click New Example Select the example and click Create 3.3 query 3.3.1 User Interface Layout Cypher input box Result set display area 3.3.2 Result set display area function details Result set tag display and functions All types of statistics for the result set are shown here Click on the different \"label\" to make the following changes -Change the display color Modify the node size or edge thickness Modify default display properties or system properties Layout modification Force guide layout Grid layout Tree layout Environment layout edge polymerization Edges of the same type and direction can be merged Create nodes Click the Create Node button Select the node type Add node content Create relationships Select start and end points in the canvas Select the type that can be matched Enter node information Stop layout When too much data is causing the browser page to stall, you can click this stop layout button to improve the smoothness of the experience Mouse hover Enable this feature to highlight the one-degree neighbors of the mouse-over node Result set export Result sets can be exported as png, json, csv three different file forms the refresh Clicking the refresh button will re-execute the initial cypher statement for the current page and refresh the result set Maximize - -Click Maximize button, the result set display area will be displayed in full screen Result set display mode switching Support graph, table and text modes 3.3.3 Schema model schema supports real-time addition, deletion, modification and query schema supports import and export 3.3.4 Data import Local data import Select the file encoding format Select a local CSV file Select the model for the corresponding node or edge Do the data mapping -Complete the data import 3.3.5 plug-in (Stored Procedure) Use of plug-ins Users can upload the plug-in program written locally, execute it in the visual page, and view the execution result Users can perform, uninstall, execute, and download plug-ins in the visualization page 3.3.6 Help where it records how TuGraph-browser is used 3.4 Console 3.4.1 Basic database information Displays basic database configuration information 3.4.2 Permission management A function module used to create users and roles. Users can manage permissions here 3.4.3 Live status This shows the database real-time status, including: CPU usage, memory usage, disk usage, number of data requests, disk IO 3.4.4 Task Management Here the user can see the task in execution and stop the task 3.4.5 Audit logs Database related audit logs recorded here, used to troubleshoot problems encountered in use","title":"TuGraph Browser"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#tugraph-browser","text":"This document focuses on the use of TuGraph Browser","title":"TuGraph Browser"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#definition","text":"TuGraph Browser is a visual development tool provided by TuGraph.","title":"Definition"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#functionality","text":"TuGraph Browser provides graph database developers with functions such as visual graph data development, graph data management and maintenance.","title":"Functionality"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#how-to-use-it","text":"","title":"How to use it"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#1-connect-to-the-database","text":"When the user completes the installation of the graph database, you can access it through the Browser, TuGraph Browser tool. The user only needs to type in the browser address bar: IP of the server where TuGraph is located :Port. The default port is 7090.","title":"1. Connect to the database"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#2-login","text":"When the page is opened successfully, the first thing you see is the login page, and the user needs to fill in the account number and password to log in. Default account: admin Default password: 73@TuGraph It is recommended that users change the initialized password in time after logging in","title":"2. Login"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#3-workbench","text":"","title":"3. Workbench"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#31-quick-start","text":"When you log in for the first time, the system will create an empty graph by default The user clicks on the help option and selects Get Started quickly Then click \"One-click Create Model\" -- >\" One-click Create Data \"to complete the construction of the built-in Movie data graph","title":"3.1 Quick Start"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#32-create-subgraphs-and-examples","text":"","title":"3.2 Create subgraphs and examples"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#321-create-a-subgraph","text":"Click on New subgraph Fill in the form information Subgraph name Subgraph description Configuration information Click OK to prompt that creation succeeded Toggle the subgraph Click New Example Select the example and click Create","title":"3.2.1 Create a subgraph"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#33-query","text":"","title":"3.3 query"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#331-user-interface-layout","text":"Cypher input box Result set display area","title":"3.3.1 User Interface Layout"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#332-result-set-display-area-function-details","text":"Result set tag display and functions All types of statistics for the result set are shown here Click on the different \"label\" to make the following changes -Change the display color Modify the node size or edge thickness Modify default display properties or system properties Layout modification Force guide layout Grid layout Tree layout Environment layout edge polymerization Edges of the same type and direction can be merged Create nodes Click the Create Node button Select the node type Add node content Create relationships Select start and end points in the canvas Select the type that can be matched Enter node information Stop layout When too much data is causing the browser page to stall, you can click this stop layout button to improve the smoothness of the experience Mouse hover Enable this feature to highlight the one-degree neighbors of the mouse-over node Result set export Result sets can be exported as png, json, csv three different file forms the refresh Clicking the refresh button will re-execute the initial cypher statement for the current page and refresh the result set Maximize - -Click Maximize button, the result set display area will be displayed in full screen Result set display mode switching Support graph, table and text modes","title":"3.3.2 Result set display area function details"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#333-schema","text":"model schema supports real-time addition, deletion, modification and query schema supports import and export","title":"3.3.3 Schema"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#334-data-import","text":"Local data import Select the file encoding format Select a local CSV file Select the model for the corresponding node or edge Do the data mapping -Complete the data import","title":"3.3.4 Data import"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#335-plug-in-stored-procedure","text":"Use of plug-ins Users can upload the plug-in program written locally, execute it in the visual page, and view the execution result Users can perform, uninstall, execute, and download plug-ins in the visualization page","title":"3.3.5 plug-in (Stored Procedure)"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#336-help","text":"where it records how TuGraph-browser is used","title":"3.3.6 Help"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#34-console","text":"","title":"3.4 Console"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#341-basic-database-information","text":"Displays basic database configuration information","title":"3.4.1 Basic database information"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#342-permission-management","text":"A function module used to create users and roles. Users can manage permissions here","title":"3.4.2 Permission management"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#343-live-status","text":"This shows the database real-time status, including: CPU usage, memory usage, disk usage, number of data requests, disk IO","title":"3.4.3 Live status"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#344-task-management","text":"Here the user can see the task in execution and stop the task","title":"3.4.4 Task Management"},{"location":"en-US/2.operating/6.tools/2.tugraph-browser/#345-audit-logs","text":"Database related audit logs recorded here, used to troubleshoot problems encountered in use","title":"3.4.5 Audit logs"},{"location":"en-US/2.operating/6.tools/3.tugraph-datax/","text":"TuGraph DataX Instructions This document mainly introduces the installation, compilation and usage examples of TuGraph DataX Introduction On the basis of Ali's open source DataX, TuGraph implements the support of writing plug-ins and jsonline data format, and other data sources can write data into TuGraph through DataX. DataX introduces reference [https://github.com/alibaba/DataX] (https://github.com/alibaba/DataX) Supported features include: Import TuGraph from various heterogeneous data sources such as MySQL, SQL Server,Oracle, PostgreSQL, HDFS, Hive, HBase, OTS, ODPS, Kafka and so on. Import TuGraph to the corresponding target source (to be developed) Compile and Install git clone git@code.alipay.com:fma/DataX.git mvn -U clean package assembly:assembly -Dmaven.test.skip=true The compiled DataX file is in the target directory Text data imported into TuGraph with DataX Using the data from the lgraph_import section of the TuGraph manual as an example, we have three csv data files, as follows: actors.csv nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang movies.csv tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 roles.csv nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 Then create three DataX job profiles: job_actors.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"actors.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" } ], \"files\": [ { \"label\": \"actor\", \"format\": \"JSON\", \"columns\": [\"aid\", \"name\"] } ] } } } ] } } job_movies.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"movies.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" }, { \"index\": 3, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } job_roles.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"roles.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\" }] } ], \"files\": [ { \"label\": \"play_in\", \"format\": \"JSON\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } } } ] } } /lgraph_server -c lgraph_standalone.json -d 'run' 'Start TuGraph and run the following commands in sequence: python3 datax/bin/datax.py job_actors.json python3 datax/bin/datax.py job_movies.json python3 datax/bin/datax.py job_roles.json MySQL's data imported into TuGraph with DataX We create the following table of movies under 'test' database CREATE TABLE `movies` ( `mid` varchar(200) NOT NULL, `name` varchar(100) NOT NULL, `year` int(11) NOT NULL, `rate` float(5,2) unsigned NOT NULL, PRIMARY KEY (`mid`) ); Insert some data into the table insert into test.movies (mid, name, year, rate) values ('tt0188766', 'King of Comedy', 1999, 7.3), ('tt0286112', 'Shaolin Soccer', 2001, 7.3), ('tt4701660', 'The Mermaid', 2016, 6.3); Create a DataX job configuration file job_mysql_to_tugraph.json Configuring Field { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"column\": [\"mid\", \"name\", \"year\", \"rate\"], \"splitPk\": \"mid\", \"connection\": [ { \"table\": [\"movies\"], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } Write simple sql { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"connection\": [ { \"querySql\": [ \"select mid, name, year, rate from test.movies where year > 2000;\" ], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } ./lgraph_server -c lgraph_standalone.json -d 'run' Start TuGraph and run the following command\uff1a python3 datax/bin/datax.py job_mysql_to_tugraph.json","title":"TuGraph DataX"},{"location":"en-US/2.operating/6.tools/3.tugraph-datax/#tugraph-datax-instructions","text":"This document mainly introduces the installation, compilation and usage examples of TuGraph DataX","title":"TuGraph DataX Instructions"},{"location":"en-US/2.operating/6.tools/3.tugraph-datax/#introduction","text":"On the basis of Ali's open source DataX, TuGraph implements the support of writing plug-ins and jsonline data format, and other data sources can write data into TuGraph through DataX. DataX introduces reference [https://github.com/alibaba/DataX] (https://github.com/alibaba/DataX) Supported features include: Import TuGraph from various heterogeneous data sources such as MySQL, SQL Server,Oracle, PostgreSQL, HDFS, Hive, HBase, OTS, ODPS, Kafka and so on. Import TuGraph to the corresponding target source (to be developed)","title":"Introduction"},{"location":"en-US/2.operating/6.tools/3.tugraph-datax/#compile-and-install","text":"git clone git@code.alipay.com:fma/DataX.git mvn -U clean package assembly:assembly -Dmaven.test.skip=true The compiled DataX file is in the target directory","title":"Compile and Install"},{"location":"en-US/2.operating/6.tools/3.tugraph-datax/#text-data-imported-into-tugraph-with-datax","text":"Using the data from the lgraph_import section of the TuGraph manual as an example, we have three csv data files, as follows: actors.csv nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang movies.csv tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 roles.csv nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 Then create three DataX job profiles: job_actors.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"actors.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" } ], \"files\": [ { \"label\": \"actor\", \"format\": \"JSON\", \"columns\": [\"aid\", \"name\"] } ] } } } ] } } job_movies.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"movies.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" }, { \"index\": 3, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } job_roles.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"roles.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\" }] } ], \"files\": [ { \"label\": \"play_in\", \"format\": \"JSON\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } } } ] } } /lgraph_server -c lgraph_standalone.json -d 'run' 'Start TuGraph and run the following commands in sequence: python3 datax/bin/datax.py job_actors.json python3 datax/bin/datax.py job_movies.json python3 datax/bin/datax.py job_roles.json","title":"Text data imported into TuGraph with DataX"},{"location":"en-US/2.operating/6.tools/3.tugraph-datax/#mysqls-data-imported-into-tugraph-with-datax","text":"We create the following table of movies under 'test' database CREATE TABLE `movies` ( `mid` varchar(200) NOT NULL, `name` varchar(100) NOT NULL, `year` int(11) NOT NULL, `rate` float(5,2) unsigned NOT NULL, PRIMARY KEY (`mid`) ); Insert some data into the table insert into test.movies (mid, name, year, rate) values ('tt0188766', 'King of Comedy', 1999, 7.3), ('tt0286112', 'Shaolin Soccer', 2001, 7.3), ('tt4701660', 'The Mermaid', 2016, 6.3); Create a DataX job configuration file job_mysql_to_tugraph.json Configuring Field { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"column\": [\"mid\", \"name\", \"year\", \"rate\"], \"splitPk\": \"mid\", \"connection\": [ { \"table\": [\"movies\"], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } Write simple sql { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"connection\": [ { \"querySql\": [ \"select mid, name, year, rate from test.movies where year > 2000;\" ], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } ./lgraph_server -c lgraph_standalone.json -d 'run' Start TuGraph and run the following command\uff1a python3 datax/bin/datax.py job_mysql_to_tugraph.json","title":"MySQL's data imported into TuGraph with DataX"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/","text":"TuGraph Explore Instructions TuGraph Explore is strongly dependent on TuGraph, so before starting Explore, we need to start TuGraph first. Introduction to TuGraph TuGraph is a graph database independently developed by Ant Group, which provides graph database engine and graph analysis engine. Its main features are large data storage and computation, and it also supports efficient online transaction processing (OLTP) and Online analysis processing (OLAP). Install TuGraph Refer to the official documentation () for more information. TuGraph needs to be installed via Docker Image, follow these steps to install it locally: install local Docker environment: reference official documentation ; $ sudo docker --version If the above command can print the docker version number successfully, it indicates that the docker environment has been installed. To download TuGraph images: Download TuGraph Image Currently, TuGraph provides an image file based on Ubuntu 16.04 LTS and CenterOS 7.3. The image file is a compressed file named lgraph_x.y.z.ar, where x.y.z is the version number of TuGraph. Load the TuGraph image: // lgraph_lastest.tar.gz \u662f TuGraph \u955c\u50cf\u6587\u4ef6\u540d $ docker import lgraph_lastest.tar.gz // After the loading is complete, a message is displayed indicating that the image has been loaded Start Docker $ docker run -d -v {host_data_dir}:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:x.y.z $ docker exec -it {container_id} bash // host_data_dir = /Users/moyee/tugraph // container_id = xxx $ docker run -d -v /Users/moyee/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.1.1 $ docker exec -it xxx bash Parameter Description -v volume mapping {host_data_dir} is a directory where the user wants to store data, such as/home/user1/workspace -p The function of Docker is port mapping. The example maps Docker's port 7090 to the local port 7090 {container_id} is the container id of Docker, which can be obtained through docker ps TuGraph operation Start TuGraph Service $ lgraph_server --license /mnt/fma.lic --config ~/demo/movie/lgraph.json fma.lic is the authorization file, should be placed in {host_data_dir} folder, mapped to the /mnt directory of docker lgraph.json is the configuration file for TuGraph TuGraph Browser Query TuGraph Browser Is a visual query tool provided by TuGraph. Users can open the browser, type {IP}:{Port}, enter the default username by 'admin', password by '73@TuGraph' to complete the login. Enter the TuGraph Query page after successful login. Introduction to TuGraph Explore TuGraph Explore is a GraphInsight based visual graph analysis platform that provides complete graph exploration and analysis capabilities to help users gain valuable insights from massive graph data. Start TuGraph Explore Once TuGraph is installed successfully, you can start installing TuGraph Explore. Load TuGraph Explore image\uff1a // lgraph_lastest.tar.gz TuGraph image file name $ docker import tugraph_explore.tar.gz // After the loading is complete, a message is displayed indicating that the image has been loaded Start Docker $ docker run -d -p 7091:7091 -it reg.docker.alibaba-inc.com/tugraph-explore:1.0.1 $ docker exec -it {container_id} bash Parameter Description: -p The function of Docker is port mapping. In this example, Docker port 7091 is mapped to local port 7091 {container_id} is the id of a Docker container, which can be obtained through docker ps Start TuGraph Explore $ cd /usr/src/tugraphexplore $ npm run dev -- -p 7091 After the TuGraph Explore service started, it can be accessed through **http://localhost:7091/tugraph/explore.html** \uff0cIf everything is normal, you will see the following page. Connect TuGraph Once TuGraph Explore is up, the first step is to connect to the TuGraph database. Click the \"Connect\" button to bring up the page for connecting to the Graph database, as shown in the image below. To connect to TuGraph data, we need to provide the following information: Graph database account Graph database password Address of the graph database: The format is ip:port The IP address needs to be the container IP address, which can be queried by running the following command \u3002 $ docker run -d -v /Users/xx/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.3.0 $ docker exec -it 8408b49033bc1698(TuGraph container) bash $ cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.4 8408b543243bc69 As shown above, the address to connect the graph database should be filled in: 172.17.0.4:7090 \u3002","title":"TuGraph Explore"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#tugraph-explore-instructions","text":"TuGraph Explore is strongly dependent on TuGraph, so before starting Explore, we need to start TuGraph first.","title":"TuGraph Explore Instructions"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#introduction-to-tugraph","text":"TuGraph is a graph database independently developed by Ant Group, which provides graph database engine and graph analysis engine. Its main features are large data storage and computation, and it also supports efficient online transaction processing (OLTP) and Online analysis processing (OLAP).","title":"Introduction to TuGraph"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#install-tugraph","text":"Refer to the official documentation () for more information. TuGraph needs to be installed via Docker Image, follow these steps to install it locally: install local Docker environment: reference official documentation ; $ sudo docker --version If the above command can print the docker version number successfully, it indicates that the docker environment has been installed. To download TuGraph images: Download TuGraph Image Currently, TuGraph provides an image file based on Ubuntu 16.04 LTS and CenterOS 7.3. The image file is a compressed file named lgraph_x.y.z.ar, where x.y.z is the version number of TuGraph. Load the TuGraph image: // lgraph_lastest.tar.gz \u662f TuGraph \u955c\u50cf\u6587\u4ef6\u540d $ docker import lgraph_lastest.tar.gz // After the loading is complete, a message is displayed indicating that the image has been loaded Start Docker $ docker run -d -v {host_data_dir}:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:x.y.z $ docker exec -it {container_id} bash // host_data_dir = /Users/moyee/tugraph // container_id = xxx $ docker run -d -v /Users/moyee/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.1.1 $ docker exec -it xxx bash Parameter Description -v volume mapping {host_data_dir} is a directory where the user wants to store data, such as/home/user1/workspace -p The function of Docker is port mapping. The example maps Docker's port 7090 to the local port 7090 {container_id} is the container id of Docker, which can be obtained through docker ps","title":"Install TuGraph"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#tugraph-operation","text":"","title":"TuGraph operation"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#start-tugraph-service","text":"$ lgraph_server --license /mnt/fma.lic --config ~/demo/movie/lgraph.json fma.lic is the authorization file, should be placed in {host_data_dir} folder, mapped to the /mnt directory of docker lgraph.json is the configuration file for TuGraph","title":"Start TuGraph Service"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#tugraph-browser-query","text":"TuGraph Browser Is a visual query tool provided by TuGraph. Users can open the browser, type {IP}:{Port}, enter the default username by 'admin', password by '73@TuGraph' to complete the login. Enter the TuGraph Query page after successful login.","title":"TuGraph Browser Query"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#introduction-to-tugraph-explore","text":"TuGraph Explore is a GraphInsight based visual graph analysis platform that provides complete graph exploration and analysis capabilities to help users gain valuable insights from massive graph data.","title":"Introduction to TuGraph Explore"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#start-tugraph-explore","text":"Once TuGraph is installed successfully, you can start installing TuGraph Explore. Load TuGraph Explore image\uff1a // lgraph_lastest.tar.gz TuGraph image file name $ docker import tugraph_explore.tar.gz // After the loading is complete, a message is displayed indicating that the image has been loaded Start Docker $ docker run -d -p 7091:7091 -it reg.docker.alibaba-inc.com/tugraph-explore:1.0.1 $ docker exec -it {container_id} bash Parameter Description: -p The function of Docker is port mapping. In this example, Docker port 7091 is mapped to local port 7091 {container_id} is the id of a Docker container, which can be obtained through docker ps Start TuGraph Explore $ cd /usr/src/tugraphexplore $ npm run dev -- -p 7091 After the TuGraph Explore service started, it can be accessed through **http://localhost:7091/tugraph/explore.html** \uff0cIf everything is normal, you will see the following page.","title":"Start TuGraph Explore"},{"location":"en-US/2.operating/6.tools/4.tugraph-explore/#connect-tugraph","text":"Once TuGraph Explore is up, the first step is to connect to the TuGraph database. Click the \"Connect\" button to bring up the page for connecting to the Graph database, as shown in the image below. To connect to TuGraph data, we need to provide the following information: Graph database account Graph database password Address of the graph database: The format is ip:port The IP address needs to be the container IP address, which can be queried by running the following command \u3002 $ docker run -d -v /Users/xx/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.3.0 $ docker exec -it 8408b49033bc1698(TuGraph container) bash $ cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.4 8408b543243bc69 As shown above, the address to connect the graph database should be filled in: 172.17.0.4:7090 \u3002","title":"Connect TuGraph"},{"location":"en-US/3.developer-document/1.restful-api/","text":"TuGraph RESTful API This document describes how to call the Rest API of TuGrpah. Introduction TuGraph provides HTTP RESTful APIs, which allow users to access TuGraph servers through HTTP requests remotely. This document specifiers the TuGraph HTTP RESTful API. :warning: All the other RESTful APIs excluding the three below will be deprived after 4/30/2023. - Login - Query - Store Procedures Protocols And Data Format Protocols Both HTTP and HTTPS protocols are supported by TuGraph. The system uses HTTP protocol by default. To use HTTPS, the ssl_auth option should be set to true in the DB configuration. Request TuGraph supports HTTP GET/POST/PUT/DELETE requests, in which: GET requests are used for read-only requests, such as getting vertex properties, edge properties, etc. POST requests are used to create entities, submit Cypher, and to manage and call stored procedures; PUT requests are used to modify existing entities, for example, to modify vertex properties, edge properties, etc. DELETE requests are used to delete existing entities, such as vertices, edges, etc. In high-availability mode, users can set ServerVersion in the request header to make sure the request is never served with an outdated version. The current ServerVersion can be obtained from the header returned by the server. Response TuGraph returns the following HTTP status codes: 200 OK : operation is successful. 307 Temporary Redirect : the operation is redirected, typically in high-availability mode, to the master. 400 Bad Request : incorrect input, such as URI error, or invalid parameters. 500 Internal Server Error : server error. When the operation is successful, the JSON response contains the return value of the operation. When the operation is redirected, the location field in the returned HTTP header contains the redirect destination address. When an input error or server error occurs, the JSON response contains a error_message field that describes the error. In high-availability mode, the server will set server_version field in the header to inform the client of the data version of the current server. When clients switch between several different servers, this version number guarantees that the client will not read from an outdated server. Data Format The server and clients exchange data in JSON format. When sending a request, the header of the HTTP request should be set with Accept:application/json, Content-Type:app/json . For example, to create a new vertex, the request header should look like the following: Accept: application/json; charset=UTF-8 Content-Type: application/json server_version: 12 URI Format TuGraph REST API provides access to: web visualization, login, db info, label, index, node, relationship, cypher, task, cpp_plugin, and python_plugin. The URI format used for each function is as follows: URI Description /web web visualization /cypher cypher request /acl access control /user user management /login user login /info database status and information /task task management /db subgraph management For each subgraph, the following interfaces are provided: URI Description /db create, modify, and delete subgraph /db/ {graph_name} /node vertex operations /db/ {graph_name} /relationship edge operations /db/ {graph_name} /label label-related operations /db/ {graph_name} /index index-related operations /db/ {graph_name} /cypher subgraph-specific cypher operation /db/ {graph_name} /cpp_plugin C++ plugin(stored procedure) /db/ {graph_name} /python_plugin Python plugin(stored procedure) /db/ {graph_name} /import online import /db/ {graph_name} /misc other operations Login The system creates an administrator by default, whose username is admin and password is 73@TuGraph . For security reasons, please remember to change your password after first starting the server. User Login TuGraph provides JWT-based user authentication. To login to the server, a REST client should send login request with username and password. On success, the client will receive a signed token in the form of Json Web Token (JWT), which should be stored by the client and used for every request that follows. URI : /login METHOD : POST REQUEST : Field Description Type user username String password password String RESPONSE : Field Description Type jwt token String Example Request: \u2022 POST http://localhost:7070/login \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"user\":\"admin\", \"password\":\"73@TuGraph\" } Example Response: \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" } Token Refresh After the token expires, the front-end initiates a refresh token interface, and the back-end verifies the validity of the token. If the verification passes, a new token is generated; if the verification fails, status code 401 is returned. URI : /refresh METHOD : POST REQUEST : Field Description Type Authorization token String RESPONSE : Field Description Type jwt token String Example Request: \u2022 POST http://localhost:7070/refresh \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\": \"Bearer eyJhbGciOiJIUz32NiIsInR5cCI6IkpXVDJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byj3fYVAH4D88dfTD_zYQ_uAvdizTMek\" } Example Response: \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" } Logout The user logs out and deletes the token at the same time. URI : /logout METHOD : POST REQUEST : Field Description Type Authorization token String RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/refresh \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\" : \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJmbWEuYWkiLCJwYXNzd29yZCI6IjczQFR1R3JhcGgiLCJ1c2VyIjoiYWRtaW4ifQ.o_yb5veSJkuy-ieBp4MqTk-tC1grcKotgVbgNJ0TyTU\" } Example Response: \u2022 200: OK Query URI format is: http://{host}:{port}/cypher Call Cypher URI : /cypher METHOD : POST REQUEST : Field Description Type graph subgraph name String cypher Cypher query String RESPONSE : Field Description Type result running results List elapsed running time in seconds Float header header of the results List size number of results Integer in which header is a list with each element in the form of: Field Description Type name the name of column String type column data type, 0 is scalar, 1 is vertex id, 2 is vector Example Request: \u2022 POST http://localhost:7070/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n) RETURN n,n.name LIMIT 10\" } Example Response: \u2022 200: OK Output: { \"elapsed\": 0.001224517822265625, \"header\": [ { \"name\": \"n\", \"type\": 1 }, { \"name\": \"n.name\", \"type\": 0 } ] \"result\": [ [ 0, \"Rachel Kempson\" ], [ 1, \"Michael Redgrave\" ], [ 2, \"Vanessa Redgrave\" ] ], \"size\": 3 } Call Cypher with Parameters Cypher supports querying with parameters. When a Cypher query with parameters is called, TuGraph caches the execution plan for that query to speed up the following queries of the same kind. URI : /cypher METHOD : POST REQUEST : Field Description Type graph subgraph name String cypher Cypher query String parameters parameters List RESPONSE : Same as Call Cypher . Example Request: \u2022 POST http://localhost:7070/db/graph1/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n:Person {name:$param1}) RETURN n.birthyear\", \"parameters\": { \"$param1\": \"Lindsay Lohan\" } } Example Response: \u2022 200: OK Output: { \"elapsed\": 0.005886077880859375, \"header\": [ { \"name\": \"n.birthyear\", \"type\": 0 } ], \"result\": [ [ 1986 ] ], \"size\": 1 } Stored Procedures URI format is: http://{host}:{port}/db/{graph_name}/cpp_plugin|python_plugin Create Stored Procedure URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : POST REQUEST : Field Description Type name name of the plugin String description description of the plugin String code_base64 code of plugin encoded in base64 String read_only whether it is a read-only stored procedure Bool code_type type of plugin code, can be zip/cpp/so for cpp_plugin, while py for python_plugin String Note: read-only plugins are more efficient than write plugins. Always specify read-only=true for read-only transactions. RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.so}\", \"read_only\" : true, \"code_type\" : \"zip\" } Example Response: \u2022 200: OK List Stored Procedures URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : GET RESPONSE : A list in which each element is a plugin description, in the format of: Field Description Type name name of the stored procedure String description description of the stored procedure String read_only whether the stored procedure is read-only Bool Example Request: \u2022 GET http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Output: { [ { \"description\":\"adds a vertex label to the db\", \"name\":\"add_label\", \"read_only\":false }, { \"description\": \"scans graph and get number of edges\", \"name\": \"scan_graph\", \"read_only\": true } ] } Retrieve Stored Procedure Detail URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : GET RESPONSE : Procedure detail, including code, in the format of: Field Description Type name Procedure name String description Procedure descrition String read_only Read only or not Bool code_base64 \u5b58\u50a8\u8fc7\u7a0b\u7684\u4ee3\u7801 String, Base64 encoded code_type Type of procedue code, can be zip/cpp/so for cpp_plugin, while py for python_plugin String Example request. \u2022 GET http://localhost:7070/db/graph1/cpp_plugin/echo \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.zip}\", \"read_only\" : true, \"code_type\" : \"zip\" } Call Stored Procedure URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : POST REQUEST : String input. Field Description Type data input data String timeout timeout in seconds, defaults to 0, which means no timeout Float RESPONSE : Field Description Type result running results String Example Request: \u2022 POST http://localhost:7070/db/graph1/python_plugin/echo \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { data : \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\", timeout : 0, in_process : true } Example Response: \u2022 200: OK Output: { \"result\": \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\" } Delete Stored Procedure URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1/cpp_plugin/example_plugin \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Deprecated The APIs below will be removed after 4/30/2023. User Management Add User Add a new user and set the initial password for the user. Only administrators have permission to add new users. The username can only have letters, numbers, and underscores, and should not begin with a number. The password can contain any character. The username and password have a maximum length of 64 bytes. URI : /user METHOD : POST REQUEST : Field Description Type user username String password password String is_admin whether the user is an administrator or not Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"user\": \"USER1\", \"password\": \"AN_INITIAL_PASSWORD\", \"is_admin\": false } Example Response: \u2022 200: OK Change Password Users can change their own passwords, in which case the original password needs to be verified. Administrators can change the passwords of any user and promote non-admin users to administrators, or demote administrator users to regular users. When modifying another user's password, the original password of the user is not needed. URI : /user/{user_name} METHOD : PUT REQUEST : Field Description Type current_password user's current password, if modifying its own password String new_password user's new password String is_admin should this user be administrator or not, used when promoting or demoting users Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/user/user1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"current_password\": \"THE_CURRENT_PASSWORD\" \"new_password\": \"A_NEW_PASSWORD\" \"is_admin\": true } Example Response: \u2022 200: OK List All Users List all users of the database. Only administrators are allowed to perform this operation. URI : /user/ METHOD : GET RESPONSE : a dictionary of { user_name : is_admin } Example Request: \u2022 GET http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK Output: { \"admin\": true, \"guest1\": false } Delete User Delete a user from the DB. Only administrators have permission to do so. URI : /user/{user_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK Access Control TuGraph has four access levels. Different users can have different permissions for each subgraph. The four access levels are as follows: Access Level Description NONE no access READ read-only WRITE can read and write vertexes and edges of the subgraph FULL full access, including changing metadata (label, index), managing stored procedures and deleting all data in the subgraph Administrators have full access on all subgraphs, and a newly created non-admin user does not have access for any subgraph. Users who have full access on a subgraph can set the access level for other users on that subgraph. Query User's Access Level URI : /acl/?user={user_name}&graph={graph_name} METHOD : GET RESPONSE : When both user and graph are specified, the user's access level for the subgraph is returned, such as READ . When only user is specified, all subgraphs that the user can access (access level not NONE ) are returned, as well as the user's access level on the subgraph. When only graph is specified, all users who have access level on this graph (excluding administrators, who have implicit FULL access) and their access levels are returned. This operation requires administrator permission. Example Request: \u2022 GET http://localhost:7070/acl/?user=user1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"graph1\": \"READ\", \"graph2\": \"WRITE\", \"graph3\": \"FULL\" } Change User's Access Level URI : /acl METHOD : PUT REQUEST : Field Description Type user username String graph subgraph's name String acl access level String RESPONSE : if successful, return status code 200. Example Request: \u2022 PUT http://localhost:7070/acl \u2022 Accept: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"user\": \"user1\", \"graph\": \"graph1\", \"acl\": \"FULL\" } Example Response: \u2022 200: OK Remove User's Access Right This is equivalent to setting access level to NONE . URI : /acl/?user={user_name}&graph={graph_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/acl/?user=user1&graph=graph1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK Server Status Modify Server Configuration Modifying the server configuration will take effect immediately after the configuration modification and will affect all servers. These configurations take precedence over configuration files and command line arguments. URI : /config METHOD : PUT REQUEST : Field Description Type db_async Whether to enable asynchronous mode Bool optimistic_txn Whether to use optimistic transaction lock by default Bool enable_audit_log Whether to enable audit logging Bool RESPONSE : If successful, return status code 200. Example request. \u2022 PUT http://localhost:7070/config \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"db_async\": true, \"enable_audit_log\": false } Example response. \u2022 200: OK Current Server Status URI : /info METHOD : GET RESPONSE : Field Description Type lgraph_version TuGraph version String git_branch server's git branch String git_commit server's git commit version String web_commit web client commit version String cpp_id cpp compiler id String cpp_version cpp compiler version String python_version python lib version String cpu cpu information Dictionary, format refers CPU Status disk disk IO information Dictionary, format refers Disk Status memory memory information Dictionary, format refers Memory Status db_space graph database storage Dictionary, format refers Graph Database Storage db_config graph database configuration Dictionary, format refers Graph Database Configuration up_time database's online running time Integer Example Request: \u2022 GET http://localhost:7070/info \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"lgraph_version\": \"1.2.0\", \"git_branch\": \"master\", \"git_commit\": \"9e2977d\", \"web_commit\": \"1e2823d\", \"cpu_id\": \"GUN\", \"cpu_version\": \"4.8.5\", \"python_version\": \"3.2\", \"node\": \"/node\", \"relationship\": \"/relationship\", \"cpu\": { \"self\": 25, \"server\": 35, \"unit\": \"%\" }, \"disk\": { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" }, \"memory\": { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" }, \"db_space\": { \"space\": 57344, \"unit\": \"B\" }, \"db_config\": { \"db_async\": false, \"disable_auth\": false, \"enable_ha\": false, ... }, \"up_time\": 3235 } CPU Status URI : /info/cpu METHOD : GET RESPONSE : Field Description Type self TuGraph CPU usage Integer server server's CPU usage Integer unit metric unit String Example Request: \u2022 GET http://localhost:7070/info/cpu \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25, \"server\": 35, \"unit\": \"%\" } Disk Status URI : /info/disk METHOD : GET RESPONSE : Field Description Type read server's disk read rate Integer write server's disk wrtie rate Integer unit metric unit String Example request. \u2022 GET http://localhost:7070/info/disk \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" } Memory Status URI : /info/memory METHOD : GET RESPONSE : Field Description Type self TuGraph memory usage Integer server_avail server's available memory Integer server_total server's total memory Integer unit metric unit String Example Request: \u2022 GET http://localhost:7070/info/memory \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" } Database Size URI : /info/db_space METHOD : GET RESPONSE : Field Description Type space total size of the database Integer unit metric unit String Example Request: \u2022 GET http://localhost:7070/info/db_space \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"space\": 57344, \"unit\": \"B\" } DB Configuration URI : /info/db_config METHOD : GET RESPONSE : Field Description Type async asynchronous mode Bool disable_auth whether to disable authentication Bool enable_ha whether to enable high-availability mode Bool enable_rpc whether to enable RPC server Bool host bound host address String port port of REST server Integer rpc_port port of RPC server Integer thread_limit limit of available threads for the graph database Integer use_ssl whether to use SSL for authentication Bool verbose verbose level of the output Integer Example Request: \u2022 GET http://localhost:7070/info/db_config \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"async\":false, \"disable_auth\":false, \"enable_ha\":false, \"enable_rpc\":false, \"host\":\"127.0.0.1\", \"port\":7070, \"rpc_port\":9091, \"thread_limit\":0, \"use_ssl\":false, \"verbose\":2 } High Availability Server List Get a list of replication servers. Valid only in high-availability mode. URI : /info/peers METHOD : GET RESPONSE : if successful, return status code 200 and a list of server information, each of server information is formatted as: Field Description Type rpc_address server's RPC address String rest_address server's REST address String state server state String The server state can be MASTER , SLAVE , or OFFLINE . Example Request: \u2022 GET http://localhost:7070/info/peers \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\", \"state\":\"MASTER\" }, { \"rest_address\":\"192.168.1.22:17072\", \"rpc_address\":\"192.168.1.22:19092\", \"state\":\"SLAVE\" } ] } Current Leader Information Get information of current leader. Valid only in HA mode. URI : /info/leader METHOD : GET RESPONSE : if successful, return status code 200 and the current leader server information, which is formatted as: Field Description Type rpc_address server's RPC address String rest_address server's REST address String Example Request: \u2022 GET http://localhost:7070/info/leader \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\" } Server Statistics URI : /info/statistics METHOD : GET RESPONSE : if successful, return status code 200 and the current server statistics, which is formatted as: Field Description Type requests/second number of requests processed per second Float writes/second number of write requests processed per second Float running_tasks number of requests in progress Integer failure_rate request failure rate Float Example Request: \u2022 GET http://localhost:7070/info/statistics \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"failure_rate\": 0.023, \"requests/second\": 122.3, \"running_tasks\": 10, \"writes/second\": 12.4 } Get Audit Logs URI : /info/log/?begin_time={begin_time}&end_time={end_time}&user={user}&num_log={num_log}&descending_order={descending_order} Field Description Type begin_time start time of the queried log (required, format YYYY-mm-dd HH:MM:SS) Timestamp end_time end time of the queried log (default is current time, format YYYY-mm-dd HH:MM:SS) Timestamp user the operator of the queried log (administrator can query all users' logs, ordinary users can only query their own logs) String num_log maximum number of logs to return (default 100) Integer descending_order whether to sort the result in descending order(default is true) Bool METHOD : GET RESPONSE : if successful, return status code 200 and a list of audit logs, each of which is an action log in the format of: Field Description Type index the index of the operation Integer begin_time the start time of the operation String end_time the end time of the operation String user the user of the operation String graph the graph of the operation String type the type of the operation String read_write the operation is read operation or write operation String success whether the operation is successful Bool content the content of the operation String Example Request: \u2022 GET http://localhost:7070/info/log/?begin_time=2020-02-17%2015:00:00&end_time=2020-02-20%2012:00:00&user=admin&num_log=100&descending_order=false \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"post /login Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"\", \"index\": 1, \"read_write\": \"read\", \"success\": true, \"type\": \"Security\", \"user\":\"admin\" }, { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"Load plugin : `echo` Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"default\", \"index\": 2, \"read_write\": \"write\", \"success\": true, \"type\": \"Plugin\", \"user\": \"admin\" }, ... ] } Task Management TuGraph tracks long-running tasks such as complex Cypher queries and plugins. Administrators can query currently running tasks through the REST API and choose to abort the queries if necessary. The URI format for task management is : http://{host}:{port}/task/{task_id} List Running Tasks URI : /task METHOD : GET RESPONSE : The returned JSON is an array, each of which is formatted as follows: Field Description Type description the description of the task String time_elapsed time the task has been executing for, in seconds Float task_id the ID of the task String Example Request: \u2022 GET http://localhost:7070/task \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"description\" : \"[CPP_PLUGIN] scan_graph\", \"time_elapsed\" : 13.987, \"task_id\" : \"3_10\" }, { \"description\" : \"[CYPHER] MATCH(n) return n\", \"time_elapsed\" : 30.887, \"task_id\" : \"2_6\" } ] } Abort Task URI : /task/{task_id} Where task_id is the task_id returned by GET /task . METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/task/3_10 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Subgraph Management TuGraph supports multiple subgraphs and all subgraphs are completely independent from others. Different subgraphs can have different permissions to different users. Administrators can add, modify and delete subgraphs. Create New Subgraph URI : /db METHOD : POST REQUEST : Field Description Type name the name of subgraph String config the configuration of subgraph Dictionary, in the format of {{column name 1}:{column value 1},...} RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"graph1\" \"config\" : { \"max_size_GB\":2048, \"async\":True } } Example Response: \u2022 200: OK Delete Subgraph URI : /db/{graph_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1 Example Response: \u2022 200: OK List All Subgraphs URI : /db METHOD : GET RESPONSE : The list of all subgraphs. Example Request: \u2022 GET http://localhost:7070/db Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"graph1\": { \"max_size_gb\":1024, \"async\":false } } Label TuGraph is a strong-schema database. In each subgraph, each vertex and edge need to have a predefined data format. The data format is determined by Label. Users can use the REST API to add, delete, and query labels and their corresponding data format. The URI format of the Label operation is http://{host}:{port}/db/{graph_name}/label/{type}/{label_name} Where the {type} can be node or relationship . Create Label A label is created with a fixed data format. A label must be defined before any node or relationship can be created with that label. URI : /db/{graph_name}/label METHOD : POST REQUEST : Field Description Type name the name of label String fields data column definition List is_vertex whether it is a vertex Label Bool primary vertex primary property String edge_constraints edge constraints List primary should be set when is_vertex is true . This field is only available for Vertex, and must be set when creating Vertex. edge_constraints could be set when is_vertex is false , This field is only available for Edge. This field limits the combination of starting and ending vertex of the edge, for example: [[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]] , which limits the edge direction can only be from vertex_label1 to vertex_label2 or from vertex_label3 to vertex_label4 . If you don't want to have any constraints, just leave this field unset. In which fields is an array, in which each element defines a column of data, as follows: Field Description Type name the name of the column String type the data type of the column String, with following types: int8, int16, int32, int64, float, double, string, date, datetime, binary, blob optional whether the data can be empty (optional, default is false) Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"Actor\", \"fields\": [ {\"name\":\"uid\", \"type\":\"int64\", \"optional\":false}, {\"name\":\"name\", \"type\":\"string\", \"optional\":true} ], \"is_vertex\":true, \"primary\" : \"uid\" } Example Response: \u2022 200: OK List All Labels URI : /db/{graph_name}/label METHOD : GET RESPONSE : Field Description Type edge the list of edge labels List vertex the list of vertex labels List Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"edge\": [ \"HAS_CHILD\", \"MARRIED\", \"BORN_IN\", \"DIRECTED\", \"WROTE_MUSIC_FOR\", \"ACTED_IN\" ], \"vertex\": [ \"Person\", \"City\", \"Film\" ] } Get Label Data Format URI : /db/{graph_name}/label/{[node|relationship]}/{label_name} METHOD : GET RESPONSE : Data column definition table as a dictionary, in which each key is the column name, and corresponding value is the column definition defined as follows: Field Description Type optional whether the column value can be empty Bool type the type of the column value String Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/label/node/person \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"age\":{ \"optional\":false, \"type\":\"int16\" }, \"id\":{ \"optional\":false, \"type\":\"int8\" }, \"name\":{ \"optional\":false, \"type\":\"string\" } } Schema Import URI : /db/{graph_name}/schema/text METHOD : POST REQUEST : Field Description Type description Graph labels description String The detail description can refer to TuGraph Manual . RESPONSE : Schema import will check the new schema and original schema in database if compatible or not. If yes, this request will add the label only in new schema. If no, will return an error code. Example request. \u2022 POST http://localhost:7070/db/graph1/schema/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"schema\\\\\":[{\\\\\"label\\\\\":\\\\\"actor\\\\\",\\\\\"primary\\\\\":\\\\\"aid\\\\\",\\\\\"properties\\\\\":[{\\\\\"name\\\\\":\\\\\"aid\\\\\",\\\\\"type\\\\\":\\\\\"STRING\\\\\"}],\\\\\"type\\\\\":\\\\\"VERTEX\\\\\"}]}\" } The value of the above description is the following json serialized string : { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [{ \"name\": \"aid\", \"type\": \"STRING\" }], \"primary\": \"aid\" } ] } Example response. \u2022 200: OK Output: { \"log\": \"\" } Vertex Operation URI format is: http://{host}:{port}/db/{graph_name}/node/{vid} in which vid is a unique integer identifying the vertex, which can be obtained when creating new vertexes or by looking up index. List Vertex and Label Number URI : /db/{graph_name}/node METHOD : GET RESPONSE : Field Description Type num_label the number of vertex label Integer num_vertex the number of vertex Integer Note: num_vertex returns an estimate of the number of vertexes, not the exact number. To get the exact number, please use Cypher queries. Create New Vertex Insert a vertex into the database. URI : /db/{graph_name}/node METHOD : POST REQUEST : Field Description Type label the name of label String property the properties of the vertex Dictionary in which property is a dictionary of { column_name : column_value }. RESPONSE : if successful, return status code 200 and the new vertex's vid, which can be used in later vertex operations. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"property\" : { \"name\" : \"Passerby A\", \"birthyear\" : 1989 } } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { 21 } Batch Create Vertexes TuGraph allows multiple vertices to be inserted as one batch to reduce network overhead. URI : /db/{graph_name}/node METHOD : POST REQUEST : Field Description Type label the name of Label String fields the column names List values the values of each vertex List in which fields is a list of strings specifying column names, and values is a list in which each element is a list of column_values corresponding to the column names as specified in fields . RESPONSE : if successful, return status code 200, and return the vid list of newly added vertices in the JSON content, where each vid corresponds to each vertex in the request. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"fields\" : [\"name\", \"birthyear\"], \"values\" : [[\"alex\", 2000], [\"bob\", 1999]] } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ 22, 23 ] } Get Vertex URI : /db/{graph_name}/node/{vertex_id} METHOD : GET RESPONSE : Field Description Type label the name of Label String property property Dictionary, in the format of {column_name_1:column_value_1, ...} Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"label\": \"Person\" } Delete Vertex URI : /db/{graph_name}/node/{vertex_id} METHOD : DELETE RESPONSE : if successful, return status code 200, and also the following content in JSON: Field Description Type in number of incoming edges of the deleted vertex Integer out number of outgoing edges of the deleted vertex Integer Example Request: \u2022 DELETE http://localhost:7070/db/{graph_name}/node/4 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"in\": 0, \"out\": 0 } Get Vertex Property URI : /db/{graph_name}/node/{vertex_id}/property METHOD : GET RESPONSE : Vertex properties as a dictionary of { column_name : column_value } Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" } Get Vertex Field URI : /db/{graph_name}/node/{vertex_id}/property/{field} METHOD : GET RESPONSE : Value corresponding to the specified field . Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property/name \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Natasha Richardson\" } Update Vertex Property URI : /db/{graph_name}/node/{vertex_id} METHOD : PUT REQUEST : Field Description Type property properties to update Dictionary RESPONSE : if successful, return status code 200. Example Request: \u2022 PUT http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"birthyear\" : 1964, \"mobile\" : \"13737299333\" } } Example Response: \u2022 200: OK Edge Operation URI format is: http://{host}:{port}/db/{graph_name}/relationship/{euid} in which euid is a string uniquely identifying the edge, which can be obtained when creating edges or by iterating through the edges of a vertex. Create Edge URI : /db/{graph_name}/node/{src_vid}/relationship METHOD : POST REQUEST : Field Description Type label the label of edge String destination the vid of destination vertex Integer property the property of edge Dictionary RESPONSE : if successful, return status code 200 and the euid of new created edge (type is String). Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/node/{src}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"destination\" : 14, \"label\" : \"BORN_IN\", \"property\" : {} } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"1_14_1_0\" } Batch Create Edges URI : /db/{graph_name}/relationship METHOD : POST REQUEST : Field Description Type label the label of edge String fields the data column name List edge the data of edge List where the edge is a list of data, each of which specifies and edge, defined as follows: Field Description Type source source vertex id Integer destination destination vertex id Integer values the data list List in which values is a list of column values, each of which correspond to the a column name specified in fields . RESPONSE : if successful, return status code 200 and the list of euid s of the newly created edges. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"knows\", \"fields\" : [\"from_year\", \"weight\"], \"edge\" : [ {\"source\":0, \"destination\":1, \"values\":[2011, 0.8]}, {\"source\":1, \"destination\":2, \"values\":[2008, 0.9]} ] } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_1_0_0\", \"1_2_0_0\" ] } List Out-going Edges URI : /db/{graph_name}/node/{src}/relationship/out METHOD : GET RESPONSE : The list of euid s of source vertex's out-going edges. Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/out \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"4_5_0_0\", \"4_7_1_2\" ] } List Incoming Edges URI : /db/{graph_name}/node/{dst}/relationship/in METHOD : GET RESPONSE : The list of euid s of destination vertex's incoming edges. Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/in \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_4_0_0\", \"3_4_3_1\" ] } List All Edges URI : /db/{graph_name}/node/{src}/relationship/all METHOD : GET RESPONSE : Field Description Type in list of incoming edges' euid s List out list of outgoing edges' euid s List Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/all \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"out\": [ \"4_5_0_0\", \"4_7_1_2\" ], \"in\": [ \"0_4_0_0\", \"3_4_3_1\" ] } Get Edge Information URI : /db/{graph_name}/relationship/{euid} METHOD : GET RESPONSE : Field Description Type label the label of the edge String property the properties of the edge Dictionary Example Request: \u2022 GET http://localhost:7070/db/graph1/relationship/0_4_0_0 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { }, \"label\": \"MARRIED\" } Delete Edge URI : /db/{graph_name}/relationship/{euid} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1/relationship/14_0_1_0 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Get Edge Properties URI : /db/{graph_name}/relationship/{euid}/property METHOD : GET RESPONSE : The dictionary of edge's properties. Example Request: \u2022 GET http://localhost:7070/db/graph1/relationship/14_0_2_0/property \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { { \"weight\": 0.8, \"begin\": 20180922 } } Get Edge Field URI : /db/{graph_name}/relationship/{euid}/property/{field} METHOD : GET RESPONSE : if successful, return status code 200 and the value corresponding to given field . Example Request: \u2022 GET http://localhost:7070/db/graph1/relationship/17_0_2_2/property/charactername \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Henri Ducard\" } Update Edge Property URI : /db/{graph_name}/relationship/{euid} METHOD : PUT REQUEST : Field Description Type property properties to be updated Dictionary RESPONSE : if successful, return status code 200. Example Request: \u2022 PUT http://localhost:7070/db/graph1/relationship/17_0_2_2 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"charactername\" : \"Henri Ducard/passer a\" } } Example Response: \u2022 200: OK Index URI format is: http://{host}:{port}/db/{graph_name}/index/{label}/{field} Create Index Create an index on a (label, field) pair. Blocks until the index is successfully built. URI : /db/{graph_name}/index METHOD : POST REQUEST : Field Description Type label the name of label String field field to be indexed String is_unique whether this index is a unique index Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\": \"Person\", \"field\": \"birthyear\", \"is_unique\" : false } Example Response: \u2022 200: OK List All Indexes URI : /db/{graph_name}/index METHOD : GET RESPONSE : A list of index specifications, each of which has the same format as use in Create Index . Example Request: \u2022 GET http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"field\": \"name\", \"label\": \"City\", \"is_unique\": false }, { \"field\": \"title\", \"label\": \"Film\", \"is_unique\": false }, { \"field\": \"name\", \"label\": \"Person\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] } List Indexes Related with Specified Label URI : /db/{graph_name}/index/{label} METHOD : GET RESPONSE : A list of index specifications, each of which has the same format as use in Create Index . Example Request: \u2022 GET http://localhost:7070/db/graph1/index/Person \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"label\": \"Person\", \"field\": \"name\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] } Delete Index URI : /db/{graph_name}/index/{label}/{field} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1/index/Person/name \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Get Vertex by Index URI : /db/{graph_name}/index/{label}/?field={field}&value={value} METHOD : GET RESPONSE : A list of vid s. Example Request: \u2022 GET http://localhost:7070/db/graph1/index/Person/?field=birthyear&value=1986 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Output: { [ 1, 8 ] } Data Import URI : /db/{graph_name}/import/text METHOD : POST REQUEST : Field Description Type description description of the file content String data contents of the file to be imported (recommended to have a size of 16MB, has a hard limit of 17MB) Strings / Arrays / Objects continue_on_error whether to continue import when an error occurred (optional, default is false ) Bool delimiter delimiter used in the data file (optional, default is \u201c,\u201d ) String The details of the description field can be found in TuGraph User Manual . delimiter can be a single character or multi-character string, but must not contain \\r or \\n . data can be one of the following: String, such as \"1,2\\n3,4\\n\" Array of ASCII codes, such as [49,44,50,10,51,44,52,10] Dictionary shaped like the above array, such as {\"0\":49,\"1\":44,\"2\":50,\"3\":10,\"4\":51,\"5\":44,\"6\":52,\"7\":10} RESPONSE : The system will not automatically perform actions such as creating a new label, adding an index, and so on. Before you do this, please make sure that the label involved already exists and has an appropriate index. If the import is successful, return code 200 and return log information (possibly empty) in the log field. Otherwise, returns status code 400. None of the data is imported on failure, and error message is set in error_message . Example Request: \u2022 POST http://localhost:7070/db/graph1/import/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"files\\\\\":[{\\\\\"columns\\\\\":[\\\\\"SRC_ID\\\\\",\\\\\"role\\\\\",\\\\\"DST_ID\\\\\"],\\\\\"format\\\\\":\\\\\"CSV\\\\\",\\\\\"label\\\\\":\\\\\"role\\\\\",\\\\\"SRC_ID\\\\\":\\\\\"actor\\\\\",\\\\\"DST_ID\\\\\":\\\\\"movie\\\\\"}]}\"}\", \"data\": \"1,Role1,2\\n3,Role2,4\\n\", \"continue_on_error\": true } The value of the above description is the following json serialized string : { \"files\": [ { \"format\": \"CSV\", \"label\": \"role\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } Example Response: \u2022 200: OK Output: { \"log\": \"Missing src uid 1\\n\" } Because the request specifies continue_on_error: true , the returned log indicates that the first edge cannot be inserted because there is no vertex with uid==1, while the second edge was imported successfully. Miscellany URI format is: http://{host}:{port}/db/{graph_name}/misc Extract Subgraph Give a set of vid s and return the minimum subgraph which contains the vertex set and the edges between them. URI : /db/{graph_name}/misc/sub_graph METHOD : POST REQUEST : Field Description Type vertex_ids vertex id set List RESPONSE : Field description Type nodes vertex information List, each element contains vid, label, and properties. relationships edge information List, each element contains src, dst, euid, label, and properties. Example Request: \u2022 POST http://localhost:7070/db/graph1/misc/sub_graph \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"vertex_ids\": [2, 5, 14, 20] } Example Response: \u2022 200: OK Output: { \"nodes\": [ { \"label\": \"Person\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"vid\": 2 }, { \"label\": \"Person\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"vid\": 5 }, { \"label\": \"City\", \"properties\": { \"name\": \"London\" }, \"vid\": 14 }, { \"label\": \"Film\", \"properties\": { \"title\": \"Camelot\" }, \"vid\": 20 } ], \"relationships\": [ { \"destination\": 5, \"label\": \"HAS_CHILD\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 20, \"label\": \"ACTED_IN\", \"properties\": { \"birthyear\": 1937, \"charactername\": \"Guenevere\", \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"source\": 5 } ] }","title":"RESTful API"},{"location":"en-US/3.developer-document/1.restful-api/#tugraph-restful-api","text":"This document describes how to call the Rest API of TuGrpah.","title":"TuGraph RESTful API"},{"location":"en-US/3.developer-document/1.restful-api/#introduction","text":"TuGraph provides HTTP RESTful APIs, which allow users to access TuGraph servers through HTTP requests remotely. This document specifiers the TuGraph HTTP RESTful API. :warning: All the other RESTful APIs excluding the three below will be deprived after 4/30/2023. - Login - Query - Store Procedures","title":"Introduction"},{"location":"en-US/3.developer-document/1.restful-api/#protocols-and-data-format","text":"","title":"Protocols And Data Format"},{"location":"en-US/3.developer-document/1.restful-api/#protocols","text":"Both HTTP and HTTPS protocols are supported by TuGraph. The system uses HTTP protocol by default. To use HTTPS, the ssl_auth option should be set to true in the DB configuration.","title":"Protocols"},{"location":"en-US/3.developer-document/1.restful-api/#request","text":"TuGraph supports HTTP GET/POST/PUT/DELETE requests, in which: GET requests are used for read-only requests, such as getting vertex properties, edge properties, etc. POST requests are used to create entities, submit Cypher, and to manage and call stored procedures; PUT requests are used to modify existing entities, for example, to modify vertex properties, edge properties, etc. DELETE requests are used to delete existing entities, such as vertices, edges, etc. In high-availability mode, users can set ServerVersion in the request header to make sure the request is never served with an outdated version. The current ServerVersion can be obtained from the header returned by the server.","title":"Request"},{"location":"en-US/3.developer-document/1.restful-api/#response","text":"TuGraph returns the following HTTP status codes: 200 OK : operation is successful. 307 Temporary Redirect : the operation is redirected, typically in high-availability mode, to the master. 400 Bad Request : incorrect input, such as URI error, or invalid parameters. 500 Internal Server Error : server error. When the operation is successful, the JSON response contains the return value of the operation. When the operation is redirected, the location field in the returned HTTP header contains the redirect destination address. When an input error or server error occurs, the JSON response contains a error_message field that describes the error. In high-availability mode, the server will set server_version field in the header to inform the client of the data version of the current server. When clients switch between several different servers, this version number guarantees that the client will not read from an outdated server.","title":"Response"},{"location":"en-US/3.developer-document/1.restful-api/#data-format","text":"The server and clients exchange data in JSON format. When sending a request, the header of the HTTP request should be set with Accept:application/json, Content-Type:app/json . For example, to create a new vertex, the request header should look like the following: Accept: application/json; charset=UTF-8 Content-Type: application/json server_version: 12","title":"Data Format"},{"location":"en-US/3.developer-document/1.restful-api/#uri-format","text":"TuGraph REST API provides access to: web visualization, login, db info, label, index, node, relationship, cypher, task, cpp_plugin, and python_plugin. The URI format used for each function is as follows: URI Description /web web visualization /cypher cypher request /acl access control /user user management /login user login /info database status and information /task task management /db subgraph management For each subgraph, the following interfaces are provided: URI Description /db create, modify, and delete subgraph /db/ {graph_name} /node vertex operations /db/ {graph_name} /relationship edge operations /db/ {graph_name} /label label-related operations /db/ {graph_name} /index index-related operations /db/ {graph_name} /cypher subgraph-specific cypher operation /db/ {graph_name} /cpp_plugin C++ plugin(stored procedure) /db/ {graph_name} /python_plugin Python plugin(stored procedure) /db/ {graph_name} /import online import /db/ {graph_name} /misc other operations","title":"URI Format"},{"location":"en-US/3.developer-document/1.restful-api/#login","text":"The system creates an administrator by default, whose username is admin and password is 73@TuGraph . For security reasons, please remember to change your password after first starting the server.","title":"Login"},{"location":"en-US/3.developer-document/1.restful-api/#user-login","text":"TuGraph provides JWT-based user authentication. To login to the server, a REST client should send login request with username and password. On success, the client will receive a signed token in the form of Json Web Token (JWT), which should be stored by the client and used for every request that follows. URI : /login METHOD : POST REQUEST : Field Description Type user username String password password String RESPONSE : Field Description Type jwt token String Example Request: \u2022 POST http://localhost:7070/login \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"user\":\"admin\", \"password\":\"73@TuGraph\" } Example Response: \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" }","title":"User Login"},{"location":"en-US/3.developer-document/1.restful-api/#token-refresh","text":"After the token expires, the front-end initiates a refresh token interface, and the back-end verifies the validity of the token. If the verification passes, a new token is generated; if the verification fails, status code 401 is returned. URI : /refresh METHOD : POST REQUEST : Field Description Type Authorization token String RESPONSE : Field Description Type jwt token String Example Request: \u2022 POST http://localhost:7070/refresh \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\": \"Bearer eyJhbGciOiJIUz32NiIsInR5cCI6IkpXVDJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byj3fYVAH4D88dfTD_zYQ_uAvdizTMek\" } Example Response: \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" }","title":"Token Refresh"},{"location":"en-US/3.developer-document/1.restful-api/#logout","text":"The user logs out and deletes the token at the same time. URI : /logout METHOD : POST REQUEST : Field Description Type Authorization token String RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/refresh \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\" : \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJmbWEuYWkiLCJwYXNzd29yZCI6IjczQFR1R3JhcGgiLCJ1c2VyIjoiYWRtaW4ifQ.o_yb5veSJkuy-ieBp4MqTk-tC1grcKotgVbgNJ0TyTU\" } Example Response: \u2022 200: OK","title":"Logout"},{"location":"en-US/3.developer-document/1.restful-api/#query","text":"URI format is: http://{host}:{port}/cypher","title":"Query"},{"location":"en-US/3.developer-document/1.restful-api/#call-cypher","text":"URI : /cypher METHOD : POST REQUEST : Field Description Type graph subgraph name String cypher Cypher query String RESPONSE : Field Description Type result running results List elapsed running time in seconds Float header header of the results List size number of results Integer in which header is a list with each element in the form of: Field Description Type name the name of column String type column data type, 0 is scalar, 1 is vertex id, 2 is vector Example Request: \u2022 POST http://localhost:7070/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n) RETURN n,n.name LIMIT 10\" } Example Response: \u2022 200: OK Output: { \"elapsed\": 0.001224517822265625, \"header\": [ { \"name\": \"n\", \"type\": 1 }, { \"name\": \"n.name\", \"type\": 0 } ] \"result\": [ [ 0, \"Rachel Kempson\" ], [ 1, \"Michael Redgrave\" ], [ 2, \"Vanessa Redgrave\" ] ], \"size\": 3 }","title":"Call Cypher"},{"location":"en-US/3.developer-document/1.restful-api/#call-cypher-with-parameters","text":"Cypher supports querying with parameters. When a Cypher query with parameters is called, TuGraph caches the execution plan for that query to speed up the following queries of the same kind. URI : /cypher METHOD : POST REQUEST : Field Description Type graph subgraph name String cypher Cypher query String parameters parameters List RESPONSE : Same as Call Cypher . Example Request: \u2022 POST http://localhost:7070/db/graph1/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n:Person {name:$param1}) RETURN n.birthyear\", \"parameters\": { \"$param1\": \"Lindsay Lohan\" } } Example Response: \u2022 200: OK Output: { \"elapsed\": 0.005886077880859375, \"header\": [ { \"name\": \"n.birthyear\", \"type\": 0 } ], \"result\": [ [ 1986 ] ], \"size\": 1 }","title":"Call Cypher with Parameters"},{"location":"en-US/3.developer-document/1.restful-api/#stored-procedures","text":"URI format is: http://{host}:{port}/db/{graph_name}/cpp_plugin|python_plugin","title":"Stored Procedures"},{"location":"en-US/3.developer-document/1.restful-api/#create-stored-procedure","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : POST REQUEST : Field Description Type name name of the plugin String description description of the plugin String code_base64 code of plugin encoded in base64 String read_only whether it is a read-only stored procedure Bool code_type type of plugin code, can be zip/cpp/so for cpp_plugin, while py for python_plugin String Note: read-only plugins are more efficient than write plugins. Always specify read-only=true for read-only transactions. RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.so}\", \"read_only\" : true, \"code_type\" : \"zip\" } Example Response: \u2022 200: OK","title":"Create Stored Procedure"},{"location":"en-US/3.developer-document/1.restful-api/#list-stored-procedures","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : GET RESPONSE : A list in which each element is a plugin description, in the format of: Field Description Type name name of the stored procedure String description description of the stored procedure String read_only whether the stored procedure is read-only Bool Example Request: \u2022 GET http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Output: { [ { \"description\":\"adds a vertex label to the db\", \"name\":\"add_label\", \"read_only\":false }, { \"description\": \"scans graph and get number of edges\", \"name\": \"scan_graph\", \"read_only\": true } ] }","title":"List Stored Procedures"},{"location":"en-US/3.developer-document/1.restful-api/#retrieve-stored-procedure-detail","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : GET RESPONSE : Procedure detail, including code, in the format of: Field Description Type name Procedure name String description Procedure descrition String read_only Read only or not Bool code_base64 \u5b58\u50a8\u8fc7\u7a0b\u7684\u4ee3\u7801 String, Base64 encoded code_type Type of procedue code, can be zip/cpp/so for cpp_plugin, while py for python_plugin String Example request. \u2022 GET http://localhost:7070/db/graph1/cpp_plugin/echo \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.zip}\", \"read_only\" : true, \"code_type\" : \"zip\" }","title":"Retrieve Stored Procedure Detail"},{"location":"en-US/3.developer-document/1.restful-api/#call-stored-procedure","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : POST REQUEST : String input. Field Description Type data input data String timeout timeout in seconds, defaults to 0, which means no timeout Float RESPONSE : Field Description Type result running results String Example Request: \u2022 POST http://localhost:7070/db/graph1/python_plugin/echo \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { data : \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\", timeout : 0, in_process : true } Example Response: \u2022 200: OK Output: { \"result\": \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\" }","title":"Call Stored Procedure"},{"location":"en-US/3.developer-document/1.restful-api/#delete-stored-procedure","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1/cpp_plugin/example_plugin \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK","title":"Delete Stored Procedure"},{"location":"en-US/3.developer-document/1.restful-api/#deprecated","text":"The APIs below will be removed after 4/30/2023.","title":"Deprecated"},{"location":"en-US/3.developer-document/1.restful-api/#user-management","text":"","title":"User Management"},{"location":"en-US/3.developer-document/1.restful-api/#add-user","text":"Add a new user and set the initial password for the user. Only administrators have permission to add new users. The username can only have letters, numbers, and underscores, and should not begin with a number. The password can contain any character. The username and password have a maximum length of 64 bytes. URI : /user METHOD : POST REQUEST : Field Description Type user username String password password String is_admin whether the user is an administrator or not Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"user\": \"USER1\", \"password\": \"AN_INITIAL_PASSWORD\", \"is_admin\": false } Example Response: \u2022 200: OK","title":"Add User"},{"location":"en-US/3.developer-document/1.restful-api/#change-password","text":"Users can change their own passwords, in which case the original password needs to be verified. Administrators can change the passwords of any user and promote non-admin users to administrators, or demote administrator users to regular users. When modifying another user's password, the original password of the user is not needed. URI : /user/{user_name} METHOD : PUT REQUEST : Field Description Type current_password user's current password, if modifying its own password String new_password user's new password String is_admin should this user be administrator or not, used when promoting or demoting users Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/user/user1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"current_password\": \"THE_CURRENT_PASSWORD\" \"new_password\": \"A_NEW_PASSWORD\" \"is_admin\": true } Example Response: \u2022 200: OK","title":"Change Password"},{"location":"en-US/3.developer-document/1.restful-api/#list-all-users","text":"List all users of the database. Only administrators are allowed to perform this operation. URI : /user/ METHOD : GET RESPONSE : a dictionary of { user_name : is_admin } Example Request: \u2022 GET http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK Output: { \"admin\": true, \"guest1\": false }","title":"List All Users"},{"location":"en-US/3.developer-document/1.restful-api/#delete-user","text":"Delete a user from the DB. Only administrators have permission to do so. URI : /user/{user_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK","title":"Delete User"},{"location":"en-US/3.developer-document/1.restful-api/#access-control","text":"TuGraph has four access levels. Different users can have different permissions for each subgraph. The four access levels are as follows: Access Level Description NONE no access READ read-only WRITE can read and write vertexes and edges of the subgraph FULL full access, including changing metadata (label, index), managing stored procedures and deleting all data in the subgraph Administrators have full access on all subgraphs, and a newly created non-admin user does not have access for any subgraph. Users who have full access on a subgraph can set the access level for other users on that subgraph.","title":"Access Control"},{"location":"en-US/3.developer-document/1.restful-api/#query-users-access-level","text":"URI : /acl/?user={user_name}&graph={graph_name} METHOD : GET RESPONSE : When both user and graph are specified, the user's access level for the subgraph is returned, such as READ . When only user is specified, all subgraphs that the user can access (access level not NONE ) are returned, as well as the user's access level on the subgraph. When only graph is specified, all users who have access level on this graph (excluding administrators, who have implicit FULL access) and their access levels are returned. This operation requires administrator permission. Example Request: \u2022 GET http://localhost:7070/acl/?user=user1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"graph1\": \"READ\", \"graph2\": \"WRITE\", \"graph3\": \"FULL\" }","title":"Query User's Access Level"},{"location":"en-US/3.developer-document/1.restful-api/#change-users-access-level","text":"URI : /acl METHOD : PUT REQUEST : Field Description Type user username String graph subgraph's name String acl access level String RESPONSE : if successful, return status code 200. Example Request: \u2022 PUT http://localhost:7070/acl \u2022 Accept: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"user\": \"user1\", \"graph\": \"graph1\", \"acl\": \"FULL\" } Example Response: \u2022 200: OK","title":"Change User's Access Level"},{"location":"en-US/3.developer-document/1.restful-api/#remove-users-access-right","text":"This is equivalent to setting access level to NONE . URI : /acl/?user={user_name}&graph={graph_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/acl/?user=user1&graph=graph1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example Response: \u2022 200: OK","title":"Remove User's Access Right"},{"location":"en-US/3.developer-document/1.restful-api/#server-status","text":"","title":"Server Status"},{"location":"en-US/3.developer-document/1.restful-api/#modify-server-configuration","text":"Modifying the server configuration will take effect immediately after the configuration modification and will affect all servers. These configurations take precedence over configuration files and command line arguments. URI : /config METHOD : PUT REQUEST : Field Description Type db_async Whether to enable asynchronous mode Bool optimistic_txn Whether to use optimistic transaction lock by default Bool enable_audit_log Whether to enable audit logging Bool RESPONSE : If successful, return status code 200. Example request. \u2022 PUT http://localhost:7070/config \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"db_async\": true, \"enable_audit_log\": false } Example response. \u2022 200: OK","title":"Modify Server Configuration"},{"location":"en-US/3.developer-document/1.restful-api/#current-server-status","text":"URI : /info METHOD : GET RESPONSE : Field Description Type lgraph_version TuGraph version String git_branch server's git branch String git_commit server's git commit version String web_commit web client commit version String cpp_id cpp compiler id String cpp_version cpp compiler version String python_version python lib version String cpu cpu information Dictionary, format refers CPU Status disk disk IO information Dictionary, format refers Disk Status memory memory information Dictionary, format refers Memory Status db_space graph database storage Dictionary, format refers Graph Database Storage db_config graph database configuration Dictionary, format refers Graph Database Configuration up_time database's online running time Integer Example Request: \u2022 GET http://localhost:7070/info \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"lgraph_version\": \"1.2.0\", \"git_branch\": \"master\", \"git_commit\": \"9e2977d\", \"web_commit\": \"1e2823d\", \"cpu_id\": \"GUN\", \"cpu_version\": \"4.8.5\", \"python_version\": \"3.2\", \"node\": \"/node\", \"relationship\": \"/relationship\", \"cpu\": { \"self\": 25, \"server\": 35, \"unit\": \"%\" }, \"disk\": { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" }, \"memory\": { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" }, \"db_space\": { \"space\": 57344, \"unit\": \"B\" }, \"db_config\": { \"db_async\": false, \"disable_auth\": false, \"enable_ha\": false, ... }, \"up_time\": 3235 }","title":"Current Server Status"},{"location":"en-US/3.developer-document/1.restful-api/#cpu-status","text":"URI : /info/cpu METHOD : GET RESPONSE : Field Description Type self TuGraph CPU usage Integer server server's CPU usage Integer unit metric unit String Example Request: \u2022 GET http://localhost:7070/info/cpu \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25, \"server\": 35, \"unit\": \"%\" }","title":"CPU Status"},{"location":"en-US/3.developer-document/1.restful-api/#disk-status","text":"URI : /info/disk METHOD : GET RESPONSE : Field Description Type read server's disk read rate Integer write server's disk wrtie rate Integer unit metric unit String Example request. \u2022 GET http://localhost:7070/info/disk \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" }","title":"Disk Status"},{"location":"en-US/3.developer-document/1.restful-api/#memory-status","text":"URI : /info/memory METHOD : GET RESPONSE : Field Description Type self TuGraph memory usage Integer server_avail server's available memory Integer server_total server's total memory Integer unit metric unit String Example Request: \u2022 GET http://localhost:7070/info/memory \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" }","title":"Memory Status"},{"location":"en-US/3.developer-document/1.restful-api/#database-size","text":"URI : /info/db_space METHOD : GET RESPONSE : Field Description Type space total size of the database Integer unit metric unit String Example Request: \u2022 GET http://localhost:7070/info/db_space \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"space\": 57344, \"unit\": \"B\" }","title":"Database Size"},{"location":"en-US/3.developer-document/1.restful-api/#db-configuration","text":"URI : /info/db_config METHOD : GET RESPONSE : Field Description Type async asynchronous mode Bool disable_auth whether to disable authentication Bool enable_ha whether to enable high-availability mode Bool enable_rpc whether to enable RPC server Bool host bound host address String port port of REST server Integer rpc_port port of RPC server Integer thread_limit limit of available threads for the graph database Integer use_ssl whether to use SSL for authentication Bool verbose verbose level of the output Integer Example Request: \u2022 GET http://localhost:7070/info/db_config \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"async\":false, \"disable_auth\":false, \"enable_ha\":false, \"enable_rpc\":false, \"host\":\"127.0.0.1\", \"port\":7070, \"rpc_port\":9091, \"thread_limit\":0, \"use_ssl\":false, \"verbose\":2 }","title":"DB Configuration"},{"location":"en-US/3.developer-document/1.restful-api/#high-availability-server-list","text":"Get a list of replication servers. Valid only in high-availability mode. URI : /info/peers METHOD : GET RESPONSE : if successful, return status code 200 and a list of server information, each of server information is formatted as: Field Description Type rpc_address server's RPC address String rest_address server's REST address String state server state String The server state can be MASTER , SLAVE , or OFFLINE . Example Request: \u2022 GET http://localhost:7070/info/peers \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\", \"state\":\"MASTER\" }, { \"rest_address\":\"192.168.1.22:17072\", \"rpc_address\":\"192.168.1.22:19092\", \"state\":\"SLAVE\" } ] }","title":"High Availability Server List"},{"location":"en-US/3.developer-document/1.restful-api/#current-leader-information","text":"Get information of current leader. Valid only in HA mode. URI : /info/leader METHOD : GET RESPONSE : if successful, return status code 200 and the current leader server information, which is formatted as: Field Description Type rpc_address server's RPC address String rest_address server's REST address String Example Request: \u2022 GET http://localhost:7070/info/leader \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\" }","title":"Current Leader Information"},{"location":"en-US/3.developer-document/1.restful-api/#server-statistics","text":"URI : /info/statistics METHOD : GET RESPONSE : if successful, return status code 200 and the current server statistics, which is formatted as: Field Description Type requests/second number of requests processed per second Float writes/second number of write requests processed per second Float running_tasks number of requests in progress Integer failure_rate request failure rate Float Example Request: \u2022 GET http://localhost:7070/info/statistics \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"failure_rate\": 0.023, \"requests/second\": 122.3, \"running_tasks\": 10, \"writes/second\": 12.4 }","title":"Server Statistics"},{"location":"en-US/3.developer-document/1.restful-api/#get-audit-logs","text":"URI : /info/log/?begin_time={begin_time}&end_time={end_time}&user={user}&num_log={num_log}&descending_order={descending_order} Field Description Type begin_time start time of the queried log (required, format YYYY-mm-dd HH:MM:SS) Timestamp end_time end time of the queried log (default is current time, format YYYY-mm-dd HH:MM:SS) Timestamp user the operator of the queried log (administrator can query all users' logs, ordinary users can only query their own logs) String num_log maximum number of logs to return (default 100) Integer descending_order whether to sort the result in descending order(default is true) Bool METHOD : GET RESPONSE : if successful, return status code 200 and a list of audit logs, each of which is an action log in the format of: Field Description Type index the index of the operation Integer begin_time the start time of the operation String end_time the end time of the operation String user the user of the operation String graph the graph of the operation String type the type of the operation String read_write the operation is read operation or write operation String success whether the operation is successful Bool content the content of the operation String Example Request: \u2022 GET http://localhost:7070/info/log/?begin_time=2020-02-17%2015:00:00&end_time=2020-02-20%2012:00:00&user=admin&num_log=100&descending_order=false \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"post /login Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"\", \"index\": 1, \"read_write\": \"read\", \"success\": true, \"type\": \"Security\", \"user\":\"admin\" }, { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"Load plugin : `echo` Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"default\", \"index\": 2, \"read_write\": \"write\", \"success\": true, \"type\": \"Plugin\", \"user\": \"admin\" }, ... ] }","title":"Get Audit Logs"},{"location":"en-US/3.developer-document/1.restful-api/#task-management","text":"TuGraph tracks long-running tasks such as complex Cypher queries and plugins. Administrators can query currently running tasks through the REST API and choose to abort the queries if necessary. The URI format for task management is : http://{host}:{port}/task/{task_id}","title":"Task Management"},{"location":"en-US/3.developer-document/1.restful-api/#list-running-tasks","text":"URI : /task METHOD : GET RESPONSE : The returned JSON is an array, each of which is formatted as follows: Field Description Type description the description of the task String time_elapsed time the task has been executing for, in seconds Float task_id the ID of the task String Example Request: \u2022 GET http://localhost:7070/task \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"description\" : \"[CPP_PLUGIN] scan_graph\", \"time_elapsed\" : 13.987, \"task_id\" : \"3_10\" }, { \"description\" : \"[CYPHER] MATCH(n) return n\", \"time_elapsed\" : 30.887, \"task_id\" : \"2_6\" } ] }","title":"List Running Tasks"},{"location":"en-US/3.developer-document/1.restful-api/#abort-task","text":"URI : /task/{task_id} Where task_id is the task_id returned by GET /task . METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/task/3_10 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK","title":"Abort Task"},{"location":"en-US/3.developer-document/1.restful-api/#subgraph-management","text":"TuGraph supports multiple subgraphs and all subgraphs are completely independent from others. Different subgraphs can have different permissions to different users. Administrators can add, modify and delete subgraphs.","title":"Subgraph Management"},{"location":"en-US/3.developer-document/1.restful-api/#create-new-subgraph","text":"URI : /db METHOD : POST REQUEST : Field Description Type name the name of subgraph String config the configuration of subgraph Dictionary, in the format of {{column name 1}:{column value 1},...} RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"graph1\" \"config\" : { \"max_size_GB\":2048, \"async\":True } } Example Response: \u2022 200: OK","title":"Create New Subgraph"},{"location":"en-US/3.developer-document/1.restful-api/#delete-subgraph","text":"URI : /db/{graph_name} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1 Example Response: \u2022 200: OK","title":"Delete Subgraph"},{"location":"en-US/3.developer-document/1.restful-api/#list-all-subgraphs","text":"URI : /db METHOD : GET RESPONSE : The list of all subgraphs. Example Request: \u2022 GET http://localhost:7070/db Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"graph1\": { \"max_size_gb\":1024, \"async\":false } }","title":"List All Subgraphs"},{"location":"en-US/3.developer-document/1.restful-api/#label","text":"TuGraph is a strong-schema database. In each subgraph, each vertex and edge need to have a predefined data format. The data format is determined by Label. Users can use the REST API to add, delete, and query labels and their corresponding data format. The URI format of the Label operation is http://{host}:{port}/db/{graph_name}/label/{type}/{label_name} Where the {type} can be node or relationship .","title":"Label"},{"location":"en-US/3.developer-document/1.restful-api/#create-label","text":"A label is created with a fixed data format. A label must be defined before any node or relationship can be created with that label. URI : /db/{graph_name}/label METHOD : POST REQUEST : Field Description Type name the name of label String fields data column definition List is_vertex whether it is a vertex Label Bool primary vertex primary property String edge_constraints edge constraints List primary should be set when is_vertex is true . This field is only available for Vertex, and must be set when creating Vertex. edge_constraints could be set when is_vertex is false , This field is only available for Edge. This field limits the combination of starting and ending vertex of the edge, for example: [[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]] , which limits the edge direction can only be from vertex_label1 to vertex_label2 or from vertex_label3 to vertex_label4 . If you don't want to have any constraints, just leave this field unset. In which fields is an array, in which each element defines a column of data, as follows: Field Description Type name the name of the column String type the data type of the column String, with following types: int8, int16, int32, int64, float, double, string, date, datetime, binary, blob optional whether the data can be empty (optional, default is false) Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"Actor\", \"fields\": [ {\"name\":\"uid\", \"type\":\"int64\", \"optional\":false}, {\"name\":\"name\", \"type\":\"string\", \"optional\":true} ], \"is_vertex\":true, \"primary\" : \"uid\" } Example Response: \u2022 200: OK","title":"Create Label"},{"location":"en-US/3.developer-document/1.restful-api/#list-all-labels","text":"URI : /db/{graph_name}/label METHOD : GET RESPONSE : Field Description Type edge the list of edge labels List vertex the list of vertex labels List Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"edge\": [ \"HAS_CHILD\", \"MARRIED\", \"BORN_IN\", \"DIRECTED\", \"WROTE_MUSIC_FOR\", \"ACTED_IN\" ], \"vertex\": [ \"Person\", \"City\", \"Film\" ] }","title":"List All Labels"},{"location":"en-US/3.developer-document/1.restful-api/#get-label-data-format","text":"URI : /db/{graph_name}/label/{[node|relationship]}/{label_name} METHOD : GET RESPONSE : Data column definition table as a dictionary, in which each key is the column name, and corresponding value is the column definition defined as follows: Field Description Type optional whether the column value can be empty Bool type the type of the column value String Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/label/node/person \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"age\":{ \"optional\":false, \"type\":\"int16\" }, \"id\":{ \"optional\":false, \"type\":\"int8\" }, \"name\":{ \"optional\":false, \"type\":\"string\" } }","title":"Get Label Data Format"},{"location":"en-US/3.developer-document/1.restful-api/#schema-import","text":"URI : /db/{graph_name}/schema/text METHOD : POST REQUEST : Field Description Type description Graph labels description String The detail description can refer to TuGraph Manual . RESPONSE : Schema import will check the new schema and original schema in database if compatible or not. If yes, this request will add the label only in new schema. If no, will return an error code. Example request. \u2022 POST http://localhost:7070/db/graph1/schema/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"schema\\\\\":[{\\\\\"label\\\\\":\\\\\"actor\\\\\",\\\\\"primary\\\\\":\\\\\"aid\\\\\",\\\\\"properties\\\\\":[{\\\\\"name\\\\\":\\\\\"aid\\\\\",\\\\\"type\\\\\":\\\\\"STRING\\\\\"}],\\\\\"type\\\\\":\\\\\"VERTEX\\\\\"}]}\" } The value of the above description is the following json serialized string : { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [{ \"name\": \"aid\", \"type\": \"STRING\" }], \"primary\": \"aid\" } ] } Example response. \u2022 200: OK Output: { \"log\": \"\" }","title":"Schema Import"},{"location":"en-US/3.developer-document/1.restful-api/#vertex-operation","text":"URI format is: http://{host}:{port}/db/{graph_name}/node/{vid} in which vid is a unique integer identifying the vertex, which can be obtained when creating new vertexes or by looking up index.","title":"Vertex Operation"},{"location":"en-US/3.developer-document/1.restful-api/#list-vertex-and-label-number","text":"URI : /db/{graph_name}/node METHOD : GET RESPONSE : Field Description Type num_label the number of vertex label Integer num_vertex the number of vertex Integer Note: num_vertex returns an estimate of the number of vertexes, not the exact number. To get the exact number, please use Cypher queries.","title":"List Vertex and Label Number"},{"location":"en-US/3.developer-document/1.restful-api/#create-new-vertex","text":"Insert a vertex into the database. URI : /db/{graph_name}/node METHOD : POST REQUEST : Field Description Type label the name of label String property the properties of the vertex Dictionary in which property is a dictionary of { column_name : column_value }. RESPONSE : if successful, return status code 200 and the new vertex's vid, which can be used in later vertex operations. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"property\" : { \"name\" : \"Passerby A\", \"birthyear\" : 1989 } } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { 21 }","title":"Create New Vertex"},{"location":"en-US/3.developer-document/1.restful-api/#batch-create-vertexes","text":"TuGraph allows multiple vertices to be inserted as one batch to reduce network overhead. URI : /db/{graph_name}/node METHOD : POST REQUEST : Field Description Type label the name of Label String fields the column names List values the values of each vertex List in which fields is a list of strings specifying column names, and values is a list in which each element is a list of column_values corresponding to the column names as specified in fields . RESPONSE : if successful, return status code 200, and return the vid list of newly added vertices in the JSON content, where each vid corresponds to each vertex in the request. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"fields\" : [\"name\", \"birthyear\"], \"values\" : [[\"alex\", 2000], [\"bob\", 1999]] } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ 22, 23 ] }","title":"Batch Create Vertexes"},{"location":"en-US/3.developer-document/1.restful-api/#get-vertex","text":"URI : /db/{graph_name}/node/{vertex_id} METHOD : GET RESPONSE : Field Description Type label the name of Label String property property Dictionary, in the format of {column_name_1:column_value_1, ...} Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"label\": \"Person\" }","title":"Get Vertex"},{"location":"en-US/3.developer-document/1.restful-api/#delete-vertex","text":"URI : /db/{graph_name}/node/{vertex_id} METHOD : DELETE RESPONSE : if successful, return status code 200, and also the following content in JSON: Field Description Type in number of incoming edges of the deleted vertex Integer out number of outgoing edges of the deleted vertex Integer Example Request: \u2022 DELETE http://localhost:7070/db/{graph_name}/node/4 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"in\": 0, \"out\": 0 }","title":"Delete Vertex"},{"location":"en-US/3.developer-document/1.restful-api/#get-vertex-property","text":"URI : /db/{graph_name}/node/{vertex_id}/property METHOD : GET RESPONSE : Vertex properties as a dictionary of { column_name : column_value } Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }","title":"Get Vertex Property"},{"location":"en-US/3.developer-document/1.restful-api/#get-vertex-field","text":"URI : /db/{graph_name}/node/{vertex_id}/property/{field} METHOD : GET RESPONSE : Value corresponding to the specified field . Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property/name \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Natasha Richardson\" }","title":"Get Vertex Field"},{"location":"en-US/3.developer-document/1.restful-api/#update-vertex-property","text":"URI : /db/{graph_name}/node/{vertex_id} METHOD : PUT REQUEST : Field Description Type property properties to update Dictionary RESPONSE : if successful, return status code 200. Example Request: \u2022 PUT http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"birthyear\" : 1964, \"mobile\" : \"13737299333\" } } Example Response: \u2022 200: OK","title":"Update Vertex Property"},{"location":"en-US/3.developer-document/1.restful-api/#edge-operation","text":"URI format is: http://{host}:{port}/db/{graph_name}/relationship/{euid} in which euid is a string uniquely identifying the edge, which can be obtained when creating edges or by iterating through the edges of a vertex.","title":"Edge Operation"},{"location":"en-US/3.developer-document/1.restful-api/#create-edge","text":"URI : /db/{graph_name}/node/{src_vid}/relationship METHOD : POST REQUEST : Field Description Type label the label of edge String destination the vid of destination vertex Integer property the property of edge Dictionary RESPONSE : if successful, return status code 200 and the euid of new created edge (type is String). Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/node/{src}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"destination\" : 14, \"label\" : \"BORN_IN\", \"property\" : {} } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"1_14_1_0\" }","title":"Create Edge"},{"location":"en-US/3.developer-document/1.restful-api/#batch-create-edges","text":"URI : /db/{graph_name}/relationship METHOD : POST REQUEST : Field Description Type label the label of edge String fields the data column name List edge the data of edge List where the edge is a list of data, each of which specifies and edge, defined as follows: Field Description Type source source vertex id Integer destination destination vertex id Integer values the data list List in which values is a list of column values, each of which correspond to the a column name specified in fields . RESPONSE : if successful, return status code 200 and the list of euid s of the newly created edges. Example Request: \u2022 POST http://localhost:7070/db/{graph_name}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"knows\", \"fields\" : [\"from_year\", \"weight\"], \"edge\" : [ {\"source\":0, \"destination\":1, \"values\":[2011, 0.8]}, {\"source\":1, \"destination\":2, \"values\":[2008, 0.9]} ] } Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_1_0_0\", \"1_2_0_0\" ] }","title":"Batch Create Edges"},{"location":"en-US/3.developer-document/1.restful-api/#list-out-going-edges","text":"URI : /db/{graph_name}/node/{src}/relationship/out METHOD : GET RESPONSE : The list of euid s of source vertex's out-going edges. Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/out \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"4_5_0_0\", \"4_7_1_2\" ] }","title":"List Out-going Edges"},{"location":"en-US/3.developer-document/1.restful-api/#list-incoming-edges","text":"URI : /db/{graph_name}/node/{dst}/relationship/in METHOD : GET RESPONSE : The list of euid s of destination vertex's incoming edges. Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/in \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_4_0_0\", \"3_4_3_1\" ] }","title":"List Incoming Edges"},{"location":"en-US/3.developer-document/1.restful-api/#list-all-edges","text":"URI : /db/{graph_name}/node/{src}/relationship/all METHOD : GET RESPONSE : Field Description Type in list of incoming edges' euid s List out list of outgoing edges' euid s List Example Request: \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/all \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"out\": [ \"4_5_0_0\", \"4_7_1_2\" ], \"in\": [ \"0_4_0_0\", \"3_4_3_1\" ] }","title":"List All Edges"},{"location":"en-US/3.developer-document/1.restful-api/#get-edge-information","text":"URI : /db/{graph_name}/relationship/{euid} METHOD : GET RESPONSE : Field Description Type label the label of the edge String property the properties of the edge Dictionary Example Request: \u2022 GET http://localhost:7070/db/graph1/relationship/0_4_0_0 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { }, \"label\": \"MARRIED\" }","title":"Get Edge Information"},{"location":"en-US/3.developer-document/1.restful-api/#delete-edge","text":"URI : /db/{graph_name}/relationship/{euid} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1/relationship/14_0_1_0 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK","title":"Delete Edge"},{"location":"en-US/3.developer-document/1.restful-api/#get-edge-properties","text":"URI : /db/{graph_name}/relationship/{euid}/property METHOD : GET RESPONSE : The dictionary of edge's properties. Example Request: \u2022 GET http://localhost:7070/db/graph1/relationship/14_0_2_0/property \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { { \"weight\": 0.8, \"begin\": 20180922 } }","title":"Get Edge Properties"},{"location":"en-US/3.developer-document/1.restful-api/#get-edge-field","text":"URI : /db/{graph_name}/relationship/{euid}/property/{field} METHOD : GET RESPONSE : if successful, return status code 200 and the value corresponding to given field . Example Request: \u2022 GET http://localhost:7070/db/graph1/relationship/17_0_2_2/property/charactername \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Henri Ducard\" }","title":"Get Edge Field"},{"location":"en-US/3.developer-document/1.restful-api/#update-edge-property","text":"URI : /db/{graph_name}/relationship/{euid} METHOD : PUT REQUEST : Field Description Type property properties to be updated Dictionary RESPONSE : if successful, return status code 200. Example Request: \u2022 PUT http://localhost:7070/db/graph1/relationship/17_0_2_2 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"charactername\" : \"Henri Ducard/passer a\" } } Example Response: \u2022 200: OK","title":"Update Edge Property"},{"location":"en-US/3.developer-document/1.restful-api/#index","text":"URI format is: http://{host}:{port}/db/{graph_name}/index/{label}/{field}","title":"Index"},{"location":"en-US/3.developer-document/1.restful-api/#create-index","text":"Create an index on a (label, field) pair. Blocks until the index is successfully built. URI : /db/{graph_name}/index METHOD : POST REQUEST :","title":"Create Index"},{"location":"en-US/3.developer-document/1.restful-api/#_1","text":"Field Description Type label the name of label String field field to be indexed String is_unique whether this index is a unique index Bool RESPONSE : if successful, return status code 200. Example Request: \u2022 POST http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\": \"Person\", \"field\": \"birthyear\", \"is_unique\" : false } Example Response: \u2022 200: OK","title":""},{"location":"en-US/3.developer-document/1.restful-api/#list-all-indexes","text":"URI : /db/{graph_name}/index METHOD : GET RESPONSE : A list of index specifications, each of which has the same format as use in Create Index . Example Request: \u2022 GET http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"field\": \"name\", \"label\": \"City\", \"is_unique\": false }, { \"field\": \"title\", \"label\": \"Film\", \"is_unique\": false }, { \"field\": \"name\", \"label\": \"Person\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] }","title":"List All Indexes"},{"location":"en-US/3.developer-document/1.restful-api/#list-indexes-related-with-specified-label","text":"URI : /db/{graph_name}/index/{label} METHOD : GET RESPONSE : A list of index specifications, each of which has the same format as use in Create Index . Example Request: \u2022 GET http://localhost:7070/db/graph1/index/Person \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"label\": \"Person\", \"field\": \"name\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] }","title":"List Indexes Related with Specified Label"},{"location":"en-US/3.developer-document/1.restful-api/#delete-index","text":"URI : /db/{graph_name}/index/{label}/{field} METHOD : DELETE RESPONSE : if successful, return status code 200. Example Request: \u2022 DELETE http://localhost:7070/db/graph1/index/Person/name \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK","title":"Delete Index"},{"location":"en-US/3.developer-document/1.restful-api/#get-vertex-by-index","text":"URI : /db/{graph_name}/index/{label}/?field={field}&value={value} METHOD : GET RESPONSE : A list of vid s. Example Request: \u2022 GET http://localhost:7070/db/graph1/index/Person/?field=birthyear&value=1986 \u2022 Accept: application/json; charset=UTF-8 Example Response: \u2022 200: OK Output: { [ 1, 8 ] }","title":"Get Vertex by Index"},{"location":"en-US/3.developer-document/1.restful-api/#data-import","text":"URI : /db/{graph_name}/import/text METHOD : POST REQUEST : Field Description Type description description of the file content String data contents of the file to be imported (recommended to have a size of 16MB, has a hard limit of 17MB) Strings / Arrays / Objects continue_on_error whether to continue import when an error occurred (optional, default is false ) Bool delimiter delimiter used in the data file (optional, default is \u201c,\u201d ) String The details of the description field can be found in TuGraph User Manual . delimiter can be a single character or multi-character string, but must not contain \\r or \\n . data can be one of the following: String, such as \"1,2\\n3,4\\n\" Array of ASCII codes, such as [49,44,50,10,51,44,52,10] Dictionary shaped like the above array, such as {\"0\":49,\"1\":44,\"2\":50,\"3\":10,\"4\":51,\"5\":44,\"6\":52,\"7\":10} RESPONSE : The system will not automatically perform actions such as creating a new label, adding an index, and so on. Before you do this, please make sure that the label involved already exists and has an appropriate index. If the import is successful, return code 200 and return log information (possibly empty) in the log field. Otherwise, returns status code 400. None of the data is imported on failure, and error message is set in error_message . Example Request: \u2022 POST http://localhost:7070/db/graph1/import/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"files\\\\\":[{\\\\\"columns\\\\\":[\\\\\"SRC_ID\\\\\",\\\\\"role\\\\\",\\\\\"DST_ID\\\\\"],\\\\\"format\\\\\":\\\\\"CSV\\\\\",\\\\\"label\\\\\":\\\\\"role\\\\\",\\\\\"SRC_ID\\\\\":\\\\\"actor\\\\\",\\\\\"DST_ID\\\\\":\\\\\"movie\\\\\"}]}\"}\", \"data\": \"1,Role1,2\\n3,Role2,4\\n\", \"continue_on_error\": true } The value of the above description is the following json serialized string : { \"files\": [ { \"format\": \"CSV\", \"label\": \"role\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } Example Response: \u2022 200: OK Output: { \"log\": \"Missing src uid 1\\n\" } Because the request specifies continue_on_error: true , the returned log indicates that the first edge cannot be inserted because there is no vertex with uid==1, while the second edge was imported successfully.","title":"Data Import"},{"location":"en-US/3.developer-document/1.restful-api/#miscellany","text":"URI format is: http://{host}:{port}/db/{graph_name}/misc","title":"Miscellany"},{"location":"en-US/3.developer-document/1.restful-api/#extract-subgraph","text":"Give a set of vid s and return the minimum subgraph which contains the vertex set and the edges between them. URI : /db/{graph_name}/misc/sub_graph METHOD : POST REQUEST : Field Description Type vertex_ids vertex id set List RESPONSE : Field description Type nodes vertex information List, each element contains vid, label, and properties. relationships edge information List, each element contains src, dst, euid, label, and properties. Example Request: \u2022 POST http://localhost:7070/db/graph1/misc/sub_graph \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"vertex_ids\": [2, 5, 14, 20] } Example Response: \u2022 200: OK Output: { \"nodes\": [ { \"label\": \"Person\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"vid\": 2 }, { \"label\": \"Person\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"vid\": 5 }, { \"label\": \"City\", \"properties\": { \"name\": \"London\" }, \"vid\": 14 }, { \"label\": \"Film\", \"properties\": { \"title\": \"Camelot\" }, \"vid\": 20 } ], \"relationships\": [ { \"destination\": 5, \"label\": \"HAS_CHILD\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 20, \"label\": \"ACTED_IN\", \"properties\": { \"birthyear\": 1937, \"charactername\": \"Guenevere\", \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"source\": 5 } ] }","title":"Extract Subgraph"},{"location":"en-US/3.developer-document/2.cypher/","text":"TuGraph-Cypher This document mainly introduces the detailed usage instructions of TuGraph-Cypher. Summary Operators support progress overview\uff1a category supported unsupported General operators DISTINCT , . for property access [] for dynamic property access Mathematical operators + , - , * , / , % , ^ Comparison operators = , <> , < , > , \u21d0 , >= , IS NULL , IS NOT NULL String-specific comparison operators STARTS WITH , ENDS WITH , CONTAINS , REGEXP Boolean operators AND , OR , XOR , NOT String operators + for concatenation List operators + for concatenation, IN to check existence of an element in a list, [] for accessing element(s) General operators \u2713 Using the DISTINCT operator CREATE (a:Person {name: 'Anne', eyeColor: 'blue'}), (b:Person {name: 'Bill', eyeColor: 'brown'}), (c:Person {name: 'Carol', eyeColor: 'blue'}) MATCH (p:Person ) RETURN DISTINCT p.eyeColor \u2713 Accessing properties of a nested literal map using the . operator WITH {person: {name: 'Anne', age: 25}} AS p RETURN p.person.name \u274f Filtering on a dynamically-computed property key using the [] operator CREATE (a:Restaurant {name: 'Hungry Jo', rating_hygiene: 10, rating_food: 7}), (b:Restaurant {name: 'Buttercup Tea Rooms', rating_hygiene: 5, rating_food:6}), (c1:Category {name: 'hygiene'}), (c2:Category {name: 'food'}) MATCH (restaurant:Restaurant), (category:Category) WHERE restaurant[\"rating_\" + category.name] > 6 RETURN DISTINCT restaurant.name Mathematical operators \u2713 Using the exponentiation operator ^ WITH 2 AS number, 3 AS exponent RETURN number ^ exponent AS result \u2713 Using the unary minus operator - WITH -3 AS a, 4 AS b RETURN b - a AS result Comparison operators \u2713 Comparing two numbers WITH 4 AS one, 3 AS two RETURN one > two AS result String-specific comparison operators \u2713 Using STARTS WITH to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate STARTS WITH 'Jo' RETURN candidate \u2713 Using REGEXP to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate REGEXP 'Jo.*n' RETURN candidate Boolean operators \u2713 Using boolean operators to filter numbers WITH [2, 4, 7, 9, 12] AS numberlist UNWIND numberlist AS number WITH number WHERE number = 4 OR (number > 6 AND number < 10) RETURN number String operators String operators comprise: \u2713 concatenating strings: + More details on string-specific comparison operators can be found here List operators \u2713 Concatenating two lists using + RETURN [1,2,3,4,5]+[6,7] AS myList \u2713 Using IN to check if a number is in a list WITH [2, 3, 4, 5] AS numberlist UNWIND numberlist AS number WITH number WHERE number IN [2, 3, 8] RETURN number \u2713 Accessing elements in a list using the [] operator WITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names RETURN names[1..3] AS result Clauses Summary Clauses support progress list\uff1a category grammar comment Reading clauses MATCH supported OPTIONAL MATCH supported MANDATORY MATCH unsupported Projecting clauses RETURN \u2026 [AS] supported WITH \u2026 [AS] supported UNWIND \u2026 [AS] supported Reading sub-clauses WHERE supported ORDER BY [ASC[ENDING] / DESC[ENDING]] supported SKIP supported LIMIT supported Writing clauses CREATE supported DELETE supported DETACH DELETE supported SET supported REMOVE supported Reading/Writing clauses MERGE supported CALL [\u2026YIELD] supported Set operations UNION unsupported UNION ALL supported MATCH Basic node finding \u2713 Get all nodes MATCH (n) RETURN n \u2713 Get all nodes with a label MATCH (movie:Movie) RETURN movie.title \u2713 Related nodes MATCH (director {name: 'Oliver Stone'})-[]-(movie) RETURN movie.title \u2713 Match with labels MATCH (director {name: 'Oliver Stone'})-[]-(movie) RETURN movie.title Relationship basics \u2713 Outgoing relationships MATCH (:Person {name: 'Oliver Stone'})-[]->(movie) RETURN movie.title \u2713 Directed relationships and variable MATCH (:Person {name: 'Oliver Stone'})-[r]->(movie) RETURN type(r) \u2713 Match on relationship type MATCH (wallstreet:Movie {title: 'Wall Street'})<-[:ACTED_IN]-(actor) RETURN actor.name \u2713 Match on multiple relationship types MATCH (wallstreet {title: 'Wall Street'})<-[:ACTED_IN|:DIRECTED]-(person) RETURN person.name \u2713 Match on relationship type and use a variable MATCH (wallstreet {title: 'Wall Street'})<-[r:ACTED_IN]-(actor) RETURN r.role Relationships in depth \u274f Relationship types with uncommon characters MATCH (n {name: 'Rob Reiner'})-[r:`TYPE WITH SPACE`]->() RETURN type(r) \u2713 Multiple relationships MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director) RETURN movie.title, director.name \u2713 Variable-length relationships MATCH (martin {name: 'Charlie Sheen'})-[:ACTED_IN*1..3]-(movie:Movie) RETURN movie.title \u2713 Relationship variable in variable-length relationships MATCH p = (actor {name: 'Charlie Sheen'})-[:ACTED_IN*2]-(co_actor) RETURN relationships(p) \u274f Match with properties on a variable-length path MATCH p = (charlie:Person)-[* {blocked:false}]-(martin:Person) WHERE charlie.name = 'Charlie Sheen' AND martin.name = 'Martin Sheen' RETURN p \u2713 Zero-length paths MATCH (wallstreet:Movie {title: 'Wall Street'})-[*0..1]-(x) RETURN x \u2713 Named paths MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p \u2713 Matching on a bound relationship MATCH (a)-[r]-(b) WHERE id(r)= 0 RETURN a,b Shortest path \u2713 Single shortest path MATCH (martin:Person {name: 'Martin Sheen'}), (oliver:Person {name: 'Oliver Stone'}), p = shortestPath((martin)-[*..15]-(oliver)) RETURN p \u2713 All shortest paths MATCH (martin:Person {name: 'Martin Sheen'}), (michael:Person {name: 'Michael Douglas'}), p = allShortestPaths((martin)-[*]-(michael)) RETURN p Get node or relationship by id \u2713 Node by id MATCH (n) WHERE id(n)= 0 RETURN n \u2612 Relationship by id MATCH ()-[r]->() WHERE id(r) = 0 RETURN r \u2713 Multiple nodes by id MATCH (n) WHERE id(n) IN [0, 3, 5] RETURN n RETURN \u2713 Return nodes MATCH (n {name: 'B'}) RETURN n Note Return id of n. \u2713 Return relationships MATCH (n {name: 'A'})-[r:KNOWS]->(c) RETURN r Note Return EdgeUid of r. \u2713 Return property MATCH (n {name: 'A'}) RETURN n.name \u274f Return all elements MATCH p = (a {name: 'A'})-[r]->(b) RETURN * \u274f Variable with uncommon characters MATCH (`This isn\\'t a common variable`) WHERE `This isn\\'t a common variable`.name = 'A' RETURN `This isn\\'t a common variable`.happy \u2713 Aliasing a field MATCH (a {name: 'A'}) RETURN a.age AS SomethingTotallyDifferent \u2713 Optional properties MATCH (n) RETURN n.age \u274f Other expressions MATCH (a {name: 'A'}) RETURN a.age > 30, \"I'm a literal\", (a)-[]->() (a)-[]->() not supported. \u2713 Unique results MATCH (a {name: 'A'})-[]->(b) RETURN DISTINCT b WHERE Basic usage \u2713 Boolean operations MATCH (n) WHERE n.name = 'Peter' XOR (n.age < 30 AND n.name = 'Tobias') OR NOT (n.name = 'Tobias' OR n.name = 'Peter') RETURN n.name, n.age \u2713 Filter on node label MATCH (n) WHERE n:Swedish RETURN n.name, n.age \u2713 Filter on node property MATCH (n) WHERE n.age < 30 RETURN n.name, n.age \u2713 Filter on relationship property MATCH (n)-[k:KNOWS]->(f) WHERE k.since < 2000 RETURN f.name, f.age, f.email \u274f Filter on dynamically-computed property WITH 'AGE' AS propname MATCH (n) WHERE n[toLower(propname)]< 30 RETURN n.name, n.age \u2713 Property existence checking MATCH (n) WHERE exists(n.belt) RETURN n.name, n.belt String matching \u2713 Match the beginning of a string MATCH (n) WHERE n.name STARTS WITH 'Pet' RETURN n.name, n.age \u2713 Match the ending of a string MATCH (n) WHERE n.name ENDS WITH 'ter' RETURN n.name, n.age \u2713 Match anywhere within a string MATCH (n) WHERE n.name CONTAINS 'ete' RETURN n.name, n.age \u2713 String matching negation MATCH (n) WHERE NOT n.name ENDS WITH 's' RETURN n.name, n.age Using path patterns in WHERE \u2713 Filter on patterns MATCH (tobias {name: 'Tobias'}), (others) WHERE others.name IN ['Andres', 'Peter'] AND (tobias)<-[]-(others) RETURN others.name, others.age \u2713 Filter on patterns using NOT MATCH (persons), (peter {name: 'Peter'}) WHERE NOT (persons)-[]->(peter) RETURN persons.name, persons.age \u2713 Filter on patterns with properties MATCH (n) WHERE (n)-[:KNOWS]-({name: 'Tobias'}) RETURN n.name, n.age \u2713 Filter on relationship type MATCH (n)-[r]->() WHERE n.name='Andres' AND type(r) STARTS WITH 'K' RETURN type(r), r.since Lists \u2713 IN operator MATCH (a) WHERE a.name IN ['Peter', 'Tobias'] RETURN a.name, a.age Missing properties and values \u2713 Default to false if property is missing MATCH (n) WHERE n.belt = 'white' RETURN n.name, n.age, n.belt \u2713 Default to true if property is missing MATCH (n) WHERE n.belt = 'white' OR n.belt IS NULL RETURN n.name, n.age, n.belt ORDER BY n.name \u2713 Filter on null MATCH (person) WHERE person.name = 'Peter' AND person.belt IS NULL RETURN person.name, person.age, person.belt Using ranges \u2713 Simple range MATCH (a) WHERE a.name >= 'Peter' RETURN a.name, a.age \u2713 Composite range MATCH (a) WHERE a.name > 'Andres' AND a.name < 'Tobias' RETURN a.name, a.age SKIP \u2713 Skip first three records MATCH (n) RETURN n.name ORDER BY n.name SKIP 3 \u2713 Return middle two records MATCH (n) RETURN n.name ORDER BY n.name SKIP 1 LIMIT 2 \u2713 Using an expression with SKIP to return a subset of the records MATCH (n) RETURN n.name ORDER BY n.name SKIP toInteger(3*rand())+ 1 LIMIT \u2713 Return a subset of the records MATCH (n) RETURN n.name LIMIT 3 \u2713 Using an expression with LIMIT to return a subset of the records MATCH (n) RETURN n.name LIMIT toInteger(3 * rand())+ 1 CREATE Create nodes Note TuGraph does not support creating empty nodes and does not support multiple labels. \u2612 Create single node CREATE (n) \u2612 Create multiple nodes CREATE (n), (m) \u2713 Create a node with a label CREATE (n:Person) \u2612 Create a node with multiple labels CREATE (n:Person:Swedish) \u2713 Create node and add labels and properties CREATE (n:Person {name: 'Andres', title: 'Developer'}) \u2713 Return created node CREATE (a {name: 'Andres'}) RETURN a Create relationships \u2713 Create a relationship between two nodes MATCH (a:Person), (b:Person) WHERE a.name = 'Node A' AND b.name = 'Node B' CREATE (a)-[r:RELTYPE]->(b) \u2713 Create a relationship and set properties MATCH (a:Person), (b:Person) WHERE a.name = 'Node A' AND b.name = 'Node B' CREATE (a)-[r:RELTYPE {name: a.name + '<->' + b.name}]->(b) \u2713 Create a full path CREATE p = (andres {name:'Andres'})-[:WORKS_AT]->(neo)<-[:WORKS_AT]-(michael {name:'Michael'}) RETURN p Use parameters with CREATE \u274f Create node with a parameter for the properties CREATE (n:Person $props) RETURN n \u2612 Create multiple nodes with a parameter for their properties UNWIND $props AS map CREATE (n) SET n = map cannot create vertex without label. CALL[\u2026YIELD] \u2713 Call a procedure using CALL CALL db.vertexLabels \u2713 View the signature for a procedure CALL dbms.procedures() YIELD name, signature WHERE name='dbms.listConfig' RETURN signature \u274f Call a procedure using a quoted namespace and name CALL `db`.`vertexLabels` \u2713 Call a procedure with literal arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0, 'name') \u274f Call a procedure with parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex($indexName,$node,$propKey) \u274f Call a procedure with mixed literal and parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', $node, 'name') \u2713 Call a procedure with literal and default arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0) \u2713 Call a procedure within a complex query using CALL\u2026YIELD CALL db.vertexLabels() YIELD label RETURN count(label) AS numLabels \u2713 Call a procedure and filter its results CALL db.vertexLabels() YIELD label WHERE label CONTAINS 'User' RETURN count(label) AS numLabels \u274f Call a procedure within a complex query and rename its outputs CALL db.propertyKeys() YIELD propertyKey AS prop MATCH (n) WHERE n[prop] IS NOT NULL RETURN prop, count(n) AS numNodes UNION \u2713 Combine two queries and retain duplicates MATCH (n:Actor) RETURN n.name AS name UNION ALL MATCH (n:Movie) RETURN n.title AS name \u274f Combine two queries and remove duplicates MATCH (n:Actor) RETURN n.name AS name UNION MATCH (n:Movie) RETURN n.title AS name Functions Whole List Of Functions category function comment Predicate functions exists() all() any() single() none() Scalar functions id() properties() head() last() toBoolean() toFloat() toInteger() toString() type() startnode() endnode() size() length() endnode() label() OpenCypher extension method Aggregating functions avg() collect() count() max() min() percentileCont() percentileDisc() stDev() stDevP() variance() varianceP() sum() List functions keys() labels() range() subscript() Mathematical functions abs() ceil() floor() rand() round() sign() String functions / Predicate functions exists() judge it whether a vertex or edge has the field . Scope: whole instance. Example input: MATCH (n) WHERE exists(n.belt) RETURN n.name, n.belt Example output: exists(name) true Scalar functions id() get the id of vertex. Scope: whole instance. Example input: MATCH (a) RETURN id(a) Example output: vid 1 2 ... properties() get a map containing all the properties of a node or relationship. Scope: whole instance. Example input: CREATE (p:Person {name: 'Stefan', city: 'Berlin'}) RETURN properties(p) Example output: properties {name:Stefan,city:Berlin} head() get the first element of a list. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, head(a.array) Example output: a.array head(a.array) [\"one\",\"two\",\"three\"] \"one\" last() get the last element of a list. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, last(a.array) Example output: a.array last(a.array) [\"one\",\"two\",\"three\"] \"three\" toFloat() Converts an integer or string value to a floating point number. Scope: whole instance. Example input: RETURN toFloat('11.5'), toFloat('not a number') Example output: | float | | ----- | | 11.5 | |null| toInteger() Converts a floating point or string value to an integer value. Scope: whole instance. Example input: RETURN toInteger('2.3') AS integer Example output: integer 2 toString() Converts an integer, float, boolean value to a string. Scope: whole instance. Example input: RETURN toString(2.3) type() get the string representation of the relationship type. Scope: whole instance. Example input: MATCH (n)-[r]->() WHERE n.name = 'Alice' RETURN type(r) Example output: type acted_in acted_in Aggregating functions avg() Returns the average of a set of numeric values. Scope: whole instance. Example input: MATCH (n:Person) RETURN avg(n.age) Example output: avg(n.born) 1869.2661654135338 collect() Returns a list containing the values returned by an expression. Scope: whole instance. Example input: MATCH (n:Person) RETURN collect(n.age) Example output: collect(n.born) [1967,...] count() Returns the number of values or records. Scope: whole instance. Example input: MATCH (n {name: 'A'})-[]->(x) RETURN labels(n), n.age, count(*) Example output: labels(n) n.age count(*) [\"Person\"] 13 3 max() Returns the maximum value in a set of values. Scope: whole instance. Example input: MATCH (n:Person) RETURN max(n.age) Example output: max(n.age) 44 min() Returns the minimum value in a set of values. Scope: whole instance. Example input: MATCH (n:Person) RETURN min(n.age) Example output: min(n.age) 13 percentileCont() Returns the percentile of a value over a group using linear interpolation. Scope: whole instance. Example input: MATCH (n:Person) RETURN percentileCont(n.age, 0.4) Example output: percentileCont(n.age, 0.4) 29 percentileDisc() Returns the nearest value to the given percentile over a group using a rounding method. Scope: whole instance. Output: the percentile of the given value over a group. Example input: MATCH (n:Person) RETURN percentileDisc(n.age, 0.5) Example output: percentileDisc(n.age, 0.5) 33 stDev() Returns the standard deviation for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN stDev(n.age) Example output: stDev(n.age) 15.716233645501712 stDevP() Returns the standard deviation for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN stDevP(n.age) Example output: stDevP(n.age) 12.832251036613439 variance() Returns the variance for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN variance(n.age) Example output: variance(n.age) 247 varianceP() Returns the variance for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN varianceP(n.age) Example output: varianceP(n.age) 164.66666666667 sum() Returns the sum of a set of numeric values. Scope: whole instance. Example input: MATCH (n:Person) RETURN sum(n.age) Example output: sum(n.age) 90 List Funtions: keys() get the field names of some vertex. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Alice' RETURN keys(a) Example output: keys(a) [\"name\",\"age\",\"eyes\"] labels()/label() Returns a list containing the string representations for all the property names of a node, relationship, or map. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Alice' RETURN labels(a) Example output: labels [\"Person\",\"Developer\"] Mathematical functions abs() get the absolute value of some data. Scope: whole instance. Example input: MATCH (a), (e) WHERE a.name = 'Alice' AND e.name = 'Eskil' RETURN a.age, e.age, abs(a.age - e.age) Example output: a.age e.age abs(a.age - e.age) 38 41 1 ceil() Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN ceil(0.1) Example output: ceil(0.1) 1.0 floor() get the largest floating point number that is less than or equal to the given number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN floor(0.9) Example output: floor(0.9) 0.0 round() Returns the value of a number rounded to the nearest integer. Scope: whole instance. Example input: RETURN round(3.141592) Example output: round 3 rand() Returns returns a random floating point number in the range from 0 (inclusive) to 1 exclusive). Scope: whole instance. Example input: RETURN rand() Example output: rand() 0.9797131960534085 sign() Get the signum of the given number: 0 if the number is 0, -1 for any negative number, and 1 for any positive number. Scope: whole instance. Example input: RETURN sign(-17), sign(0.1) Example output: sign(-17) sign(0.1) -1 1 Extensions To OpenCypher Number of Labels TuGraph: Each node/relationship must have one and only one label. So error occurs when there is no label, and the 1st label will be picked as the label if there are more than one label. OpenCypher: One node/relationship may have 0 to many labels. Schema. TuGraph: TuGraph has strong schema OpenCypher: schema-less Procedures procedures' demos dbms.procedures() Lists all available procedures. Scope: whole instance. Output: a list of { signature , name }. Example input: CALL dbms.procedures() Example output: signature name db.vertexLabels() :: (label::STRING) db.vertexLabels db.edgeLabels() :: (edgeLabels::STRING) db.edgeLabels db.indexes() :: (index::LIST) db.indexes ... ... db.vertexLabels() Lists all available labels of vertex. Scope: whole instance. Output: a list of { name }. Example input: CALL db.vertexLabels() Example output: label genre keyword movie ... db.edgeLabels() Lists all available labels of edges. Scope: whole instance. Output: a list of {edgeLabels}. Example input: CALL db.edgeLabels() Example output: edgeLabel acted_in directed ... db.createVertexLabel(label_name, primary_field, field_spec...) Create a vertex label. Scope: whole instance. Parameters: parameter parameter type description label_name string name of vertex label primary_field string primary field of vertex label field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, true] , where true is specified only for optional fields. Output: If successful, it returns a success message. Example input: CALL db.createVertexLabel('Person', 'id', 'id', int64, false, 'name', string, true) Example output: Added label [Person] db.getLabelSchema(label_type, label_name) Get the schema definition of the label in a subgraph. Scope: subgraph, as specified in the graph parameter in REST or RPC request. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: a list of label specifications, in which each element is a list of the following fields: field_name field_type description name string name of the field type string type of the field optional boolean whether the field is optional Example input: CALL db.getLabelSchema('vertex', 'Person') Example output: name type optional id INT32 false born INT32 true name STRING true poster_image STRING true db.createLabel(label_type, label_name, extra, field_spec...) Create a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label extra string for edge, it means constraints; for vertex, it means primary property field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, 'optional'] . for edge, extra should be a json array string, like this [[\"label1\",\"label2\"], [\"label3\",\"label4\"]] , if edge has no constraints, give an empty json array, like this [] Output: If successful, it returns a success message. Example input: CALL db.createLabel('vertex', 'new_label', 'id', ['id',int32,false], ['name',string, true]); CALL db.createLabel('edge', 'new_edge', '[[\"id1\",\"id2\"]]', ['id',int32,false], ['name', string, true]); Example output: Vertex label [new_label] successfully added. db.deleteLabel(label_type, label_name) Delete a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: field_name field_type description affected integer number of vertexes/edges deleted Example input: CALL db.deleteLabel('vertex', 'person') Example output: affected 1024 db.alterLabelDelFields(label_type, label_name, field_names) Delete specified fields from the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_names list of strings names of the fields to delete Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelDelFields('vertex', 'Person', ['name', 'image']) Example output: affected 1024 db.alterLabelAddFields(label_type, label_name, field_value_spec...) Adds specified fields to the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_value_spec list specification of a field in which each field_value_spec is a list of string in the form of [field_name, field_type, field_value, 'optional'] , where: field_value is the default value of the field. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelAddFields( 'vertex', 'new_label', ['birth_date', DATE, '', true], ['img', BLOB, '', true]) Example output: affected 1024 db.alterLabelModFields(label_type, label_name, field_spec...) Modifies the specified fields in the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, 'optional'] .The target field should exist. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelModFields( 'vertex', 'new_label', ['birth_date', 'DATETIME', '1900-01-01 00:00:00'], ['gender', 'BOOL', false]) Example output: affected 1024 db.createEdgeLabel( label_name, field_spec...) Create an edge label. Parameters: parameter parameter type description label_name string name of the label edge_constraints string edge constraints field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, optional] , where optional is specified as true, only for optional fields. edge_constraints is a json array string, This parameter limits the combination of starting and ending vertex of the edge, for example: '[[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]]' , which limits the edge direction can only be from vertex_label1 to vertex_label2 or from vertex_label3 to vertex_label4 . If you don't want to have any constraints, give an empty array string, like this '[]' Output: If successful, it returns a success message. Example input: CALL db.createEdgeLabel('KNOWS', '[]', 'name', int32,true) Example output: Added type [KNOWS] db.addIndex(label_name, field_name, is_unique) create an index on some field of one vertex label . Parameters: parameter parameter type description label_name string name of the label field_name string specification of a field is_unique boolean Specifies whether the index is unique Output: If successful, it returns a success message. Example input: CALL db.addIndex('Person', 'id', true) Example output: Added index [Perosn:id] dbms.security.changePassword(current_password ,new_password) Change the current user's password. Parameters: parameter parameter type description current_password string the current password new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changePassword('73@TuGraph','admin') Example output: true dbms.security.changeUserPassword(user_name, new_password) Change the current user's password. Parameters: parameter parameter type description user_name string the user's name new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changeUserPassword('quest','73@TuGraph') Example output: true dbms.security.createUser(user_name, password) create new user on this graph database. Parameters: parameter parameter type description user_name string the new user name password string the password of new user Output: If successful, it returns a success message. Example input: CALL dbms.security.createUser('quest',\"admin\") Example output: true dbms.security.deleteUser(user_name) delete user on this graph database. Parameters: parameter parameter type description user_name string the user name to be deleted Output: If successful, it returns a success message. Example input: CALL dbms.security.deleteUser('quest') Example output: true dbms.security.listUsers() get all user's name of the graph database. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.name string the user name is.admin boolean the permission of this user Example input: CALL dbms.security.listUsers() Example output: user.name is.admin admin true ... ... dbms.security.showCurrentUser() get current user's name. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.user string the current user name Example input: CALL dbms.security.showCurrentUser() Example output: user.name admin dbms.security.listAllowedHosts() get the list of ips to be allowed . Output: a list of ips which are allowed. Example input: CALL dbms.security.listAllowedHosts() Example output: host 192.168.1.22 ... dbms.security.deleteAllowedHosts(hosts) delete some ips from the list of ips to be allowed . Output: the number of ip which been deleted. Example input: CALL dbms.security.deleteAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.security.addAllowedHosts(hosts) add some ips from the list of ips to be allowed . Output: the number of ip which been added. Example input: CALL dbms.security.addAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.graph.createGraph(graph_name, description, max_size_GB) create a new subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of new subgraph description string description of new subgraph max_size_GB integer Upper limit of subgraph capacity Output: if successful , it will return true. Example input: CALL dbms.graph.createGraph('graph1', 'description', 2045) Example output: success true dbms.graph.deleteGraph(graph_name) delete a subgraph in this graph database . parameter parameter type description graph_name string the name of subgraph to been deleted Output: if successful , it will return true. Example input: CALL dbms.graph.deleteGraph('graph1') Example output: success true dbms.graph.modGraph(graph_name, config) delete a subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of subgraph to been deleted config map the configuration to be modified Output: if successful , it will return true. Example input: CALL dbms.graph.modGraph('graph1',{description:'this graph', max_size_GB:20}) Example output: success true dbms.graph.listGraphs() get all subgraph in this graph database . Output: a list of {subgraph and configuration}. Example input: CALL dbms.graph.listGraphs() Example output: graph.name configuration default {\"description\":\"\",\"max_size_GB\":1024} graph1 {\"description\":\"this graph\",\"max_size_GB\":20} ... ... dbms.config.list() get some config of this graph database . Output: a list of {configuration}. Example input: CALL dbms.config.list() Example output: name value bind_host 0.0.0.0 durable true ... ... dbms.config.update(updates) get some config of this graph database . Output: If successful, it returns a success message Example input: CALL dbms.config.update({ enable_ip_check:false, durable:true, optimistic_txn:true, enable_audit_log:true}) Example output: Update succeeded. dbms.takeSnapshot() take the snapshot on this current graph database. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.takeSnapshot() Example output: path log/db/snapshot/2020-07-20_17.20.03 dbms.listBackupFiles() get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.listBackupFiles() Example output: path tugraph/db/binlog/binlog_0 algo.shortestPath(startNode, endNode, config) get one of the shortest paths between two vertexes. Parameters: parameter parameter type description startNode Node the source node of paths endNode Node the destination node paths config MAP the filter of shortest paths, the formate as {maxHops:3, relationshipQuery:'HAS_CHILD'} Output: If successful, it will returns one group result of the shortest path. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost Example output: nodeCount totalCost 2 1 algo.allShortestPaths(startNode, endNode, config)) get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,cost RETURN nodeIds,cost Example output: nodeIds cost [2,665] 1 ... algo.algo.native.extract(id, config)) get the field values of a list of vertexes or edges. Parameters: parameter parameter type description id ANY the id of vertexes or edges , the id must be variable config MAP the configuration of this extraction of vertexes or edges in which each config is a map in the form of {isNode:true, filed:'HAS_CHILD'} , if isNode is specified true, the id is a vertex id, or it is an edge id. Output: If successful, it returns a list of the value of vertexes or edges specified field . Example input: with [2,3] as vids CALL algo.native.extract(vids,{isNode:true, field:'id'}) YIELD value RETURN value Example output: value [4,5] Whole List Of Procedures Name Description Signature db.vertexLabels list all vertex labels db.vertexLabels() :: (label::STRING) db.edgeLabels list all edge labels db.edgeLabels() :: (edgeLabels::STRING) db.indexes list all indexes db.indexes() :: (label::STRING,field::STRING,unique::BOOLEAN) db.warmup warm up the DB db.warmup() :: (time_used::STRING) db.createVertexLabel create a vertex label db.createVertexLabel(label_name::STRING,field_specs::LIST) :: (::VOID) db.createLabel create a vertex/edge label db.createLabel(label_type::STRING,label_name::STRING,extra::STRING,field_specs::LIST) :: () db.getLabelSchema get the schema of label db.getLabelSchema(label_type::STRING,label_name::STRING) :: (name::STRING,type::STRING,optional::BOOLEAN) db.getVertexSchema get the schema of vertex label db.getVertexSchema(label::STRING) :: (schema::MAP) db.getEdgeSchema get the schema of edge label db.getEdgeSchema(label::STRING) :: (schema::MAP) db.deleteLabel delete vertex/edge label db.deleteLabel(label_type::STRING,label_name::STRING) :: (::VOID) db.alterLabelDelFields delete some fields of a label on a subgraph db.alterLabelDelFields(label_type::STRING,label_name::STRING,del_fields::LIST) :: (record_affected::INTEGER) db.alterLabelAddFields add some fields of a label on a subgraph db.alterLabelAddFields(label_type::STRING,label_name::STRING,add_field_spec_values::LIST) :: (record_affected::INTEGER) db.alterLabelModFields modify some fields of a label on a subgraph db.alterLabelModFields(label_type::STRING,label_name::STRING,mod_field_specs::LIST) :: (record_affected::INTEGER) db.createEdgeLabel create a edge label db.createEdgeLabel(type_name::STRING,field_specs::LIST) :: (::VOID) db.addIndex add an index db.addIndex(label_name::STRING,field_name::STRING,is_unique::BOOLEAN) :: (::VOID) db.deleteIndex delete an index db.deleteIndex(label_name::STRING,field_name::STRING) :: (::VOID) db.backup backup the db db.backup(destination::STRING) :: () dbms.procedures list all procedures dbms.procedures() :: (name::STRING,signature::STRING) dbms.security.changePassword change current user password dbms.security.changePassword(current_password::STRING,new_password::STRING) :: (::VOID) dbms.security.changeUserPassword change user password dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) :: (::VOID) dbms.security.createUser create an account dbms.security.createUser(user_name::STRING,password::STRING) :: (::VOID) dbms.security.deleteUser delete an account dbms.security.deleteUser(user_name::STRING) :: (::VOID) dbms.security.listUsers list all accounts dbms.security.listUsers() :: (user_name::STRING,user_info::MAP) dbms.security.showCurrentUser get current user name dbms.security.showCurrentUser() :: (current_user::STRING) dbms.security.getUserPermissions get the permissions of a specified user dbms.security.getUserPermissions(user_name::STRING) :: (user_info::MAP) dbms.graph.createGraph create a subgraph dbms.graph.createGraph(graph_name::STRING, description::STRING, max_size_GB::INTEGER) :: (::VOID) dbms.graph.modGraph modify the config of a subgraph dbms.graph.modGraph(graph_name::STRING,config::MAP) :: (::VOID) dbms.graph.deleteGraph delete a subgraph dbms.graph.deleteGraph(graph_name::STRING) :: (::VOID) dbms.graph.listGraphs list all subgraphs dbms.graph.listGraphs() :: (graph_name::STRING,configuration::MAP) dbms.graph.getGraphInfo get the information of a specified graph dbms.graph.getGraphInfo(graph_name::STRING)::(graph_name::STRING,configuration::MAP) dbms.security.addAllowedHosts add to the trust list dbms.security.addAllowedHosts(hosts::LIST) :: (num_new::INTEGER) dbms.security.deleteAllowedHosts remove from the trust list dbms.security.deleteAllowedHosts(hosts::LIST) :: (record_affected::INTEGER) dbms.security.listAllowedHosts list the trust list dbms.security.listAllowedHosts() :: (host::STRING) dbms.config.update update the configuration dbms.config.update(updates::MAP) :: (message::STRING) dbms.config.list list the configuration dbms.config.list() :: (name::STRING,value::ANY) algo.shortestPath get a shortest path between two vertexes algo.shortestPath(startNode::NODE,endNode::NODE,config::MAP) :: (nodeCount::INTEGER,totalCost::FLOAT) algo.allShortestPaths get all the shortest paths between two vertexes algo.allShortestPaths(startNode::NODE,endNode::NODE,config::MAP) :: (nodeIds::LIST,relationshipIds::LIST,cost::LIST) algo.native.extract get the field values of a list of vertexes or edges specified id algo.native.extract(id::ANY,config::MAP) :: (value::ANY) db.flushDB flush the db db.flushDB() :: (::VOID) dbms.security.listRoles list all roles dbms.security.listRoles() :: (role_name::STRING,role_info::MAP) dbms.security.createRole create a role dbms.security.createRole(role_name::STRING,desc::STRING) :: (::VOID) dbms.security.deleteRole delete a role dbms.security.deleteRole(role_name::STRING) :: (::VOID) dbms.security.getRoleInfo get the role information dbms.security.getRoleInfo(role::STRING) :: (role_info::MAP) dbms.security.disableRole enable/disable the role dbms.security.disableRole(role::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.modRoleDesc modify the description of a role dbms.security.modRoleDesc(role::STRING,description::STRING) :: (::VOID) dbms.security.rebuildRoleAccessLevel rebuild the user subgraph access rights dbms.security.rebuildRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleAccessLevel modify the user subgraph access rights dbms.security.modRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleFieldAccessLevel modify the user property access rights dbms.security.modRoleFieldAccessLevel(role::STRING,graph::STRING,label::STRING,field::STRING,label_type::STRING,field_access_level::STRING) :: (::VOID) dbms.security.getUserInfo get the user information dbms.security.getUserInfo(user::STRING) :: (user_info::MAP) dbms.security.getUserMemoryUsage get the memory usage for a user dbms.security.getUserMemoryUsage(user::STRING) :: (memory_usage::INTEGER) dbms.security.disableUser enable/disable the user dbms.security.disableUser(user::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.setCurrentDesc set the current user description dbms.security.setCurrentDesc(description::STRING) :: (::VOID) dbms.security.setUserDesc set user description dbms.security.setUserDesc(user::STRING,description::STRING) :: (::VOID) dbms.security.setUserMemoryLimit set user memory limit dbms.security.setUserMemoryLimit(user::STRING,memorylimit::INTEGER) :: (::VOID) dbms.security.deleteUserRoles delete roles from the user dbms.security.deleteUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.rebuildUserRoles rebuild the relationship between the user and the role dbms.security.rebuildUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.addUserRoles add the user roles dbms.security.addUserRoles(user::STRING,roles::LIST) :: (::VOID) db.plugin.loadPlugin load a plugin db.plugin.loadPlugin(plugin_type::STRING,plugin_name::STRING,plugin_content::STRING,code_type::STRING,plugin_description::STRING,read_only::BOOLEAN) :: (::VOID) db.plugin.deletePlugin unload a plugin db.plugin.deletePlugin(plugin_type::STRING,plugin_name::STRING) :: (::VOID) db.plugin.listPlugin list all plugins db.plugin.listPlugin(plugin_type::STRING) :: (plugin_description::LIST) db.plugin.getPluginInfo get the information of a specified plugin db.plugin.getPluginInfo(plugin_type::STRING,plugin_name::STRING,show_code::BOOLEAN)::(plugin_description::MAP) db.plugin.callPlugin execute the plugins db.plugin.callPlugin(plugin_type::STRING,plugin_name::STRING,param::STRING,timeout::DOUBLE,in_process::BOOLEAN) :: (success::BOOLEAN,result::STRING) db.importor.dataImportor import vertex/edge data db.importor.dataImportor(description::STRING,content::STRING,continue_on_error::BOOLEAN,thread_nums::INTEGER,delimiter::STRING) :: (::VOID) db.importor.schemaImportor import vertex/edge schema db.importor.schemaImportor(description::STRING) :: (::VOID) dbms.task.listTasks list running tasks dbms.task.listTasks()::(tasks::LIST) dbms.task.terminateTask terminate task dbms.task.terminateTask(task_id::STRING)::(::VOID) db.dropDB empty the db db.dropDB() :: (::VOID)","title":"Cypher"},{"location":"en-US/3.developer-document/2.cypher/#tugraph-cypher","text":"This document mainly introduces the detailed usage instructions of TuGraph-Cypher.","title":"TuGraph-Cypher"},{"location":"en-US/3.developer-document/2.cypher/#summary","text":"Operators support progress overview\uff1a category supported unsupported General operators DISTINCT , . for property access [] for dynamic property access Mathematical operators + , - , * , / , % , ^ Comparison operators = , <> , < , > , \u21d0 , >= , IS NULL , IS NOT NULL String-specific comparison operators STARTS WITH , ENDS WITH , CONTAINS , REGEXP Boolean operators AND , OR , XOR , NOT String operators + for concatenation List operators + for concatenation, IN to check existence of an element in a list, [] for accessing element(s)","title":"Summary"},{"location":"en-US/3.developer-document/2.cypher/#general-operators","text":"\u2713 Using the DISTINCT operator CREATE (a:Person {name: 'Anne', eyeColor: 'blue'}), (b:Person {name: 'Bill', eyeColor: 'brown'}), (c:Person {name: 'Carol', eyeColor: 'blue'}) MATCH (p:Person ) RETURN DISTINCT p.eyeColor \u2713 Accessing properties of a nested literal map using the . operator WITH {person: {name: 'Anne', age: 25}} AS p RETURN p.person.name \u274f Filtering on a dynamically-computed property key using the [] operator CREATE (a:Restaurant {name: 'Hungry Jo', rating_hygiene: 10, rating_food: 7}), (b:Restaurant {name: 'Buttercup Tea Rooms', rating_hygiene: 5, rating_food:6}), (c1:Category {name: 'hygiene'}), (c2:Category {name: 'food'}) MATCH (restaurant:Restaurant), (category:Category) WHERE restaurant[\"rating_\" + category.name] > 6 RETURN DISTINCT restaurant.name","title":"General operators"},{"location":"en-US/3.developer-document/2.cypher/#mathematical-operators","text":"\u2713 Using the exponentiation operator ^ WITH 2 AS number, 3 AS exponent RETURN number ^ exponent AS result \u2713 Using the unary minus operator - WITH -3 AS a, 4 AS b RETURN b - a AS result","title":"Mathematical operators"},{"location":"en-US/3.developer-document/2.cypher/#comparison-operators","text":"\u2713 Comparing two numbers WITH 4 AS one, 3 AS two RETURN one > two AS result","title":"Comparison operators"},{"location":"en-US/3.developer-document/2.cypher/#string-specific-comparison-operators","text":"\u2713 Using STARTS WITH to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate STARTS WITH 'Jo' RETURN candidate \u2713 Using REGEXP to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate REGEXP 'Jo.*n' RETURN candidate","title":"String-specific comparison operators"},{"location":"en-US/3.developer-document/2.cypher/#boolean-operators","text":"\u2713 Using boolean operators to filter numbers WITH [2, 4, 7, 9, 12] AS numberlist UNWIND numberlist AS number WITH number WHERE number = 4 OR (number > 6 AND number < 10) RETURN number","title":"Boolean operators"},{"location":"en-US/3.developer-document/2.cypher/#string-operators","text":"String operators comprise: \u2713 concatenating strings: + More details on string-specific comparison operators can be found here","title":"String operators"},{"location":"en-US/3.developer-document/2.cypher/#list-operators","text":"\u2713 Concatenating two lists using + RETURN [1,2,3,4,5]+[6,7] AS myList \u2713 Using IN to check if a number is in a list WITH [2, 3, 4, 5] AS numberlist UNWIND numberlist AS number WITH number WHERE number IN [2, 3, 8] RETURN number \u2713 Accessing elements in a list using the [] operator WITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names RETURN names[1..3] AS result","title":"List operators"},{"location":"en-US/3.developer-document/2.cypher/#clauses","text":"","title":"Clauses"},{"location":"en-US/3.developer-document/2.cypher/#summary_1","text":"Clauses support progress list\uff1a category grammar comment Reading clauses MATCH supported OPTIONAL MATCH supported MANDATORY MATCH unsupported Projecting clauses RETURN \u2026 [AS] supported WITH \u2026 [AS] supported UNWIND \u2026 [AS] supported Reading sub-clauses WHERE supported ORDER BY [ASC[ENDING] / DESC[ENDING]] supported SKIP supported LIMIT supported Writing clauses CREATE supported DELETE supported DETACH DELETE supported SET supported REMOVE supported Reading/Writing clauses MERGE supported CALL [\u2026YIELD] supported Set operations UNION unsupported UNION ALL supported","title":"Summary"},{"location":"en-US/3.developer-document/2.cypher/#match","text":"Basic node finding \u2713 Get all nodes MATCH (n) RETURN n \u2713 Get all nodes with a label MATCH (movie:Movie) RETURN movie.title \u2713 Related nodes MATCH (director {name: 'Oliver Stone'})-[]-(movie) RETURN movie.title \u2713 Match with labels MATCH (director {name: 'Oliver Stone'})-[]-(movie) RETURN movie.title Relationship basics \u2713 Outgoing relationships MATCH (:Person {name: 'Oliver Stone'})-[]->(movie) RETURN movie.title \u2713 Directed relationships and variable MATCH (:Person {name: 'Oliver Stone'})-[r]->(movie) RETURN type(r) \u2713 Match on relationship type MATCH (wallstreet:Movie {title: 'Wall Street'})<-[:ACTED_IN]-(actor) RETURN actor.name \u2713 Match on multiple relationship types MATCH (wallstreet {title: 'Wall Street'})<-[:ACTED_IN|:DIRECTED]-(person) RETURN person.name \u2713 Match on relationship type and use a variable MATCH (wallstreet {title: 'Wall Street'})<-[r:ACTED_IN]-(actor) RETURN r.role Relationships in depth \u274f Relationship types with uncommon characters MATCH (n {name: 'Rob Reiner'})-[r:`TYPE WITH SPACE`]->() RETURN type(r) \u2713 Multiple relationships MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director) RETURN movie.title, director.name \u2713 Variable-length relationships MATCH (martin {name: 'Charlie Sheen'})-[:ACTED_IN*1..3]-(movie:Movie) RETURN movie.title \u2713 Relationship variable in variable-length relationships MATCH p = (actor {name: 'Charlie Sheen'})-[:ACTED_IN*2]-(co_actor) RETURN relationships(p) \u274f Match with properties on a variable-length path MATCH p = (charlie:Person)-[* {blocked:false}]-(martin:Person) WHERE charlie.name = 'Charlie Sheen' AND martin.name = 'Martin Sheen' RETURN p \u2713 Zero-length paths MATCH (wallstreet:Movie {title: 'Wall Street'})-[*0..1]-(x) RETURN x \u2713 Named paths MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p \u2713 Matching on a bound relationship MATCH (a)-[r]-(b) WHERE id(r)= 0 RETURN a,b Shortest path \u2713 Single shortest path MATCH (martin:Person {name: 'Martin Sheen'}), (oliver:Person {name: 'Oliver Stone'}), p = shortestPath((martin)-[*..15]-(oliver)) RETURN p \u2713 All shortest paths MATCH (martin:Person {name: 'Martin Sheen'}), (michael:Person {name: 'Michael Douglas'}), p = allShortestPaths((martin)-[*]-(michael)) RETURN p Get node or relationship by id \u2713 Node by id MATCH (n) WHERE id(n)= 0 RETURN n \u2612 Relationship by id MATCH ()-[r]->() WHERE id(r) = 0 RETURN r \u2713 Multiple nodes by id MATCH (n) WHERE id(n) IN [0, 3, 5] RETURN n","title":"MATCH"},{"location":"en-US/3.developer-document/2.cypher/#return","text":"\u2713 Return nodes MATCH (n {name: 'B'}) RETURN n Note Return id of n. \u2713 Return relationships MATCH (n {name: 'A'})-[r:KNOWS]->(c) RETURN r Note Return EdgeUid of r. \u2713 Return property MATCH (n {name: 'A'}) RETURN n.name \u274f Return all elements MATCH p = (a {name: 'A'})-[r]->(b) RETURN * \u274f Variable with uncommon characters MATCH (`This isn\\'t a common variable`) WHERE `This isn\\'t a common variable`.name = 'A' RETURN `This isn\\'t a common variable`.happy \u2713 Aliasing a field MATCH (a {name: 'A'}) RETURN a.age AS SomethingTotallyDifferent \u2713 Optional properties MATCH (n) RETURN n.age \u274f Other expressions MATCH (a {name: 'A'}) RETURN a.age > 30, \"I'm a literal\", (a)-[]->() (a)-[]->() not supported. \u2713 Unique results MATCH (a {name: 'A'})-[]->(b) RETURN DISTINCT b","title":"RETURN"},{"location":"en-US/3.developer-document/2.cypher/#where","text":"Basic usage \u2713 Boolean operations MATCH (n) WHERE n.name = 'Peter' XOR (n.age < 30 AND n.name = 'Tobias') OR NOT (n.name = 'Tobias' OR n.name = 'Peter') RETURN n.name, n.age \u2713 Filter on node label MATCH (n) WHERE n:Swedish RETURN n.name, n.age \u2713 Filter on node property MATCH (n) WHERE n.age < 30 RETURN n.name, n.age \u2713 Filter on relationship property MATCH (n)-[k:KNOWS]->(f) WHERE k.since < 2000 RETURN f.name, f.age, f.email \u274f Filter on dynamically-computed property WITH 'AGE' AS propname MATCH (n) WHERE n[toLower(propname)]< 30 RETURN n.name, n.age \u2713 Property existence checking MATCH (n) WHERE exists(n.belt) RETURN n.name, n.belt String matching \u2713 Match the beginning of a string MATCH (n) WHERE n.name STARTS WITH 'Pet' RETURN n.name, n.age \u2713 Match the ending of a string MATCH (n) WHERE n.name ENDS WITH 'ter' RETURN n.name, n.age \u2713 Match anywhere within a string MATCH (n) WHERE n.name CONTAINS 'ete' RETURN n.name, n.age \u2713 String matching negation MATCH (n) WHERE NOT n.name ENDS WITH 's' RETURN n.name, n.age Using path patterns in WHERE \u2713 Filter on patterns MATCH (tobias {name: 'Tobias'}), (others) WHERE others.name IN ['Andres', 'Peter'] AND (tobias)<-[]-(others) RETURN others.name, others.age \u2713 Filter on patterns using NOT MATCH (persons), (peter {name: 'Peter'}) WHERE NOT (persons)-[]->(peter) RETURN persons.name, persons.age \u2713 Filter on patterns with properties MATCH (n) WHERE (n)-[:KNOWS]-({name: 'Tobias'}) RETURN n.name, n.age \u2713 Filter on relationship type MATCH (n)-[r]->() WHERE n.name='Andres' AND type(r) STARTS WITH 'K' RETURN type(r), r.since Lists \u2713 IN operator MATCH (a) WHERE a.name IN ['Peter', 'Tobias'] RETURN a.name, a.age Missing properties and values \u2713 Default to false if property is missing MATCH (n) WHERE n.belt = 'white' RETURN n.name, n.age, n.belt \u2713 Default to true if property is missing MATCH (n) WHERE n.belt = 'white' OR n.belt IS NULL RETURN n.name, n.age, n.belt ORDER BY n.name \u2713 Filter on null MATCH (person) WHERE person.name = 'Peter' AND person.belt IS NULL RETURN person.name, person.age, person.belt Using ranges \u2713 Simple range MATCH (a) WHERE a.name >= 'Peter' RETURN a.name, a.age \u2713 Composite range MATCH (a) WHERE a.name > 'Andres' AND a.name < 'Tobias' RETURN a.name, a.age","title":"WHERE"},{"location":"en-US/3.developer-document/2.cypher/#skip","text":"\u2713 Skip first three records MATCH (n) RETURN n.name ORDER BY n.name SKIP 3 \u2713 Return middle two records MATCH (n) RETURN n.name ORDER BY n.name SKIP 1 LIMIT 2 \u2713 Using an expression with SKIP to return a subset of the records MATCH (n) RETURN n.name ORDER BY n.name SKIP toInteger(3*rand())+ 1","title":"SKIP"},{"location":"en-US/3.developer-document/2.cypher/#limit","text":"\u2713 Return a subset of the records MATCH (n) RETURN n.name LIMIT 3 \u2713 Using an expression with LIMIT to return a subset of the records MATCH (n) RETURN n.name LIMIT toInteger(3 * rand())+ 1","title":"LIMIT"},{"location":"en-US/3.developer-document/2.cypher/#create","text":"Create nodes Note TuGraph does not support creating empty nodes and does not support multiple labels. \u2612 Create single node CREATE (n) \u2612 Create multiple nodes CREATE (n), (m) \u2713 Create a node with a label CREATE (n:Person) \u2612 Create a node with multiple labels CREATE (n:Person:Swedish) \u2713 Create node and add labels and properties CREATE (n:Person {name: 'Andres', title: 'Developer'}) \u2713 Return created node CREATE (a {name: 'Andres'}) RETURN a Create relationships \u2713 Create a relationship between two nodes MATCH (a:Person), (b:Person) WHERE a.name = 'Node A' AND b.name = 'Node B' CREATE (a)-[r:RELTYPE]->(b) \u2713 Create a relationship and set properties MATCH (a:Person), (b:Person) WHERE a.name = 'Node A' AND b.name = 'Node B' CREATE (a)-[r:RELTYPE {name: a.name + '<->' + b.name}]->(b) \u2713 Create a full path CREATE p = (andres {name:'Andres'})-[:WORKS_AT]->(neo)<-[:WORKS_AT]-(michael {name:'Michael'}) RETURN p Use parameters with CREATE \u274f Create node with a parameter for the properties CREATE (n:Person $props) RETURN n \u2612 Create multiple nodes with a parameter for their properties UNWIND $props AS map CREATE (n) SET n = map cannot create vertex without label.","title":"CREATE"},{"location":"en-US/3.developer-document/2.cypher/#callyield","text":"\u2713 Call a procedure using CALL CALL db.vertexLabels \u2713 View the signature for a procedure CALL dbms.procedures() YIELD name, signature WHERE name='dbms.listConfig' RETURN signature \u274f Call a procedure using a quoted namespace and name CALL `db`.`vertexLabels` \u2713 Call a procedure with literal arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0, 'name') \u274f Call a procedure with parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex($indexName,$node,$propKey) \u274f Call a procedure with mixed literal and parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', $node, 'name') \u2713 Call a procedure with literal and default arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0) \u2713 Call a procedure within a complex query using CALL\u2026YIELD CALL db.vertexLabels() YIELD label RETURN count(label) AS numLabels \u2713 Call a procedure and filter its results CALL db.vertexLabels() YIELD label WHERE label CONTAINS 'User' RETURN count(label) AS numLabels \u274f Call a procedure within a complex query and rename its outputs CALL db.propertyKeys() YIELD propertyKey AS prop MATCH (n) WHERE n[prop] IS NOT NULL RETURN prop, count(n) AS numNodes","title":"CALL[\u2026YIELD]"},{"location":"en-US/3.developer-document/2.cypher/#union","text":"\u2713 Combine two queries and retain duplicates MATCH (n:Actor) RETURN n.name AS name UNION ALL MATCH (n:Movie) RETURN n.title AS name \u274f Combine two queries and remove duplicates MATCH (n:Actor) RETURN n.name AS name UNION MATCH (n:Movie) RETURN n.title AS name","title":"UNION"},{"location":"en-US/3.developer-document/2.cypher/#functions","text":"","title":"Functions"},{"location":"en-US/3.developer-document/2.cypher/#whole-list-of-functions","text":"category function comment Predicate functions exists() all() any() single() none() Scalar functions id() properties() head() last() toBoolean() toFloat() toInteger() toString() type() startnode() endnode() size() length() endnode() label() OpenCypher extension method Aggregating functions avg() collect() count() max() min() percentileCont() percentileDisc() stDev() stDevP() variance() varianceP() sum() List functions keys() labels() range() subscript() Mathematical functions abs() ceil() floor() rand() round() sign() String functions /","title":"Whole List Of Functions"},{"location":"en-US/3.developer-document/2.cypher/#predicate-functions","text":"exists() judge it whether a vertex or edge has the field . Scope: whole instance. Example input: MATCH (n) WHERE exists(n.belt) RETURN n.name, n.belt Example output: exists(name) true","title":"Predicate functions"},{"location":"en-US/3.developer-document/2.cypher/#scalar-functions","text":"id() get the id of vertex. Scope: whole instance. Example input: MATCH (a) RETURN id(a) Example output: vid 1 2 ... properties() get a map containing all the properties of a node or relationship. Scope: whole instance. Example input: CREATE (p:Person {name: 'Stefan', city: 'Berlin'}) RETURN properties(p) Example output: properties {name:Stefan,city:Berlin} head() get the first element of a list. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, head(a.array) Example output: a.array head(a.array) [\"one\",\"two\",\"three\"] \"one\" last() get the last element of a list. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, last(a.array) Example output: a.array last(a.array) [\"one\",\"two\",\"three\"] \"three\" toFloat() Converts an integer or string value to a floating point number. Scope: whole instance. Example input: RETURN toFloat('11.5'), toFloat('not a number') Example output: | float | | ----- | | 11.5 | |null| toInteger() Converts a floating point or string value to an integer value. Scope: whole instance. Example input: RETURN toInteger('2.3') AS integer Example output: integer 2 toString() Converts an integer, float, boolean value to a string. Scope: whole instance. Example input: RETURN toString(2.3) type() get the string representation of the relationship type. Scope: whole instance. Example input: MATCH (n)-[r]->() WHERE n.name = 'Alice' RETURN type(r) Example output: type acted_in acted_in","title":"Scalar functions"},{"location":"en-US/3.developer-document/2.cypher/#aggregating-functions","text":"avg() Returns the average of a set of numeric values. Scope: whole instance. Example input: MATCH (n:Person) RETURN avg(n.age) Example output: avg(n.born) 1869.2661654135338 collect() Returns a list containing the values returned by an expression. Scope: whole instance. Example input: MATCH (n:Person) RETURN collect(n.age) Example output: collect(n.born) [1967,...] count() Returns the number of values or records. Scope: whole instance. Example input: MATCH (n {name: 'A'})-[]->(x) RETURN labels(n), n.age, count(*) Example output: labels(n) n.age count(*) [\"Person\"] 13 3 max() Returns the maximum value in a set of values. Scope: whole instance. Example input: MATCH (n:Person) RETURN max(n.age) Example output: max(n.age) 44 min() Returns the minimum value in a set of values. Scope: whole instance. Example input: MATCH (n:Person) RETURN min(n.age) Example output: min(n.age) 13 percentileCont() Returns the percentile of a value over a group using linear interpolation. Scope: whole instance. Example input: MATCH (n:Person) RETURN percentileCont(n.age, 0.4) Example output: percentileCont(n.age, 0.4) 29 percentileDisc() Returns the nearest value to the given percentile over a group using a rounding method. Scope: whole instance. Output: the percentile of the given value over a group. Example input: MATCH (n:Person) RETURN percentileDisc(n.age, 0.5) Example output: percentileDisc(n.age, 0.5) 33 stDev() Returns the standard deviation for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN stDev(n.age) Example output: stDev(n.age) 15.716233645501712 stDevP() Returns the standard deviation for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN stDevP(n.age) Example output: stDevP(n.age) 12.832251036613439 variance() Returns the variance for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN variance(n.age) Example output: variance(n.age) 247 varianceP() Returns the variance for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN varianceP(n.age) Example output: varianceP(n.age) 164.66666666667 sum() Returns the sum of a set of numeric values. Scope: whole instance. Example input: MATCH (n:Person) RETURN sum(n.age) Example output: sum(n.age) 90","title":"Aggregating functions"},{"location":"en-US/3.developer-document/2.cypher/#list-funtions","text":"keys() get the field names of some vertex. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Alice' RETURN keys(a) Example output: keys(a) [\"name\",\"age\",\"eyes\"] labels()/label() Returns a list containing the string representations for all the property names of a node, relationship, or map. Scope: whole instance. Example input: MATCH (a) WHERE a.name = 'Alice' RETURN labels(a) Example output: labels [\"Person\",\"Developer\"]","title":"List Funtions:"},{"location":"en-US/3.developer-document/2.cypher/#mathematical-functions","text":"abs() get the absolute value of some data. Scope: whole instance. Example input: MATCH (a), (e) WHERE a.name = 'Alice' AND e.name = 'Eskil' RETURN a.age, e.age, abs(a.age - e.age) Example output: a.age e.age abs(a.age - e.age) 38 41 1 ceil() Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN ceil(0.1) Example output: ceil(0.1) 1.0 floor() get the largest floating point number that is less than or equal to the given number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN floor(0.9) Example output: floor(0.9) 0.0 round() Returns the value of a number rounded to the nearest integer. Scope: whole instance. Example input: RETURN round(3.141592) Example output: round 3 rand() Returns returns a random floating point number in the range from 0 (inclusive) to 1 exclusive). Scope: whole instance. Example input: RETURN rand() Example output: rand() 0.9797131960534085 sign() Get the signum of the given number: 0 if the number is 0, -1 for any negative number, and 1 for any positive number. Scope: whole instance. Example input: RETURN sign(-17), sign(0.1) Example output: sign(-17) sign(0.1) -1 1","title":"Mathematical functions"},{"location":"en-US/3.developer-document/2.cypher/#extensions-to-opencypher","text":"Number of Labels TuGraph: Each node/relationship must have one and only one label. So error occurs when there is no label, and the 1st label will be picked as the label if there are more than one label. OpenCypher: One node/relationship may have 0 to many labels. Schema. TuGraph: TuGraph has strong schema OpenCypher: schema-less","title":"Extensions To OpenCypher"},{"location":"en-US/3.developer-document/2.cypher/#procedures","text":"","title":"Procedures"},{"location":"en-US/3.developer-document/2.cypher/#procedures-demos","text":"dbms.procedures() Lists all available procedures. Scope: whole instance. Output: a list of { signature , name }. Example input: CALL dbms.procedures() Example output: signature name db.vertexLabels() :: (label::STRING) db.vertexLabels db.edgeLabels() :: (edgeLabels::STRING) db.edgeLabels db.indexes() :: (index::LIST) db.indexes ... ... db.vertexLabels() Lists all available labels of vertex. Scope: whole instance. Output: a list of { name }. Example input: CALL db.vertexLabels() Example output: label genre keyword movie ... db.edgeLabels() Lists all available labels of edges. Scope: whole instance. Output: a list of {edgeLabels}. Example input: CALL db.edgeLabels() Example output: edgeLabel acted_in directed ... db.createVertexLabel(label_name, primary_field, field_spec...) Create a vertex label. Scope: whole instance. Parameters: parameter parameter type description label_name string name of vertex label primary_field string primary field of vertex label field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, true] , where true is specified only for optional fields. Output: If successful, it returns a success message. Example input: CALL db.createVertexLabel('Person', 'id', 'id', int64, false, 'name', string, true) Example output: Added label [Person] db.getLabelSchema(label_type, label_name) Get the schema definition of the label in a subgraph. Scope: subgraph, as specified in the graph parameter in REST or RPC request. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: a list of label specifications, in which each element is a list of the following fields: field_name field_type description name string name of the field type string type of the field optional boolean whether the field is optional Example input: CALL db.getLabelSchema('vertex', 'Person') Example output: name type optional id INT32 false born INT32 true name STRING true poster_image STRING true db.createLabel(label_type, label_name, extra, field_spec...) Create a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label extra string for edge, it means constraints; for vertex, it means primary property field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, 'optional'] . for edge, extra should be a json array string, like this [[\"label1\",\"label2\"], [\"label3\",\"label4\"]] , if edge has no constraints, give an empty json array, like this [] Output: If successful, it returns a success message. Example input: CALL db.createLabel('vertex', 'new_label', 'id', ['id',int32,false], ['name',string, true]); CALL db.createLabel('edge', 'new_edge', '[[\"id1\",\"id2\"]]', ['id',int32,false], ['name', string, true]); Example output: Vertex label [new_label] successfully added. db.deleteLabel(label_type, label_name) Delete a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: field_name field_type description affected integer number of vertexes/edges deleted Example input: CALL db.deleteLabel('vertex', 'person') Example output: affected 1024 db.alterLabelDelFields(label_type, label_name, field_names) Delete specified fields from the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_names list of strings names of the fields to delete Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelDelFields('vertex', 'Person', ['name', 'image']) Example output: affected 1024 db.alterLabelAddFields(label_type, label_name, field_value_spec...) Adds specified fields to the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_value_spec list specification of a field in which each field_value_spec is a list of string in the form of [field_name, field_type, field_value, 'optional'] , where: field_value is the default value of the field. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelAddFields( 'vertex', 'new_label', ['birth_date', DATE, '', true], ['img', BLOB, '', true]) Example output: affected 1024 db.alterLabelModFields(label_type, label_name, field_spec...) Modifies the specified fields in the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, 'optional'] .The target field should exist. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelModFields( 'vertex', 'new_label', ['birth_date', 'DATETIME', '1900-01-01 00:00:00'], ['gender', 'BOOL', false]) Example output: affected 1024 db.createEdgeLabel( label_name, field_spec...) Create an edge label. Parameters: parameter parameter type description label_name string name of the label edge_constraints string edge constraints field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, optional] , where optional is specified as true, only for optional fields. edge_constraints is a json array string, This parameter limits the combination of starting and ending vertex of the edge, for example: '[[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]]' , which limits the edge direction can only be from vertex_label1 to vertex_label2 or from vertex_label3 to vertex_label4 . If you don't want to have any constraints, give an empty array string, like this '[]' Output: If successful, it returns a success message. Example input: CALL db.createEdgeLabel('KNOWS', '[]', 'name', int32,true) Example output: Added type [KNOWS] db.addIndex(label_name, field_name, is_unique) create an index on some field of one vertex label . Parameters: parameter parameter type description label_name string name of the label field_name string specification of a field is_unique boolean Specifies whether the index is unique Output: If successful, it returns a success message. Example input: CALL db.addIndex('Person', 'id', true) Example output: Added index [Perosn:id] dbms.security.changePassword(current_password ,new_password) Change the current user's password. Parameters: parameter parameter type description current_password string the current password new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changePassword('73@TuGraph','admin') Example output: true dbms.security.changeUserPassword(user_name, new_password) Change the current user's password. Parameters: parameter parameter type description user_name string the user's name new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changeUserPassword('quest','73@TuGraph') Example output: true dbms.security.createUser(user_name, password) create new user on this graph database. Parameters: parameter parameter type description user_name string the new user name password string the password of new user Output: If successful, it returns a success message. Example input: CALL dbms.security.createUser('quest',\"admin\") Example output: true dbms.security.deleteUser(user_name) delete user on this graph database. Parameters: parameter parameter type description user_name string the user name to be deleted Output: If successful, it returns a success message. Example input: CALL dbms.security.deleteUser('quest') Example output: true dbms.security.listUsers() get all user's name of the graph database. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.name string the user name is.admin boolean the permission of this user Example input: CALL dbms.security.listUsers() Example output: user.name is.admin admin true ... ... dbms.security.showCurrentUser() get current user's name. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.user string the current user name Example input: CALL dbms.security.showCurrentUser() Example output: user.name admin dbms.security.listAllowedHosts() get the list of ips to be allowed . Output: a list of ips which are allowed. Example input: CALL dbms.security.listAllowedHosts() Example output: host 192.168.1.22 ... dbms.security.deleteAllowedHosts(hosts) delete some ips from the list of ips to be allowed . Output: the number of ip which been deleted. Example input: CALL dbms.security.deleteAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.security.addAllowedHosts(hosts) add some ips from the list of ips to be allowed . Output: the number of ip which been added. Example input: CALL dbms.security.addAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.graph.createGraph(graph_name, description, max_size_GB) create a new subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of new subgraph description string description of new subgraph max_size_GB integer Upper limit of subgraph capacity Output: if successful , it will return true. Example input: CALL dbms.graph.createGraph('graph1', 'description', 2045) Example output: success true dbms.graph.deleteGraph(graph_name) delete a subgraph in this graph database . parameter parameter type description graph_name string the name of subgraph to been deleted Output: if successful , it will return true. Example input: CALL dbms.graph.deleteGraph('graph1') Example output: success true dbms.graph.modGraph(graph_name, config) delete a subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of subgraph to been deleted config map the configuration to be modified Output: if successful , it will return true. Example input: CALL dbms.graph.modGraph('graph1',{description:'this graph', max_size_GB:20}) Example output: success true dbms.graph.listGraphs() get all subgraph in this graph database . Output: a list of {subgraph and configuration}. Example input: CALL dbms.graph.listGraphs() Example output: graph.name configuration default {\"description\":\"\",\"max_size_GB\":1024} graph1 {\"description\":\"this graph\",\"max_size_GB\":20} ... ... dbms.config.list() get some config of this graph database . Output: a list of {configuration}. Example input: CALL dbms.config.list() Example output: name value bind_host 0.0.0.0 durable true ... ... dbms.config.update(updates) get some config of this graph database . Output: If successful, it returns a success message Example input: CALL dbms.config.update({ enable_ip_check:false, durable:true, optimistic_txn:true, enable_audit_log:true}) Example output: Update succeeded. dbms.takeSnapshot() take the snapshot on this current graph database. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.takeSnapshot() Example output: path log/db/snapshot/2020-07-20_17.20.03 dbms.listBackupFiles() get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.listBackupFiles() Example output: path tugraph/db/binlog/binlog_0 algo.shortestPath(startNode, endNode, config) get one of the shortest paths between two vertexes. Parameters: parameter parameter type description startNode Node the source node of paths endNode Node the destination node paths config MAP the filter of shortest paths, the formate as {maxHops:3, relationshipQuery:'HAS_CHILD'} Output: If successful, it will returns one group result of the shortest path. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost Example output: nodeCount totalCost 2 1 algo.allShortestPaths(startNode, endNode, config)) get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,cost RETURN nodeIds,cost Example output: nodeIds cost [2,665] 1 ... algo.algo.native.extract(id, config)) get the field values of a list of vertexes or edges. Parameters: parameter parameter type description id ANY the id of vertexes or edges , the id must be variable config MAP the configuration of this extraction of vertexes or edges in which each config is a map in the form of {isNode:true, filed:'HAS_CHILD'} , if isNode is specified true, the id is a vertex id, or it is an edge id. Output: If successful, it returns a list of the value of vertexes or edges specified field . Example input: with [2,3] as vids CALL algo.native.extract(vids,{isNode:true, field:'id'}) YIELD value RETURN value Example output: value [4,5]","title":"procedures' demos"},{"location":"en-US/3.developer-document/2.cypher/#whole-list-of-procedures","text":"Name Description Signature db.vertexLabels list all vertex labels db.vertexLabels() :: (label::STRING) db.edgeLabels list all edge labels db.edgeLabels() :: (edgeLabels::STRING) db.indexes list all indexes db.indexes() :: (label::STRING,field::STRING,unique::BOOLEAN) db.warmup warm up the DB db.warmup() :: (time_used::STRING) db.createVertexLabel create a vertex label db.createVertexLabel(label_name::STRING,field_specs::LIST) :: (::VOID) db.createLabel create a vertex/edge label db.createLabel(label_type::STRING,label_name::STRING,extra::STRING,field_specs::LIST) :: () db.getLabelSchema get the schema of label db.getLabelSchema(label_type::STRING,label_name::STRING) :: (name::STRING,type::STRING,optional::BOOLEAN) db.getVertexSchema get the schema of vertex label db.getVertexSchema(label::STRING) :: (schema::MAP) db.getEdgeSchema get the schema of edge label db.getEdgeSchema(label::STRING) :: (schema::MAP) db.deleteLabel delete vertex/edge label db.deleteLabel(label_type::STRING,label_name::STRING) :: (::VOID) db.alterLabelDelFields delete some fields of a label on a subgraph db.alterLabelDelFields(label_type::STRING,label_name::STRING,del_fields::LIST) :: (record_affected::INTEGER) db.alterLabelAddFields add some fields of a label on a subgraph db.alterLabelAddFields(label_type::STRING,label_name::STRING,add_field_spec_values::LIST) :: (record_affected::INTEGER) db.alterLabelModFields modify some fields of a label on a subgraph db.alterLabelModFields(label_type::STRING,label_name::STRING,mod_field_specs::LIST) :: (record_affected::INTEGER) db.createEdgeLabel create a edge label db.createEdgeLabel(type_name::STRING,field_specs::LIST) :: (::VOID) db.addIndex add an index db.addIndex(label_name::STRING,field_name::STRING,is_unique::BOOLEAN) :: (::VOID) db.deleteIndex delete an index db.deleteIndex(label_name::STRING,field_name::STRING) :: (::VOID) db.backup backup the db db.backup(destination::STRING) :: () dbms.procedures list all procedures dbms.procedures() :: (name::STRING,signature::STRING) dbms.security.changePassword change current user password dbms.security.changePassword(current_password::STRING,new_password::STRING) :: (::VOID) dbms.security.changeUserPassword change user password dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) :: (::VOID) dbms.security.createUser create an account dbms.security.createUser(user_name::STRING,password::STRING) :: (::VOID) dbms.security.deleteUser delete an account dbms.security.deleteUser(user_name::STRING) :: (::VOID) dbms.security.listUsers list all accounts dbms.security.listUsers() :: (user_name::STRING,user_info::MAP) dbms.security.showCurrentUser get current user name dbms.security.showCurrentUser() :: (current_user::STRING) dbms.security.getUserPermissions get the permissions of a specified user dbms.security.getUserPermissions(user_name::STRING) :: (user_info::MAP) dbms.graph.createGraph create a subgraph dbms.graph.createGraph(graph_name::STRING, description::STRING, max_size_GB::INTEGER) :: (::VOID) dbms.graph.modGraph modify the config of a subgraph dbms.graph.modGraph(graph_name::STRING,config::MAP) :: (::VOID) dbms.graph.deleteGraph delete a subgraph dbms.graph.deleteGraph(graph_name::STRING) :: (::VOID) dbms.graph.listGraphs list all subgraphs dbms.graph.listGraphs() :: (graph_name::STRING,configuration::MAP) dbms.graph.getGraphInfo get the information of a specified graph dbms.graph.getGraphInfo(graph_name::STRING)::(graph_name::STRING,configuration::MAP) dbms.security.addAllowedHosts add to the trust list dbms.security.addAllowedHosts(hosts::LIST) :: (num_new::INTEGER) dbms.security.deleteAllowedHosts remove from the trust list dbms.security.deleteAllowedHosts(hosts::LIST) :: (record_affected::INTEGER) dbms.security.listAllowedHosts list the trust list dbms.security.listAllowedHosts() :: (host::STRING) dbms.config.update update the configuration dbms.config.update(updates::MAP) :: (message::STRING) dbms.config.list list the configuration dbms.config.list() :: (name::STRING,value::ANY) algo.shortestPath get a shortest path between two vertexes algo.shortestPath(startNode::NODE,endNode::NODE,config::MAP) :: (nodeCount::INTEGER,totalCost::FLOAT) algo.allShortestPaths get all the shortest paths between two vertexes algo.allShortestPaths(startNode::NODE,endNode::NODE,config::MAP) :: (nodeIds::LIST,relationshipIds::LIST,cost::LIST) algo.native.extract get the field values of a list of vertexes or edges specified id algo.native.extract(id::ANY,config::MAP) :: (value::ANY) db.flushDB flush the db db.flushDB() :: (::VOID) dbms.security.listRoles list all roles dbms.security.listRoles() :: (role_name::STRING,role_info::MAP) dbms.security.createRole create a role dbms.security.createRole(role_name::STRING,desc::STRING) :: (::VOID) dbms.security.deleteRole delete a role dbms.security.deleteRole(role_name::STRING) :: (::VOID) dbms.security.getRoleInfo get the role information dbms.security.getRoleInfo(role::STRING) :: (role_info::MAP) dbms.security.disableRole enable/disable the role dbms.security.disableRole(role::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.modRoleDesc modify the description of a role dbms.security.modRoleDesc(role::STRING,description::STRING) :: (::VOID) dbms.security.rebuildRoleAccessLevel rebuild the user subgraph access rights dbms.security.rebuildRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleAccessLevel modify the user subgraph access rights dbms.security.modRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleFieldAccessLevel modify the user property access rights dbms.security.modRoleFieldAccessLevel(role::STRING,graph::STRING,label::STRING,field::STRING,label_type::STRING,field_access_level::STRING) :: (::VOID) dbms.security.getUserInfo get the user information dbms.security.getUserInfo(user::STRING) :: (user_info::MAP) dbms.security.getUserMemoryUsage get the memory usage for a user dbms.security.getUserMemoryUsage(user::STRING) :: (memory_usage::INTEGER) dbms.security.disableUser enable/disable the user dbms.security.disableUser(user::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.setCurrentDesc set the current user description dbms.security.setCurrentDesc(description::STRING) :: (::VOID) dbms.security.setUserDesc set user description dbms.security.setUserDesc(user::STRING,description::STRING) :: (::VOID) dbms.security.setUserMemoryLimit set user memory limit dbms.security.setUserMemoryLimit(user::STRING,memorylimit::INTEGER) :: (::VOID) dbms.security.deleteUserRoles delete roles from the user dbms.security.deleteUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.rebuildUserRoles rebuild the relationship between the user and the role dbms.security.rebuildUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.addUserRoles add the user roles dbms.security.addUserRoles(user::STRING,roles::LIST) :: (::VOID) db.plugin.loadPlugin load a plugin db.plugin.loadPlugin(plugin_type::STRING,plugin_name::STRING,plugin_content::STRING,code_type::STRING,plugin_description::STRING,read_only::BOOLEAN) :: (::VOID) db.plugin.deletePlugin unload a plugin db.plugin.deletePlugin(plugin_type::STRING,plugin_name::STRING) :: (::VOID) db.plugin.listPlugin list all plugins db.plugin.listPlugin(plugin_type::STRING) :: (plugin_description::LIST) db.plugin.getPluginInfo get the information of a specified plugin db.plugin.getPluginInfo(plugin_type::STRING,plugin_name::STRING,show_code::BOOLEAN)::(plugin_description::MAP) db.plugin.callPlugin execute the plugins db.plugin.callPlugin(plugin_type::STRING,plugin_name::STRING,param::STRING,timeout::DOUBLE,in_process::BOOLEAN) :: (success::BOOLEAN,result::STRING) db.importor.dataImportor import vertex/edge data db.importor.dataImportor(description::STRING,content::STRING,continue_on_error::BOOLEAN,thread_nums::INTEGER,delimiter::STRING) :: (::VOID) db.importor.schemaImportor import vertex/edge schema db.importor.schemaImportor(description::STRING) :: (::VOID) dbms.task.listTasks list running tasks dbms.task.listTasks()::(tasks::LIST) dbms.task.terminateTask terminate task dbms.task.terminateTask(task_id::STRING)::(::VOID) db.dropDB empty the db db.dropDB() :: (::VOID)","title":"Whole List Of Procedures"},{"location":"en-US/3.developer-document/3.procedure/","text":"TuGraph Stored Procedure Guide This document describes how to use TuGraph's stored procedures Introduction When users want to express complex logics of queries or updates (such as those currently not supported by Cypher, or those demanding high performance), using TuGraph stored procedures would be a better choice. Similar to traditional databases, TuGraph's stored procedures run on the server side, and users can reduce the number of calls to the REST interface required by the client by encapsulating the processing logic (that is, multiple operations) into one procedure, and can implement it through parallel Processing methods (such as using the relevant C++ OLAP interface and built-in algorithms based on its implementation) for further acceleration. Guide In TuGraph, users can dynamically load, update and delete stored procedures. TuGraph supports stored procedures written in C language and Python language. The extension of the stored procedure written in C language is generally .so (under Linux/Unix system) or .dll (under Windows system). The extension of a Python stored procedure is .py. The two stored procedures are managed separately, but are used in the same way. Users can manage and call stored procedures through RESTful API or RPC. The following description takes the RESTful API as an example, and the corresponding RPC calling method is detailed in the RPC documentation. Write Stored Procedures C++ The following shows the code of a simple TuGraph C++ stored procedure. Calculate the number of outgoing and incoming edges and the sum of the number of incoming and outgoing edges for each node: // standard_result.cpp #include \"lgraph/lgraph_result.h\" #include \"iostream\" using namespace lgraph_api; extern \"C\" LGAPI bool Process(GraphDB &db, const std::string &request, std::string &response) { // defination Result result({{\"node\", LGraphType::NODE}, {\"edge_num_sum\", LGraphType::INTEGER}, {\"edge_num\", LGraphType::MAP}}); auto txn = db.CreateReadTxn(); for (auto vit = txn.GetVertexIterator(); vit.IsValid(); vit.Next()) { auto &record = result.NewRecord(); std::map<std::string, FieldData> edge_num_map; record.insert(\"node\", vit); int in_num_edges = 0; int out_num_edges = 0; for (auto eit = vit.GetOutEdgeIterator(); eit.IsValid(); eit.Next()) out_num_edges += 1; edge_num_map[\"out_num_edges\"] = FieldData(out_num_edges); for (auto eit = vit.GetInEdgeIterator(); eit.IsValid(); eit.Next()) in_num_edges += 1; edge_num_map[\"in_num_edges\"] = FieldData(in_num_edges); record.insert(\"edge_num_sum\", FieldData(in_num_edges + out_num_edges)); record.insert(\"edge_num\", edge_num_map); } response = result.Dump(); return true; } The entry of a TuGraph C++ stored procedure is the Process function, with three parameters: db : the TuGraph database instance request : the input data, which can be a binary byte array, or any other format such as JSON string. response : the output data, which can be a string or directly return binary data. The Result structure is used in the function. Result is the standard output format, which can effectively help you visualize your results. You need to define your return type first, we provide: VOID , INTEGER , FLOAT , DOUBLE , BOOLEAN , STRING , NODE , RELATIONSHIP , PATH , LIST , MAP , FIELD , GRAPH_ELEMENT , COLLECTION , ANY fifteen types. Users can use Result by three steps. define your return type Result result({{\"node\", LGraphType::NODE}, {\"edge_num_sum\", LGraphType::INTEGER}, {\"edge_num\", LGraphType::MAP}}); We define three return types in demo, NODE , INTEGER , MAP , and corresponding title. 2. initialize Record and add element. auto &record = result.NewRecord(); // insert multiple times record.insert(\"node\", vit); Dump your result response = result.Dump(); Attention The return value must be a reference . Assigning multiple Record at the same time may cause partial loss of data. The return value of Process is a boolean value. When it is true, it means the operation succeeds; otherwise it means there exist errors during execution (users may return error information through response ). To build the above stored procedure, you can type the following in shell: g++ -fno-gnu-unique -fPIC -g --std=c++14 -I/usr/local/include/lgraph -rdynamic -O3 -fopenmp -o age_10.so age_10.cpp /usr/local/lib64/liblgraph.so -shared which should generate an age_10.so file. Python The following snippet does the same thing as the above C++ stored procedure, but via TuGraph Python API: def Process(db, input): txn = db.CreateReadTxn() it = txn.GetVertexIterator() n = 0 while it.IsValid(): if it.GetLabel() == 'student' and it['age'] and it['age'] == 10: n = n + 1 it.Next() return (True, str(nv)) The return value of TuGraph Python stored procedures is a tuple, consisting of a boolean value indicating whether the operation succeeds, and a string value containing the response data. Install Stored Procedures Users may install plugins with the following Python snippet into the school graph (different graphs can have different stored procedures)\uff1a import requests import json import base64 data = {'name':'age_10'} f = open('./age_10.so','rb') content = f.read() data['code_base64'] = base64.b64encode(content).decode() data['description'] = 'Calculate number of students in the age of 10' data['read_only'] = true data['code_type'] = 'so' js = json.dumps(data) r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin', data=js, headers={'Content-Type':'application/json'}) print(r.status_code) # return 200 for normal One thing to note is that data['code'] is a base64-encoded string since the binary content in age_10.so may not be transported via JSON directly. In addition, only administrators can manage stored procedures. Normal users can only call or list stored procedures. Once installed, stored procedures are maintained in the database, so they will be loaded automatically on TuGraph server startup. Installing Python stored procedures in TuGraph only differs in the URL (i.e. http://127.0.0.1:7071/db/school/python_plugin ) List Stored Procedures The following snippet shows how to list all C++ stored procedures installed in the school graph\uff1a >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin') >>> r.status_code 200 >>> r.text '{\"plugins\":[{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true}]}' Retrieve Stored Procedures Detail The following snippet shows how to one procedure detail, including code: >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 >>> r.text '{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true, \"code_base64\":<CODE>, \"code_type\":\"so\"}' Call Stored Procedures The following snippet shows how to call the age_10 C++ stored procedure in the school graph: >>> r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10', data='', headers={'Content-Type':'application/json'}) >>> r.status_code 200 >>> r.text 9 Uninstall Stored Procedures You can uninstall the age_10 C++ stored procedure with the following snippet: >>> r = requests.delete(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 Note that only administrators can uninstall stored procedures. Upgrade Stored Procedures You can upgrade a stored procedure with the following two steps: Uninstall the existing one. Install the new on. TuGraph carefully manages the concurrency of stored procedure operations. Upgrading stored procedures will not affect concurrent runs of existing ones. Procedure-api Document TuGraph-Python-Procedure-API [document download] TuGraph-CPP-Procedure-API [document download]","title":"Procedure"},{"location":"en-US/3.developer-document/3.procedure/#tugraph-stored-procedure-guide","text":"This document describes how to use TuGraph's stored procedures","title":"TuGraph Stored Procedure Guide"},{"location":"en-US/3.developer-document/3.procedure/#introduction","text":"When users want to express complex logics of queries or updates (such as those currently not supported by Cypher, or those demanding high performance), using TuGraph stored procedures would be a better choice. Similar to traditional databases, TuGraph's stored procedures run on the server side, and users can reduce the number of calls to the REST interface required by the client by encapsulating the processing logic (that is, multiple operations) into one procedure, and can implement it through parallel Processing methods (such as using the relevant C++ OLAP interface and built-in algorithms based on its implementation) for further acceleration.","title":"Introduction"},{"location":"en-US/3.developer-document/3.procedure/#guide","text":"In TuGraph, users can dynamically load, update and delete stored procedures. TuGraph supports stored procedures written in C language and Python language. The extension of the stored procedure written in C language is generally .so (under Linux/Unix system) or .dll (under Windows system). The extension of a Python stored procedure is .py. The two stored procedures are managed separately, but are used in the same way. Users can manage and call stored procedures through RESTful API or RPC. The following description takes the RESTful API as an example, and the corresponding RPC calling method is detailed in the RPC documentation.","title":"Guide"},{"location":"en-US/3.developer-document/3.procedure/#write-stored-procedures","text":"","title":"Write Stored Procedures"},{"location":"en-US/3.developer-document/3.procedure/#c","text":"The following shows the code of a simple TuGraph C++ stored procedure. Calculate the number of outgoing and incoming edges and the sum of the number of incoming and outgoing edges for each node: // standard_result.cpp #include \"lgraph/lgraph_result.h\" #include \"iostream\" using namespace lgraph_api; extern \"C\" LGAPI bool Process(GraphDB &db, const std::string &request, std::string &response) { // defination Result result({{\"node\", LGraphType::NODE}, {\"edge_num_sum\", LGraphType::INTEGER}, {\"edge_num\", LGraphType::MAP}}); auto txn = db.CreateReadTxn(); for (auto vit = txn.GetVertexIterator(); vit.IsValid(); vit.Next()) { auto &record = result.NewRecord(); std::map<std::string, FieldData> edge_num_map; record.insert(\"node\", vit); int in_num_edges = 0; int out_num_edges = 0; for (auto eit = vit.GetOutEdgeIterator(); eit.IsValid(); eit.Next()) out_num_edges += 1; edge_num_map[\"out_num_edges\"] = FieldData(out_num_edges); for (auto eit = vit.GetInEdgeIterator(); eit.IsValid(); eit.Next()) in_num_edges += 1; edge_num_map[\"in_num_edges\"] = FieldData(in_num_edges); record.insert(\"edge_num_sum\", FieldData(in_num_edges + out_num_edges)); record.insert(\"edge_num\", edge_num_map); } response = result.Dump(); return true; } The entry of a TuGraph C++ stored procedure is the Process function, with three parameters: db : the TuGraph database instance request : the input data, which can be a binary byte array, or any other format such as JSON string. response : the output data, which can be a string or directly return binary data. The Result structure is used in the function. Result is the standard output format, which can effectively help you visualize your results. You need to define your return type first, we provide: VOID , INTEGER , FLOAT , DOUBLE , BOOLEAN , STRING , NODE , RELATIONSHIP , PATH , LIST , MAP , FIELD , GRAPH_ELEMENT , COLLECTION , ANY fifteen types. Users can use Result by three steps. define your return type Result result({{\"node\", LGraphType::NODE}, {\"edge_num_sum\", LGraphType::INTEGER}, {\"edge_num\", LGraphType::MAP}}); We define three return types in demo, NODE , INTEGER , MAP , and corresponding title. 2. initialize Record and add element. auto &record = result.NewRecord(); // insert multiple times record.insert(\"node\", vit); Dump your result response = result.Dump(); Attention The return value must be a reference . Assigning multiple Record at the same time may cause partial loss of data. The return value of Process is a boolean value. When it is true, it means the operation succeeds; otherwise it means there exist errors during execution (users may return error information through response ). To build the above stored procedure, you can type the following in shell: g++ -fno-gnu-unique -fPIC -g --std=c++14 -I/usr/local/include/lgraph -rdynamic -O3 -fopenmp -o age_10.so age_10.cpp /usr/local/lib64/liblgraph.so -shared which should generate an age_10.so file.","title":"C++"},{"location":"en-US/3.developer-document/3.procedure/#python","text":"The following snippet does the same thing as the above C++ stored procedure, but via TuGraph Python API: def Process(db, input): txn = db.CreateReadTxn() it = txn.GetVertexIterator() n = 0 while it.IsValid(): if it.GetLabel() == 'student' and it['age'] and it['age'] == 10: n = n + 1 it.Next() return (True, str(nv)) The return value of TuGraph Python stored procedures is a tuple, consisting of a boolean value indicating whether the operation succeeds, and a string value containing the response data.","title":"Python"},{"location":"en-US/3.developer-document/3.procedure/#install-stored-procedures","text":"Users may install plugins with the following Python snippet into the school graph (different graphs can have different stored procedures)\uff1a import requests import json import base64 data = {'name':'age_10'} f = open('./age_10.so','rb') content = f.read() data['code_base64'] = base64.b64encode(content).decode() data['description'] = 'Calculate number of students in the age of 10' data['read_only'] = true data['code_type'] = 'so' js = json.dumps(data) r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin', data=js, headers={'Content-Type':'application/json'}) print(r.status_code) # return 200 for normal One thing to note is that data['code'] is a base64-encoded string since the binary content in age_10.so may not be transported via JSON directly. In addition, only administrators can manage stored procedures. Normal users can only call or list stored procedures. Once installed, stored procedures are maintained in the database, so they will be loaded automatically on TuGraph server startup. Installing Python stored procedures in TuGraph only differs in the URL (i.e. http://127.0.0.1:7071/db/school/python_plugin )","title":"Install Stored Procedures"},{"location":"en-US/3.developer-document/3.procedure/#list-stored-procedures","text":"The following snippet shows how to list all C++ stored procedures installed in the school graph\uff1a >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin') >>> r.status_code 200 >>> r.text '{\"plugins\":[{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true}]}'","title":"List Stored Procedures"},{"location":"en-US/3.developer-document/3.procedure/#retrieve-stored-procedures-detail","text":"The following snippet shows how to one procedure detail, including code: >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 >>> r.text '{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true, \"code_base64\":<CODE>, \"code_type\":\"so\"}'","title":"Retrieve Stored Procedures Detail"},{"location":"en-US/3.developer-document/3.procedure/#call-stored-procedures","text":"The following snippet shows how to call the age_10 C++ stored procedure in the school graph: >>> r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10', data='', headers={'Content-Type':'application/json'}) >>> r.status_code 200 >>> r.text 9","title":"Call Stored Procedures"},{"location":"en-US/3.developer-document/3.procedure/#uninstall-stored-procedures","text":"You can uninstall the age_10 C++ stored procedure with the following snippet: >>> r = requests.delete(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 Note that only administrators can uninstall stored procedures.","title":"Uninstall Stored Procedures"},{"location":"en-US/3.developer-document/3.procedure/#upgrade-stored-procedures","text":"You can upgrade a stored procedure with the following two steps: Uninstall the existing one. Install the new on. TuGraph carefully manages the concurrency of stored procedure operations. Upgrading stored procedures will not affect concurrent runs of existing ones.","title":"Upgrade Stored Procedures"},{"location":"en-US/3.developer-document/3.procedure/#procedure-api-document","text":"TuGraph-Python-Procedure-API [document download] TuGraph-CPP-Procedure-API [document download]","title":"Procedure-api Document"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/","text":"Bootstrap program This document is a bootstrap program designed for TuGraph users. Before reading the detailed documents, users should read this document first to have a general understanding of TuGraph's graph computing operation process, and it will be more convenient to read the detailed documents later. The bootstrap program is a simple instance of a bfs (breadth-first search) program based on Tugraph, and we will focus on how it is used. 1. Introduction to TuGraph-Graph Analysis Engine TuGraph's graph analysis engine is mainly used for full graph/full data analysis tasks. With the help of TuGraph's C++ / Python graph analysis engine API, users can quickly derive a complex subgraph from different data sources, and then run iterative graph algorithms such as PageRank, LPA, WCC on the subgraph, and finally make corresponding countermeasures according to the running results. In TuGraph, the process of both exporting and computing can be accelerated by in-memory parallel processing, resulting in near-real-time processing and analysis. Compared to traditional methods, this approach can avoid the overhead of data export and disk drop, and can achieve ideal performance by using a compact graph data structure. TuGraph has 6 built-in algorithms in the community version and 25 built-in algorithms in the commercial version. Users hardly need to implement the specific graph calculation process themselves. For details, please refer to algorithms.md. According to different data sources and implementations, it can be divided into Procedure, Embed and Standalone, which all inherit from OlapBase API. OlapBase API interface documentation can be found in OlAPBase-APi.md. The data source of Procedure and Embed is the db data preloaded in the graph database, which can be compiled to generate the.so file used by TuGraph-Web loading and the embed file used by the background terminal respectively. The input graph data are loaded in the form of db. The interface document can refer to olapondb-api.md. Standalone is used to compile and generate a standalone file. Different from the former, the input graph data of the file is loaded in the form of txt, binary, and ODPS files, and the interface document can refer to olapondisk-api.md. 2. Procedure compile and run This mode is mainly used for visual loading and running on the TuGraph-web interface. The usage method is as follows: C++ Run bash make_so.sh bfs in the TuGraph/plugins directory to the BFs.so file in the TuGraph/plugins directory, upload the file as a plug-in to Tugraph-web, input parameters and then execute. Python Upload the python file as a plugin to TuGraph-web, and execute it after inputting parameters. Example: Compile the.so algorithm file at TuGraph/plugins bash make_so.sh bfs After loading the bfs.so (or TuGraph/plugins/cython/bfs.py) file as a plug-in to TuGraph-web, enter the following json parameters: { \"root_id\": \"0\", \"label\": \"node\", \"field\": \"id\" } The following result result:\"{\"core_cost\":0.013641119003295898, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":8.821487426757813e-06, \"prepare_cost\":0.03479194641113281, \"total_cost\":0.04844188690185547}\" The output \uff1a num_edges: the number of edges in the graph num_vertices: the number of nodes in the graph prepare_cost: Represents the time required for the preprocessing phase. The preprocessing phase works: loading parameters, graph data loading, index initialization. core_cost: Represents the time required for the algorithm to run. found_vertices: Number of vertices found. output_cost: the time it takes for the algorithm result to be written back to db.\u3002 total_cost: The overall running time of the algorithm is executed. make_so.sh This file is used to compile the graph algorithm files involved in TuGraph-OLAP into a.so file available for TuGraph-web. 3. Embed compile and run This way is mainly used for TuGraph in the background program on the preloaded db graph data algorithm analysis. Its use method is as follows: To complete the embed_main.cpp file in TuGraph/plugins directory, add the data name, input parameters, data path and other information, as shown in the following example: C++ #include <iostream> #include \"lgraph/lgraph.h\" #include \"lgraph/olap_base.h\" using namespace std; extern \"C\" bool Process(lgraph_api::GraphDB &db, const std::string &request, std::string &response); int main(int argc, char **argv) { // db_path Specifies the path for saving the preloaded graph data std::string db_path = \"../fb_db/\"; if (argc > 1) db_path = argv[1]; lgraph_api::Galaxy g(db_path); g.SetCurrentUser(\"admin\", \"73@TuGraph\"); // Specifies the name of the graph lgraph_api::GraphDB db = g.OpenGraph(\"fb_db\"); std::string resp; // Enter the algorithm parameters in json format bool r = Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\", resp); cout << r << endl; cout << resp << endl; return 0; } Run bash make_so.sh bfs in TuGraph/plugins to bfs_procedure in TuGraph/plugins/cpp. bash make_embed.sh bfs Do this in the TuGraph/plugins folder ./cpp/bfs_procedure The result is returned. Input: {\"root_id\":\"0\", \"label\":\"node\",\"field\":\"id\"} found_vertices = 3829 {\"core_cost\":0.025603055953979492, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":9.059906005859375e-06, \"prepare_cost\":0.056738853454589844, \"total_cost\":0.0823509693145752} Input indicates the input parameters.The other parameters are described as above. Python To compile bfs.so, run bash make_cython_so.sh bfs in TuGraph/plugins or python3 setup.py build_ext -i in TuGraph/plugins/cython. After obtaining bfs.so, it can be imported and used in Python, as shown in TuGraph/plugins/embed_main.py: # TuGraph/plugins/embed_main.py from lgraph_db_python import * import bfs as python_plugin if __name__ == \"__main__\": galaxy = PyGalaxy(\"../build/output/lgraph_db\") galaxy.SetCurrentUser(\"admin\", \"73@TuGraph\") db = galaxy.OpenGraph(\"default\", False) res = python_plugin.Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\".encode('utf-8')) print(res) del db del galaxy # shell python3 embed_main.py The output is the same as C++ 4. Standalone compile and run This file is mainly used to load the graph data directly at the terminal and run the printout results. Here's how to use it: In TuGraph/build directory make bfs_standalone (need to include boost/sort/sort.hpp in the g++ default include path) can get bfs_standalone file, the file is generated with TuGraph/build/output/algo folder. Run: Go to the TuGraph/build directory and do ./output/algo/bfs_standalone -- type [type] -- input_dir [input_dir] --id_mapping [id_mapping] -- vertices [vertices] --root (root) - output_dir [output_dir] Ready to run. [type] : indicates the type source of the input graph file, including text file, BINARY_FILE binary file, and ODPS source. [input_dir] : indicates the path of the input graph file folder, which may contain one or more input files. TuGraph will read all the files under [input_dir] when reading the input file. It is required that [input_dir] can only contain the input file and cannot contain other files. Parameters cannot be omitted. [id_mapping] \uff1aWhen reading the side table, whether to do id mapping for the input data to make it conform to the form of algorithm operation. 1 is required for id mapping, 0 is not required. This process will take some time. The parameter can be omitted, and the default value is 0. [vertices] : represents the number of vertices in the graph. 0 indicates the number of vertices that the user wants the system to automatically recognize. When is non-zero, it indicates the number of vertices that the user wants to customize. The number of user-defined vertices must be greater than the maximum vertex ID. This parameter can be omitted. The default value is 0. [root] : indicates the starting vertex id for bfs. The argument cannot be omitted. [output_dir] : indicates the path of the folder where the output data is saved. The output content is saved to this file, and the parameter cannot be omitted. Example C++ Compile the standalone algorithm program at TuGraph/build make bfs_standalone Run the text source file in TuGraph/build/output ./output/algo/bfs_standalone --type text --input_dir ../test/integration/data/algo/fb_unweighted --root 0 Result\uff1a prepare_cost = 0.10(s) core_cost = 0.02(s) found_vertices = 3829 output_cost = 0.00(s) total_cost = 0.11(s) DONE. Result Parameter description is the same as above. If you do not know the required parameters of a new algorithm, run the ./output/algo/bfs_standalone -h to view the parameters. Python The bfs extension compilation process of the Python language is the same as that of the embed mode. It is called through the Standalone interface at runtime. The example is as follows: # TuGraph/plugins/standalone_main.py import bfs as python_plugin if __name__ == \"__main__\": python_plugin.Standalone( input_dir=\"../test/integration/data/algo/fb_unweighted\", root=0) # shell python3 standalone_main.py At this point, the process of bfs operation on the figure above by TuGraph is complete.","title":"Tutorial"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#bootstrap-program","text":"This document is a bootstrap program designed for TuGraph users. Before reading the detailed documents, users should read this document first to have a general understanding of TuGraph's graph computing operation process, and it will be more convenient to read the detailed documents later. The bootstrap program is a simple instance of a bfs (breadth-first search) program based on Tugraph, and we will focus on how it is used.","title":"Bootstrap program"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#1-introduction-to-tugraph-graph-analysis-engine","text":"TuGraph's graph analysis engine is mainly used for full graph/full data analysis tasks. With the help of TuGraph's C++ / Python graph analysis engine API, users can quickly derive a complex subgraph from different data sources, and then run iterative graph algorithms such as PageRank, LPA, WCC on the subgraph, and finally make corresponding countermeasures according to the running results. In TuGraph, the process of both exporting and computing can be accelerated by in-memory parallel processing, resulting in near-real-time processing and analysis. Compared to traditional methods, this approach can avoid the overhead of data export and disk drop, and can achieve ideal performance by using a compact graph data structure. TuGraph has 6 built-in algorithms in the community version and 25 built-in algorithms in the commercial version. Users hardly need to implement the specific graph calculation process themselves. For details, please refer to algorithms.md. According to different data sources and implementations, it can be divided into Procedure, Embed and Standalone, which all inherit from OlapBase API. OlapBase API interface documentation can be found in OlAPBase-APi.md. The data source of Procedure and Embed is the db data preloaded in the graph database, which can be compiled to generate the.so file used by TuGraph-Web loading and the embed file used by the background terminal respectively. The input graph data are loaded in the form of db. The interface document can refer to olapondb-api.md. Standalone is used to compile and generate a standalone file. Different from the former, the input graph data of the file is loaded in the form of txt, binary, and ODPS files, and the interface document can refer to olapondisk-api.md.","title":"1. Introduction to TuGraph-Graph Analysis Engine"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#2-procedure-compile-and-run","text":"This mode is mainly used for visual loading and running on the TuGraph-web interface. The usage method is as follows:","title":"2. Procedure compile and run"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#c","text":"Run bash make_so.sh bfs in the TuGraph/plugins directory to the BFs.so file in the TuGraph/plugins directory, upload the file as a plug-in to Tugraph-web, input parameters and then execute.","title":"C++"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#python","text":"Upload the python file as a plugin to TuGraph-web, and execute it after inputting parameters. Example: Compile the.so algorithm file at TuGraph/plugins bash make_so.sh bfs After loading the bfs.so (or TuGraph/plugins/cython/bfs.py) file as a plug-in to TuGraph-web, enter the following json parameters: { \"root_id\": \"0\", \"label\": \"node\", \"field\": \"id\" } The following result result:\"{\"core_cost\":0.013641119003295898, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":8.821487426757813e-06, \"prepare_cost\":0.03479194641113281, \"total_cost\":0.04844188690185547}\" The output \uff1a num_edges: the number of edges in the graph num_vertices: the number of nodes in the graph prepare_cost: Represents the time required for the preprocessing phase. The preprocessing phase works: loading parameters, graph data loading, index initialization. core_cost: Represents the time required for the algorithm to run. found_vertices: Number of vertices found. output_cost: the time it takes for the algorithm result to be written back to db.\u3002 total_cost: The overall running time of the algorithm is executed. make_so.sh This file is used to compile the graph algorithm files involved in TuGraph-OLAP into a.so file available for TuGraph-web.","title":"Python"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#3-embed-compile-and-run","text":"This way is mainly used for TuGraph in the background program on the preloaded db graph data algorithm analysis. Its use method is as follows: To complete the embed_main.cpp file in TuGraph/plugins directory, add the data name, input parameters, data path and other information, as shown in the following example:","title":"3. Embed compile and run"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#c_1","text":"#include <iostream> #include \"lgraph/lgraph.h\" #include \"lgraph/olap_base.h\" using namespace std; extern \"C\" bool Process(lgraph_api::GraphDB &db, const std::string &request, std::string &response); int main(int argc, char **argv) { // db_path Specifies the path for saving the preloaded graph data std::string db_path = \"../fb_db/\"; if (argc > 1) db_path = argv[1]; lgraph_api::Galaxy g(db_path); g.SetCurrentUser(\"admin\", \"73@TuGraph\"); // Specifies the name of the graph lgraph_api::GraphDB db = g.OpenGraph(\"fb_db\"); std::string resp; // Enter the algorithm parameters in json format bool r = Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\", resp); cout << r << endl; cout << resp << endl; return 0; } Run bash make_so.sh bfs in TuGraph/plugins to bfs_procedure in TuGraph/plugins/cpp. bash make_embed.sh bfs Do this in the TuGraph/plugins folder ./cpp/bfs_procedure The result is returned. Input: {\"root_id\":\"0\", \"label\":\"node\",\"field\":\"id\"} found_vertices = 3829 {\"core_cost\":0.025603055953979492, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":9.059906005859375e-06, \"prepare_cost\":0.056738853454589844, \"total_cost\":0.0823509693145752} Input indicates the input parameters.The other parameters are described as above.","title":"C++"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#python_1","text":"To compile bfs.so, run bash make_cython_so.sh bfs in TuGraph/plugins or python3 setup.py build_ext -i in TuGraph/plugins/cython. After obtaining bfs.so, it can be imported and used in Python, as shown in TuGraph/plugins/embed_main.py: # TuGraph/plugins/embed_main.py from lgraph_db_python import * import bfs as python_plugin if __name__ == \"__main__\": galaxy = PyGalaxy(\"../build/output/lgraph_db\") galaxy.SetCurrentUser(\"admin\", \"73@TuGraph\") db = galaxy.OpenGraph(\"default\", False) res = python_plugin.Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\".encode('utf-8')) print(res) del db del galaxy # shell python3 embed_main.py The output is the same as C++","title":"Python"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#4-standalone-compile-and-run","text":"This file is mainly used to load the graph data directly at the terminal and run the printout results. Here's how to use it: In TuGraph/build directory make bfs_standalone (need to include boost/sort/sort.hpp in the g++ default include path) can get bfs_standalone file, the file is generated with TuGraph/build/output/algo folder. Run: Go to the TuGraph/build directory and do ./output/algo/bfs_standalone -- type [type] -- input_dir [input_dir] --id_mapping [id_mapping] -- vertices [vertices] --root (root) - output_dir [output_dir] Ready to run. [type] : indicates the type source of the input graph file, including text file, BINARY_FILE binary file, and ODPS source. [input_dir] : indicates the path of the input graph file folder, which may contain one or more input files. TuGraph will read all the files under [input_dir] when reading the input file. It is required that [input_dir] can only contain the input file and cannot contain other files. Parameters cannot be omitted. [id_mapping] \uff1aWhen reading the side table, whether to do id mapping for the input data to make it conform to the form of algorithm operation. 1 is required for id mapping, 0 is not required. This process will take some time. The parameter can be omitted, and the default value is 0. [vertices] : represents the number of vertices in the graph. 0 indicates the number of vertices that the user wants the system to automatically recognize. When is non-zero, it indicates the number of vertices that the user wants to customize. The number of user-defined vertices must be greater than the maximum vertex ID. This parameter can be omitted. The default value is 0. [root] : indicates the starting vertex id for bfs. The argument cannot be omitted. [output_dir] : indicates the path of the folder where the output data is saved. The output content is saved to this file, and the parameter cannot be omitted. Example","title":"4. Standalone compile and run"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#c_2","text":"Compile the standalone algorithm program at TuGraph/build make bfs_standalone Run the text source file in TuGraph/build/output ./output/algo/bfs_standalone --type text --input_dir ../test/integration/data/algo/fb_unweighted --root 0 Result\uff1a prepare_cost = 0.10(s) core_cost = 0.02(s) found_vertices = 3829 output_cost = 0.00(s) total_cost = 0.11(s) DONE. Result Parameter description is the same as above. If you do not know the required parameters of a new algorithm, run the ./output/algo/bfs_standalone -h to view the parameters.","title":"C++"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/1.tutorial/#python_2","text":"The bfs extension compilation process of the Python language is the same as that of the embed mode. It is called through the Standalone interface at runtime. The example is as follows: # TuGraph/plugins/standalone_main.py import bfs as python_plugin if __name__ == \"__main__\": python_plugin.Standalone( input_dir=\"../test/integration/data/algo/fb_unweighted\", root=0) # shell python3 standalone_main.py At this point, the process of bfs operation on the figure above by TuGraph is complete.","title":"Python"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/","text":"OlapBase API This document will introduce how to use the OlapBase API 1. The overview This manual will introduce the configuration of the TuGraph graph computing system. Combined with the code, several important files and interfaces in TuGraph are introduced. 2. Configuration requirements To develop and compile applications using the TuGraph graph computing system, the configuration required: linux operating system, currently running successfully on Ubuntu16.04.2 and Centos7 systems. Compiler that supports C++ 14, requires GCC version 5.4.1 or later. 3. Atomic operations TuGraph uses multi-threading technology for batch operations, in which case memory access conflicts may occur. In order to ensure the correctness of modification operations in parallel computing, TuGraph implements atomic operations. The code section can be found in the lgraph_atomic.cpp file under the lgraph folder. TuGraph also customizes 4 commonly used atomic operations. When we need to modify the data of vertices in multithreaded mode, we should use atomic operations to ensure the correctness of the modification operation in parallel environment. In addition to these four atomic operations, users can also use \"cas\" to build their own atomic operation functions. bool cas(T \\* ptr, T oldv, T newv) : If the value pointed to by ptr is equal to oldv, the value pointed to by ptr is assigned to newv and returns true. Otherwise, false is returned bool write_min(T \\*a, T b) : If b is smaller than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. bool write_max(T \\*a, T b) : If b is larger than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. void write_add(T \\*a, T b) : adds the value of b to the value pointed to by a. void write_sub(T \\*a, T b) : subtract the value of b from the value pointed to by a. 4. Vertex Class ParallelBitset When using TuGraph for batch operations, you need to use a vertex set to represent the vertices you want to process. ParallelBitset implements a vertex collection class that represents vertices in bits and thus saves a significant amount of memory. The corresponding code can be found in the olap_base.h file in the lgraph folder. 4.1 ParallelBitset Class size_t Size() \uff1aIndicates the number of vertices in the Bitmap. ParallelBitset(size_t size) \uff1aInitialize size and data, the length of data is (size >> 6)+1. void Clear() \uff1aclears the collection. void Fill() \uff1aadd all vertices to the set. bool Has(size_t i) \uff1acheck if vertex i is in the set. bool Add(size_t i) \uff1aadd vertex i to the set. void Swap(ParallelBitset &other) \uff1aexchange elements with another set of ParallelBitset. 5. Vertex Array Class ParallelVector When using TuGraph for batch operations, you need to use an array of vertices to represent the result of processing vertices. ParallelVector implements the vertex array class. The corresponding code can be found in the olap_base.h file in the lgraph folder. 5.1 ParallelVector Class ParallelVector(size_t capacity) Builds ParallelVector. capacity is the initial size of the vertex array T& operator[](size_t i) : data with subscript i T \\*begin() : ParallelVector the starting pointer T \\*end() : ParallelVector the end pointer to Parallelvector. begin and end are similar to the begin and end Pointers of a vector. You can use these Pointers to access an array sequentially T&Back () : ParallelVector the last data T \\*Data() : represents the data in the array itself `void Destroy()' : empty the ParallelVector array and delete the array size_t Size() : indicates the number of data in ParallelVector void Resize(size_t size) : Change ParallelVector to size, which must be greater than or equal to the size before the change void Clear() : empty the data in ParallelVector void ReAlloc(size_t capacity) : ParallelVector is allocated with new capacity. If data exists in the array, it is migrated to the new memory void Fill(T elem) : Assign elem to all data on ParallelVector void Append(const T&elem, bool atomic = true) : Add a piece of data at the end of ParallelVector void Swap(ParallelVector<t> &other) : to exchange data with other parallelvectors ParallelVector<t> Copy() : copies the current ParallelVector data into the Copy array 6. Customize data structures 6.1 Basic data types We customize the data structure representation of points and edges to save memory space while covering all vertices: 'Empty' : indicates a special data type with empty content. 6.2 Combining data structures In order to facilitate calculation, we define several data structures of point and edge data according to different calculation scenarios, which are as follows: EdgeUnit<edgedata> : represents an edge of weight type EdgeData, used to parse the input file, and contains three member variables: size_t src : the starting vertex of an edge size_t dst : the end of an edge EdgeData edge_data : edge weight AdjUnit<edgedata> : represents an edge of weight type EdgeData, used during batch computation, and contains two member variables: size_t neighbour : indicates the neighbor vertex of an edge EdgeData edge_data : edge weight AdjList<edgedata> : Adjacency list of vertices with weights of type EdgeData, often used to represent the set of incoming and outgoing edges of vertices and containing two member variables: AdjUnit<t> \\* begin : indicates the start pointer of the list AdjUnit<t> \\* end : The end pointer of the list. begin and end are similar to the begin and end Pointers of a vector. You can use these Pointers to loop through the adjacency list. 7. Graph class OlapBase Graph class OlapBase is the main class for TuGraph to load graphs and calculate graphs. OlapBase is commonly used to represent graphs with weights of type EdgeData. See olap_base.hpp under lgraph folder for the code. This chapter covers the types and API interfaces commonly used in Graph classes. The classes used by the Procedure, Embed, and Standalone functions described above are all subclasses of this class. 7.1 Basic Information size_t NumVertices() : obtains the number of vertices size_t NumEdges() : Gets the number of edges size_t OutDegree(size_t vid) : indicates the outdegree of the vid of the vertex size_t InDegree(size_t vid) : indicates the input degree of vertex vid 7.2 node sets and edge sets and their related operations ParallelVector AllocVertexArray() : Allocates an array of type VertexData with size as the number of vertices void fill_vertex_array(V \\* array, V value) : assigns values to all elements in the array ParallelBitset AllocVertexSubset() : Assigns a subset of ParallelBitsets to denote whether the state of all vertices is activated AdjList OutEdges(size_t vid)' : gets the set of all outgoing edges of vertex v AdjList InEdges(size_t vid) : Obtains the set of all incoming edges of vertex v void Transpose() : transpose of a directed graph LoadFromArray(char \\* edge_array, VertexId input_vertices, EdgeId input_edges, EdgeDirectionPolicy (edge_direction_policy) : Loads the graph data from the array, contains four parameters, the meaning of which are respectively: edge_array : reads the data from the array into the graph. Normally, the array contains multiple edges. input_vertices : specifies the number of vertices read into the graph by the array. input_edges : specifies the number of edges that the array reads into the image. edge_direction_policy : indicates that the graph is directed or undirected. The graph can be divided into three modes: DUAL_DIRECTION, MAKE_SYMMETRIC, and INPUT_SYMMETRIC. For details, see 'enum EdgeDirectionPolicy' in the config.h file in the core folder. 7.3 Locking mechanism TuGraph implements a pair of locks to control the program's access to vertex data. Respectively is: void AcquireVertexLock(size_t vid) : locks a vertex vid and prohibits other threads from accessing the vertex data corresponding to this lock void ReleaseVertexLock(size_t vid) : unlocks the vertex vid and all threads can access the vertex data corresponding to the lock VertexLockGuard GuardVertexLock(size_t vid) : When the vid operation is performed, the vertex vid is locked, and the lock is automatically released upon exiting the scope 7.4 Batch Processing Operations TuGraph provides two batch operations to do a point-centered batch process in parallel. Respectively is: /* Function Name:ReducedSum ProcessVertexInRange(std::function<ReducedSum(size_t)> work, size_t lower, size_t upper, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) The work function executes the work function on nodes whose numbers are between lower and upper in the Graph. The fourth parameter indicates the accumulated base, which defaults to 0.The fifth parameter indicates that the iteration reduce function operation is performed on the return value of each node processed by work, and the default operation is the accumulation operation. For details, please refer to include/lgraph/olap_base.h Example: Count the number of vertices in the parent array that have outgoing edges */ auto vertex_num = graph.ProcessVertexInRange<size_t>( [&](size_t i) { if (graph.OutDegree(parent[i]) > 0) { return 1; } }, 0, parent.Size() ); printf(\"the number is %lu\\n\",vertex_num); graph is the instantiated object of graph class OlapBase /* Function Name:ReducedSum ProcessVertexActive(std::function<ReducedSum(size_t)> work, ParallelBitset &active_vertices, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) Function: Execute the work function for the node that corresponds to 1 in active_vertices. The third parameter represents the cumulative cardinality, which is 0 by default. The fourth parameter indicates that the iteration reduce function operation is performed on the return value of each node processed by work, and the default operation is the accumulation operation. For specific implementation, please refer to the specific code in /include/lgraph/olap_base Example: Output all the out-degree neighbors of nodes 1, 2, and 3 in the Graph, and count the total out-degree of these three nodes */ auto active_in = graph.AllocVertexSubset(); active_in.Add(1); active_in.Add(2); active_in.Add(3); auto total_outdegree = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t local_outdegree = 0; for (auto & edge : graph.OutEdges(vi)) { size_t dst = edge.neighbour; printf(\"node %lu has neighbour %lu\\n\",vi,dst); local_outdegree += 1; } return local_outdegree; }, active_in ); printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree);","title":"OLAP Base API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#olapbase-api","text":"This document will introduce how to use the OlapBase API","title":"OlapBase API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#1-the-overview","text":"This manual will introduce the configuration of the TuGraph graph computing system. Combined with the code, several important files and interfaces in TuGraph are introduced.","title":"1. The overview"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#2-configuration-requirements","text":"To develop and compile applications using the TuGraph graph computing system, the configuration required: linux operating system, currently running successfully on Ubuntu16.04.2 and Centos7 systems. Compiler that supports C++ 14, requires GCC version 5.4.1 or later.","title":"2. Configuration requirements"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#3-atomic-operations","text":"TuGraph uses multi-threading technology for batch operations, in which case memory access conflicts may occur. In order to ensure the correctness of modification operations in parallel computing, TuGraph implements atomic operations. The code section can be found in the lgraph_atomic.cpp file under the lgraph folder. TuGraph also customizes 4 commonly used atomic operations. When we need to modify the data of vertices in multithreaded mode, we should use atomic operations to ensure the correctness of the modification operation in parallel environment. In addition to these four atomic operations, users can also use \"cas\" to build their own atomic operation functions. bool cas(T \\* ptr, T oldv, T newv) : If the value pointed to by ptr is equal to oldv, the value pointed to by ptr is assigned to newv and returns true. Otherwise, false is returned bool write_min(T \\*a, T b) : If b is smaller than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. bool write_max(T \\*a, T b) : If b is larger than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. void write_add(T \\*a, T b) : adds the value of b to the value pointed to by a. void write_sub(T \\*a, T b) : subtract the value of b from the value pointed to by a.","title":"3. Atomic operations"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#4-vertex-class-parallelbitset","text":"When using TuGraph for batch operations, you need to use a vertex set to represent the vertices you want to process. ParallelBitset implements a vertex collection class that represents vertices in bits and thus saves a significant amount of memory. The corresponding code can be found in the olap_base.h file in the lgraph folder.","title":"4. Vertex Class ParallelBitset"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#41-parallelbitset-class","text":"size_t Size() \uff1aIndicates the number of vertices in the Bitmap. ParallelBitset(size_t size) \uff1aInitialize size and data, the length of data is (size >> 6)+1. void Clear() \uff1aclears the collection. void Fill() \uff1aadd all vertices to the set. bool Has(size_t i) \uff1acheck if vertex i is in the set. bool Add(size_t i) \uff1aadd vertex i to the set. void Swap(ParallelBitset &other) \uff1aexchange elements with another set of ParallelBitset.","title":"4.1 ParallelBitset Class"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#5-vertex-array-class-parallelvector","text":"When using TuGraph for batch operations, you need to use an array of vertices to represent the result of processing vertices. ParallelVector implements the vertex array class. The corresponding code can be found in the olap_base.h file in the lgraph folder.","title":"5. Vertex Array Class ParallelVector"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#51-parallelvector-class","text":"ParallelVector(size_t capacity) Builds ParallelVector. capacity is the initial size of the vertex array T& operator[](size_t i) : data with subscript i T \\*begin() : ParallelVector the starting pointer T \\*end() : ParallelVector the end pointer to Parallelvector. begin and end are similar to the begin and end Pointers of a vector. You can use these Pointers to access an array sequentially T&Back () : ParallelVector the last data T \\*Data() : represents the data in the array itself `void Destroy()' : empty the ParallelVector array and delete the array size_t Size() : indicates the number of data in ParallelVector void Resize(size_t size) : Change ParallelVector to size, which must be greater than or equal to the size before the change void Clear() : empty the data in ParallelVector void ReAlloc(size_t capacity) : ParallelVector is allocated with new capacity. If data exists in the array, it is migrated to the new memory void Fill(T elem) : Assign elem to all data on ParallelVector void Append(const T&elem, bool atomic = true) : Add a piece of data at the end of ParallelVector void Swap(ParallelVector<t> &other) : to exchange data with other parallelvectors ParallelVector<t> Copy() : copies the current ParallelVector data into the Copy array","title":"5.1 ParallelVector Class"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#6-customize-data-structures","text":"","title":"6. Customize data structures"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#61-basic-data-types","text":"We customize the data structure representation of points and edges to save memory space while covering all vertices: 'Empty' : indicates a special data type with empty content.","title":"6.1 Basic data types"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#62-combining-data-structures","text":"In order to facilitate calculation, we define several data structures of point and edge data according to different calculation scenarios, which are as follows: EdgeUnit<edgedata> : represents an edge of weight type EdgeData, used to parse the input file, and contains three member variables: size_t src : the starting vertex of an edge size_t dst : the end of an edge EdgeData edge_data : edge weight AdjUnit<edgedata> : represents an edge of weight type EdgeData, used during batch computation, and contains two member variables: size_t neighbour : indicates the neighbor vertex of an edge EdgeData edge_data : edge weight AdjList<edgedata> : Adjacency list of vertices with weights of type EdgeData, often used to represent the set of incoming and outgoing edges of vertices and containing two member variables: AdjUnit<t> \\* begin : indicates the start pointer of the list AdjUnit<t> \\* end : The end pointer of the list. begin and end are similar to the begin and end Pointers of a vector. You can use these Pointers to loop through the adjacency list.","title":"6.2 Combining data structures"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#7-graph-class-olapbase","text":"Graph class OlapBase is the main class for TuGraph to load graphs and calculate graphs. OlapBase is commonly used to represent graphs with weights of type EdgeData. See olap_base.hpp under lgraph folder for the code. This chapter covers the types and API interfaces commonly used in Graph classes. The classes used by the Procedure, Embed, and Standalone functions described above are all subclasses of this class.","title":"7. Graph class OlapBase"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#71-basic-information","text":"size_t NumVertices() : obtains the number of vertices size_t NumEdges() : Gets the number of edges size_t OutDegree(size_t vid) : indicates the outdegree of the vid of the vertex size_t InDegree(size_t vid) : indicates the input degree of vertex vid","title":"7.1 Basic Information"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#72-node-sets-and-edge-sets-and-their-related-operations","text":"ParallelVector AllocVertexArray() : Allocates an array of type VertexData with size as the number of vertices void fill_vertex_array(V \\* array, V value) : assigns values to all elements in the array ParallelBitset AllocVertexSubset() : Assigns a subset of ParallelBitsets to denote whether the state of all vertices is activated AdjList OutEdges(size_t vid)' : gets the set of all outgoing edges of vertex v AdjList InEdges(size_t vid) : Obtains the set of all incoming edges of vertex v void Transpose() : transpose of a directed graph LoadFromArray(char \\* edge_array, VertexId input_vertices, EdgeId input_edges, EdgeDirectionPolicy (edge_direction_policy) : Loads the graph data from the array, contains four parameters, the meaning of which are respectively: edge_array : reads the data from the array into the graph. Normally, the array contains multiple edges. input_vertices : specifies the number of vertices read into the graph by the array. input_edges : specifies the number of edges that the array reads into the image. edge_direction_policy : indicates that the graph is directed or undirected. The graph can be divided into three modes: DUAL_DIRECTION, MAKE_SYMMETRIC, and INPUT_SYMMETRIC. For details, see 'enum EdgeDirectionPolicy' in the config.h file in the core folder.","title":"7.2 node sets and edge sets and their related operations"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#73-locking-mechanism","text":"TuGraph implements a pair of locks to control the program's access to vertex data. Respectively is: void AcquireVertexLock(size_t vid) : locks a vertex vid and prohibits other threads from accessing the vertex data corresponding to this lock void ReleaseVertexLock(size_t vid) : unlocks the vertex vid and all threads can access the vertex data corresponding to the lock VertexLockGuard GuardVertexLock(size_t vid) : When the vid operation is performed, the vertex vid is locked, and the lock is automatically released upon exiting the scope","title":"7.3 Locking mechanism"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#74-batch-processing-operations","text":"TuGraph provides two batch operations to do a point-centered batch process in parallel. Respectively is: /* Function Name:ReducedSum ProcessVertexInRange(std::function<ReducedSum(size_t)> work, size_t lower, size_t upper, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) The work function executes the work function on nodes whose numbers are between lower and upper in the Graph. The fourth parameter indicates the accumulated base, which defaults to 0.The fifth parameter indicates that the iteration reduce function operation is performed on the return value of each node processed by work, and the default operation is the accumulation operation. For details, please refer to include/lgraph/olap_base.h Example: Count the number of vertices in the parent array that have outgoing edges */ auto vertex_num = graph.ProcessVertexInRange<size_t>( [&](size_t i) { if (graph.OutDegree(parent[i]) > 0) { return 1; } }, 0, parent.Size() ); printf(\"the number is %lu\\n\",vertex_num); graph is the instantiated object of graph class OlapBase /* Function Name:ReducedSum ProcessVertexActive(std::function<ReducedSum(size_t)> work, ParallelBitset &active_vertices, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) Function: Execute the work function for the node that corresponds to 1 in active_vertices. The third parameter represents the cumulative cardinality, which is 0 by default. The fourth parameter indicates that the iteration reduce function operation is performed on the return value of each node processed by work, and the default operation is the accumulation operation. For specific implementation, please refer to the specific code in /include/lgraph/olap_base Example: Output all the out-degree neighbors of nodes 1, 2, and 3 in the Graph, and count the total out-degree of these three nodes */ auto active_in = graph.AllocVertexSubset(); active_in.Add(1); active_in.Add(2); active_in.Add(3); auto total_outdegree = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t local_outdegree = 0; for (auto & edge : graph.OutEdges(vi)) { size_t dst = edge.neighbour; printf(\"node %lu has neighbour %lu\\n\",vi,dst); local_outdegree += 1; } return local_outdegree; }, active_in ); printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree);","title":"7.4 Batch Processing Operations"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/","text":"OlapOnDB API This document provides detailed instructions for using the OlapOnDB API 1. Introduction Generally speaking, users need to implement the process of subgraph extraction by themselves. Then use the rich interface in TuGraph to implement your own graph analysis algorithm. This document mainly introduces the Procedure and Embed interface design, and introduces some common interface, specific interface information see include/lgraph/olap_on_db.h file. 2. Schema Procedure and Embed auxiliary functions are mainly included in the OlapOnDB class, and some more frequently used functions will be introduced one by one OLAP is associated with the following common data structures in TuGraph: DB graph analysis class OlapOnDB Vertex array ParallelVector Vertex set ParallelBitset Side data structure AdjUnit/AdjUnit Edge collection data structure AdjList 2.1 Snapshot Based Storage Structure The OlapOnDB class in TuGraph provides a data \"snapshot,\" that is, a fully usable copy of a given data set that includes a mirror image of the corresponding data at a certain point in time (the point at which the copy was started). Because OLAP operations involve only reads and not writes, OlapOnDB arranges data in a more compact manner, saving space while improving data access locality. 2.2 BSP Calculation Model TuGraph uses the BSP (Bulk Synchronous Parallel) model in the process of calculation, which makes the process can be executed in parallel, and greatly improves the efficiency of the program. The core idea of BSP calculation model is to propose and use Super Step. After OlapOnDB is created, the computation on this data is divided into multiple supersteps, such as PageRank, which is divided into multiple iterations, and each iteration is a Super Step. There is explicit synchronization between different Super Steps to ensure that all threads proceed to the next Super Step at the same time after completing the same superstep. Within a Super Step, all threads execute asynchronously, using parallelism to improve computational efficiency. BSP calculation model can effectively avoid deadlock, and achieve coarse-grained global synchronization in hardware mode by means of obstacle synchronization, so that graph computation can be executed in parallel, and programmers do not need to spend much time on synchronization mutual exclusion. 3. Algorithm example Here is an explanation of the PageRank algorithm, which is mainly divided into the main function Process and the PageRank algorithm process function. 3.1 Main function The main function has three input parameters, 'TuGraph' database parameter 'db', the request 'request' obtained from the web side, and the return value 'response' given to the web side. The overall process can be divided into the following steps: Obtain related parameters Create a snapshot class Main process of PageRank algorithm Obtain and send the return value of the web page extern \"C\" bool Process(GraphDB & db, const std::string & request, std::string & response) { // Obtain the number of iterations from web side requests (num_iterations)\uff0c int num_iterations = 20; try { json input = json::parse(request); num_iterations = input[\"num_iterations\"].get<int>(); } catch (std::exception & e) { throw std::runtime_error(\"json parse error\"); return false; } // Read transaction creation and snapshot class creation auto txn = db.CreateReadTxn(); OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL ); // Create a pr array to store the pr value for each node ParallelVector<double> pr = olapondb.AllocVertexArray<double>(); // pagerank algorithm main process, obtain the pagerank value of each node PageRankCore(olapondb, num_iterations, pr); auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); /* Function Purpose: Gets the number of the node with the largest pagerank among all nodes Function flow description: This function executes Func A for node vi (also known as the active vertices) corresponding to all bits of 1 in the vertex set all_vertices. The return value of Func A is then used as the second input parameter of Func B to obtain the local maximum value (because the first input parameter is 0. So the return value is actually the pagerank value of each node). Finally, the return value of all threads is summarized, and Func B is executed again to get the global return value, and stored in the max_pr_vi variable */ size_t max_pr_vi = olapondb.ProcessVertexActive<size_t>( //Func A [&](size_t vi) { return vi; }, all_vertices, 0, //Func B [&](size_t a, size_t b) { return pr[a] > pr[b] ? a : b; } ); // Retrieve and send the return value from the web page json output; output[\"max_pr_vid\"] = olapondb.OriginalVid(max_pr_vi); output[\"max_pr_val\"] = pr[max_pr_vi]; response = output.dump(); return true; } 3.2 PageRank Algorithm process pagerank main process has two input parameters, snapshot class (subgraph) and iteration times, the overall process can be divided into the following steps: Initialization of related data structures Initialize the pagerank value of each node Calculation of pagerank value of each node, active vertices for all vertices (means that all vertices need to calculate pagerank value) Obtain the pagerank value after 'num_iterations' of each node void PageRankCore(OlapBase<Empty>& graph, int num_iterations, ParallelVector<double>& curr) { // Initialization of related data structures auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); auto curr = olapondb.AllocVertexArray<double>(); auto next = olapondb.AllocVertexArray<double>(); size_t num_vertices = olapondb.NumVertices(); double one_over_n = (double)1 / num_vertices; // The initialization of the pagerank value of each node is inversely proportional to the degree of the node double delta = graph.ProcessVertexActive<double>( [&](size_t vi) { curr[vi] = one_over_n; if (olapondb.OutDegree(vi) > 0) { curr[vi] /= olapondb.OutDegree(vi); } return one_over_n; }, all_vertices); // Total iteration process double d = (double)0.85; for (int ii = 0;ii < num_iterations;ii ++) { printf(\"delta(%d)=%lf\\n\", ii, delta); next.Fill((double)0); /* Function Purpose: Calculates the pagerank of all nodes Function flow description: This function is used to calculate the pagerank value of all nodes. Execute Func C on node vi corresponding to all the bits of 1 in all_vertices to obtain the pagerank value of vi in the current iteration and return the pagerank change value of vi node. The total change value of all active nodes is finally summarized and returned through the internal processing of the function, which is stored in the delta variable */ delta = graph.ProcessVertexActive<double>( // Func C [&](size_t vi) { double sum = 0; // Gets the pagerank value of the current node from its neighbor for (auto & edge : olapondb.InEdges(vi)) { size_t src = edge.neighbour; sum += curr[src]; } next[vi] = sum; // pagerank value calculation core formula next[vi] = (1 - d) * one_over_n + d * next[vi]; if (ii == num_iterations - 1) { return (double)0; } else { // Statistics of relevant intermediate variables if (olapondb.OutDegree(vi) > 0) { next[vi] /= olapondb.OutDegree(vi); return fabs(next[vi] - curr[vi]) * olapondb.OutDegree(vi); } else { return fabs(next[vi] - curr[vi]); } } }, all_vertices ); // The pagerank value obtained in this iteration is output as the input of the next iteration curr.Swap(next); } } 4.1 Transaction creation // Create a read transaction auto txn = db.CreateReadTxn(); // Write transaction creation auto txn = db.CreateWriteTxn(); 4.2 Parallelization to create a directed graph OlapOnDB<empty> olapondb(</empty> db, txn, SNAPSHOT_PARALLEL ) 4.3 Create undirected graphs in parallel OlapOnDB<empty> olapondb(</empty> db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED; ) 4.4 Obtain the output degree size_t OutDegree(size_t vid) 4.5 Obtain the input degree size_t InDegree(size_t vid) 4.6 Gets the outgoing edge set /* Function name: AdjList OutEdges(size_t vid) Data structure: An AdjList can be understood as an array of structures of type AdjUnit AdjUnit has two member variables: 1. size_t neighbour 2. edge_data: neighbour indicates the number of the target node pointed by the outgoing edge. If the value is a licensed graph, the data type of edge_data is the same as the weight value of the edge in the input file Example Output all outgoing neighbors of node vid */ for (auto & edge : olapondb.OutEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); } 4.7 Gets the incoming edge set AdjList<edgedata> InEdges(size_t vid)</edgedata> // Example: Outputs all inbound neighbors of node vid for (auto & edge : olapondb.InEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); } 4.8 Get the node ID of OlapOnDB corresponding to the node in TuGraph size_t OriginalVid(size_t vid) // Note: The node numbers entered in TuGraph can be non-numbers, such as names. When OlapOnDB subgraphs are generated, names and other names will be converted to numbers for subsequent processing. Therefore, this method may not be applicable to some specific scenarios 4.9 Gets the node number of TuGraph corresponding to a node in OlapOnDB size_t MappedVid(size_t original_vid) 4.10 Description of active vertices Active vertices refer to the vertices that need to be processed in the batch function. In this example, we simply output the number of active vertices and summarize the number of active vertices: ParallelBitset temp = 000111; // The current active vertices are vertices 3, 4 and 5 size_t delta = ForEachActiveVertex<double>(</double> //void c [&](size_t vi) { printf(\"active_vertexId = %lu\\n\",vi); return 1; }, all_vertices ); The result of this function is obvious. Because of multiple threads, the output order may vary: active_vertexId = 3 active_vertexId = 4 active_vertexId = 5 The local return value is 1. This function will add all the local return values in a thread-safe manner to the final return value, which is stored in the delta variable, and the final value is 3","title":"OLAP on DB API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#olapondb-api","text":"This document provides detailed instructions for using the OlapOnDB API","title":"OlapOnDB API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#1-introduction","text":"Generally speaking, users need to implement the process of subgraph extraction by themselves. Then use the rich interface in TuGraph to implement your own graph analysis algorithm. This document mainly introduces the Procedure and Embed interface design, and introduces some common interface, specific interface information see include/lgraph/olap_on_db.h file.","title":"1. Introduction"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#2-schema","text":"Procedure and Embed auxiliary functions are mainly included in the OlapOnDB class, and some more frequently used functions will be introduced one by one OLAP is associated with the following common data structures in TuGraph: DB graph analysis class OlapOnDB Vertex array ParallelVector Vertex set ParallelBitset Side data structure AdjUnit/AdjUnit Edge collection data structure AdjList","title":"2. Schema"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#21-snapshot-based-storage-structure","text":"The OlapOnDB class in TuGraph provides a data \"snapshot,\" that is, a fully usable copy of a given data set that includes a mirror image of the corresponding data at a certain point in time (the point at which the copy was started). Because OLAP operations involve only reads and not writes, OlapOnDB arranges data in a more compact manner, saving space while improving data access locality.","title":"2.1 Snapshot Based Storage Structure"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#22-bsp-calculation-model","text":"TuGraph uses the BSP (Bulk Synchronous Parallel) model in the process of calculation, which makes the process can be executed in parallel, and greatly improves the efficiency of the program. The core idea of BSP calculation model is to propose and use Super Step. After OlapOnDB is created, the computation on this data is divided into multiple supersteps, such as PageRank, which is divided into multiple iterations, and each iteration is a Super Step. There is explicit synchronization between different Super Steps to ensure that all threads proceed to the next Super Step at the same time after completing the same superstep. Within a Super Step, all threads execute asynchronously, using parallelism to improve computational efficiency. BSP calculation model can effectively avoid deadlock, and achieve coarse-grained global synchronization in hardware mode by means of obstacle synchronization, so that graph computation can be executed in parallel, and programmers do not need to spend much time on synchronization mutual exclusion.","title":"2.2 BSP Calculation Model"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#3-algorithm-example","text":"Here is an explanation of the PageRank algorithm, which is mainly divided into the main function Process and the PageRank algorithm process function.","title":"3. Algorithm example"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#31-main-function","text":"The main function has three input parameters, 'TuGraph' database parameter 'db', the request 'request' obtained from the web side, and the return value 'response' given to the web side. The overall process can be divided into the following steps: Obtain related parameters Create a snapshot class Main process of PageRank algorithm Obtain and send the return value of the web page extern \"C\" bool Process(GraphDB & db, const std::string & request, std::string & response) { // Obtain the number of iterations from web side requests (num_iterations)\uff0c int num_iterations = 20; try { json input = json::parse(request); num_iterations = input[\"num_iterations\"].get<int>(); } catch (std::exception & e) { throw std::runtime_error(\"json parse error\"); return false; } // Read transaction creation and snapshot class creation auto txn = db.CreateReadTxn(); OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL ); // Create a pr array to store the pr value for each node ParallelVector<double> pr = olapondb.AllocVertexArray<double>(); // pagerank algorithm main process, obtain the pagerank value of each node PageRankCore(olapondb, num_iterations, pr); auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); /* Function Purpose: Gets the number of the node with the largest pagerank among all nodes Function flow description: This function executes Func A for node vi (also known as the active vertices) corresponding to all bits of 1 in the vertex set all_vertices. The return value of Func A is then used as the second input parameter of Func B to obtain the local maximum value (because the first input parameter is 0. So the return value is actually the pagerank value of each node). Finally, the return value of all threads is summarized, and Func B is executed again to get the global return value, and stored in the max_pr_vi variable */ size_t max_pr_vi = olapondb.ProcessVertexActive<size_t>( //Func A [&](size_t vi) { return vi; }, all_vertices, 0, //Func B [&](size_t a, size_t b) { return pr[a] > pr[b] ? a : b; } ); // Retrieve and send the return value from the web page json output; output[\"max_pr_vid\"] = olapondb.OriginalVid(max_pr_vi); output[\"max_pr_val\"] = pr[max_pr_vi]; response = output.dump(); return true; }","title":"3.1 Main function"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#32-pagerank-algorithm-process","text":"pagerank main process has two input parameters, snapshot class (subgraph) and iteration times, the overall process can be divided into the following steps: Initialization of related data structures Initialize the pagerank value of each node Calculation of pagerank value of each node, active vertices for all vertices (means that all vertices need to calculate pagerank value) Obtain the pagerank value after 'num_iterations' of each node void PageRankCore(OlapBase<Empty>& graph, int num_iterations, ParallelVector<double>& curr) { // Initialization of related data structures auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); auto curr = olapondb.AllocVertexArray<double>(); auto next = olapondb.AllocVertexArray<double>(); size_t num_vertices = olapondb.NumVertices(); double one_over_n = (double)1 / num_vertices; // The initialization of the pagerank value of each node is inversely proportional to the degree of the node double delta = graph.ProcessVertexActive<double>( [&](size_t vi) { curr[vi] = one_over_n; if (olapondb.OutDegree(vi) > 0) { curr[vi] /= olapondb.OutDegree(vi); } return one_over_n; }, all_vertices); // Total iteration process double d = (double)0.85; for (int ii = 0;ii < num_iterations;ii ++) { printf(\"delta(%d)=%lf\\n\", ii, delta); next.Fill((double)0); /* Function Purpose: Calculates the pagerank of all nodes Function flow description: This function is used to calculate the pagerank value of all nodes. Execute Func C on node vi corresponding to all the bits of 1 in all_vertices to obtain the pagerank value of vi in the current iteration and return the pagerank change value of vi node. The total change value of all active nodes is finally summarized and returned through the internal processing of the function, which is stored in the delta variable */ delta = graph.ProcessVertexActive<double>( // Func C [&](size_t vi) { double sum = 0; // Gets the pagerank value of the current node from its neighbor for (auto & edge : olapondb.InEdges(vi)) { size_t src = edge.neighbour; sum += curr[src]; } next[vi] = sum; // pagerank value calculation core formula next[vi] = (1 - d) * one_over_n + d * next[vi]; if (ii == num_iterations - 1) { return (double)0; } else { // Statistics of relevant intermediate variables if (olapondb.OutDegree(vi) > 0) { next[vi] /= olapondb.OutDegree(vi); return fabs(next[vi] - curr[vi]) * olapondb.OutDegree(vi); } else { return fabs(next[vi] - curr[vi]); } } }, all_vertices ); // The pagerank value obtained in this iteration is output as the input of the next iteration curr.Swap(next); } }","title":"3.2 PageRank Algorithm process"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#41-transaction-creation","text":"// Create a read transaction auto txn = db.CreateReadTxn(); // Write transaction creation auto txn = db.CreateWriteTxn();","title":"4.1 Transaction creation"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#42-parallelization-to-create-a-directed-graph","text":"OlapOnDB<empty> olapondb(</empty> db, txn, SNAPSHOT_PARALLEL )","title":"4.2 Parallelization to create a directed graph"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#43-create-undirected-graphs-in-parallel","text":"OlapOnDB<empty> olapondb(</empty> db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED; )","title":"4.3 Create undirected graphs in parallel"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#44-obtain-the-output-degree","text":"size_t OutDegree(size_t vid)","title":"4.4 Obtain the output degree"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#45-obtain-the-input-degree","text":"size_t InDegree(size_t vid)","title":"4.5 Obtain the input degree"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#46-gets-the-outgoing-edge-set","text":"/* Function name: AdjList OutEdges(size_t vid) Data structure: An AdjList can be understood as an array of structures of type AdjUnit AdjUnit has two member variables: 1. size_t neighbour 2. edge_data: neighbour indicates the number of the target node pointed by the outgoing edge. If the value is a licensed graph, the data type of edge_data is the same as the weight value of the edge in the input file Example Output all outgoing neighbors of node vid */ for (auto & edge : olapondb.OutEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); }","title":"4.6 Gets the outgoing edge set"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#47-gets-the-incoming-edge-set","text":"AdjList<edgedata> InEdges(size_t vid)</edgedata> // Example: Outputs all inbound neighbors of node vid for (auto & edge : olapondb.InEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); }","title":"4.7 Gets the incoming edge set"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#48-get-the-node-id-of-olapondb-corresponding-to-the-node-in-tugraph","text":"size_t OriginalVid(size_t vid) // Note: The node numbers entered in TuGraph can be non-numbers, such as names. When OlapOnDB subgraphs are generated, names and other names will be converted to numbers for subsequent processing. Therefore, this method may not be applicable to some specific scenarios","title":"4.8 Get the node ID of OlapOnDB corresponding to the node in TuGraph"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#49-gets-the-node-number-of-tugraph-corresponding-to-a-node-in-olapondb","text":"size_t MappedVid(size_t original_vid)","title":"4.9 Gets the node number of TuGraph corresponding to a node in OlapOnDB"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#410-description-of-active-vertices","text":"Active vertices refer to the vertices that need to be processed in the batch function. In this example, we simply output the number of active vertices and summarize the number of active vertices: ParallelBitset temp = 000111; // The current active vertices are vertices 3, 4 and 5 size_t delta = ForEachActiveVertex<double>(</double> //void c [&](size_t vi) { printf(\"active_vertexId = %lu\\n\",vi); return 1; }, all_vertices ); The result of this function is obvious. Because of multiple threads, the output order may vary: active_vertexId = 3 active_vertexId = 4 active_vertexId = 5 The local return value is 1. This function will add all the local return values in a thread-safe manner to the final return value, which is stored in the delta variable, and the final value is 3","title":"4.10 Description of active vertices"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/","text":"OlapOnDisk API This document mainly introduces the usage instructions of OlapOnDisk API in detail Table of contents 1. Introduction 2. Algorithm Example [2.1 header files] (#21-header files) 2.2 Configuration class MyConfig 2.3 Main function [2.4 bfs algorithm flow] (#24-bfs algorithm flow) 3. Function description of other commonly used functions [3.1 Image Loading] (#31-Image Loading) [3.2 Image writing] (#32-Image writing) 3.3 Graph Analysis Function 1. Introduction The Standalone mode of TuGraph can be used to load graph data files, where the sources of graph data files can include text files, BINARY_FILE binary files, and ODPS sources. In this mode, TuGraph can quickly load multiple data sources into a graph, and then run iterative algorithms such as BFS, WCC, SSSP, etc. on the graph, and output the final result to the terminal. In TuGraph, the export and calculation process can be accelerated through parallel processing in memory, so as to achieve near real-time processing and analysis. Compared with traditional methods, it avoids the overhead of data export and storage, and can use compact Graph data structures achieve desirable performance for computation. TuGraph has built-in a large number of common graph analysis algorithms and rich auxiliary interfaces, so users hardly need to implement the specific graph calculation process by themselves. They only need to include the header file (.h) of the corresponding algorithm library when implementing their own stored procedures. To your own program, and link your own dynamic library files in the compilation phase. This document mainly introduces the common interfaces of Standalone, and the auxiliary functions used are mainly contained in the OlapOnDB class. At the same time, in order to help users understand and facilitate, the BFS algorithm is illustrated with examples. 2. Algorithm example Here, the BFS algorithm is explained in blocks, which are roughly divided into the main function main , the BFS algorithm process BFSCore function and the configuration class MyConfig. 2.1 Head file #include \"olap/olap_on_disk.h\" #include \"tools/json.hpp\" //Header files to include when using TuGraph #include \"./algo.h\" //A header file containing various algorithmic logic functions When using TuGraph to realize the calculation application of graph data files, generally, the StandaloneGraph class object graph is first created, the graph file data is loaded into the graph, and then the graph calculation process is realized by calling the graph logic function, and finally the result of the graph calculation is printed out. 2.2 Configuration class MyConfig The MyConfig configuration class function is used to provide the configuration information required for the algorithm logic calculation, inherited from ConfigBase , where EdgeDate can choose Empty (unweighted graph), int (the weight of the weighted graph is an integer) or double (the weight of the weighted graph is double) type. The MyConfig configuration class generally depends on the algorithm, and additional configuration information is required as follows: Parameters required by the algorithm Algorithm name Configure the Print function in the class Other common members inherit from ConfigBase, please refer to src/olap/olap_config.h for reference. class MyConfig : public ConfigBase<Empty> { public: // The parameters required by the algorithm are initialized size_t root = 0; std::string name = std::string(\"bfs\"); void AddParameter(fma_common::Configuration & config) { ConfigBase<Empty>::AddParameter(config); config.Add(root, \"root\", true) .Comment(\"the root of bfs\"); } void Print() { ConfigBase<Empty>::Print(); std::cout << \" name: \" << name << std::endl; if (root != size_t(-1)) { std::cout << \" root: \" << root << std::endl; } else { std::cout << \" root: UNSET\" << std::endl; } } // The configuration file accepts command line parameters. This use case will sequentially read the parameters when calling the algorithm from the command line. The value specified by the user is preferred. If the user does not specify it, the default parameter is selected. MyConfig(int &argc, char** &argv): ConfigBase<Empty>(argc, argv) { fma_common::Configuration config; AddParameter(config); config.ExitAfterHelp(true); config.ParseAndFinalize(argc, argv); Print(); } }; 2.3 main function int main(int argc, char** argv) { double start_time; // Statistical memory consumption class MemUsage instantiation MemUsage memUsage; memUsage.startMemRecord(); // prepare start_time = get_time(); // Configuration class MyConfig instantiation MyConfig config(argc, argv); size_t root_vid = config.root; // OlapOnDisk class instantiation OlapOnDisk<Empty> graph; graph.Load(config, DUAL_DIRECTION); memUsage.print(); memUsage.reset(); // Statistical graph loading time consumption auto prepare_cost = get_time() - start_time; printf(\"prepare_cost = %.2lf(s)\\n\", prepare_cost); // core start_time = get_time(); // Create an array to count whether a node has been traversed auto parent = graph.AllocVertexArray<size_t>(); // Breadth-first search algorithm, returns the number of nodes connected to the root_vid root node in the graph size_t count = BFSCore(graph, root_vid, parent); memUsage.print(); memUsage.reset(); auto core_cost = get_time() - start_time; printf(\"core_cost = %.2lf(s)\\n\", core_cost); // output start_time = get_time(); // Print relevant information to the terminal printf(\"found_vertices = %ld\\n\", count); auto output_cost = get_time() - start_time; printf(\"output_cost = %.2lf(s)\\n\", output_cost); printf(\"total_cost = %.2lf(s)\\n\", prepare_cost + core_cost + output_cost); printf(\"DONE.\"); return 0; } 2.4 bfs algorithm process The main process of bfs has two input parameters, the snapshot class (subgraph) and the number of iterations. The overall process can be divided into the following steps: Relevant definitions and initialization of data structures Use the batch function to perform cyclic calculations on each node, find all nodes adjacent to the current node in each round, and exchange them when the round ends. Until all nodes are found, return the number of nodes discovered_vertices. size_t BFSCore(Graph<Empty>& graph, size_t root_vid, ParallelVector<size_t>& parent){ size_t root = root_vid; auto active_in = graph.AllocVertexSubset(); //Allocate an array, active_in is used to store the nodes found in the previous cycle stage active_in.Add(root); //Add the root node to the array auto active_out = graph.AllocVertexSubset(); //Allocate the array active_out to store the nodes found in the current cycle stage parent.Fill((size_t)-1); //Assign a value of -1 to the node in the parent array, -1 means not found parent[root] = root; size_t num_activations = 1; //Indicates the number of nodes found in the current loop phase size_t discovered_vertices = 0; //Indicates the total number of nodes found in the current cycle phase for (int ii = 0; num_activations != 0; ii++) { //num_activations indicates the number of nodes found in the current loop phase printf(\"activates(%d) <= %lu\\n\", ii, num_activations); discovered_vertices += num_activations; //discovered_vertices indicates the total number of nodes found in the current cycle phase active_out.Clear(); num_activations = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t num_activations = 0; for (auto& edge : graph.OutEdges(vi)) { //Each cycle starts from the root node, finds adjacent adjacent nodes, changes its parent value, and operates num_activations+1 size_t dst = edge.neighbour; if (parent[dst] == (size_t)-1) { auto lock = graph.GuardVertexLock(dst); if (parent[dst] == (size_t)-1) { parent[dst] = vi; num_activations += 1; active_out.Add(dst); //Store the nodes found in the current loop phase } } } return num_activations; }, active_in); active_in.Swap(active_out); } // return all nodes return discovered_vertices; } 3. Description of other commonly used functions 3.1 Graph load TuGraph-StandaloneThe loading sources of graph data files are mainly divided into three categories: text files, binary files, and ODPS. The binary file is a file in which the binary representation of the edge data is arranged in order, which can save a lot of storage space. Its loading function is divided into three types, namely: - void Load(ConfigBase<EdgeData> config,EdgeDirectionPolicy edge_direction_policy = DUAL_DIRECTION) \uff1aThe loading method of the graph data file contains two parameters, and their meanings represent respectively - config \uff1aConfiguration parameters to load. This parameter saves the general information of the graph (such as data source, algorithm name, data input and output paths, number of vertices, etc.) and different information parameters configured according to different data sources and different algorithms. - edge_direction_policy \uff1aSpecifies whether the graph is directed or undirected, including three modes: DUAL_DIRECTION, MAKE_SYMMETRIC, and INPUT_SYMMETRIC. Among them, DUAL_DIRECTION is the default graph loading method. DUAL_DIRECTION : The input file is an asymmetric graph and the loaded graph is an asymmetric graph. MAKE_SYMMETRIC : The input file is an asymmetric graph and the loaded graph is a symmetric graph. INPUT_SYMMETRIC : The input file is a symmetric graph and the loaded graph is a symmetric graph. For details, see enum EdgeDirectionPolicy in the olap_config.h file under the lgraph folder. void LoadVertexArrayTxt<V>(V * array, std::string path, std::function<size_t(const char *, const char *, VertexUnit<V> &)> parse_line) \uff1aLoad the vertices in the file into an array in the order of their ids. The meanings of each parameter are: array \uff1aarray of data to be read path \uff1aThe path to read the file, each line in the file represents a pair of vertex parse_line \uff1aA user-defined function that tells the system how to parse a line of text data into a vertex pair. 3.2 Graph write void Write(ConfigBase<EdgeData> & config, ParallelVector<VertexData>& array, size_t array_size, std::string name, std::function<bool(VertexData &)> filter_output = filter_output_default<VertexData&>) \uff1aWrite the data in the array back to the file, and the meanings of each parameter are: config \uff1aConfiguration parameters to load. This parameter saves the general information of the graph (such as data source, algorithm name, data input and output paths, number of vertices, etc.) and different information parameters configured according to different data sources and different algorithms. array \uff1aarray of data to be written array_size \uff1aThe length of the number of data to be written name \uff1aalgorithm name filter_output \uff1aWrite data rule function, the data to be written needs to meet the requirements of this function. 3.3 graph parse function std::tuple<size_t, bool> parse_line_unweighted(const char *p, const char *end, EdgeUnit<EdgeData> &e) \uff1aParse the graph data file, and load the graph as an unweighted graph. std::tuple<size_t, bool> parse_line_weighted(const char* p, const char* end, EdgeUnit<EdgeData>& e) \uff1aParse the graph data file, load the graph as a weighted graph, and specify the weight data type by modifying . This function can be specified through the constructor parse_line when the MyConfig class is defined.","title":"OLAP on Disk API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#olapondisk-api","text":"This document mainly introduces the usage instructions of OlapOnDisk API in detail","title":"OlapOnDisk API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#table-of-contents","text":"1. Introduction 2. Algorithm Example [2.1 header files] (#21-header files) 2.2 Configuration class MyConfig 2.3 Main function [2.4 bfs algorithm flow] (#24-bfs algorithm flow) 3. Function description of other commonly used functions [3.1 Image Loading] (#31-Image Loading) [3.2 Image writing] (#32-Image writing) 3.3 Graph Analysis Function","title":"Table of contents"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#1-introduction","text":"The Standalone mode of TuGraph can be used to load graph data files, where the sources of graph data files can include text files, BINARY_FILE binary files, and ODPS sources. In this mode, TuGraph can quickly load multiple data sources into a graph, and then run iterative algorithms such as BFS, WCC, SSSP, etc. on the graph, and output the final result to the terminal. In TuGraph, the export and calculation process can be accelerated through parallel processing in memory, so as to achieve near real-time processing and analysis. Compared with traditional methods, it avoids the overhead of data export and storage, and can use compact Graph data structures achieve desirable performance for computation. TuGraph has built-in a large number of common graph analysis algorithms and rich auxiliary interfaces, so users hardly need to implement the specific graph calculation process by themselves. They only need to include the header file (.h) of the corresponding algorithm library when implementing their own stored procedures. To your own program, and link your own dynamic library files in the compilation phase. This document mainly introduces the common interfaces of Standalone, and the auxiliary functions used are mainly contained in the OlapOnDB class. At the same time, in order to help users understand and facilitate, the BFS algorithm is illustrated with examples.","title":"1. Introduction"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#2-algorithm-example","text":"Here, the BFS algorithm is explained in blocks, which are roughly divided into the main function main , the BFS algorithm process BFSCore function and the configuration class MyConfig.","title":"2. Algorithm example"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#21-head-file","text":"#include \"olap/olap_on_disk.h\" #include \"tools/json.hpp\" //Header files to include when using TuGraph #include \"./algo.h\" //A header file containing various algorithmic logic functions When using TuGraph to realize the calculation application of graph data files, generally, the StandaloneGraph class object graph is first created, the graph file data is loaded into the graph, and then the graph calculation process is realized by calling the graph logic function, and finally the result of the graph calculation is printed out.","title":"2.1 Head file"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#22-configuration-class-myconfig","text":"The MyConfig configuration class function is used to provide the configuration information required for the algorithm logic calculation, inherited from ConfigBase , where EdgeDate can choose Empty (unweighted graph), int (the weight of the weighted graph is an integer) or double (the weight of the weighted graph is double) type. The MyConfig configuration class generally depends on the algorithm, and additional configuration information is required as follows: Parameters required by the algorithm Algorithm name Configure the Print function in the class Other common members inherit from ConfigBase, please refer to src/olap/olap_config.h for reference. class MyConfig : public ConfigBase<Empty> { public: // The parameters required by the algorithm are initialized size_t root = 0; std::string name = std::string(\"bfs\"); void AddParameter(fma_common::Configuration & config) { ConfigBase<Empty>::AddParameter(config); config.Add(root, \"root\", true) .Comment(\"the root of bfs\"); } void Print() { ConfigBase<Empty>::Print(); std::cout << \" name: \" << name << std::endl; if (root != size_t(-1)) { std::cout << \" root: \" << root << std::endl; } else { std::cout << \" root: UNSET\" << std::endl; } } // The configuration file accepts command line parameters. This use case will sequentially read the parameters when calling the algorithm from the command line. The value specified by the user is preferred. If the user does not specify it, the default parameter is selected. MyConfig(int &argc, char** &argv): ConfigBase<Empty>(argc, argv) { fma_common::Configuration config; AddParameter(config); config.ExitAfterHelp(true); config.ParseAndFinalize(argc, argv); Print(); } };","title":"2.2 Configuration class MyConfig"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#23-main-function","text":"int main(int argc, char** argv) { double start_time; // Statistical memory consumption class MemUsage instantiation MemUsage memUsage; memUsage.startMemRecord(); // prepare start_time = get_time(); // Configuration class MyConfig instantiation MyConfig config(argc, argv); size_t root_vid = config.root; // OlapOnDisk class instantiation OlapOnDisk<Empty> graph; graph.Load(config, DUAL_DIRECTION); memUsage.print(); memUsage.reset(); // Statistical graph loading time consumption auto prepare_cost = get_time() - start_time; printf(\"prepare_cost = %.2lf(s)\\n\", prepare_cost); // core start_time = get_time(); // Create an array to count whether a node has been traversed auto parent = graph.AllocVertexArray<size_t>(); // Breadth-first search algorithm, returns the number of nodes connected to the root_vid root node in the graph size_t count = BFSCore(graph, root_vid, parent); memUsage.print(); memUsage.reset(); auto core_cost = get_time() - start_time; printf(\"core_cost = %.2lf(s)\\n\", core_cost); // output start_time = get_time(); // Print relevant information to the terminal printf(\"found_vertices = %ld\\n\", count); auto output_cost = get_time() - start_time; printf(\"output_cost = %.2lf(s)\\n\", output_cost); printf(\"total_cost = %.2lf(s)\\n\", prepare_cost + core_cost + output_cost); printf(\"DONE.\"); return 0; }","title":"2.3 main function"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#24-bfs-algorithm-process","text":"The main process of bfs has two input parameters, the snapshot class (subgraph) and the number of iterations. The overall process can be divided into the following steps: Relevant definitions and initialization of data structures Use the batch function to perform cyclic calculations on each node, find all nodes adjacent to the current node in each round, and exchange them when the round ends. Until all nodes are found, return the number of nodes discovered_vertices. size_t BFSCore(Graph<Empty>& graph, size_t root_vid, ParallelVector<size_t>& parent){ size_t root = root_vid; auto active_in = graph.AllocVertexSubset(); //Allocate an array, active_in is used to store the nodes found in the previous cycle stage active_in.Add(root); //Add the root node to the array auto active_out = graph.AllocVertexSubset(); //Allocate the array active_out to store the nodes found in the current cycle stage parent.Fill((size_t)-1); //Assign a value of -1 to the node in the parent array, -1 means not found parent[root] = root; size_t num_activations = 1; //Indicates the number of nodes found in the current loop phase size_t discovered_vertices = 0; //Indicates the total number of nodes found in the current cycle phase for (int ii = 0; num_activations != 0; ii++) { //num_activations indicates the number of nodes found in the current loop phase printf(\"activates(%d) <= %lu\\n\", ii, num_activations); discovered_vertices += num_activations; //discovered_vertices indicates the total number of nodes found in the current cycle phase active_out.Clear(); num_activations = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t num_activations = 0; for (auto& edge : graph.OutEdges(vi)) { //Each cycle starts from the root node, finds adjacent adjacent nodes, changes its parent value, and operates num_activations+1 size_t dst = edge.neighbour; if (parent[dst] == (size_t)-1) { auto lock = graph.GuardVertexLock(dst); if (parent[dst] == (size_t)-1) { parent[dst] = vi; num_activations += 1; active_out.Add(dst); //Store the nodes found in the current loop phase } } } return num_activations; }, active_in); active_in.Swap(active_out); } // return all nodes return discovered_vertices; }","title":"2.4 bfs algorithm process"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#3-description-of-other-commonly-used-functions","text":"","title":"3. Description of other commonly used functions"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#31-graph-load","text":"TuGraph-StandaloneThe loading sources of graph data files are mainly divided into three categories: text files, binary files, and ODPS. The binary file is a file in which the binary representation of the edge data is arranged in order, which can save a lot of storage space. Its loading function is divided into three types, namely: - void Load(ConfigBase<EdgeData> config,EdgeDirectionPolicy edge_direction_policy = DUAL_DIRECTION) \uff1aThe loading method of the graph data file contains two parameters, and their meanings represent respectively - config \uff1aConfiguration parameters to load. This parameter saves the general information of the graph (such as data source, algorithm name, data input and output paths, number of vertices, etc.) and different information parameters configured according to different data sources and different algorithms. - edge_direction_policy \uff1aSpecifies whether the graph is directed or undirected, including three modes: DUAL_DIRECTION, MAKE_SYMMETRIC, and INPUT_SYMMETRIC. Among them, DUAL_DIRECTION is the default graph loading method. DUAL_DIRECTION : The input file is an asymmetric graph and the loaded graph is an asymmetric graph. MAKE_SYMMETRIC : The input file is an asymmetric graph and the loaded graph is a symmetric graph. INPUT_SYMMETRIC : The input file is a symmetric graph and the loaded graph is a symmetric graph. For details, see enum EdgeDirectionPolicy in the olap_config.h file under the lgraph folder. void LoadVertexArrayTxt<V>(V * array, std::string path, std::function<size_t(const char *, const char *, VertexUnit<V> &)> parse_line) \uff1aLoad the vertices in the file into an array in the order of their ids. The meanings of each parameter are: array \uff1aarray of data to be read path \uff1aThe path to read the file, each line in the file represents a pair of vertex parse_line \uff1aA user-defined function that tells the system how to parse a line of text data into a vertex pair.","title":"3.1 Graph load"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#32-graph-write","text":"void Write(ConfigBase<EdgeData> & config, ParallelVector<VertexData>& array, size_t array_size, std::string name, std::function<bool(VertexData &)> filter_output = filter_output_default<VertexData&>) \uff1aWrite the data in the array back to the file, and the meanings of each parameter are: config \uff1aConfiguration parameters to load. This parameter saves the general information of the graph (such as data source, algorithm name, data input and output paths, number of vertices, etc.) and different information parameters configured according to different data sources and different algorithms. array \uff1aarray of data to be written array_size \uff1aThe length of the number of data to be written name \uff1aalgorithm name filter_output \uff1aWrite data rule function, the data to be written needs to meet the requirements of this function.","title":"3.2 Graph write"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#33-graph-parse-function","text":"std::tuple<size_t, bool> parse_line_unweighted(const char *p, const char *end, EdgeUnit<EdgeData> &e) \uff1aParse the graph data file, and load the graph as an unweighted graph. std::tuple<size_t, bool> parse_line_weighted(const char* p, const char* end, EdgeUnit<EdgeData>& e) \uff1aParse the graph data file, load the graph as a weighted graph, and specify the weight data type by modifying . This function can be specified through the constructor parse_line when the MyConfig class is defined.","title":"3.3 graph parse function"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/","text":"TuGraph Built-in Algorithm Description This document mainly introduces the TuGraph built-in algorithm program in detail, the community version of 6 algorithms can refer to the basic algorithm newspaper Introduction of # # TuGraph currently contains the following 6 basic algorithms and 28 extended algorithms, a total of 34 graph algorithms: Basic algorithms: Algorithm name The program name Breadth-First Search bfs Pagerank pagerank Single-Source Shortest Path sssp Weakly Connected Components wcc Local Clustering Coefficient lcc Label Propagation Algorithm lpa Extended algorithms: Algorithm name The program name All-Pair Shortest Path apsp Betweenness Centrality bc Belief Propagation bp Closeness Centrality cc Common Neighborhood cn Degree Correlation dc Dimension Estimation de EgoNet en Hyperlink-Induced Topic Search hits Jaccard Index ji K-core kcore Louvain louvain Multiple-source Shortest Paths mssp Personalized PageRank ppr Strongly Connected Components scc Speaker-listener Label Propagation Algorithm slpa Single-Pair Shortest Path spsp Triangle Counting triangle Trustrank trustrank Weighted Label Propagation Algorithm wlpa Weighted Pagerank Algorithm wpagerank Maximal independent set mis Sybil Rank sybilrank Subgraph Isomorphism subgraph_isomorphism Motif motif Kcliques kcliques Ktruss ktruss Leiden leiden Basic algorithms Breadth-First Search Breadth first Search implements the Breadth-first Search algorithm, which starts from the root vertex and traverses all accessible vertices along the width of the graph. Returns the number of vertices traversed. Please refer to the algorithm content https://en.wikipedia.org/wiki/Breadth-first_search \u3002 Pagerank Web page sorting program to achieve the commonly used Pagerank algorithm. The algorithm calculates the importance ranking of all vertices according to the edge and edge weight in the graph. The higher the PageRank value, the higher the importance of the vertex in the graph. The reciprocal of the number of vertices is used as the initial Rank value of each vertex, and then the Rank value of the vertices is transferred to the adjacent vertices on average according to the outgoing edges, and the transfer process is repeated until the given convergence threshold is met or the given number of iterations is reached. At the end of each pass round, a certain proportion of the Rank values of all vertices will be randomly transferred to any vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/PageRank \u3002 Single-Source Shortest Path The Single Source Shortest Path algorithm realizes the Single Source Shortest Path algorithm. It calculates the shortest path length from a given source vertex to any other vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/Shortest_path_problem \u3002 Weakly Connected Components The program of Weakly Connected Components has implemented the algorithm. It can calculate all the weakly connected components in the graph. A weakly connected component is a subgraph of a graph in which reachable paths exist between any two points. Please refer to the algorithm content https://en.wikipedia.org/wiki/Connected component (graph_theory) \u3002 Local Clustering Coefficient The average Clustering Coefficient program implements the Local Clustering Coefficient algorithm to calculate the coefficient of the degree of clustering between vertices in the graph. The returned results include the overall clustering coefficient and the vertex clustering coefficient. The overall agglomeration coefficient reflects the evaluation of the overall agglomeration degree in the graph, and the vertex agglomeration coefficient includes the agglomeration coefficient of any vertex, which reflects the agglomeration degree near the vertex. The higher the agglomeration coefficient, the higher the agglomeration degree. Please refer to the algorithm content https://en.wikipedia.org/wiki/Clustering_coefficient \u3002 Label Propagation Algorithm The program implements Label Propagation Algorithm. This algorithm is a community discovery algorithm based on tag propagation and computes unauthorised graphs. In label passing, each vertex adds up all the labels received, and randomly selects one of the labels with the highest sum. The iteration converges or the algorithm terminates after a given number of rounds. The final output is a label for each vertex, and vertices with the same label value are considered to be in the same community. Please refer to the algorithm content https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002 Extended algorithms All-Pair Shortest Path The All-Pair Shortest Path program realizes the all-pair Shortest Path algorithm and calculates the shortest path between any two points in the graph. Returns the shortest path length between any pair of vertices where the path exists. Please refer to the algorithm content https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm Betweenness Centrality Betweenness Centrality algorithm is implemented in Betweenness centrality program to estimate the betweenness centrality value of all vertices in a graph. The value of intermediate centrality reflects the possibility that any shortest path in the graph passes through the vertex, and the higher the value, the more shortest paths pass through the vertex. During calculation, the number of sampling points should be given, and the calculation should be carried out based on these sampling points. Please refer to the algorithm content https://en.wikipedia.org/wiki/Betweenness_centrality \u3002 Belief Propagation The Belief Propagation algorithm is implemented in the confidence propagation program. Given the edge distribution of the observed vertices, the algorithm estimates the edge distribution of the unobserved vertices by using the mechanism of passing messages among vertices. Please refer to the algorithm content https://en.wikipedia.org/wiki/Belief_propagation \u3002 Closeness Centrality The Distance Centrality program implements an algorithm to estimate the average length of an arbitrary vertex to Closeness the shortest path to another vertex in the graph. The smaller the distance from the center, the smallest the average shortest distance from the vertex to other vertices, which means that the vertex is more centrally located in the graph from the geometric point of view. During calculation, the number of sampling points should be given, and the calculation should be carried out based on these sampling points. Please refer to the algorithm content https://en.wikipedia.org/wiki/Closeness_centrality \u3002 Common Neighborhood The Common Neighborhood program implements the common Neighborhood algorithm to count the number of common neighbors between any given pair of neighboring vertices. Given several pairs of vertices to be queried, the result is the number of common neighbors of any pair of vertices to be queried. Degree Correlation The Degree Correlation algorithm is implemented in the degree correlation program. It calculates the degree correlation degree of a graph by calculating the Pearson correlation coefficient between any adjacent vertex pairs, which can be used to characterize the correlation degree between high-degree vertices in the graph. A higher degree of correlation indicates a higher degree of correlation between vertices of higher degree in the graph. Please refer to the algorithm content https://en.wikipedia.org/wiki/Pearson_correlation_coefficient Dimension Estimation The diameter Estimation program implements the Dimension Estimation algorithm. The algorithm calculates the length of the longest shortest path in the graph, which is used to characterize the diameter of the graph. Please refer to the algorithm content http://mathworld.wolfram.com/GraphDiameter.html \u3002 EgoNet The EgoNet algorithm requires a given root vertex and K value, and takes the root vertex as the source vertex to conduct a width-first search to find the subgraph composed of all neighbors within K degrees. The found subgraph is called the EgoNet of the root vertex. Hyperlink-Induced Topic Search The Hyperlink Topic Search algorithm implements the Hyperlink-induced topic search algorithm, which assumes that each vertex has two attributes: Authority and Hub. A good hub vertex should point to many vertices with high authority. And a good authority vertex should be pointed to by many vertices of high pivot type. The algorithm returns the authority value and the hub value for each vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/HITS_algorithm \u3002 Jaccard Index The Jaccard coefficient program implements the Jaccard Index algorithm. The algorithm calculates the Jaccard coefficient between a given pair of vertices, which can be used to represent the similarity of the two vertices. A higher Jaccard coefficient indicates a higher degree of similarity between pairs of vertices. Given several pairs of vertices with the query, the Jaccard coefficients of these pairs are returned. Please refer to the algorithm content https://en.wikipedia.org/wiki/Jaccard_index \u3002 K-core k accounting method implements k-core algorithm. The algorithm computes the number of kernels of all vertices, or finds all K-nucleon graphs in the graph. K-nucleon graph is a special subgraph in which the degree of any vertex is not less than a given K value. Please refer to the algorithm content https://en.wikipedia.org/wiki/Degeneracy_(graph_theory) \u3002 Louvain The Louvain community discovery program implements the Fast-unfolding algorithm. The algorithm is a community discovery algorithm based on modularity. It maximizes the modularity of the graph by constantly merging vertex communities, and can discover the hierarchical community structure. Please refer to the algorithm content https://en.wikipedia.org/wiki/Louvain_Modularity \u3002 Multiple-source Shortest Paths The multisource Shortest Paths program implements the multiple-source Shortest Paths algorithm to calculate the shortest path value to any vertex from the given Multiple source vertices. Where, the shortest path value of multiple source vertices to a vertex is the minimum value of the shortest path from each source vertex to the vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/Shortest_path_problem \u3002 Personalized PageRank Personalized web ranking program has Personalized PageRank algorithm. According to the given source vertex, the algorithm calculates the importance ranking of all vertices to the source vertex based on the source vertex. The higher the Rank value, the more important the vertex is to the source vertex. Unlike PageRank, the source vertex Rank value is 1, the rest of the vertex Rank value is 0; And a certain proportion of Rank value will be immediately transferred back to the source vertex after each round of transmission. Please refer to the algorithm content https://cs.stanford.edu/people/plofgren/Fast-PPR_KDD_Talk.pdf \u3002 Strongly Connected Components Strongly Connected component program realizes the Strongly Connected Components algorithm. The algorithm computes all strongly connected components of the graph, which is a subgraph of the graph that can start from any vertex to any other vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/Strongly_connected_component \u3002 Speaker-listener Label Propagation Algorithm The program realizes the Speaker-listener Label Propagation Algorithm. This algorithm is a community discovery algorithm based on tag propagation and historical tag record, which is an extension of tag propagation algorithm. Different from the label propagation algorithm, this algorithm records the historical labels of all vertices. When the labels are accumulated in the iteration, the historical labels are also counted. The final output is all the historical label records for each vertex. Please refer to the paper for the algorithm content:\u201cSLPA: Uncovering Overlapping Communities in Social Networks via a Speaker-Listener Interaction Dynamic Process\u201d\u3002 Single-Pair Shortest Path The program of the shortest path between two points implements the Bidirectional point-first Search algorithm. It searches forward width First along the outgoing edge from the starting point and reverse width first along the incoming edge from the end point on the directed undirected graph. The shortest path length from the starting point to the ending point is determined by traversing the vertices of the starting point and the ending point together. Please refer to the algorithm content https://en.wikipedia.org/wiki/Bidirectional_search \u3002 Triangle Counting The Triangle-counting algorithm is implemented to calculate the number of triangles in an undirected graph, which can be used to characterize the correlation degree of the vertices in the graph. The higher the number of triangles, the higher the degree of correlation of the vertices in the graph. For the algorithm content, please refer to the paper, \"Finding, Counting and Listing All Triangles in Large Graphs, an Experimental Study\". Trustrank \u4fe1\u4efb\u7d22\u5f15\u6392\u5e8f\u7b97\u6cd5\u5b9e\u73b0\u4e86 Trustrank \u7b97\u6cd5\uff0c\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684\u767d\u540d\u5355\u8ba1\u7b97\u4efb\u610f\u9876\u70b9\u7684\u4fe1\u4efb\u7d22\u5f15\u3002\u4fe1\u4efb\u6307\u6570\u8d8a\u9ad8\uff0c\u9876\u70b9\u975e\u6cd5\u7684\u53ef\u80fd\u6027\u8d8a\u5c0f\u3002\u8bf7\u53c2\u8003\u7b97\u6cd5\u5185\u5bb9 https://en.wikipedia.org/wiki/TrustRank \u3002 Weighted Label Propagation Algorithm Weighted Label Propagation Algorithm is implemented in the program. = Different from the label propagation algorithm, the label transmission is related to the weight of the edge. During label transmission, the weight of each vertex will be accumulated according to the incoming edge of the label, and the label with the highest sum will be randomly selected. Please refer to the algorithm content https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002 Weighted Pagerank Algorithm Weighted Pagerank is implemented in the weighted Pagerank algorithm. Different from PageRank algorithm, the transfer of Rank value is related to the weight of the edge. The Rank value of the vertex will be transferred to the adjacent vertices according to the weight of the edge. Please refer to the algorithm content https://en.wikipedia.org/wiki/PageRank \u3002 Maximal independent set Maximal independent set algorithm implements Maximal Independent Set algorithm. A maximum independent set means that there are no vertices outside the independent set that can join it. A graph may have many MIS that vary greatly in size, and the algorithm finds one of them. Please refer to the algorithm content https://en.wikipedia.org/wiki/Maximal_independent_set#Sequential_algorithm \u3002 Sybil Rank Sybil detection algorithm implements Sybil Rank algorithm. The SybilRank algorithm starts from non-Sybil nodes and performs a random walk with premature termination. Please refer to the paper for the algorithm content:\u201cAiding the Detection of Fake Accounts in Large Scale Social Online Services\u201d\u3002 Subgraph Isomorphism The subgraph matching algorithm implements the subgraph_isomorphism algorithm. The subgraph_isomorphism algorithm matches all nodes in the whole graph and outputs the number of times each node is matched. Algorithm Content Reference https://www.jsjkx.com/CN/article/openArticlePDF.jsp?id=18105 Motif Pattern matching algorithm implements motif algorithm. motif algorithm matches k-order subgraphs for the specified nodes, and finally outputs the number of each kind of K-order subgraphs for each specified node. Each K-order subgraph is represented by a 64-bit integer, and the $i \\times k + j$bit is 1, indicating that there is an edge i->j in the subgraph. Algorithm Content Reference https://en.wikipedia.org/wiki/Network_motif#mfinder Kcliques The K-order clique counting algorithm implements the k-cliques algorithm. The k-cliques algorithm calculates the number of all K-order complete subgraphs in the graph, and finally outputs the number of k-order complete subgraphs of each node. Algorithm Content Reference https://en.wikipedia.org/wiki/Clique_problem#Cliques_of_fixed_size Ktruss The k-order truss counting algorithm implements the k-truss algorithm. A k-truss is a subgraph in which each edge is the edge of at least k-2 triangles. The k-truss algorithm finds out the k-truss subgraph of the graph, and finally outputs the neighbor node list of each node in the subgraph. Algorithm Content Reference https://louridas.github.io/rwa/assignments/finding-trusses/ Leiden Leiden algorithm implements Leiden's algorithm. leiden algorithm is a community discovery algorithm based on modularity. Compared with louvain algorithm, leiden algorithm has the advantage that Leiden algorithm detects the broken links in the community to ensure that each community has good connectivity. Algorithm Content Reference https://www.nature.com/articles/s41598-019-41695-z#Sec4","title":"Algorithms"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#tugraph-built-in-algorithm-description","text":"This document mainly introduces the TuGraph built-in algorithm program in detail, the community version of 6 algorithms can refer to the basic algorithm newspaper Introduction of # # TuGraph currently contains the following 6 basic algorithms and 28 extended algorithms, a total of 34 graph algorithms:","title":"TuGraph Built-in Algorithm Description"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#basic-algorithms","text":"Algorithm name The program name Breadth-First Search bfs Pagerank pagerank Single-Source Shortest Path sssp Weakly Connected Components wcc Local Clustering Coefficient lcc Label Propagation Algorithm lpa","title":"Basic algorithms:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#extended-algorithms","text":"Algorithm name The program name All-Pair Shortest Path apsp Betweenness Centrality bc Belief Propagation bp Closeness Centrality cc Common Neighborhood cn Degree Correlation dc Dimension Estimation de EgoNet en Hyperlink-Induced Topic Search hits Jaccard Index ji K-core kcore Louvain louvain Multiple-source Shortest Paths mssp Personalized PageRank ppr Strongly Connected Components scc Speaker-listener Label Propagation Algorithm slpa Single-Pair Shortest Path spsp Triangle Counting triangle Trustrank trustrank Weighted Label Propagation Algorithm wlpa Weighted Pagerank Algorithm wpagerank Maximal independent set mis Sybil Rank sybilrank Subgraph Isomorphism subgraph_isomorphism Motif motif Kcliques kcliques Ktruss ktruss Leiden leiden","title":"Extended algorithms:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#basic-algorithms_1","text":"","title":"Basic algorithms"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#breadth-first-search","text":"Breadth first Search implements the Breadth-first Search algorithm, which starts from the root vertex and traverses all accessible vertices along the width of the graph. Returns the number of vertices traversed. Please refer to the algorithm content https://en.wikipedia.org/wiki/Breadth-first_search \u3002","title":"Breadth-First Search"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#pagerank","text":"Web page sorting program to achieve the commonly used Pagerank algorithm. The algorithm calculates the importance ranking of all vertices according to the edge and edge weight in the graph. The higher the PageRank value, the higher the importance of the vertex in the graph. The reciprocal of the number of vertices is used as the initial Rank value of each vertex, and then the Rank value of the vertices is transferred to the adjacent vertices on average according to the outgoing edges, and the transfer process is repeated until the given convergence threshold is met or the given number of iterations is reached. At the end of each pass round, a certain proportion of the Rank values of all vertices will be randomly transferred to any vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/PageRank \u3002","title":"Pagerank"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#single-source-shortest-path","text":"The Single Source Shortest Path algorithm realizes the Single Source Shortest Path algorithm. It calculates the shortest path length from a given source vertex to any other vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/Shortest_path_problem \u3002","title":"Single-Source Shortest Path"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#weakly-connected-components","text":"The program of Weakly Connected Components has implemented the algorithm. It can calculate all the weakly connected components in the graph. A weakly connected component is a subgraph of a graph in which reachable paths exist between any two points. Please refer to the algorithm content https://en.wikipedia.org/wiki/Connected component (graph_theory) \u3002","title":"Weakly Connected Components"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#local-clustering-coefficient","text":"The average Clustering Coefficient program implements the Local Clustering Coefficient algorithm to calculate the coefficient of the degree of clustering between vertices in the graph. The returned results include the overall clustering coefficient and the vertex clustering coefficient. The overall agglomeration coefficient reflects the evaluation of the overall agglomeration degree in the graph, and the vertex agglomeration coefficient includes the agglomeration coefficient of any vertex, which reflects the agglomeration degree near the vertex. The higher the agglomeration coefficient, the higher the agglomeration degree. Please refer to the algorithm content https://en.wikipedia.org/wiki/Clustering_coefficient \u3002","title":"Local Clustering Coefficient"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#label-propagation-algorithm","text":"The program implements Label Propagation Algorithm. This algorithm is a community discovery algorithm based on tag propagation and computes unauthorised graphs. In label passing, each vertex adds up all the labels received, and randomly selects one of the labels with the highest sum. The iteration converges or the algorithm terminates after a given number of rounds. The final output is a label for each vertex, and vertices with the same label value are considered to be in the same community. Please refer to the algorithm content https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002","title":"Label Propagation Algorithm"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#extended-algorithms_1","text":"","title":"Extended algorithms"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#all-pair-shortest-path","text":"The All-Pair Shortest Path program realizes the all-pair Shortest Path algorithm and calculates the shortest path between any two points in the graph. Returns the shortest path length between any pair of vertices where the path exists. Please refer to the algorithm content https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm","title":"All-Pair Shortest Path"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#betweenness-centrality","text":"Betweenness Centrality algorithm is implemented in Betweenness centrality program to estimate the betweenness centrality value of all vertices in a graph. The value of intermediate centrality reflects the possibility that any shortest path in the graph passes through the vertex, and the higher the value, the more shortest paths pass through the vertex. During calculation, the number of sampling points should be given, and the calculation should be carried out based on these sampling points. Please refer to the algorithm content https://en.wikipedia.org/wiki/Betweenness_centrality \u3002","title":"Betweenness Centrality"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#belief-propagation","text":"The Belief Propagation algorithm is implemented in the confidence propagation program. Given the edge distribution of the observed vertices, the algorithm estimates the edge distribution of the unobserved vertices by using the mechanism of passing messages among vertices. Please refer to the algorithm content https://en.wikipedia.org/wiki/Belief_propagation \u3002","title":"Belief Propagation"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#closeness-centrality","text":"The Distance Centrality program implements an algorithm to estimate the average length of an arbitrary vertex to Closeness the shortest path to another vertex in the graph. The smaller the distance from the center, the smallest the average shortest distance from the vertex to other vertices, which means that the vertex is more centrally located in the graph from the geometric point of view. During calculation, the number of sampling points should be given, and the calculation should be carried out based on these sampling points. Please refer to the algorithm content https://en.wikipedia.org/wiki/Closeness_centrality \u3002","title":"Closeness Centrality"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#common-neighborhood","text":"The Common Neighborhood program implements the common Neighborhood algorithm to count the number of common neighbors between any given pair of neighboring vertices. Given several pairs of vertices to be queried, the result is the number of common neighbors of any pair of vertices to be queried.","title":"Common Neighborhood"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#degree-correlation","text":"The Degree Correlation algorithm is implemented in the degree correlation program. It calculates the degree correlation degree of a graph by calculating the Pearson correlation coefficient between any adjacent vertex pairs, which can be used to characterize the correlation degree between high-degree vertices in the graph. A higher degree of correlation indicates a higher degree of correlation between vertices of higher degree in the graph. Please refer to the algorithm content https://en.wikipedia.org/wiki/Pearson_correlation_coefficient","title":"Degree Correlation"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#dimension-estimation","text":"The diameter Estimation program implements the Dimension Estimation algorithm. The algorithm calculates the length of the longest shortest path in the graph, which is used to characterize the diameter of the graph. Please refer to the algorithm content http://mathworld.wolfram.com/GraphDiameter.html \u3002","title":"Dimension Estimation"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#egonet","text":"The EgoNet algorithm requires a given root vertex and K value, and takes the root vertex as the source vertex to conduct a width-first search to find the subgraph composed of all neighbors within K degrees. The found subgraph is called the EgoNet of the root vertex.","title":"EgoNet"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#hyperlink-induced-topic-search","text":"The Hyperlink Topic Search algorithm implements the Hyperlink-induced topic search algorithm, which assumes that each vertex has two attributes: Authority and Hub. A good hub vertex should point to many vertices with high authority. And a good authority vertex should be pointed to by many vertices of high pivot type. The algorithm returns the authority value and the hub value for each vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/HITS_algorithm \u3002","title":"Hyperlink-Induced Topic Search"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#jaccard-index","text":"The Jaccard coefficient program implements the Jaccard Index algorithm. The algorithm calculates the Jaccard coefficient between a given pair of vertices, which can be used to represent the similarity of the two vertices. A higher Jaccard coefficient indicates a higher degree of similarity between pairs of vertices. Given several pairs of vertices with the query, the Jaccard coefficients of these pairs are returned. Please refer to the algorithm content https://en.wikipedia.org/wiki/Jaccard_index \u3002","title":"Jaccard Index"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#k-core","text":"k accounting method implements k-core algorithm. The algorithm computes the number of kernels of all vertices, or finds all K-nucleon graphs in the graph. K-nucleon graph is a special subgraph in which the degree of any vertex is not less than a given K value. Please refer to the algorithm content https://en.wikipedia.org/wiki/Degeneracy_(graph_theory) \u3002","title":"K-core"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#louvain","text":"The Louvain community discovery program implements the Fast-unfolding algorithm. The algorithm is a community discovery algorithm based on modularity. It maximizes the modularity of the graph by constantly merging vertex communities, and can discover the hierarchical community structure. Please refer to the algorithm content https://en.wikipedia.org/wiki/Louvain_Modularity \u3002","title":"Louvain"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#multiple-source-shortest-paths","text":"The multisource Shortest Paths program implements the multiple-source Shortest Paths algorithm to calculate the shortest path value to any vertex from the given Multiple source vertices. Where, the shortest path value of multiple source vertices to a vertex is the minimum value of the shortest path from each source vertex to the vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/Shortest_path_problem \u3002","title":"Multiple-source Shortest Paths"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#personalized-pagerank","text":"Personalized web ranking program has Personalized PageRank algorithm. According to the given source vertex, the algorithm calculates the importance ranking of all vertices to the source vertex based on the source vertex. The higher the Rank value, the more important the vertex is to the source vertex. Unlike PageRank, the source vertex Rank value is 1, the rest of the vertex Rank value is 0; And a certain proportion of Rank value will be immediately transferred back to the source vertex after each round of transmission. Please refer to the algorithm content https://cs.stanford.edu/people/plofgren/Fast-PPR_KDD_Talk.pdf \u3002","title":"Personalized PageRank"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#strongly-connected-components","text":"Strongly Connected component program realizes the Strongly Connected Components algorithm. The algorithm computes all strongly connected components of the graph, which is a subgraph of the graph that can start from any vertex to any other vertex. Please refer to the algorithm content https://en.wikipedia.org/wiki/Strongly_connected_component \u3002","title":"Strongly Connected Components"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#speaker-listener-label-propagation-algorithm","text":"The program realizes the Speaker-listener Label Propagation Algorithm. This algorithm is a community discovery algorithm based on tag propagation and historical tag record, which is an extension of tag propagation algorithm. Different from the label propagation algorithm, this algorithm records the historical labels of all vertices. When the labels are accumulated in the iteration, the historical labels are also counted. The final output is all the historical label records for each vertex. Please refer to the paper for the algorithm content:\u201cSLPA: Uncovering Overlapping Communities in Social Networks via a Speaker-Listener Interaction Dynamic Process\u201d\u3002","title":"Speaker-listener Label Propagation Algorithm"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#single-pair-shortest-path","text":"The program of the shortest path between two points implements the Bidirectional point-first Search algorithm. It searches forward width First along the outgoing edge from the starting point and reverse width first along the incoming edge from the end point on the directed undirected graph. The shortest path length from the starting point to the ending point is determined by traversing the vertices of the starting point and the ending point together. Please refer to the algorithm content https://en.wikipedia.org/wiki/Bidirectional_search \u3002","title":"Single-Pair Shortest Path"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#triangle-counting","text":"The Triangle-counting algorithm is implemented to calculate the number of triangles in an undirected graph, which can be used to characterize the correlation degree of the vertices in the graph. The higher the number of triangles, the higher the degree of correlation of the vertices in the graph. For the algorithm content, please refer to the paper, \"Finding, Counting and Listing All Triangles in Large Graphs, an Experimental Study\".","title":"Triangle Counting"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#trustrank","text":"\u4fe1\u4efb\u7d22\u5f15\u6392\u5e8f\u7b97\u6cd5\u5b9e\u73b0\u4e86 Trustrank \u7b97\u6cd5\uff0c\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684\u767d\u540d\u5355\u8ba1\u7b97\u4efb\u610f\u9876\u70b9\u7684\u4fe1\u4efb\u7d22\u5f15\u3002\u4fe1\u4efb\u6307\u6570\u8d8a\u9ad8\uff0c\u9876\u70b9\u975e\u6cd5\u7684\u53ef\u80fd\u6027\u8d8a\u5c0f\u3002\u8bf7\u53c2\u8003\u7b97\u6cd5\u5185\u5bb9 https://en.wikipedia.org/wiki/TrustRank \u3002","title":"Trustrank"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#weighted-label-propagation-algorithm","text":"Weighted Label Propagation Algorithm is implemented in the program. = Different from the label propagation algorithm, the label transmission is related to the weight of the edge. During label transmission, the weight of each vertex will be accumulated according to the incoming edge of the label, and the label with the highest sum will be randomly selected. Please refer to the algorithm content https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002","title":"Weighted Label Propagation Algorithm"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#weighted-pagerank-algorithm","text":"Weighted Pagerank is implemented in the weighted Pagerank algorithm. Different from PageRank algorithm, the transfer of Rank value is related to the weight of the edge. The Rank value of the vertex will be transferred to the adjacent vertices according to the weight of the edge. Please refer to the algorithm content https://en.wikipedia.org/wiki/PageRank \u3002","title":"Weighted Pagerank Algorithm"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#maximal-independent-set","text":"Maximal independent set algorithm implements Maximal Independent Set algorithm. A maximum independent set means that there are no vertices outside the independent set that can join it. A graph may have many MIS that vary greatly in size, and the algorithm finds one of them. Please refer to the algorithm content https://en.wikipedia.org/wiki/Maximal_independent_set#Sequential_algorithm \u3002","title":"Maximal independent set"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#sybil-rank","text":"Sybil detection algorithm implements Sybil Rank algorithm. The SybilRank algorithm starts from non-Sybil nodes and performs a random walk with premature termination. Please refer to the paper for the algorithm content:\u201cAiding the Detection of Fake Accounts in Large Scale Social Online Services\u201d\u3002","title":"Sybil Rank"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#subgraph-isomorphism","text":"The subgraph matching algorithm implements the subgraph_isomorphism algorithm. The subgraph_isomorphism algorithm matches all nodes in the whole graph and outputs the number of times each node is matched. Algorithm Content Reference https://www.jsjkx.com/CN/article/openArticlePDF.jsp?id=18105","title":"Subgraph Isomorphism"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#motif","text":"Pattern matching algorithm implements motif algorithm. motif algorithm matches k-order subgraphs for the specified nodes, and finally outputs the number of each kind of K-order subgraphs for each specified node. Each K-order subgraph is represented by a 64-bit integer, and the $i \\times k + j$bit is 1, indicating that there is an edge i->j in the subgraph. Algorithm Content Reference https://en.wikipedia.org/wiki/Network_motif#mfinder","title":"Motif"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#kcliques","text":"The K-order clique counting algorithm implements the k-cliques algorithm. The k-cliques algorithm calculates the number of all K-order complete subgraphs in the graph, and finally outputs the number of k-order complete subgraphs of each node. Algorithm Content Reference https://en.wikipedia.org/wiki/Clique_problem#Cliques_of_fixed_size","title":"Kcliques"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#ktruss","text":"The k-order truss counting algorithm implements the k-truss algorithm. A k-truss is a subgraph in which each edge is the edge of at least k-2 triangles. The k-truss algorithm finds out the k-truss subgraph of the graph, and finally outputs the neighbor node list of each node in the subgraph. Algorithm Content Reference https://louridas.github.io/rwa/assignments/finding-trusses/","title":"Ktruss"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/5.algorithms/#leiden","text":"Leiden algorithm implements Leiden's algorithm. leiden algorithm is a community discovery algorithm based on modularity. Compared with louvain algorithm, leiden algorithm has the advantage that Leiden algorithm detects the broken links in the community to ensure that each community has good connectivity. Algorithm Content Reference https://www.nature.com/articles/s41598-019-41695-z#Sec4","title":"Leiden"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/","text":"Python Olap API This document mainly introduces the API usage of OlapBase OlapOnDB and OlapOnDisk in Python Table of contents 1.Overview 2.Configuration Requirements 3.Cython 4.Olap API 4.1. Atomic operations 4.2. Vertex collection class ParallelBitset 4.3. Vertex array class ParallelVector 4.4. Custom data structure 4.5.Graph class OlapBase 4.6. Graph Class OlapOnDB 4.7.Graph class OlapOnDisk 5.lgraph DB API 6.Algorithm plugin example 1 Overview This manual will introduce the simple configuration required to use the Python interface of the TuGraph graph computing system, and explain the TuGraph Python API in conjunction with the code. For details about the functions of class ParallelBitset, OlapBase, etc., see olap-base-api.md, olap-on-db-api.md and olap-on-disk-api.md. 2. Configuration requirements If you want to use TuGraph to write and compile your own applications, the required configuration requirements are: Linux operating system, currently running successfully on Ubuntu16.04.2 and Centos7 systems. A compiler that supports C++17 requires GCC version 5.4.1 or later. Cython, version 3.0a1 or above is required, and the tested version is 3.0.0a11 3. Cython Cython is an efficient programming language that is a superset of Python. Cython can translate .py files into C/C++ codes and compile them into Python extension modules, which can be called through import in Python. In TuGraph, all Python plugins are compiled into Python extension modules by Cython and then used. The main advantage of using Cython is that it combines the simplicity and ease of use of Python with the performance of C/C++. The TuGraph Python interface is implemented using Cython. Cython Documentation 4. Olap API The Olap API is used for graph computing and is implemented in C++. The usage and functions are basically the same as the C++ interface. To use the API in a Python file, the interfaces declared in plugins/cython/olap_base.pxd must be imported using cython.cimports.olap_base import * . The Python file can only be run after being compiled by Cython. Atomic operations cas[T](ptr: cython.pointer(T), oldv: T, newv: T)-> cython.bint : If the value pointed to by ptr is equal to oldv, assign the value pointed to by ptr to newv and return True, otherwise return False. write_min[T](a: cython.pointer(T), b: T)->cython.bint : If b is smaller than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. write_max[T](a: cython.pointer(T), b: T)->cython.bint : If b is greater than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. write_add[T](a: cython.pointer(T), b: T)->cython.bint : Add the value of b to the value pointed to by a. write_sub[T](a: cython.pointer(T), b: T)->cython.bint : Subtract the value pointed to by a from the value of b. Vertex collection class ParallelBitset Size() -> size_t : Indicates the number of vertices in the Bitmap. ParallelBitset(size: size_t) : Initializes size and data, where the length of data is (size >> 6) + 1. Clear() -> cython.void : Empties the collection. Fill() -> cython.void : Adds all vertices to the set. Has(i: size_t) -> cython.bint : Checks if vertex i is in the set. Add(i: size_t) -> cython.bint : Adds vertex i to the set. Swap(other: ParallelBitset) -> cython.void : Exchanges elements with another ParallelBitset set. Vertex array class ParallelVector ParallelVector[T](size_t capacity) : Constructs a ParallelVector, where capacity is the initial capacity of the vertex array. operator[](i: size_t) -> T : Returns the data at index i. begin() -> cython.pointer(T) : Returns the start pointer of ParallelVector. end() -> cython.pointer(T) : Returns the end pointer of ParallelVector. The usage of begin() and end() is similar to the begin and end pointers of the vector container, and these two pointers can be used to sequentially access the array. Back() -> T : Returns the last data of ParallelVector. Data() -> cython.pointer(T) : Indicates the data of the array itself. Destroy() -> cython.void : Clears the data in the ParallelVector array and deletes the array. Size() -> size_t : Indicates the number of data in ParallelVector. Resize(size: size_t) -> cython.void : Changes ParallelVector to size, which should be greater than or equal to the size before the change and less than capacity. Clear() -> cython.void : Clears the data in ParallelVector. ReAlloc(capacity: size_t) -> cython.void : Allocates a new capacity size to ParallelVector. If the array has data, it migrates the data to the new memory. Fill(elem: T) -> cython.void : Assigns elem to all data of ParallelVector. Append(elem: T, atomic: cython.bint = true) -> cython.void : Adds a data to the end of ParallelVector. Swap(other: ParallelVector[T]) -> cython.void : Exchanges data with another ParallelVector. Copy() -> ParallelVector[T] : Copies the current ParallelVector data and stores it in the copy array. Custom Data Structure Empty : A special data type whose content is empty. EdgeUnit[EdgeData] : Indicates the edge whose weight type is EdgeData, used to parse the input file, including three member variables: src: size_t : starting vertex of the edge dst: size_t : end of the edge edge_data: EdgeData : edge weight AdjUnit[EdgeData] : indicates the edge whose weight type is EdgeData, which is used in the batch calculation process and contains two member variables: neighbor: size_t : neighbor vertex of the edge edge_data: EdgeData : edge weight AdjList[EdgeData] : The adjacency list of vertices whose weight type is EdgeData, often used to represent the set of incoming and outgoing edges of vertices, including three member functions: begin()->cython.pointer(AdjUnit[T]) : the starting pointer of the list end()->cython.pointer(AdjUnit[T]) : the end pointer of the list operator[](i: size_t)-> AdjUnit[EdgeData] : the data whose subscript is i Graph class OlapBase NumVertices()->size_t : get the number of vertices NumEdges()-> size_t : get the number of edges OutDegree(vid: size_t)-> size_t : out-degree of vertex vid InDegree(vid: size_t)->size_t : in-degree of the vertex vid AllocVertexArray[VertexData]() ->ParallelVector[VertexData] : Allocates an array of type VertexData with size as the number of vertices AllocVertexSubset()-> ParallelBitset : Assigns a subset of ParallelBitsets to denote whether the state of all vertices is activated OutEdges(vid: size_t)-> AdjList[EdgeData] : Get the list of all outgoing edges of vertex v InEdges(vid: size_t)-> AdjList[EdgeData] : Get the list of all incoming edges of vertex v Transpose()->cython.void : transpose of a directed graph LoadFromArray(edge_array: cython.p_char, input_vertices: size_t, input_edges: size_t, edge_direction_policy: EdgeDirectionPolicy) : Loads the graph data from the array, contains four parameters, the meaning of which are respectively: edge_array : reads the data from the array into the graph. Normally, the array contains multiple edges. input_vertices : specifies the number of vertices read into the graph by the array. input_edges : specifies the number of edges that the array reads into the image. edge_direction_policy : indicates that the graph is directed or undirected. The graph can be divided into three modes: DUAL_DIRECTION, MAKE_SYMMETRIC, and INPUT_SYMMETRIC. For details, see 'enum EdgeDirectionPolicy' in the config.h file in the core folder. AcquireVertexLock(vid: size_t)-> cython.void : locks a vertex vid and prohibits other threads from accessing the vertex data corresponding to this lock void ReleaseVertexLock(vid: size_t)-> cython.void : unlocks the vertex vid and all threads can access the vertex data corresponding to the lock TuGraph provides two batch operations to perform point-centric batch processing in parallel, which is slightly different from C++ in Python. # Function name: ProcessVertexInRange[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # lower: size_t, upper: size_t, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # Function purpose: Executes the work function on nodes whose node numbers are between lower and upper in the Graph. The fourth parameter indicates the base of accumulation, which is 0 by default. # The fifth parameter indicates that the iterative reduce function operation is performed on the node return value after each work process, and the default is the accumulation operation. # For specific implementation, please refer to the specific code in include/lgraph/olap_base.h # # Example usage: Count the number of vertices with edges in the parent array. import cython from cython.cimports.olap_base import * @cython.cclass class CountCore: graph: cython.pointer(OlapBase[Empty]) parent: ParallelVector[size_t] @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: if self.graph.OutDegree(self.parent[vi]) > 0: return 1 return 0 def run(self, pointer_g: cython.pointer(OlapBase[Empty])): self.graph = pointer_g self.parent = self.graph.AllocVertexArray[size_t]() vertex_num: size_t vertex_num = self.graph.ProcessVertexInRange[size_t, CountCore](self.Work, 0, self.parent.Size(), self) print(\"the number is\", vertex_num) if __name__ == \"__main__\": count_core = CountCore() count_core.run(cython.address(g)) g is the instantiated object of graph class OlapBase # Function name: ProcessVertexActive[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # active: ParallelBitset, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # Function purpose: Execute the work function on the nodes corresponding to 1 in the active_vertices bitset. The third parameter indicates the base of accumulation, which is 0 by default; # The fourth parameter indicates that the iterative reduce function operation is performed on the node return value after each work process, and the default is the accumulation operation. # For specific implementation, please refer to the specific code in /include/lgraph/olap_base.h # # Usage example: Output all out-degree neighbors of nodes 1, 2, and 3 in the Graph, and count the total out-degree of these three nodes. import cython from cython.cimports.olap_base import * from cython.cimports.libc.stdio import printf @cython.cclass class NeighborCore: graph: cython.pointer(OlapBase[Empty]) active_in: ParallelBitset @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: degree = self. graph. OutDegree(vi) dst: size_t edges = self. graph. OutEdges(vi) local_out_degree: size_t for i in range(degree): dst = edges[i].neighbor printf(\"node %lu has neighbor %lu\\n\", vi, dst) local_out_degree += 1 return local_out_degree def run(self, pointer_g: cython.pointer(OlapBase[Empty])): self.graph = pointer_g self.active_in = self.graph.AllocVertexSubset() self. active_in. Add(1) self. active_in. Add(2) self. active_in. Add(3) total_outdegree = cython.declare( size_t, self.graph.ProcessVertexActive[size_t, CountCore](self.Work, self.active_in, self)) printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree) if __name__ == \"__main__\": neighbor_core = NeighborCore() neighbor_core.run(cython.address(g)) As shown in the above two examples, ProcessVertexActive and ProcessVertexInRange in Python require an additional algorithm class pointer parameter compared to their C++ counterparts. The Work function is generally used as a member function of the algorithm class to access member variables, such as in the graph and ParallelVector parent examples shown above. When calling the batch function, the Work function and the self pointer of the algorithm class are passed to the batch function. The Work function will be called in multiple threads, so the @cython.nogil decorator is added to release the Python global interpretation lock. In code executed by multiple threads, such as the Work function in the batch function, variables are better declared as C/C++ types using dst: type or dst = cython.declare(type) . This is because Python objects cannot be used in multi-threaded code. Graph class OlapOnDB: Parallelize to create a directed graph: olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL) Parallelize to create an undirected graph olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED) ID_MAPPING creates a directed graph olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_IDMAPPING) Graph class OlapOnDisk ConfigBase: ConfigBase() : Constructor std::string input_dir : graph edge table data path std::string output_dir : output path Load(config: ConfigBase[EdgeData], edge_direction_policy: EdgeDirectionPolicy)-> void : read in graph data 5. lgraph_db API Please refer to the files plugins/cython/lgraph_db.pxd and lgraph_db_python.py for the lgraph_db API. The usage and functions of the interface in lgraph_db.pxd are basically the same as the C++ interface. The interface declared in lgraph_db.pxd is implemented in C++. In the py file, it must be imported by cython.cimports.olap_db import * and compiled by the Cython file to run. VertexIndexIterator GetVid()-> int64_t : Get the vid of the vertex Galaxy Galaxy(dir_path: std::string) : constructor, dir_path is the db path SetCurrentUser(user: std::string, password: std::string)-> cython.void : set user SetUser(user: std::string)-> cython.void : set user OpenGraph(graph: std::string, read_only: bint)-> GraphDB : create GraphDB GraphDB: CreateReadTxn()-> Transaction : create a read-only transaction CreateWriteTxn()-> Transaction : create a write transaction ForkTxn(txn: Transaction)-> Transaction : Copy transactions, only read transactions can be copied Transaction: GetVertexIndexIterator( label: std::string, field: std::string, key_start: std::string, key_end: std::string) -> VertexIndexIterator Gets index iterator. The iterator has field value [key_start, key_end]. So key_start=key_end=v returns an iterator pointing to all vertexes that has field value v lgraph_db_python.py packages the C++ classes Galaxy and GraphDB from lgraph_db.pxd as Python classes. After compiling lgraph_db_python.py into a Python extension, you can directly access it in a Python file or from the Python command line by importing it with import lgraph_db_python . PyGalaxy: PyGalaxy(self, dir_path: str) : constructor, dir_path is the db path SetCurrentUser(self, user: str password: str)-> void : set user SetUser(self, user: std::string)-> void : set user OpenGraph(self, graph: str, read_only: bool)-> PyGraphDB : create PyGraphDB PyGraphDB: get_pointer(self)->cython.Py_ssize_t : address of C++ class GraphDB 6. Algorithm plug-in example The following is a code example of the BFS algorithm implemented in Python: # cython: language_level=3, cpp_locals=True, boundscheck=False, wraparound=False, initializedcheck=False # distutils: language = c++ # Comments work as follows: # language_level=3: use Python3 # cpp_locals=True: C++17 is required, and std::optional is used to manage C++ objects in Python code, which can avoid copy construction of C++ objects # boundscheck=False: Turn off bounds checking for indexes # wraparound=False: Turn off the processing of negative subscripts (similar to Python List) # initializedcheck=False: Turn off checking whether the memory is initialized, and the running performance will be faster after turning off the check # language = c++: translate this .py file to C++ instead of C file. TuGraph uses a lot of template functions, so C++ should be used import json import cython from cython.cimports.olap_base import * from cython.cimports.lgraph_db import * # From plugins/cython/ cimportolap_base.pxd and lgraph_db.pxd, similar to #include \"xxx.h\" in C++ from cython.cimports.libc.stdio import printf # Similar to #include <stdio.h> in C++ # Other common ones include cython.cimports.libcpp.unordered_map, etc. import time import lgraph_db_python @cython.cclass # cython.cclass indicates that BFSCore is a C-type Class class BFSCore: graph: cython.pointer(OlapBase[Empty]) # cython.pointer(OlapBase[Empty]) indicates the pointer of OlapBase[Empty], similar to OlapBase[Empty]* in C++ # Cython provides common types of pointers, such as cython.p_int, cython.p_char, etc. parent: ParallelVector[size_t] active_in: ParallelBitset active_out: ParallelBitset root: size_t # root: size_t declares root as a C++ size_t type variable, equivalent to root = cython.declare(size_t) # Variables that do not declare a type are Python object types # Declaring variable types will greatly improve performance, and in the multi-threaded part, only C/C++ type variables can be accessed @cython.cfunc # cython.cfunc indicates that Work is a C-type function, and the parameters and return values should be declared # cfunc has good performance and can accept C/C++ objects as parameters and return values, but it cannot be called in other python files # Similar to cython.ccall, such as Standalone function, which can be called in other python files @cython.nogil # cython.nogil means to release the Python global interpretation lock. In the part modified by nogil, Python objects cannot be accessed # In the multi-threaded part, there should be nogil decorator @cython.exceptval(check=False) # cython.exceptval(check=False) means that exception propagation is disabled, and Python exceptions raised inside the function will be ignored def Work(self, vi: size_t) -> size_t: degree = cython.declare(size_t, self.graph.OutDegree(vi)) out_edges = cython.declare(AdjList[Empty], self.graph.OutEdges(vi)) i = cython.declare(size_t, 0) local_num_activations = cython.declare(size_t, 0) dst: size_t for i in range(degree): dst = out_edges[i].neighbor if self.parent[dst] == cython.cast(size_t, -1): # parent[dst] == -1 means that dst has not been visited by bfs if self.active_out.Add(dst): # Set dst as an active node; ParallelBitmap.Add is an atomic operation to prevent double calculation self.parent[dst] = vi local_num_activations += 1 return local_num_activations @cython.cfunc @cython.nogil @cython.exceptval(check=False) def run(self, g: cython.pointer(OlapBase[Empty]), r: size_t) -> cython. size_t: self. graph = g self.root = r self.active_in = g.AllocVertexSubset() self.active_out = g.AllocVertexSubset() self.parent = g.AllocVertexArray[size_t]() self. parent. Fill(-1) num_vertices = cython.declare(size_t, self.graph.NumVertices()) printf(\"num_vertices = %lu\\n\", num_vertices) self.parent[self.root] = self.root num_activations = cython.declare(size_t, 1) discovered_vertices = cython.declare(size_t, num_activations) self. active_in. Add(self. root) while num_activations > 0: self. active_out. Clear() num_activations = g.ProcessVertexActive[size_t, BFSCore](self.Work, self.active_in, self) discovered_vertices += num_activations self. active_out. Swap(self. active_in) printf(\"num_activations = %lu\\n\", num_activations) return discovered_vertices @cython.cfunc def procedure_process(db: cython.pointer(GraphDB), request: dict, response: dict) -> cython.bint: cost = time. time() root_id = \"0\" label = \"node\" field = \"id\" if \"root\" in request: root_id = request[\"root\"] if \"label\" in request: label = request[\"label\"] if \"field\" in request: field = request[\"field\"] txn = db.CreateReadTxn() olapondb = OlapOnDB[Empty](db[0], txn, SNAPSHOT_PARALLEL) # Create OlapOnDB in parallel # Cython does not support dereference operations such as *db, use db[0] to dereference root_vid = txn.GetVertexIndexIterator( label.encode('utf-8'), field.encode('utf-8'), root_id.encode('utf-8'), root_id.encode('utf-8') ).GetVid() # Get the iterator of the root node through GetVertexIndexIterator based on the root node label name, field name and field value (root_id), # and get the vid through the iterator. When there is no ID_MAPPING, the vid is the same as the id in OlapOnDB cost = time. time() - cost printf(\"prepare_cost = %lf s\\n\", cython.cast(cython.double, cost)) a = BFSCore() cost = time. time() count = a. run(cython. address(olapondb), root_vid) cost = time. time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) response[\"found_vertices\"] = count response[\"num_vertices\"] = olapondb. NumVertices() response[\"num_edges\"] = olapondb. NumEdges() return True @cython.ccall def Standalone(input_dir: str, root: size_t): # Standalone is the plug-in entry in Standalone mode, modified with cython.ccall # You can set parameters arbitrarily, and modify plugins/cython/standalone_main.py accordingly cost = time. time() graph = OlapOnDisk[Empty]() config = ConfigBase[Empty]() config.input_dir = input_dir.encode(\"utf-8\") # config is a C++ class, config.input_dir is std::string, Python str needs to be encoded to be passed to std::string graph.Load(config, DUAL_DIRECTION) # read in graph cost = time. time() - cost printf(\"load_cost = %lf s\\n\", cython.cast(cython.double, cost)) cost = time. time() a = BFSCore() count = a. run(cython. address(graph), root) # cython.address(graph), address, similar to &graph in C++ cost = time. time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) print(\"find {} vertices\". format(count)) @cython.ccall def Process(db: lgraph_db_python.PyGraphDB, inp: bytes): # Process is the plug-in entry in embed mode and procedure mode, modified with cython.ccall # The Process function must be named Process, and the parameters are lgraph_db_python.PyGraphDB and bytes # The return value must be (bool, str) _inp = inp.decode(\"utf-8\") request = json.loads(_inp) response = {} addr = cython.declare(cython.Py_ssize_t, db.get_pointer()) # Get the address of the GraphDB object in the PyGraphDB, convert it to a pointer and pass it procedure_process(cython.cast(cython.pointer(GraphDB), addr), request, response) return (True, json.dumps(response))","title":"Python API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#python-olap-api","text":"This document mainly introduces the API usage of OlapBase OlapOnDB and OlapOnDisk in Python","title":"Python Olap API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#table-of-contents","text":"1.Overview 2.Configuration Requirements 3.Cython 4.Olap API 4.1. Atomic operations 4.2. Vertex collection class ParallelBitset 4.3. Vertex array class ParallelVector 4.4. Custom data structure 4.5.Graph class OlapBase 4.6. Graph Class OlapOnDB 4.7.Graph class OlapOnDisk 5.lgraph DB API 6.Algorithm plugin example","title":"Table of contents"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#1-overview","text":"This manual will introduce the simple configuration required to use the Python interface of the TuGraph graph computing system, and explain the TuGraph Python API in conjunction with the code. For details about the functions of class ParallelBitset, OlapBase, etc., see olap-base-api.md, olap-on-db-api.md and olap-on-disk-api.md.","title":"1 Overview"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#2-configuration-requirements","text":"If you want to use TuGraph to write and compile your own applications, the required configuration requirements are: Linux operating system, currently running successfully on Ubuntu16.04.2 and Centos7 systems. A compiler that supports C++17 requires GCC version 5.4.1 or later. Cython, version 3.0a1 or above is required, and the tested version is 3.0.0a11","title":"2. Configuration requirements"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#3-cython","text":"Cython is an efficient programming language that is a superset of Python. Cython can translate .py files into C/C++ codes and compile them into Python extension modules, which can be called through import in Python. In TuGraph, all Python plugins are compiled into Python extension modules by Cython and then used. The main advantage of using Cython is that it combines the simplicity and ease of use of Python with the performance of C/C++. The TuGraph Python interface is implemented using Cython. Cython Documentation","title":"3. Cython"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#4-olap-api","text":"The Olap API is used for graph computing and is implemented in C++. The usage and functions are basically the same as the C++ interface. To use the API in a Python file, the interfaces declared in plugins/cython/olap_base.pxd must be imported using cython.cimports.olap_base import * . The Python file can only be run after being compiled by Cython.","title":"4. Olap API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#atomic-operations","text":"cas[T](ptr: cython.pointer(T), oldv: T, newv: T)-> cython.bint : If the value pointed to by ptr is equal to oldv, assign the value pointed to by ptr to newv and return True, otherwise return False. write_min[T](a: cython.pointer(T), b: T)->cython.bint : If b is smaller than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. write_max[T](a: cython.pointer(T), b: T)->cython.bint : If b is greater than the value pointed to by a, then assign the value pointed to by a to b and return true, otherwise return false. write_add[T](a: cython.pointer(T), b: T)->cython.bint : Add the value of b to the value pointed to by a. write_sub[T](a: cython.pointer(T), b: T)->cython.bint : Subtract the value pointed to by a from the value of b.","title":"Atomic operations"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#vertex-collection-class-parallelbitset","text":"Size() -> size_t : Indicates the number of vertices in the Bitmap. ParallelBitset(size: size_t) : Initializes size and data, where the length of data is (size >> 6) + 1. Clear() -> cython.void : Empties the collection. Fill() -> cython.void : Adds all vertices to the set. Has(i: size_t) -> cython.bint : Checks if vertex i is in the set. Add(i: size_t) -> cython.bint : Adds vertex i to the set. Swap(other: ParallelBitset) -> cython.void : Exchanges elements with another ParallelBitset set.","title":"Vertex collection class ParallelBitset"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#vertex-array-class-parallelvector","text":"ParallelVector[T](size_t capacity) : Constructs a ParallelVector, where capacity is the initial capacity of the vertex array. operator[](i: size_t) -> T : Returns the data at index i. begin() -> cython.pointer(T) : Returns the start pointer of ParallelVector. end() -> cython.pointer(T) : Returns the end pointer of ParallelVector. The usage of begin() and end() is similar to the begin and end pointers of the vector container, and these two pointers can be used to sequentially access the array. Back() -> T : Returns the last data of ParallelVector. Data() -> cython.pointer(T) : Indicates the data of the array itself. Destroy() -> cython.void : Clears the data in the ParallelVector array and deletes the array. Size() -> size_t : Indicates the number of data in ParallelVector. Resize(size: size_t) -> cython.void : Changes ParallelVector to size, which should be greater than or equal to the size before the change and less than capacity. Clear() -> cython.void : Clears the data in ParallelVector. ReAlloc(capacity: size_t) -> cython.void : Allocates a new capacity size to ParallelVector. If the array has data, it migrates the data to the new memory. Fill(elem: T) -> cython.void : Assigns elem to all data of ParallelVector. Append(elem: T, atomic: cython.bint = true) -> cython.void : Adds a data to the end of ParallelVector. Swap(other: ParallelVector[T]) -> cython.void : Exchanges data with another ParallelVector. Copy() -> ParallelVector[T] : Copies the current ParallelVector data and stores it in the copy array.","title":"Vertex array class ParallelVector"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#custom-data-structure","text":"Empty : A special data type whose content is empty. EdgeUnit[EdgeData] : Indicates the edge whose weight type is EdgeData, used to parse the input file, including three member variables: src: size_t : starting vertex of the edge dst: size_t : end of the edge edge_data: EdgeData : edge weight AdjUnit[EdgeData] : indicates the edge whose weight type is EdgeData, which is used in the batch calculation process and contains two member variables: neighbor: size_t : neighbor vertex of the edge edge_data: EdgeData : edge weight AdjList[EdgeData] : The adjacency list of vertices whose weight type is EdgeData, often used to represent the set of incoming and outgoing edges of vertices, including three member functions: begin()->cython.pointer(AdjUnit[T]) : the starting pointer of the list end()->cython.pointer(AdjUnit[T]) : the end pointer of the list operator[](i: size_t)-> AdjUnit[EdgeData] : the data whose subscript is i","title":"Custom Data Structure"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#graph-class-olapbase","text":"NumVertices()->size_t : get the number of vertices NumEdges()-> size_t : get the number of edges OutDegree(vid: size_t)-> size_t : out-degree of vertex vid InDegree(vid: size_t)->size_t : in-degree of the vertex vid AllocVertexArray[VertexData]() ->ParallelVector[VertexData] : Allocates an array of type VertexData with size as the number of vertices AllocVertexSubset()-> ParallelBitset : Assigns a subset of ParallelBitsets to denote whether the state of all vertices is activated OutEdges(vid: size_t)-> AdjList[EdgeData] : Get the list of all outgoing edges of vertex v InEdges(vid: size_t)-> AdjList[EdgeData] : Get the list of all incoming edges of vertex v Transpose()->cython.void : transpose of a directed graph LoadFromArray(edge_array: cython.p_char, input_vertices: size_t, input_edges: size_t, edge_direction_policy: EdgeDirectionPolicy) : Loads the graph data from the array, contains four parameters, the meaning of which are respectively: edge_array : reads the data from the array into the graph. Normally, the array contains multiple edges. input_vertices : specifies the number of vertices read into the graph by the array. input_edges : specifies the number of edges that the array reads into the image. edge_direction_policy : indicates that the graph is directed or undirected. The graph can be divided into three modes: DUAL_DIRECTION, MAKE_SYMMETRIC, and INPUT_SYMMETRIC. For details, see 'enum EdgeDirectionPolicy' in the config.h file in the core folder. AcquireVertexLock(vid: size_t)-> cython.void : locks a vertex vid and prohibits other threads from accessing the vertex data corresponding to this lock void ReleaseVertexLock(vid: size_t)-> cython.void : unlocks the vertex vid and all threads can access the vertex data corresponding to the lock TuGraph provides two batch operations to perform point-centric batch processing in parallel, which is slightly different from C++ in Python. # Function name: ProcessVertexInRange[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # lower: size_t, upper: size_t, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # Function purpose: Executes the work function on nodes whose node numbers are between lower and upper in the Graph. The fourth parameter indicates the base of accumulation, which is 0 by default. # The fifth parameter indicates that the iterative reduce function operation is performed on the node return value after each work process, and the default is the accumulation operation. # For specific implementation, please refer to the specific code in include/lgraph/olap_base.h # # Example usage: Count the number of vertices with edges in the parent array. import cython from cython.cimports.olap_base import * @cython.cclass class CountCore: graph: cython.pointer(OlapBase[Empty]) parent: ParallelVector[size_t] @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: if self.graph.OutDegree(self.parent[vi]) > 0: return 1 return 0 def run(self, pointer_g: cython.pointer(OlapBase[Empty])): self.graph = pointer_g self.parent = self.graph.AllocVertexArray[size_t]() vertex_num: size_t vertex_num = self.graph.ProcessVertexInRange[size_t, CountCore](self.Work, 0, self.parent.Size(), self) print(\"the number is\", vertex_num) if __name__ == \"__main__\": count_core = CountCore() count_core.run(cython.address(g)) g is the instantiated object of graph class OlapBase # Function name: ProcessVertexActive[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # active: ParallelBitset, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # Function purpose: Execute the work function on the nodes corresponding to 1 in the active_vertices bitset. The third parameter indicates the base of accumulation, which is 0 by default; # The fourth parameter indicates that the iterative reduce function operation is performed on the node return value after each work process, and the default is the accumulation operation. # For specific implementation, please refer to the specific code in /include/lgraph/olap_base.h # # Usage example: Output all out-degree neighbors of nodes 1, 2, and 3 in the Graph, and count the total out-degree of these three nodes. import cython from cython.cimports.olap_base import * from cython.cimports.libc.stdio import printf @cython.cclass class NeighborCore: graph: cython.pointer(OlapBase[Empty]) active_in: ParallelBitset @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: degree = self. graph. OutDegree(vi) dst: size_t edges = self. graph. OutEdges(vi) local_out_degree: size_t for i in range(degree): dst = edges[i].neighbor printf(\"node %lu has neighbor %lu\\n\", vi, dst) local_out_degree += 1 return local_out_degree def run(self, pointer_g: cython.pointer(OlapBase[Empty])): self.graph = pointer_g self.active_in = self.graph.AllocVertexSubset() self. active_in. Add(1) self. active_in. Add(2) self. active_in. Add(3) total_outdegree = cython.declare( size_t, self.graph.ProcessVertexActive[size_t, CountCore](self.Work, self.active_in, self)) printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree) if __name__ == \"__main__\": neighbor_core = NeighborCore() neighbor_core.run(cython.address(g)) As shown in the above two examples, ProcessVertexActive and ProcessVertexInRange in Python require an additional algorithm class pointer parameter compared to their C++ counterparts. The Work function is generally used as a member function of the algorithm class to access member variables, such as in the graph and ParallelVector parent examples shown above. When calling the batch function, the Work function and the self pointer of the algorithm class are passed to the batch function. The Work function will be called in multiple threads, so the @cython.nogil decorator is added to release the Python global interpretation lock. In code executed by multiple threads, such as the Work function in the batch function, variables are better declared as C/C++ types using dst: type or dst = cython.declare(type) . This is because Python objects cannot be used in multi-threaded code.","title":"Graph class OlapBase"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#graph-class-olapondb","text":"Parallelize to create a directed graph: olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL) Parallelize to create an undirected graph olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED) ID_MAPPING creates a directed graph olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_IDMAPPING)","title":"Graph class OlapOnDB:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#graph-class-olapondisk","text":"","title":"Graph class OlapOnDisk"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#configbase","text":"ConfigBase() : Constructor std::string input_dir : graph edge table data path std::string output_dir : output path Load(config: ConfigBase[EdgeData], edge_direction_policy: EdgeDirectionPolicy)-> void : read in graph data","title":"ConfigBase:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#5-lgraph_db-api","text":"Please refer to the files plugins/cython/lgraph_db.pxd and lgraph_db_python.py for the lgraph_db API. The usage and functions of the interface in lgraph_db.pxd are basically the same as the C++ interface. The interface declared in lgraph_db.pxd is implemented in C++. In the py file, it must be imported by cython.cimports.olap_db import * and compiled by the Cython file to run.","title":"5. lgraph_db API"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#vertexindexiterator","text":"GetVid()-> int64_t : Get the vid of the vertex","title":"VertexIndexIterator"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#galaxy","text":"Galaxy(dir_path: std::string) : constructor, dir_path is the db path SetCurrentUser(user: std::string, password: std::string)-> cython.void : set user SetUser(user: std::string)-> cython.void : set user OpenGraph(graph: std::string, read_only: bint)-> GraphDB : create GraphDB","title":"Galaxy"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#graphdb","text":"CreateReadTxn()-> Transaction : create a read-only transaction CreateWriteTxn()-> Transaction : create a write transaction ForkTxn(txn: Transaction)-> Transaction : Copy transactions, only read transactions can be copied","title":"GraphDB:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#transaction","text":"GetVertexIndexIterator( label: std::string, field: std::string, key_start: std::string, key_end: std::string) -> VertexIndexIterator Gets index iterator. The iterator has field value [key_start, key_end]. So key_start=key_end=v returns an iterator pointing to all vertexes that has field value v lgraph_db_python.py packages the C++ classes Galaxy and GraphDB from lgraph_db.pxd as Python classes. After compiling lgraph_db_python.py into a Python extension, you can directly access it in a Python file or from the Python command line by importing it with import lgraph_db_python .","title":"Transaction:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#pygalaxy","text":"PyGalaxy(self, dir_path: str) : constructor, dir_path is the db path SetCurrentUser(self, user: str password: str)-> void : set user SetUser(self, user: std::string)-> void : set user OpenGraph(self, graph: str, read_only: bool)-> PyGraphDB : create PyGraphDB","title":"PyGalaxy:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#pygraphdb","text":"get_pointer(self)->cython.Py_ssize_t : address of C++ class GraphDB","title":"PyGraphDB:"},{"location":"en-US/3.developer-document/4.graph_analytics_engine/6.python-api/#6-algorithm-plug-in-example","text":"The following is a code example of the BFS algorithm implemented in Python: # cython: language_level=3, cpp_locals=True, boundscheck=False, wraparound=False, initializedcheck=False # distutils: language = c++ # Comments work as follows: # language_level=3: use Python3 # cpp_locals=True: C++17 is required, and std::optional is used to manage C++ objects in Python code, which can avoid copy construction of C++ objects # boundscheck=False: Turn off bounds checking for indexes # wraparound=False: Turn off the processing of negative subscripts (similar to Python List) # initializedcheck=False: Turn off checking whether the memory is initialized, and the running performance will be faster after turning off the check # language = c++: translate this .py file to C++ instead of C file. TuGraph uses a lot of template functions, so C++ should be used import json import cython from cython.cimports.olap_base import * from cython.cimports.lgraph_db import * # From plugins/cython/ cimportolap_base.pxd and lgraph_db.pxd, similar to #include \"xxx.h\" in C++ from cython.cimports.libc.stdio import printf # Similar to #include <stdio.h> in C++ # Other common ones include cython.cimports.libcpp.unordered_map, etc. import time import lgraph_db_python @cython.cclass # cython.cclass indicates that BFSCore is a C-type Class class BFSCore: graph: cython.pointer(OlapBase[Empty]) # cython.pointer(OlapBase[Empty]) indicates the pointer of OlapBase[Empty], similar to OlapBase[Empty]* in C++ # Cython provides common types of pointers, such as cython.p_int, cython.p_char, etc. parent: ParallelVector[size_t] active_in: ParallelBitset active_out: ParallelBitset root: size_t # root: size_t declares root as a C++ size_t type variable, equivalent to root = cython.declare(size_t) # Variables that do not declare a type are Python object types # Declaring variable types will greatly improve performance, and in the multi-threaded part, only C/C++ type variables can be accessed @cython.cfunc # cython.cfunc indicates that Work is a C-type function, and the parameters and return values should be declared # cfunc has good performance and can accept C/C++ objects as parameters and return values, but it cannot be called in other python files # Similar to cython.ccall, such as Standalone function, which can be called in other python files @cython.nogil # cython.nogil means to release the Python global interpretation lock. In the part modified by nogil, Python objects cannot be accessed # In the multi-threaded part, there should be nogil decorator @cython.exceptval(check=False) # cython.exceptval(check=False) means that exception propagation is disabled, and Python exceptions raised inside the function will be ignored def Work(self, vi: size_t) -> size_t: degree = cython.declare(size_t, self.graph.OutDegree(vi)) out_edges = cython.declare(AdjList[Empty], self.graph.OutEdges(vi)) i = cython.declare(size_t, 0) local_num_activations = cython.declare(size_t, 0) dst: size_t for i in range(degree): dst = out_edges[i].neighbor if self.parent[dst] == cython.cast(size_t, -1): # parent[dst] == -1 means that dst has not been visited by bfs if self.active_out.Add(dst): # Set dst as an active node; ParallelBitmap.Add is an atomic operation to prevent double calculation self.parent[dst] = vi local_num_activations += 1 return local_num_activations @cython.cfunc @cython.nogil @cython.exceptval(check=False) def run(self, g: cython.pointer(OlapBase[Empty]), r: size_t) -> cython. size_t: self. graph = g self.root = r self.active_in = g.AllocVertexSubset() self.active_out = g.AllocVertexSubset() self.parent = g.AllocVertexArray[size_t]() self. parent. Fill(-1) num_vertices = cython.declare(size_t, self.graph.NumVertices()) printf(\"num_vertices = %lu\\n\", num_vertices) self.parent[self.root] = self.root num_activations = cython.declare(size_t, 1) discovered_vertices = cython.declare(size_t, num_activations) self. active_in. Add(self. root) while num_activations > 0: self. active_out. Clear() num_activations = g.ProcessVertexActive[size_t, BFSCore](self.Work, self.active_in, self) discovered_vertices += num_activations self. active_out. Swap(self. active_in) printf(\"num_activations = %lu\\n\", num_activations) return discovered_vertices @cython.cfunc def procedure_process(db: cython.pointer(GraphDB), request: dict, response: dict) -> cython.bint: cost = time. time() root_id = \"0\" label = \"node\" field = \"id\" if \"root\" in request: root_id = request[\"root\"] if \"label\" in request: label = request[\"label\"] if \"field\" in request: field = request[\"field\"] txn = db.CreateReadTxn() olapondb = OlapOnDB[Empty](db[0], txn, SNAPSHOT_PARALLEL) # Create OlapOnDB in parallel # Cython does not support dereference operations such as *db, use db[0] to dereference root_vid = txn.GetVertexIndexIterator( label.encode('utf-8'), field.encode('utf-8'), root_id.encode('utf-8'), root_id.encode('utf-8') ).GetVid() # Get the iterator of the root node through GetVertexIndexIterator based on the root node label name, field name and field value (root_id), # and get the vid through the iterator. When there is no ID_MAPPING, the vid is the same as the id in OlapOnDB cost = time. time() - cost printf(\"prepare_cost = %lf s\\n\", cython.cast(cython.double, cost)) a = BFSCore() cost = time. time() count = a. run(cython. address(olapondb), root_vid) cost = time. time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) response[\"found_vertices\"] = count response[\"num_vertices\"] = olapondb. NumVertices() response[\"num_edges\"] = olapondb. NumEdges() return True @cython.ccall def Standalone(input_dir: str, root: size_t): # Standalone is the plug-in entry in Standalone mode, modified with cython.ccall # You can set parameters arbitrarily, and modify plugins/cython/standalone_main.py accordingly cost = time. time() graph = OlapOnDisk[Empty]() config = ConfigBase[Empty]() config.input_dir = input_dir.encode(\"utf-8\") # config is a C++ class, config.input_dir is std::string, Python str needs to be encoded to be passed to std::string graph.Load(config, DUAL_DIRECTION) # read in graph cost = time. time() - cost printf(\"load_cost = %lf s\\n\", cython.cast(cython.double, cost)) cost = time. time() a = BFSCore() count = a. run(cython. address(graph), root) # cython.address(graph), address, similar to &graph in C++ cost = time. time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) print(\"find {} vertices\". format(count)) @cython.ccall def Process(db: lgraph_db_python.PyGraphDB, inp: bytes): # Process is the plug-in entry in embed mode and procedure mode, modified with cython.ccall # The Process function must be named Process, and the parameters are lgraph_db_python.PyGraphDB and bytes # The return value must be (bool, str) _inp = inp.decode(\"utf-8\") request = json.loads(_inp) response = {} addr = cython.declare(cython.Py_ssize_t, db.get_pointer()) # Get the address of the GraphDB object in the PyGraphDB, convert it to a pointer and pass it procedure_process(cython.cast(cython.pointer(GraphDB), addr), request, response) return (True, json.dumps(response))","title":"6. Algorithm plug-in example"},{"location":"en-US/4.client/1.java-client/","text":"TuGraph Java SDK Compile java client code cd src/client/java/TuGraphRpcClient sh local_build.sh Demo Instantiate the client object Introduce dependencies and instantiate import com.alipay.tugraph.TuGraphRpcClient; TuGraphRpcClient client = new TuGraphRpcClient(url, user, password); # If tugraph is launched from docker url : list://ip:9090 user : admin password : 73@TuGraph public TuGraphRpcClient(String url, String user, String pass) @param url: tugraph host looks like list://ip:port @param user: login user name @param password: login password Call cypher String res = client.callCypher(\"CALL db.edgeLabels()\", \"default\", 10); log.info(\"db.edgeLabels() : \" + res); @param cypher: inquire statement. @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of cypher query execution public String callCypher(String cypher, String graph, double timeout) Call stored procedure String result = client.callPlugin(\"CPP\", \"khop\", kHopParamGen(), 1000, false, \"default\", 1000); log.info(\"testCallPlugin : \" + result); @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param param: the execution parameters @param pluginTimeOut: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public String callPlugin(String pluginType, String pluginName, String param, double pluginTimeOut, boolean inProcess, String graph, double timeout) Load stored procedure String result = client.loadPlugin(\"./test/plugin/khop.so\", \"CPP\", \"khop\", \"SO\", \"test loadplugin\", true, \"default\", 1000); log.info(\"loadPlugin : \" + result); @param sourceFile: the source_file contain plugin code @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param codeType: code type, currently supported PY, SO, CPP, ZIP @param pluginDescription: plugin description @param readOnly: plugin is read only or not @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public boolean loadPlugin(String sourceFile, String pluginType, String pluginName, String codeType, String pluginDescription, boolean readOnly, String graph, double timeout) throws IOException Import from a byte stream schema boolean ret = client.importSchemaFromContent(schema, \"default\", 1000); log.info(\"importSchemaFromContent : \" + ret); @param schema: the schema to be imported @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromContent(String schema, String graph, double timeout) throws UnsupportedEncodingException Import point edge data from byte stream boolean ret = client.importDataFromContent(personDesc, person, \",\", true, 16, \"default\", 1000); log.info(\"importDataFromContent : \" + ret); @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromContent(String desc, String data, String delimiter, boolean continueOnError, int threadNums, String graph, double timeout) throws UnsupportedEncodingException Import from a file schema boolean ret = client.importSchemaFromFile(\"./test/data/yago.conf\", \"default\", 1000); log.info(\"importSchemaFromFile : \" + ret); @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromFile(String schemaFile, String graph, double timeout) throws UnsupportedEncodingException, IOException Import edge data from a file boolean ret = client.importDataFromFile(\"./test/data/yago.conf\", \",\", true, 16, 0, \"default\", 1000000000); log.info(\"importDataFromFile : \" + ret); @param confFile: data file contain format description and data @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param skipPackages: skip packages number @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromFile(String confFile, String delimiter, boolean continueOnError, int threadNums, int skipPackages, String graph, double timeout) throws IOException, UnsupportedEncodingException","title":"Java Client"},{"location":"en-US/4.client/1.java-client/#tugraph-java-sdk","text":"","title":"TuGraph Java SDK"},{"location":"en-US/4.client/1.java-client/#compile-java-client-code","text":"cd src/client/java/TuGraphRpcClient sh local_build.sh","title":"Compile java client code"},{"location":"en-US/4.client/1.java-client/#demo","text":"","title":"Demo"},{"location":"en-US/4.client/1.java-client/#instantiate-the-client-object","text":"Introduce dependencies and instantiate import com.alipay.tugraph.TuGraphRpcClient; TuGraphRpcClient client = new TuGraphRpcClient(url, user, password); # If tugraph is launched from docker url : list://ip:9090 user : admin password : 73@TuGraph public TuGraphRpcClient(String url, String user, String pass) @param url: tugraph host looks like list://ip:port @param user: login user name @param password: login password","title":"Instantiate the client object"},{"location":"en-US/4.client/1.java-client/#call-cypher","text":"String res = client.callCypher(\"CALL db.edgeLabels()\", \"default\", 10); log.info(\"db.edgeLabels() : \" + res); @param cypher: inquire statement. @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of cypher query execution public String callCypher(String cypher, String graph, double timeout)","title":"Call cypher"},{"location":"en-US/4.client/1.java-client/#call-stored-procedure","text":"String result = client.callPlugin(\"CPP\", \"khop\", kHopParamGen(), 1000, false, \"default\", 1000); log.info(\"testCallPlugin : \" + result); @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param param: the execution parameters @param pluginTimeOut: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public String callPlugin(String pluginType, String pluginName, String param, double pluginTimeOut, boolean inProcess, String graph, double timeout)","title":"Call stored procedure"},{"location":"en-US/4.client/1.java-client/#load-stored-procedure","text":"String result = client.loadPlugin(\"./test/plugin/khop.so\", \"CPP\", \"khop\", \"SO\", \"test loadplugin\", true, \"default\", 1000); log.info(\"loadPlugin : \" + result); @param sourceFile: the source_file contain plugin code @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param codeType: code type, currently supported PY, SO, CPP, ZIP @param pluginDescription: plugin description @param readOnly: plugin is read only or not @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public boolean loadPlugin(String sourceFile, String pluginType, String pluginName, String codeType, String pluginDescription, boolean readOnly, String graph, double timeout) throws IOException","title":"Load stored procedure"},{"location":"en-US/4.client/1.java-client/#import-from-a-byte-stream-schema","text":"boolean ret = client.importSchemaFromContent(schema, \"default\", 1000); log.info(\"importSchemaFromContent : \" + ret); @param schema: the schema to be imported @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromContent(String schema, String graph, double timeout) throws UnsupportedEncodingException","title":"Import from a byte stream schema"},{"location":"en-US/4.client/1.java-client/#import-point-edge-data-from-byte-stream","text":"boolean ret = client.importDataFromContent(personDesc, person, \",\", true, 16, \"default\", 1000); log.info(\"importDataFromContent : \" + ret); @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromContent(String desc, String data, String delimiter, boolean continueOnError, int threadNums, String graph, double timeout) throws UnsupportedEncodingException","title":"Import point edge data from byte stream"},{"location":"en-US/4.client/1.java-client/#import-from-a-file-schema","text":"boolean ret = client.importSchemaFromFile(\"./test/data/yago.conf\", \"default\", 1000); log.info(\"importSchemaFromFile : \" + ret); @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromFile(String schemaFile, String graph, double timeout) throws UnsupportedEncodingException, IOException","title":"Import from a file schema"},{"location":"en-US/4.client/1.java-client/#import-edge-data-from-a-file","text":"boolean ret = client.importDataFromFile(\"./test/data/yago.conf\", \",\", true, 16, 0, \"default\", 1000000000); log.info(\"importDataFromFile : \" + ret); @param confFile: data file contain format description and data @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param skipPackages: skip packages number @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromFile(String confFile, String delimiter, boolean continueOnError, int threadNums, int skipPackages, String graph, double timeout) throws IOException, UnsupportedEncodingException","title":"Import edge data from a file"},{"location":"en-US/4.client/2.python-client/","text":"TuGraph Python SDK This document is the usage instruction of TuGraph Python SDK Demo Call cypher TuGraphClient import TuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") cypher = \"match (n) return properties(n) limit 1\" res = client.call_cypher(cypher) print(res) Call stored procedure TuGraphClient import TuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") plugin_type = \"cpp\" plugin_name = \"khop\" plugin_input = \"{\\\"root\\\": 10, \\\"hop\\\": 3}\" res = client.call_plugin(plugin_type, plguin_name, plugin_input) print(res)","title":"Python Client"},{"location":"en-US/4.client/2.python-client/#tugraph-python-sdk","text":"This document is the usage instruction of TuGraph Python SDK","title":"TuGraph Python SDK"},{"location":"en-US/4.client/2.python-client/#demo","text":"","title":"Demo"},{"location":"en-US/4.client/2.python-client/#call-cypher","text":"TuGraphClient import TuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") cypher = \"match (n) return properties(n) limit 1\" res = client.call_cypher(cypher) print(res)","title":"Call cypher"},{"location":"en-US/4.client/2.python-client/#call-stored-procedure","text":"TuGraphClient import TuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") plugin_type = \"cpp\" plugin_name = \"khop\" plugin_input = \"{\\\"root\\\": 10, \\\"hop\\\": 3}\" res = client.call_plugin(plugin_type, plguin_name, plugin_input) print(res)","title":"Call stored procedure"},{"location":"en-US/4.client/3.cpp-client/","text":"TuGraph C++ SDK This document is the usage instruction of TuGraph C++ SDK Instructions C++ Client can use RPC to connect to lgraph_server to import data, execute stored procedures, call Cypher and other operations. Demo Instantiate the client object Introduce dependencies and instantiate RpcClient client3(\"0.0.0.0:19099\", \"admin\", \"73@TuGraph\"); RpcClient(const std::string& url, const std::string& user, const std::string& password); @param url: tugraph host looks like ip:port @param user: login user name @param password: login password Call cypher std::string str; bool ret = client.CallCypher(str, \"CALL db.createVertexLabel('actor', 'name', 'name', string, false, 'age', int8, true)\"); bool CallCypher(std::string& result, const std::string& cypher, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param cypher: inquire statement. @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully Call stored procedure std::string str; bool ret = client.CallPlugin(str, \"CPP\", \"test_plugin1\", \"bcefg\"); bool CallPlugin(std::string& result, const std::string& plugin_type, const std::string& plugin_name, const std::string& param, double plugin_time_out = 0.0, bool in_process = false, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param param: the execution parameters @param plugin_timeout: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully Load stored procedure std::string str; bool ret = client.LoadPlugin(str, code_sleep, \"PY\", \"python_plugin1\", \"PY\", \"this is a test plugin\", bool LoadPlugin(std::string& result, const std::string& source_file, const std::string& plugin_type, const std::string& plugin_name, const std::string& code_type, const std::string& plugin_description, bool read_only, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param source_file: the source_file contain plugin code @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param code_type: code type, currently supported PY, SO, CPP, ZIP @param plugin_description: plugin description @param read_only: plugin is read only or not @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully Import from a byte stream schema std::string str; bool ret = client.ImportSchemaFromContent(str, sImportContent[\"schema\"]); bool ImportSchemaFromContent(std::string& result, const std::string& schema, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schema: the schema to be imported @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully Import node and edge data from a byte stream std::string str; ret = client.ImportDataFromContent(str, sImportContent[\"person_desc\"], sImportContent[\"person\"],\",\"); bool ImportDataFromContent(std::string& result, const std::string& desc, const std::string& data, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully Import schema from a file std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportSchemaFromFile(str, conf_file); bool ImportSchemaFromFile(std::string& result, const std::string& schema_file, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully Import edge data from a file std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportDataFromFile(str, conf_file, \",\"); bool ImportDataFromFile(std::string& result, const std::string& conf_file, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, int skip_packages = 0, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param conf_file: data file contain format description and data @param delimiter: data separator @param continue_on_error: whether to continue when importing data fails @param thread_nums: maximum number of threads @param skip_packages: skip packages number @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"CPP Client"},{"location":"en-US/4.client/3.cpp-client/#tugraph-c-sdk","text":"This document is the usage instruction of TuGraph C++ SDK","title":"TuGraph C++ SDK"},{"location":"en-US/4.client/3.cpp-client/#instructions","text":"C++ Client can use RPC to connect to lgraph_server to import data, execute stored procedures, call Cypher and other operations.","title":"Instructions"},{"location":"en-US/4.client/3.cpp-client/#demo","text":"","title":"Demo"},{"location":"en-US/4.client/3.cpp-client/#instantiate-the-client-object","text":"Introduce dependencies and instantiate RpcClient client3(\"0.0.0.0:19099\", \"admin\", \"73@TuGraph\"); RpcClient(const std::string& url, const std::string& user, const std::string& password); @param url: tugraph host looks like ip:port @param user: login user name @param password: login password","title":"Instantiate the client object"},{"location":"en-US/4.client/3.cpp-client/#call-cypher","text":"std::string str; bool ret = client.CallCypher(str, \"CALL db.createVertexLabel('actor', 'name', 'name', string, false, 'age', int8, true)\"); bool CallCypher(std::string& result, const std::string& cypher, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param cypher: inquire statement. @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Call cypher"},{"location":"en-US/4.client/3.cpp-client/#call-stored-procedure","text":"std::string str; bool ret = client.CallPlugin(str, \"CPP\", \"test_plugin1\", \"bcefg\"); bool CallPlugin(std::string& result, const std::string& plugin_type, const std::string& plugin_name, const std::string& param, double plugin_time_out = 0.0, bool in_process = false, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param param: the execution parameters @param plugin_timeout: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Call stored procedure"},{"location":"en-US/4.client/3.cpp-client/#load-stored-procedure","text":"std::string str; bool ret = client.LoadPlugin(str, code_sleep, \"PY\", \"python_plugin1\", \"PY\", \"this is a test plugin\", bool LoadPlugin(std::string& result, const std::string& source_file, const std::string& plugin_type, const std::string& plugin_name, const std::string& code_type, const std::string& plugin_description, bool read_only, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param source_file: the source_file contain plugin code @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param code_type: code type, currently supported PY, SO, CPP, ZIP @param plugin_description: plugin description @param read_only: plugin is read only or not @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Load stored procedure"},{"location":"en-US/4.client/3.cpp-client/#import-from-a-byte-stream-schema","text":"std::string str; bool ret = client.ImportSchemaFromContent(str, sImportContent[\"schema\"]); bool ImportSchemaFromContent(std::string& result, const std::string& schema, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schema: the schema to be imported @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Import from a byte stream schema"},{"location":"en-US/4.client/3.cpp-client/#import-node-and-edge-data-from-a-byte-stream","text":"std::string str; ret = client.ImportDataFromContent(str, sImportContent[\"person_desc\"], sImportContent[\"person\"],\",\"); bool ImportDataFromContent(std::string& result, const std::string& desc, const std::string& data, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Import node and edge data from a byte stream"},{"location":"en-US/4.client/3.cpp-client/#import-schema-from-a-file","text":"std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportSchemaFromFile(str, conf_file); bool ImportSchemaFromFile(std::string& result, const std::string& schema_file, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Import schema from a file"},{"location":"en-US/4.client/3.cpp-client/#import-edge-data-from-a-file","text":"std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportDataFromFile(str, conf_file, \",\"); bool ImportDataFromFile(std::string& result, const std::string& conf_file, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, int skip_packages = 0, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param conf_file: data file contain format description and data @param delimiter: data separator @param continue_on_error: whether to continue when importing data fails @param thread_nums: maximum number of threads @param skip_packages: skip packages number @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"Import edge data from a file"},{"location":"en-US/5.supplement/changelog/","text":"Update the content description 3.4.0 (2023-3-11) Breaking Changes: OLAP Python API support New lgraph_import implementation DataX export support Improvements And Bug Fixes: String 4MB support lgraph_result json format update Other bug fix 3.3.4 (2023-1-28) Breaking Changes: None Improvements And Bug Fixes: Fix WAL sync bug Update python rest client Other bug fix 3.3.3 (2022-12-23) Breaking Changes: Improve WAL performance Add English Doc Update JWT security issues Improvements And Bug Fixes: Fix edge constraints issues Add ubuntu docker Use pthread in fulltext Other bug fix 3.3.2 (2022-11-21) Breaking Changes: Add OGM support Improve UT coverage to 87% Use static library for link Improvements And Bug Fixes: Fix python procedure api doc Update docs Add khop procedure Other bug fix 3.3.1 (2022-10-14) Breaking Changes: Refine Graph Analytics Engine Path support in cypher Improvements And Bug Fixes: Fix RWLock Bug Rewrite docs Cleanup Dockerfile 3.3.0 (2022-08-05) Breaking Changes: Add the access permission at the attribute level The db_async option is renamed to durable Improvements And Bug Fixes: Use the gtest framework Fixed crash when graph is empty Use WAL to improve write efficiency 3.2.0 (2022-07-19) Breaking Changes: Edge adds timestamp as a sort key Tweak a few parallel plugin apis Improvements And Bug Fixes: Adding WAL improves write performance and reduces the impact of disk performance on system performance Transaction maxreaders is increased from the default value 126 to 240. More readers can be supported LDBC SNB Audit 2022 version 3.1.1 (2022-07-08) Breaking Changes: Add the Cypher query memory limit. Add edge indexes. Add a full-text index. Optimize the HA boot mode. Graph computing system GeminiLite merged into TuGraph graph computing module. Figure calculation module core code protection. Adaptive optimization of graph computing module IDMapping. Improvements And Bug Fixes: Rectify the problem that cypher query filter is lost. Fix the keyword conflict problem in cypher. Fix the problem of LABEL conflict at point edges. Optimize the cypher query: use the vid search point. Add cpp/java/python rpc client demo. Add prometheus support. Add DGL support. Unify procedure and plugin results. 3.1.0 (2022-01-20) Breaking Changes: Adjust data model (schema) : add primary key; Add the limit of Node Labels on Edge labels. Adjust the configuration file format of the import tool lgraph_import Import tool lgraph_import and export tool lgraph_export support JSON data format Adjust the signatures of schema-related procedures in Cypher Adjust the RPC Client interface Improvements And Bug Fixes: Add the DataX tool to support data import from data sources such as MySQL and JSON procedures for user rights management were added to Cypher Update the development environment Dockerfiles Fix the bug of Call plugins Cypher query language optimization, comprehensive query efficiency increased by 10 times on average 3.0.0 (2021-12-14) Breaking Changes: Change the version update rule: Starting from version 1.0.0 in 2017, update a major version every year Improvements And Bug Fixes: Cypher performance improvement: Introduce Lazy Materialization mechanism to optimize the performance of count DISTINCT Source code organization optimization 1.20.0 (2021-09-17) Breaking Changes: Modified user rights management and added user role management (Note: Data needs to be imported again) Change the server configuration option: log_file is changed to log_dir Improvements And Bug Fixes: Support Cypher functions in handling invalid parameters and variance Support custom delimiters for data import and allow data import to continue when a parser error occurs Add the python and cpp rest client SDKS Optimize the performance of Cypher indefinite expansion and reduce the memory consumption during expansion Restore the backup and reload the plugin function Update the Web version Fix several bugs related to data import, Server, Cypher, etc 1.12.0 (2020-09-07) Breaking Changes: Modify the input format of imported data in batches to separate schema establishment and data import Improvements And Bug Fixes: Rectify memory errors that occur in HA mode Plugins in zip and cpp formats can be uploaded Support clang compilation Cypher supports EXPLAIN and PROFILE 1.11.0 (2020-07-14) Breaking Changes: Modify the internal storage format to optimize read and write performance. The data of the old version needs to be imported again Improvements And Bug Fixes: Complete Cypher functions: Supports LDBC SNB interactive query Supports DeleteLabel and AlterLabel Support Cypher List Comprehension Add the subgraph description field 1.10.0 (2020-06-17) Breaking Changes: Change the BIN type to BLOB type and support BLOBs larger than 32KB Improvements And Bug Fixes: Cypher supports IN {list}, size(string) Use process pooling for the Python plugin to improve performance Online database configuration modification is supported Supports online backup and incremental backup Support IP address whitelists 1.9.0 (2020-03-10) Improvements And Bug Fixes: Complete Cypher functions: Supports LDBC SNB interactive-short queries Add the optimistic_txn option to lgraph_server. If this option is true, cypher will prefered to use multi-writer transaction Allow multiple LGraph instances to share the same data directory (ENABLE_SHARE_DIR) Add 'lgraph_export' tool Redesign the Web interface 1.4.5 (2019-10-15) Breaking Changes: lgraph_server directory, license, and web parameters are changed to lgraph_db, fma.lic, and resouce in the directory where lgraph_server resides by default The default working directory of lgraph_server in -d run mode changes from the root directory to the directory where lgraph_server resides Improvements And Bug Fixes: Allow iterators in lgraph_api to read and write simultaneously. Write operations do not affect the correctness of other iterators Complete functions of Cypher: OPTIONAL MATCH clause, SET statement, DELETE statement, CASE expression, arithmetic expression, WHERE clause support string matching, etc Front-end page improvement: add plugin management page 1.4.4 (2019-08-06) Breaking Changes: The plugin information is stored in the database, so all registered plugins need to be deleted and reloaded Enable the python plugin The python module is renamed lgraph_python, and the LightningGraph class is renamed GraphDB Add support for the cypher WITH statement Improvements And Bug Fixes: Change the CMAKE_BUILD_TYPE default back to Release to solve the performance problem Fix the plugin issue that snapshot cannot take into account in HA mode Performance loss due to TaskTracker optimization (about 2%) Remove the dependency of C++ program (embedded program /plugin) compilation process on python library 1.4.3 Breaking Changes: Check the user name. The value can be 0-9, a-z, A-Z and underscores. Upgrade the license mechanism. You need to update the license Improvements And Bug Fixes: Query and abort tasks Fix the bug that lgraph_server fails to start in windows Allow users to open multiple GraphDBs in embedded mode Visual interface improvement 1.4.2 Breaking Changes: Supports the Cypher query language in HA mode Change the function scope of disable_auth. When the value is true, the server does not perform the permission check. Improvements And Bug Fixes: Restore the front display the 1.4.1 Breaking Changes: Temporarily disable the python plugin function, because an error is reported in snapshot load Improvements And Bug Fixes: Fix the bootstrap problem and update the document 1.4.0 Breaking Changes: The command line parameters of the import tool 'lgraph_import' change, and the description format of edge data in the corresponding config file changes. The data format has changed. The data generated earlier than 1.4.0 needs to be imported again. The method of loading the Plugin changes. You need to manually import the Plugin file and the corresponding REST API changes. The Plugin provides read-only and read-write modes. When specified at load time, the call of read-write Plugin will be copied in HA mode. Improve the way to obtain the server list and leader status in HA mode. The REST header contains correct redirect information. Improvements And Bug Fixes: Fixed the REST server deadlock problem with too many clients and long requests. Fixed some REST API inconsistencies. The cross-domain access to REST API in the power grid scenario is fixed. Reduce the memory used by the import tool.","title":"Changelog"},{"location":"en-US/5.supplement/changelog/#update-the-content-description","text":"","title":"Update the content description"},{"location":"en-US/5.supplement/changelog/#340-2023-3-11","text":"Breaking Changes: OLAP Python API support New lgraph_import implementation DataX export support Improvements And Bug Fixes: String 4MB support lgraph_result json format update Other bug fix","title":"3.4.0 (2023-3-11)"},{"location":"en-US/5.supplement/changelog/#334-2023-1-28","text":"Breaking Changes: None Improvements And Bug Fixes: Fix WAL sync bug Update python rest client Other bug fix","title":"3.3.4 (2023-1-28)"},{"location":"en-US/5.supplement/changelog/#333-2022-12-23","text":"Breaking Changes: Improve WAL performance Add English Doc Update JWT security issues Improvements And Bug Fixes: Fix edge constraints issues Add ubuntu docker Use pthread in fulltext Other bug fix","title":"3.3.3 (2022-12-23)"},{"location":"en-US/5.supplement/changelog/#332-2022-11-21","text":"Breaking Changes: Add OGM support Improve UT coverage to 87% Use static library for link Improvements And Bug Fixes: Fix python procedure api doc Update docs Add khop procedure Other bug fix","title":"3.3.2 (2022-11-21)"},{"location":"en-US/5.supplement/changelog/#331-2022-10-14","text":"Breaking Changes: Refine Graph Analytics Engine Path support in cypher Improvements And Bug Fixes: Fix RWLock Bug Rewrite docs Cleanup Dockerfile","title":"3.3.1 (2022-10-14)"},{"location":"en-US/5.supplement/changelog/#330-2022-08-05","text":"Breaking Changes: Add the access permission at the attribute level The db_async option is renamed to durable Improvements And Bug Fixes: Use the gtest framework Fixed crash when graph is empty Use WAL to improve write efficiency","title":"3.3.0 (2022-08-05)"},{"location":"en-US/5.supplement/changelog/#320-2022-07-19","text":"Breaking Changes: Edge adds timestamp as a sort key Tweak a few parallel plugin apis Improvements And Bug Fixes: Adding WAL improves write performance and reduces the impact of disk performance on system performance Transaction maxreaders is increased from the default value 126 to 240. More readers can be supported LDBC SNB Audit 2022 version","title":"3.2.0 (2022-07-19)"},{"location":"en-US/5.supplement/changelog/#311-2022-07-08","text":"Breaking Changes: Add the Cypher query memory limit. Add edge indexes. Add a full-text index. Optimize the HA boot mode. Graph computing system GeminiLite merged into TuGraph graph computing module. Figure calculation module core code protection. Adaptive optimization of graph computing module IDMapping. Improvements And Bug Fixes: Rectify the problem that cypher query filter is lost. Fix the keyword conflict problem in cypher. Fix the problem of LABEL conflict at point edges. Optimize the cypher query: use the vid search point. Add cpp/java/python rpc client demo. Add prometheus support. Add DGL support. Unify procedure and plugin results.","title":"3.1.1 (2022-07-08)"},{"location":"en-US/5.supplement/changelog/#310-2022-01-20","text":"Breaking Changes: Adjust data model (schema) : add primary key; Add the limit of Node Labels on Edge labels. Adjust the configuration file format of the import tool lgraph_import Import tool lgraph_import and export tool lgraph_export support JSON data format Adjust the signatures of schema-related procedures in Cypher Adjust the RPC Client interface Improvements And Bug Fixes: Add the DataX tool to support data import from data sources such as MySQL and JSON procedures for user rights management were added to Cypher Update the development environment Dockerfiles Fix the bug of Call plugins Cypher query language optimization, comprehensive query efficiency increased by 10 times on average","title":"3.1.0 (2022-01-20)"},{"location":"en-US/5.supplement/changelog/#300-2021-12-14","text":"Breaking Changes: Change the version update rule: Starting from version 1.0.0 in 2017, update a major version every year Improvements And Bug Fixes: Cypher performance improvement: Introduce Lazy Materialization mechanism to optimize the performance of count DISTINCT Source code organization optimization","title":"3.0.0 (2021-12-14)"},{"location":"en-US/5.supplement/changelog/#1200-2021-09-17","text":"Breaking Changes: Modified user rights management and added user role management (Note: Data needs to be imported again) Change the server configuration option: log_file is changed to log_dir Improvements And Bug Fixes: Support Cypher functions in handling invalid parameters and variance Support custom delimiters for data import and allow data import to continue when a parser error occurs Add the python and cpp rest client SDKS Optimize the performance of Cypher indefinite expansion and reduce the memory consumption during expansion Restore the backup and reload the plugin function Update the Web version Fix several bugs related to data import, Server, Cypher, etc","title":"1.20.0 (2021-09-17)"},{"location":"en-US/5.supplement/changelog/#1120-2020-09-07","text":"Breaking Changes: Modify the input format of imported data in batches to separate schema establishment and data import Improvements And Bug Fixes: Rectify memory errors that occur in HA mode Plugins in zip and cpp formats can be uploaded Support clang compilation Cypher supports EXPLAIN and PROFILE","title":"1.12.0 (2020-09-07)"},{"location":"en-US/5.supplement/changelog/#1110-2020-07-14","text":"Breaking Changes: Modify the internal storage format to optimize read and write performance. The data of the old version needs to be imported again Improvements And Bug Fixes: Complete Cypher functions: Supports LDBC SNB interactive query Supports DeleteLabel and AlterLabel Support Cypher List Comprehension Add the subgraph description field","title":"1.11.0 (2020-07-14)"},{"location":"en-US/5.supplement/changelog/#1100-2020-06-17","text":"Breaking Changes: Change the BIN type to BLOB type and support BLOBs larger than 32KB Improvements And Bug Fixes: Cypher supports IN {list}, size(string) Use process pooling for the Python plugin to improve performance Online database configuration modification is supported Supports online backup and incremental backup Support IP address whitelists","title":"1.10.0 (2020-06-17)"},{"location":"en-US/5.supplement/changelog/#190-2020-03-10","text":"Improvements And Bug Fixes: Complete Cypher functions: Supports LDBC SNB interactive-short queries Add the optimistic_txn option to lgraph_server. If this option is true, cypher will prefered to use multi-writer transaction Allow multiple LGraph instances to share the same data directory (ENABLE_SHARE_DIR) Add 'lgraph_export' tool Redesign the Web interface","title":"1.9.0 (2020-03-10)"},{"location":"en-US/5.supplement/changelog/#145-2019-10-15","text":"Breaking Changes: lgraph_server directory, license, and web parameters are changed to lgraph_db, fma.lic, and resouce in the directory where lgraph_server resides by default The default working directory of lgraph_server in -d run mode changes from the root directory to the directory where lgraph_server resides Improvements And Bug Fixes: Allow iterators in lgraph_api to read and write simultaneously. Write operations do not affect the correctness of other iterators Complete functions of Cypher: OPTIONAL MATCH clause, SET statement, DELETE statement, CASE expression, arithmetic expression, WHERE clause support string matching, etc Front-end page improvement: add plugin management page","title":"1.4.5 (2019-10-15)"},{"location":"en-US/5.supplement/changelog/#144-2019-08-06","text":"Breaking Changes: The plugin information is stored in the database, so all registered plugins need to be deleted and reloaded Enable the python plugin The python module is renamed lgraph_python, and the LightningGraph class is renamed GraphDB Add support for the cypher WITH statement Improvements And Bug Fixes: Change the CMAKE_BUILD_TYPE default back to Release to solve the performance problem Fix the plugin issue that snapshot cannot take into account in HA mode Performance loss due to TaskTracker optimization (about 2%) Remove the dependency of C++ program (embedded program /plugin) compilation process on python library","title":"1.4.4 (2019-08-06)"},{"location":"en-US/5.supplement/changelog/#143","text":"Breaking Changes: Check the user name. The value can be 0-9, a-z, A-Z and underscores. Upgrade the license mechanism. You need to update the license Improvements And Bug Fixes: Query and abort tasks Fix the bug that lgraph_server fails to start in windows Allow users to open multiple GraphDBs in embedded mode Visual interface improvement","title":"1.4.3"},{"location":"en-US/5.supplement/changelog/#142","text":"Breaking Changes: Supports the Cypher query language in HA mode Change the function scope of disable_auth. When the value is true, the server does not perform the permission check. Improvements And Bug Fixes: Restore the front display","title":"1.4.2"},{"location":"en-US/5.supplement/changelog/#the-141","text":"Breaking Changes: Temporarily disable the python plugin function, because an error is reported in snapshot load Improvements And Bug Fixes: Fix the bootstrap problem and update the document","title":"the 1.4.1"},{"location":"en-US/5.supplement/changelog/#140","text":"Breaking Changes: The command line parameters of the import tool 'lgraph_import' change, and the description format of edge data in the corresponding config file changes. The data format has changed. The data generated earlier than 1.4.0 needs to be imported again. The method of loading the Plugin changes. You need to manually import the Plugin file and the corresponding REST API changes. The Plugin provides read-only and read-write modes. When specified at load time, the call of read-write Plugin will be copied in HA mode. Improve the way to obtain the server list and leader status in HA mode. The REST header contains correct redirect information. Improvements And Bug Fixes: Fixed the REST server deadlock problem with too many clients and long requests. Fixed some REST API inconsistencies. The cross-domain access to REST API in the power grid scenario is fixed. Reduce the memory used by the import tool.","title":"1.4.0"},{"location":"en-US/6.community/1.contributing/","text":"TuGraph Contribution Guide 0. Preface Thank you for your contribution to TuGraph. We sincerely hope that more students from the community will join in and build a better graph database project together. Before contributing code, please take some time to understand the process of contributing code to TuGraph, and read the \"Contributor License Agreement\". Participating in the contribution is deemed to agree to the above agreement. Individual Contributor License Agreement: [4.individual_cla.md] Corporate Contributor License Agreement: [5.corporate_cla.md] 1. What to contribute We welcome any contribution at any time, whether it's a simple typo fix, bug fix, or new feature addition. Feel free to ask questions or initiate PRs. We also value documentation and integration with other open source projects, and welcome contributions in this regard. For any modification, especially the more complex modification, it is recommended to create an issue and fill it out according to the BUG or PR template. 2. Preparation Before contributing code, you need to understand the use of git tools and the use of GitHub website. 3. Contribute code process 3.1 Submit the issue Whether you are fixing a bug in TuGraph or adding a new feature to TuGraph, before you submit the code, submit an issue on TuGraph's GitHub, describing the problem you want to fix or the function you want to add. There are several advantages to doing this: There will be no duplication of work in conflict with other developers or their plans for the project. TuGraph maintainers will discuss the bugs or new features you mentioned to determine whether the modification is necessary, whether there is room for improvement or a better way. After reaching an agreement, develop and submit the code, reducing the cost of communication between the two parties and reducing the rejection of pull requests. 3.3 Pull the branch All modifications of TuGraph are made on branches. After modification, the pull request is submitted and merged into the Master by the project maintenance personnel after Code Review. Therefore, after the source code steps are described, you need: Download the code to a local directory. In this step, you can choose git or https. In recent years, github has stricter permission requirements. The git approach, for example, requires the more complex ssh key( https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent ). https authentication cannot be performed using the user name and password. git clone https://github.com/ Your account name /tugraph-db Pull branch ready to modify code: git branch add_xxx_feature After executing the above command, your code repository switches to the appropriate branch. Run the following command to view your current branch: git branch -a If you want to switch back to Master, run the git checkout -b master command If you want to switch back to branching, run the following command: git checkout -b \"branchName\" 3.4 Configuring Github Information Run git config --list on your machine to view git's global username and mailbox. Check whether the displayed user.name and user.email match your github user name and email address. If a company has its own gitlab in-house or uses other commercial GitLabs, a mismatch may occur. At this point, you need to set up a separate user name and mailbox for the tugraph-db project. For details about how to set the user name and email address, see github's official documentation. 3.4 Change the code and submit it locally Once you've pulled the branch, you're ready to change the code. Code modification Notes Code style consistency: TuGraph uses cpplint to keep code in the same format, and IDE can use.clang to configure the style. Be sure to check the code style locally before submitting it, or ACI will report an error. Add unit test code: New changes should pass through existing unit tests. New unit tests should be provided to prove that there are bugs in the previous code and that the new code has resolved these bugs. You can run all tests with the following command:./unit_test It can also be run with the help of an IDE. Other precautions Please keep the code you are editing in the original style, especially the space feed, etc. For unnecessary comments, delete them directly. Add comments where logic and functionality are not easily understood. Keep documentation up to date. After modifying the code, run the following command to submit all the changes to the local computer: git commit -am '(feat) Add the xx function 'git commit -am '(fix) fix xx problem' ' Submit the code to the remote repository After the code is committed locally, you can then synchronize the code with the remote repository. Run the following command to submit local changes to github: git push origin \"branchname\" If you were forking earlier, the origin here is pushed to your code repository, not TuGraph's. After the code has been submitted to GitHub, you can send a request to merge your changes into the TuGraph Master. At this point, you need to go to your corresponding repository on GitHub and press the pull request button in the upper right corner. Select the target branch, which is usually the master, and the system will notify the TuGraph staff, who will Review your code, and when it meets the requirements, it will join the main branch and become part of TuGraph. Please note that the CI will be automatically checked, as well as all Commits signing the cla, with green signs on the commits. 3.5 Code Review After you submit your code, your code will be assigned to a maintainer for Review. Please wait patiently. If no one has responded to your submission after two working days, you can leave a message under PR and @ the corresponding person. Comments on code Review will be directly noted to the corresponding PR or Issue. If you find the suggestions reasonable, please update them to your code. 3.6 Merge code into Master After the code Review is approved, the TuGraph maintainer will put it into the Master. During this process, the maintainer may specify a new Reviewer and put forward new comments that need to be revised. Normally this step is omitted, and after the code is merged, you will receive an indication that the merge was successful.","title":"Contributing"},{"location":"en-US/6.community/1.contributing/#tugraph-contribution-guide","text":"","title":"TuGraph Contribution Guide"},{"location":"en-US/6.community/1.contributing/#0-preface","text":"Thank you for your contribution to TuGraph. We sincerely hope that more students from the community will join in and build a better graph database project together. Before contributing code, please take some time to understand the process of contributing code to TuGraph, and read the \"Contributor License Agreement\". Participating in the contribution is deemed to agree to the above agreement. Individual Contributor License Agreement: [4.individual_cla.md] Corporate Contributor License Agreement: [5.corporate_cla.md]","title":"0. Preface"},{"location":"en-US/6.community/1.contributing/#1-what-to-contribute","text":"We welcome any contribution at any time, whether it's a simple typo fix, bug fix, or new feature addition. Feel free to ask questions or initiate PRs. We also value documentation and integration with other open source projects, and welcome contributions in this regard. For any modification, especially the more complex modification, it is recommended to create an issue and fill it out according to the BUG or PR template.","title":"1. What to contribute"},{"location":"en-US/6.community/1.contributing/#2-preparation","text":"Before contributing code, you need to understand the use of git tools and the use of GitHub website.","title":"2. Preparation"},{"location":"en-US/6.community/1.contributing/#3-contribute-code-process","text":"","title":"3. Contribute code process"},{"location":"en-US/6.community/1.contributing/#31-submit-the-issue","text":"Whether you are fixing a bug in TuGraph or adding a new feature to TuGraph, before you submit the code, submit an issue on TuGraph's GitHub, describing the problem you want to fix or the function you want to add. There are several advantages to doing this: There will be no duplication of work in conflict with other developers or their plans for the project. TuGraph maintainers will discuss the bugs or new features you mentioned to determine whether the modification is necessary, whether there is room for improvement or a better way. After reaching an agreement, develop and submit the code, reducing the cost of communication between the two parties and reducing the rejection of pull requests.","title":"3.1 Submit the issue"},{"location":"en-US/6.community/1.contributing/#33-pull-the-branch","text":"All modifications of TuGraph are made on branches. After modification, the pull request is submitted and merged into the Master by the project maintenance personnel after Code Review. Therefore, after the source code steps are described, you need: Download the code to a local directory. In this step, you can choose git or https. In recent years, github has stricter permission requirements. The git approach, for example, requires the more complex ssh key( https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent ). https authentication cannot be performed using the user name and password. git clone https://github.com/ Your account name /tugraph-db Pull branch ready to modify code: git branch add_xxx_feature After executing the above command, your code repository switches to the appropriate branch. Run the following command to view your current branch: git branch -a If you want to switch back to Master, run the git checkout -b master command If you want to switch back to branching, run the following command: git checkout -b \"branchName\"","title":"3.3 Pull the branch"},{"location":"en-US/6.community/1.contributing/#34-configuring-github-information","text":"Run git config --list on your machine to view git's global username and mailbox. Check whether the displayed user.name and user.email match your github user name and email address. If a company has its own gitlab in-house or uses other commercial GitLabs, a mismatch may occur. At this point, you need to set up a separate user name and mailbox for the tugraph-db project. For details about how to set the user name and email address, see github's official documentation.","title":"3.4 Configuring Github Information"},{"location":"en-US/6.community/1.contributing/#34-change-the-code-and-submit-it-locally","text":"Once you've pulled the branch, you're ready to change the code. Code modification Notes Code style consistency: TuGraph uses cpplint to keep code in the same format, and IDE can use.clang to configure the style. Be sure to check the code style locally before submitting it, or ACI will report an error. Add unit test code: New changes should pass through existing unit tests. New unit tests should be provided to prove that there are bugs in the previous code and that the new code has resolved these bugs. You can run all tests with the following command:./unit_test It can also be run with the help of an IDE. Other precautions Please keep the code you are editing in the original style, especially the space feed, etc. For unnecessary comments, delete them directly. Add comments where logic and functionality are not easily understood. Keep documentation up to date. After modifying the code, run the following command to submit all the changes to the local computer: git commit -am '(feat) Add the xx function 'git commit -am '(fix) fix xx problem' ' Submit the code to the remote repository After the code is committed locally, you can then synchronize the code with the remote repository. Run the following command to submit local changes to github: git push origin \"branchname\" If you were forking earlier, the origin here is pushed to your code repository, not TuGraph's. After the code has been submitted to GitHub, you can send a request to merge your changes into the TuGraph Master. At this point, you need to go to your corresponding repository on GitHub and press the pull request button in the upper right corner. Select the target branch, which is usually the master, and the system will notify the TuGraph staff, who will Review your code, and when it meets the requirements, it will join the main branch and become part of TuGraph. Please note that the CI will be automatically checked, as well as all Commits signing the cla, with green signs on the commits.","title":"3.4 Change the code and submit it locally"},{"location":"en-US/6.community/1.contributing/#35-code-review","text":"After you submit your code, your code will be assigned to a maintainer for Review. Please wait patiently. If no one has responded to your submission after two working days, you can leave a message under PR and @ the corresponding person. Comments on code Review will be directly noted to the corresponding PR or Issue. If you find the suggestions reasonable, please update them to your code.","title":"3.5 Code Review"},{"location":"en-US/6.community/1.contributing/#36-merge-code-into-master","text":"After the code Review is approved, the TuGraph maintainer will put it into the Master. During this process, the maintainer may specify a new Reviewer and put forward new comments that need to be revised. Normally this step is omitted, and after the code is merged, you will receive an indication that the merge was successful.","title":"3.6 Merge code into Master"},{"location":"en-US/6.community/2.membership/","text":"TuGraph community roles 0. Preface This document describes the roles of membership in the TuGraph community, the requirements and permissions for each role. 1. Role summary This is the division of roles in the TuGraph community, describing the responsibilities of each role, the requirements to become and remain a role, and the permissions of the corresponding role. Our community is divided into three roles based on the Apache specification: Contributor Maintainer PMC The requirements, responsibilities, and authorities for each role are described below. 2. Contributor 2.1 requirements Successfully submit a PR and merge in any of TuGraph's official projects. 2.2 responsibility Actively respond to issues or PR assigned to you Help reply the issue/pr together and assign the issue to the person in charge of the corresponding module 2.3 permissions Join the TuGraph GitHub organization and become a member of the TuGraph open source community. 3 Maintainer 3.1 requirements The new Committer is recommended by the existing PMC and approved by 2/3 of the votes. The Commiter meets at least one of the following conditions: Been a community member for more than three months More than 10 PR for PMC approve Complete major functions Fixed serious bugs Follow project development and participate in community discussion 3.2 responsibility Community counseling support Actively respond to issues or PR assigned to you The right to vote on major community decisions Review community PR 3.3 permissions Pull Request review permission 4. PMC 4.1 requirements Not open at the moment, if you have a strong desire please contact PMC 4.2 responsibility Actively participate in community discussions and give guidance to major community decisions Responsible for ensuring that the community activities of open source projects are running smoothly 4.3 permissions Pull Request review permission Pull Request approve permission Community role member management","title":"Membership"},{"location":"en-US/6.community/2.membership/#tugraph-community-roles","text":"","title":"TuGraph community roles"},{"location":"en-US/6.community/2.membership/#0-preface","text":"This document describes the roles of membership in the TuGraph community, the requirements and permissions for each role.","title":"0. Preface"},{"location":"en-US/6.community/2.membership/#1-role-summary","text":"This is the division of roles in the TuGraph community, describing the responsibilities of each role, the requirements to become and remain a role, and the permissions of the corresponding role. Our community is divided into three roles based on the Apache specification: Contributor Maintainer PMC The requirements, responsibilities, and authorities for each role are described below.","title":"1. Role summary"},{"location":"en-US/6.community/2.membership/#2-contributor","text":"","title":"2. Contributor"},{"location":"en-US/6.community/2.membership/#21-requirements","text":"Successfully submit a PR and merge in any of TuGraph's official projects.","title":"2.1 requirements"},{"location":"en-US/6.community/2.membership/#22-responsibility","text":"Actively respond to issues or PR assigned to you Help reply the issue/pr together and assign the issue to the person in charge of the corresponding module","title":"2.2 responsibility"},{"location":"en-US/6.community/2.membership/#23-permissions","text":"Join the TuGraph GitHub organization and become a member of the TuGraph open source community.","title":"2.3 permissions"},{"location":"en-US/6.community/2.membership/#3-maintainer","text":"","title":"3 Maintainer"},{"location":"en-US/6.community/2.membership/#31-requirements","text":"The new Committer is recommended by the existing PMC and approved by 2/3 of the votes. The Commiter meets at least one of the following conditions: Been a community member for more than three months More than 10 PR for PMC approve Complete major functions Fixed serious bugs Follow project development and participate in community discussion","title":"3.1 requirements"},{"location":"en-US/6.community/2.membership/#32-responsibility","text":"Community counseling support Actively respond to issues or PR assigned to you The right to vote on major community decisions Review community PR","title":"3.2 responsibility"},{"location":"en-US/6.community/2.membership/#33-permissions","text":"Pull Request review permission","title":"3.3 permissions"},{"location":"en-US/6.community/2.membership/#4-pmc","text":"","title":"4. PMC"},{"location":"en-US/6.community/2.membership/#41-requirements","text":"Not open at the moment, if you have a strong desire please contact PMC","title":"4.1 requirements"},{"location":"en-US/6.community/2.membership/#42-responsibility","text":"Actively participate in community discussions and give guidance to major community decisions Responsible for ensuring that the community activities of open source projects are running smoothly","title":"4.2 responsibility"},{"location":"en-US/6.community/2.membership/#43-permissions","text":"Pull Request review permission Pull Request approve permission Community role member management","title":"4.3 permissions"},{"location":"en-US/6.community/3.roadmap/","text":"TuGraph Open source planning 0. Introduction This document is the future development plan of TuGraph, including functions under development, functions not in the development plan, functions that have been developed but not in the open source version, etc., for developers' reference to avoid repeated development. 1. Plan in detail The serial number Feature Status 1 High availability Enterprise Edition Support 2 Attribute level permissions Enterprise Edition Support 3 Algorithm is rich Enterprise Edition support 30+ algorithms 4 Perfect quality structure on-going 5 APOC Library With partial graph algorithm, continuous improvement 6 DGL Beta integration, testing 7 Java OGM Under development, expected 2022.10 8 The REST interface was migrated from cpprestsdk to brpc In planning, expected 2022.10 9 Multi-graph joint operation interface In the plan, it is expected to be 2022.11 10 The Default Value attribute is supported In the plan, it is expected to be 2022.12 11 TuGraph on cloud In the plan, it is expected to be 2022.12 12 Neo4j and other databases are migrated by one click In the plan, it is expected to be 2023.06 13 ISO GQL In the plan, it is expected to be 2023.12 14 Log system Optimization In the plan 15 Query engine CBO optimization In the plan The above plan is decided by PMC through consultation and may be modified in the future, subject to the actual progress.","title":"Roadmap"},{"location":"en-US/6.community/3.roadmap/#tugraph-open-source-planning","text":"","title":"TuGraph Open source planning"},{"location":"en-US/6.community/3.roadmap/#0-introduction","text":"This document is the future development plan of TuGraph, including functions under development, functions not in the development plan, functions that have been developed but not in the open source version, etc., for developers' reference to avoid repeated development.","title":"0. Introduction"},{"location":"en-US/6.community/3.roadmap/#1-plan-in-detail","text":"The serial number Feature Status 1 High availability Enterprise Edition Support 2 Attribute level permissions Enterprise Edition Support 3 Algorithm is rich Enterprise Edition support 30+ algorithms 4 Perfect quality structure on-going 5 APOC Library With partial graph algorithm, continuous improvement 6 DGL Beta integration, testing 7 Java OGM Under development, expected 2022.10 8 The REST interface was migrated from cpprestsdk to brpc In planning, expected 2022.10 9 Multi-graph joint operation interface In the plan, it is expected to be 2022.11 10 The Default Value attribute is supported In the plan, it is expected to be 2022.12 11 TuGraph on cloud In the plan, it is expected to be 2022.12 12 Neo4j and other databases are migrated by one click In the plan, it is expected to be 2023.06 13 ISO GQL In the plan, it is expected to be 2023.12 14 Log system Optimization In the plan 15 Query engine CBO optimization In the plan The above plan is decided by PMC through consultation and may be modified in the future, subject to the actual progress.","title":"1. Plan in detail"},{"location":"en-US/6.community/4.individual_cla/","text":"Ant_Group_Open_Source_Individual_CLA_English_Chinese_2021 Ant Group Individual Contributor License Agreement \u8682\u8681\u96c6\u56e2 \u4e2a\u4eba\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae Thank you for your interest in contributing documentation and related software code to a project hosted or managed by Ant Group, or any of its affiliates. In order to clarify the intellectual property license granted with Contributions from any person or entity, Ant Group must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This version of the Contributor License Agreement allows an individual to submit Contributions to the applicable project. If you are making a submission on behalf of a legal entity, then you should sign the separation Corporate Contributor License Agreement. \u611f\u8c22\u60a8\u5bf9\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4efb\u4f55\u5173\u8054\u65b9\u4e3b\u529e\u6216\u7ba1\u7406\u7684\u9879\u76ee\u8d21\u732e\u6587\u6863\u548c\u76f8\u5173\u8f6f\u4ef6\u4ee3\u7801\u7684\u5174\u8da3\u3002\u4e3a\u5398\u6e05\u5c31\u4e2a\u4eba\u6216\u5b9e\u4f53\u8d21\u732e\u5185\u5bb9\u800c\u6388\u4e88\u7684\u77e5\u8bc6\u4ea7\u6743\u8bb8\u53ef\uff0c\u8682\u8681\u96c6\u56e2\u5fc5\u987b\u5bf9\u6bcf\u4f4d\u8d21\u732e\u8005\u7b7e\u7f72\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff08\u201cCLA\u201d\uff09\u8fdb\u884c\u5f52\u6863\uff0c\u4ee5\u8bc1\u660e\u5c31\u4ee5\u4e0b\u8bb8\u53ef\u6761\u4ef6\u8fbe\u6210\u7684\u4e00\u81f4\u3002\u6b64\u7248\u672c\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u5141\u8bb8\u4e2a\u4eba\u5411\u76f8\u5e94\u9879\u76ee\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u3002\u5982\u679c\u60a8\u662f\u4ee5\u516c\u53f8\u540d\u4e49\u8fdb\u884c\u63d0\u4ea4\uff0c\u60a8\u5e94\u5f53\u53e6\u884c\u7b7e\u7f72\u4e00\u4efd\u516c\u53f8\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u3002 You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Ant Group. Except for the license granted herein to Ant Group and recipients of documentation and software distributed by Ant Group, You reserve all right, title, and interest in and to Your Contributions. \u5c31\u60a8\u76ee\u524d\u548c\u5c06\u6765\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u60a8\u63a5\u53d7\u5e76\u540c\u610f\u4ee5\u4e0b\u6761\u6b3e\u548c\u6761\u4ef6\u3002\u9664\u4e86\u6839\u636e\u672c\u534f\u8bae\u5411\u8682\u8681\u96c6\u56e2\u548c\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6388\u4e88\u7684\u8bb8\u53ef\uff0c\u60a8\u5bf9\u4e8e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fdd\u7559\u6240\u6709\u6743\u5229\u3001\u6240\u6709\u6743\u548c\u5229\u76ca\u3002 Definitions. \u5b9a\u4e49\u3002 \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Ant Group. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201c\u60a8\u201d\uff08\u6216\u201c\u60a8\u7684\u201d\uff09\u7cfb\u6307\u4e0e\u8682\u8681\u96c6\u56e2\u7b7e\u7f72\u672c\u534f\u8bae\u7684\u8457\u4f5c\u6743\u4eba\u6216\u7ecf\u8457\u4f5c\u6743\u4eba\u6388\u6743\u7684\u6cd5\u5f8b\u5b9e\u4f53\u3002\u5bf9\u4e8e\u6cd5\u5f8b\u5b9e\u4f53\u800c\u8a00\uff0c\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u7684\u5b9e\u4f53\u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u63a7\u5236\u8be5\u5b9e\u4f53\u3001\u53d7\u5176\u63a7\u5236\u6216\u4e0e\u5176\u53d7\u5230\u540c\u4e00\u4e3b\u4f53\u63a7\u5236\u7684\u5b9e\u4f53\u88ab\u89c6\u4e3a\u5355\u4e2a\u8d21\u732e\u8005\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63a7\u5236\u201d \u7cfb\u6307\uff08i\uff09\u901a\u8fc7\u5408\u540c\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u76f4\u63a5\u6216\u95f4\u63a5\u5bf9\u8be5\u5b9e\u4f53\u8fdb\u884c\u6307\u5bfc\u548c\u7ba1\u7406\u7684\u6743\u529b\uff0c\uff08ii\uff09\u6301\u6709\u8be5\u5b9e\u4f53\u767e\u5206\u4e4b\u4e94\u5341\uff0850%\uff09\u6216\u66f4\u591a\u7684\u5df2\u53d1\u884c\u80a1\u4efd\uff0c\u6216\uff08iii\uff09\u95f4\u63a5\u6301\u6709\u8be5\u5b9e\u4f53\u6743\u76ca\u3002 \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Ant Group for inclusion in, or documentation of, any of the products or projects owned or managed by Ant Group (the \"Work\"), including without limitation any Work described in Schedule A. For the purposes of this definition, \"submitted\" means any form of electronic or written communication sent to Ant Group or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Ant Group for the purpose of discussing and improving the Work. \u201c\u8d21\u732e\u5185\u5bb9\u201d\u7cfb\u6307\u7531\u60a8\u6709\u610f\u5730\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u4ee5\u4fbf\u88ab\u5305\u542b\u6216\u8bb0\u8f7d\u5728\u4efb\u4f55\u8682\u8681\u96c6\u56e2\u62e5\u6709\u6216\u7ba1\u7406\u7684\u4ea7\u54c1\u6216\u9879\u76ee\uff08\u201c\u4f5c\u54c1\u201d\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4efb\u4f55\u5728\u9644\u5f55A\u4e2d\u5217\u4e3e\u7684\u4f5c\u54c1\uff09\u4e2d\u7684\u4efb\u4f55\u539f\u521b\u4f5c\u54c1\uff0c\u5305\u62ec\u5bf9\u65e2\u5b58\u4f5c\u54c1\u7684\u4efb\u4f55\u4fee\u6539\u548c\u589e\u52a0\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63d0\u4ea4\u201d\u7cfb\u6307\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4ee3\u8868\u8fdb\u884c\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u7535\u5b50\u6216\u4e66\u9762\u4ea4\u6d41\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u8ba8\u8bba\u548c\u6539\u5584\u4f5c\u54c1\u4e3a\u76ee\u7684\uff0c\u901a\u8fc7\u8682\u8681\u96c6\u56e2\u7ba1\u7406\u7684\uff08\u6216\u4ee5\u8682\u8681\u96c6\u56e2\u540d\u4e49\u7ba1\u7406\u7684\uff09\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u3001\u6e90\u4ee3\u7801\u63a7\u5236\u7cfb\u7edf\u548c\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u8fdb\u884c\u7684\u4ea4\u6d41\u3002 Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. \u8457\u4f5c\u6743\u8bb8\u53ef\u7684\u6388\u4e88\u3002\u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\u7684\u8457\u4f5c\u6743\u8bb8\u53ef\uff0c\u4ee5\u590d\u5236\u3001\u884d\u751f\u3001\u516c\u5f00\u5c55\u793a\u3001\u516c\u5f00\u6267\u884c\u3001\u8f6c\u6388\u6743\u548c\u53d1\u5e03\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u548c\u8be5\u7b49\u884d\u751f\u4f5c\u54c1\u3002 Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. \u4e13\u5229\u8bb8\u53ef\u7684\u6388\u4e88\u3002 \u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\uff08\u672c\u8282\u89c4\u5b9a\u7684\u60c5\u5f62\u9664\u5916\uff09\u7684\u4e13\u5229\u8bb8\u53ef\uff0c\u4ee5\u5f00\u53d1\u3001\u5229\u7528\u3001\u8981\u7ea6\u51fa\u552e\u3001\u51fa\u552e\u3001\u5bfc\u5165\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8f6c\u8ba9\u4f5c\u54c1\uff0c\u4f46\u8be5\u8bb8\u53ef\u4ec5\u9002\u7528\u4e8e\u60a8\u6709\u6743\u8bb8\u53ef\u7684\uff0c\u4e14\u5fc5\u7136\u4f1a\u88ab\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fb5\u6743\uff08\u8d21\u732e\u5185\u5bb9\u5355\u72ec\u6784\u6210\u4fb5\u6743\u3001\u6216\u4e0e\u8d21\u732e\u5185\u5bb9\u7684\u76f8\u5173\u4f5c\u54c1\u4e00\u540c\u6784\u6210\u4fb5\u6743\uff09\u7684\u4e13\u5229\u7533\u8bf7\u8303\u56f4\u3002\u5982\u679c\u4efb\u4f55\u5b9e\u4f53\u9488\u5bf9\u60a8\u6216\u5176\u4ed6\u5b9e\u4f53\u63d0\u8d77\u4e13\u5229\u8bc9\u8bbc\uff08\u5305\u62ec\u8bc9\u8bbc\u4e2d\u7684\u4ea4\u53c9\u8bf7\u6c42\u6216\u53cd\u8bc9\uff09\uff0c\u4e3b\u5f20\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff08\u6216\u60a8\u53c2\u4e0e\u8d21\u732e\u7684\u4f5c\u54c1\uff09\u9020\u6210\u4e86\u76f4\u63a5\u6027\u6216\u8f85\u52a9\u6027\u7684\u4e13\u5229\u4fb5\u6743\uff0c\u5219\u4efb\u4f55\u6839\u636e\u672c\u534f\u8bae\u9488\u5bf9\u8be5\u8d21\u732e\u5185\u5bb9\u6216\u4f5c\u54c1\u6388\u4e88\u8be5\u5b9e\u4f53\u7684\u4e13\u5229\u8bb8\u53ef\u5e94\u5f53\u5728\u8d77\u8bc9\u4e4b\u65e5\u7ec8\u6b62\u3002 You represent that you are legally entitled to grant the above license. \u60a8\u4fdd\u8bc1\u60a8\u4f9d\u6cd5\u6709\u6743\u6388\u4e88\u4e0a\u8ff0\u8bb8\u53ef\u3002 You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. \u60a8\u4fdd\u8bc1\u60a8\u6240\u6709\u7684\u8d21\u732e\u5185\u5bb9\u5747\u4e3a\u60a8\u7684\u539f\u521b\u4f5c\u54c1\uff08\u5173\u4e8e\u4e3a\u4ed6\u4eba\u63d0\u4ea4\u4f5c\u54c1\u7684\u89c4\u5b9a\uff0c\u53ef\u53c2\u89c1\u7b2c7\u8282\uff09\u3002\u60a8\u4fdd\u8bc1\u60a8\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4efb\u4f55\u7b2c\u4e09\u65b9\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u6216\u5546\u6807\uff09\u7684\u5168\u90e8\u7ec6\u8282\uff0c\u53ea\u8981\u8be5\u7b49\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\u4e3a\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u4e14\u4e0e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u7684\u4efb\u4f55\u90e8\u5206\u76f8\u5173\u3002 You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. \u5728\u60a8\u81ea\u613f\u63d0\u4f9b\u652f\u6301\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u60a8\u65e0\u9700\u5bf9\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u63d0\u4f9b\u652f\u6301\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u514d\u8d39\u652f\u6301\u6216\u6536\u8d39\u652f\u6301\uff0c\u4e5f\u53ef\u4ee5\u5b8c\u5168\u4e0d\u63d0\u4f9b\u652f\u6301\u3002\u9664\u975e\u9002\u7528\u6cd5\u5f8b\u53e6\u6709\u89c4\u5b9a\u6216\u53e6\u6709\u4e66\u9762\u7ea6\u5b9a\uff0c\u60a8\u201c\u6309\u7167\u73b0\u72b6\u201d\u63d0\u4f9b\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u800c\u4e0d\u5bf9\u5176\u63d0\u4f9b\u4efb\u4f55\u7c7b\u578b\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\uff0c\u65e0\u8bba\u660e\u793a\u8fd8\u662f\u9ed8\u793a\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u4efb\u4f55\u7279\u5b9a\u76ee\u7684\u5bf9\u6240\u6709\u6743\u3001\u65e0\u4fb5\u6743\u3001\u9002\u9500\u6027\u6216\u9002\u5f53\u6027\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\u3002 Should You wish to submit work that is not Your original creation, You may submit it to Ant Group separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". \u5982\u679c\u60a8\u5e0c\u671b\u63d0\u4ea4\u5e76\u975e\u60a8\u539f\u521b\u7684\u4f5c\u54c1\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u8d21\u732e\u5185\u5bb9\u4e4b\u5916\u5355\u72ec\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u6807\u6ce8\u5173\u4e8e\u5176\u6765\u6e90\u548c\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u7684\u4efb\u4f55\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u3001\u5546\u6807\u548c\u8bb8\u53ef\u534f\u8bae\uff09\u7684\u5b8c\u6574\u4fe1\u606f\uff0c\u5e76\u4ee5\u663e\u8457\u65b9\u5f0f\u6807\u660e\u8be5\u4f5c\u54c1\u5c5e\u4e8e\u201c\u4ee5\u7b2c\u4e09\u65b9\u540d\u4e49\u63d0\u4ea4\uff1a\u3010\u586b\u5199\u59d3\u540d\u3011\u201d\u3002 You agree to notify Ant Group of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect. \u60a8\u540c\u610f\u5728\u60a8\u83b7\u6089\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u4e0a\u8ff0\u4fdd\u8bc1\u5728\u4efb\u4f55\u65b9\u9762\u4e0d\u51c6\u786e\u7684\u4e8b\u5b9e\u6216\u60c5\u51b5\u4e4b\u65f6\u901a\u77e5\u8682\u8681\u96c6\u56e2\u3002 This Agreement will be governed by and construed in accordance with the laws of the People's Republic of China excluding that body of laws known as conflict of laws. The parties expressly agree that the United Nations Convention on Contracts for the International Sale of Goods will not apply. Any legal action or proceeding arising under this Agreement will be brought exclusively in the courts located in Hangzhou, China, and the parties hereby irrevocably consent to the personal jurisdiction and venue therein. \u672c\u534f\u8bae\u53d7\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6cd5\u5f8b\u7ba1\u8f96\uff0c\u5e76\u4f9d\u636e\u5176\u8fdb\u884c\u89e3\u91ca\uff0c\u4f46\u51b2\u7a81\u6cd5\u89c4\u5219\u9664\u5916\u3002\u534f\u8bae\u5404\u65b9\u660e\u786e\u540c\u610f\u6392\u9664\u300a\u8054\u5408\u56fd\u56fd\u9645\u8d27\u7269\u9500\u552e\u5408\u540c\u516c\u7ea6\u300b\u7684\u9002\u7528\u3002\u4efb\u4f55\u7531\u672c\u534f\u8bae\u4ea7\u751f\u7684\u6cd5\u5f8b\u8bc9\u8bbc\u6216\u7a0b\u5e8f\u5747\u5e94\u6392\u4ed6\u6027\u5730\u63d0\u4ea4\u81f3\u4e2d\u56fd\u676d\u5dde\u7684\u6cd5\u9662\u8fdb\u884c\u5ba1\u7406\uff0c\u4e14\u5404\u65b9\u5728\u6b64\u4e0d\u53ef\u64a4\u9500\u5730\u540c\u610f\u8be5\u7b49\u5173\u4e8e\u5c5e\u4eba\u7ba1\u8f96\u548c\u6cd5\u9662\u5730\u7684\u5b89\u6392\u3002 For your reading convenience, this Agreement is written in parallel English and Chinese sections. To the extent there is a conflict between the English and Chinese sections, the English sections shall govern. \u4e3a\u4e86\u60a8\u7684\u9605\u8bfb\u65b9\u4fbf\uff0c\u672c\u534f\u8bae\u540c\u65f6\u63d0\u4f9b\u4e86\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u3002\u5982\u679c\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u6709\u77db\u76fe\uff0c\u5219\u4ee5\u82f1\u6587\u6bb5\u843d\u4e3a\u51c6\u3002 Please sign\u8bf7\u7b7e\u7f72: _ _ _ _ _ _ Date\u65e5\u671f: _ ___ Full name\u5168\u540d: _ _ _ _ _ _ _ ____ Mailing Address\u4fe1\u4ef6\u5730\u5740: _ _ _ _ _ _ ______ Telephone\u7535\u8bdd: _ _ _ _ _ _ _ ____ E-Mail\u7535\u5b50\u90ae\u7bb1: _ _ _ _ _ _ _ _____ Schedule A\u9644\u5f55A: Description of Initial Contribution: \u63cf\u8ff0\u521d\u59cb\u8d21\u732e\u5185\u5bb9\uff1a","title":"Individual CLA"},{"location":"en-US/6.community/5.corporate_cla/","text":"Ant_Group_Open_Source_Corporate_CLA_English_Chinese_2021 Ant Group Corporate Contributor License Agreement \u8682\u8681\u96c6\u56e2 \u516c\u53f8\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae Thank you for your interest in contributing documentation and related software code to a project hosted or managed by Ant Group, or any of its affiliates. In order to clarify the intellectual property license granted with Contributions from any person or entity, Ant Group must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This version of the Contributor License Agreement allows a legal entity (the \"Corporation\") to submit Contributions to the applicable project. If you are an individual making a submission on your own behalf, then you should sign the separation Individual Contributor License Agreement. \u611f\u8c22\u60a8\u5bf9\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4efb\u4f55\u5173\u8054\u65b9\u4e3b\u529e\u6216\u7ba1\u7406\u7684\u9879\u76ee\u8d21\u732e\u6587\u6863\u548c\u76f8\u5173\u8f6f\u4ef6\u4ee3\u7801\u7684\u5174\u8da3\u3002\u4e3a\u5398\u6e05\u5c31\u4e2a\u4eba\u6216\u5b9e\u4f53\u8d21\u732e\u5185\u5bb9\u800c\u6388\u4e88\u7684\u77e5\u8bc6\u4ea7\u6743\u8bb8\u53ef\uff0c\u8682\u8681\u96c6\u56e2\u5fc5\u987b\u5bf9\u6bcf\u4f4d\u8d21\u732e\u8005\u7b7e\u7f72\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff08\u201cCLA\u201d\uff09\u8fdb\u884c\u5f52\u6863\uff0c\u4ee5\u8bc1\u660e\u5c31\u4ee5\u4e0b\u8bb8\u53ef\u6761\u4ef6\u8fbe\u6210\u7684\u4e00\u81f4\u3002\u6b64\u7248\u672c\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u5141\u8bb8\u6cd5\u4eba\u5b9e\u4f53\uff08\u201c\u516c\u53f8\u201d\uff09\u5411\u76f8\u5e94\u9879\u76ee\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u3002\u5982\u679c\u60a8\u662f\u4ee5\u81ea\u8eab\u540d\u4e49\u8fdb\u884c\u63d0\u4ea4\u7684\u4e2a\u4eba\uff0c\u60a8\u5e94\u5f53\u53e6\u884c\u7b7e\u7f72\u4e00\u4efd\u4e2a\u4eba\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u3002 You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Ant Group. Except for the license granted herein to Ant Group and recipients of documentation and software distributed by Ant Group, You reserve all right, title, and interest in and to Your Contributions. \u5c31\u60a8\u76ee\u524d\u548c\u5c06\u6765\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u60a8\u63a5\u53d7\u5e76\u540c\u610f\u4ee5\u4e0b\u6761\u6b3e\u548c\u6761\u4ef6\u3002\u9664\u4e86\u6839\u636e\u672c\u534f\u8bae\u5411\u8682\u8681\u96c6\u56e2\u548c\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6388\u4e88\u7684\u8bb8\u53ef\uff0c\u60a8\u5bf9\u4e8e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fdd\u7559\u6240\u6709\u6743\u5229\u3001\u6240\u6709\u6743\u548c\u5229\u76ca\u3002 Definitions. \u5b9a\u4e49\u3002 \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Ant Group. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201c\u60a8\u201d\uff08\u6216\u201c\u60a8\u7684\u201d\uff09\u7cfb\u6307\u4e0e\u8682\u8681\u96c6\u56e2\u7b7e\u7f72\u672c\u534f\u8bae\u7684\u8457\u4f5c\u6743\u4eba\u6216\u7ecf\u8457\u4f5c\u6743\u4eba\u6388\u6743\u7684\u6cd5\u5f8b\u5b9e\u4f53\u3002\u5bf9\u4e8e\u6cd5\u5f8b\u5b9e\u4f53\u800c\u8a00\uff0c\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u7684\u5b9e\u4f53\u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u63a7\u5236\u8be5\u5b9e\u4f53\u3001\u53d7\u5176\u63a7\u5236\u6216\u4e0e\u5176\u53d7\u5230\u540c\u4e00\u4e3b\u4f53\u63a7\u5236\u7684\u5b9e\u4f53\u88ab\u89c6\u4e3a\u5355\u4e2a\u8d21\u732e\u8005\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63a7\u5236\u201d \u7cfb\u6307\uff08i\uff09\u901a\u8fc7\u5408\u540c\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u76f4\u63a5\u6216\u95f4\u63a5\u5bf9\u8be5\u5b9e\u4f53\u8fdb\u884c\u6307\u5bfc\u548c\u7ba1\u7406\u7684\u6743\u529b\uff0c\uff08ii\uff09\u6301\u6709\u8be5\u5b9e\u4f53\u767e\u5206\u4e4b\u4e94\u5341\uff0850%\uff09\u6216\u66f4\u591a\u7684\u5df2\u53d1\u884c\u80a1\u4efd\uff0c\u6216\uff08iii\uff09\u95f4\u63a5\u6301\u6709\u8be5\u5b9e\u4f53\u6743\u76ca\u3002 \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Ant Group for inclusion in, or documentation of, any of the products or projects owned or managed by Ant Group (the \"Work\"), including without limitation any Work described in Schedule B. For the purposes of this definition, \"submitted\" means any form of electronic or written communication sent to Ant Group or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Ant Group for the purpose of discussing and improving the Work. \u201c\u8d21\u732e\u5185\u5bb9\u201d\u7cfb\u6307\u7531\u60a8\u6709\u610f\u5730\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u4ee5\u4fbf\u88ab\u5305\u542b\u6216\u8bb0\u8f7d\u5728\u4efb\u4f55\u8682\u8681\u96c6\u56e2\u62e5\u6709\u6216\u7ba1\u7406\u7684\u4ea7\u54c1\u6216\u9879\u76ee\uff08\u201c\u4f5c\u54c1\u201d\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4efb\u4f55\u5728\u9644\u5f55 B \u4e2d\u5217\u4e3e\u7684\u4f5c\u54c1\uff09\u4e2d\u7684\u4efb\u4f55\u539f\u521b\u4f5c\u54c1\uff0c\u5305\u62ec\u5bf9\u65e2\u5b58\u4f5c\u54c1\u7684\u4efb\u4f55\u4fee\u6539\u548c\u589e\u52a0\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63d0\u4ea4\u201d\u7cfb\u6307\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4ee3\u8868\u8fdb\u884c\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u7535\u5b50\u6216\u4e66\u9762\u4ea4\u6d41\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u8ba8\u8bba\u548c\u6539\u5584\u4f5c\u54c1\u4e3a\u76ee\u7684\uff0c\u901a\u8fc7\u8682\u8681\u96c6\u56e2\u7ba1\u7406\u7684\uff08\u6216\u4ee5\u8682\u8681\u96c6\u56e2\u540d\u4e49\u7ba1\u7406\u7684\uff09\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u3001\u6e90\u4ee3\u7801\u63a7\u5236\u7cfb\u7edf\u548c\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u8fdb\u884c\u7684\u4ea4\u6d41\u3002 Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. \u8457\u4f5c\u6743\u8bb8\u53ef\u7684\u6388\u4e88\u3002\u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\u7684\u8457\u4f5c\u6743\u8bb8\u53ef\uff0c\u4ee5\u590d\u5236\u3001\u884d\u751f\u3001\u516c\u5f00\u5c55\u793a\u3001\u516c\u5f00\u6267\u884c\u3001\u8f6c\u6388\u6743\u548c\u53d1\u5e03\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u548c\u8be5\u7b49\u884d\u751f\u4f5c\u54c1\u3002 Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. \u4e13\u5229\u8bb8\u53ef\u7684\u6388\u4e88\u3002 \u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\uff08\u672c\u8282\u89c4\u5b9a\u7684\u60c5\u5f62\u9664\u5916\uff09\u7684\u4e13\u5229\u8bb8\u53ef\uff0c\u4ee5\u5f00\u53d1\u3001\u5229\u7528\u3001\u8981\u7ea6\u51fa\u552e\u3001\u51fa\u552e\u3001\u5bfc\u5165\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8f6c\u8ba9\u4f5c\u54c1\uff0c\u4f46\u8be5\u8bb8\u53ef\u4ec5\u9002\u7528\u4e8e\u60a8\u6709\u6743\u8bb8\u53ef\u7684\uff0c\u4e14\u5fc5\u7136\u4f1a\u88ab\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fb5\u6743\uff08\u8d21\u732e\u5185\u5bb9\u5355\u72ec\u6784\u6210\u4fb5\u6743\u3001\u6216\u4e0e\u8d21\u732e\u5185\u5bb9\u7684\u76f8\u5173\u4f5c\u54c1\u4e00\u540c\u6784\u6210\u4fb5\u6743\uff09\u7684\u4e13\u5229\u7533\u8bf7\u8303\u56f4\u3002\u5982\u679c\u4efb\u4f55\u5b9e\u4f53\u9488\u5bf9\u60a8\u6216\u5176\u4ed6\u5b9e\u4f53\u63d0\u8d77\u4e13\u5229\u8bc9\u8bbc\uff08\u5305\u62ec\u8bc9\u8bbc\u4e2d\u7684\u4ea4\u53c9\u8bf7\u6c42\u6216\u53cd\u8bc9\uff09\uff0c\u4e3b\u5f20\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff08\u6216\u60a8\u53c2\u4e0e\u8d21\u732e\u7684\u4f5c\u54c1\uff09\u9020\u6210\u4e86\u76f4\u63a5\u6027\u6216\u8f85\u52a9\u6027\u7684\u4e13\u5229\u4fb5\u6743\uff0c\u5219\u4efb\u4f55\u6839\u636e\u672c\u534f\u8bae\u9488\u5bf9\u8be5\u8d21\u732e\u5185\u5bb9\u6216\u4f5c\u54c1\u6388\u4e88\u8be5\u5b9e\u4f53\u7684\u4e13\u5229\u8bb8\u53ef\u5e94\u5f53\u5728\u8d77\u8bc9\u4e4b\u65e5\u7ec8\u6b62\u3002 You represent that you are legally entitled to grant the above license. You represent further that each employee of the Corporation designated on Schedule A below (or in a subsequent written modification to that Schedule) is authorized to submit Contributions on behalf of the Corporation. \u60a8\u4fdd\u8bc1\u60a8\u4f9d\u6cd5\u6709\u6743\u6388\u4e88\u4e0a\u8ff0\u8bb8\u53ef\u3002\u60a8\u8fdb\u4e00\u6b65\u4fdd\u8bc1\u4e0b\u6587\u9644\u8868 A\uff08\u8be5\u9644\u8868\u53ef\u901a\u8fc7\u4e66\u9762\u65b9\u5f0f\u8fdb\u884c\u540e\u7eed\u66f4\u6539\uff09\u6240\u6307\u5b9a\u7684\u4efb\u610f\u516c\u53f8\u5458\u5de5\u5747\u6709\u6743\u4ee5\u516c\u53f8\u540d\u4e49\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u3002 You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. \u60a8\u4fdd\u8bc1\u60a8\u6240\u6709\u7684\u8d21\u732e\u5185\u5bb9\u5747\u4e3a\u60a8\u7684\u539f\u521b\u4f5c\u54c1\uff08\u5173\u4e8e\u4e3a\u4ed6\u4eba\u63d0\u4ea4\u4f5c\u54c1\u7684\u89c4\u5b9a\uff0c\u53ef\u53c2\u89c1\u7b2c 7 \u8282\uff09\u3002\u60a8\u4fdd\u8bc1\u60a8\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4efb\u4f55\u7b2c\u4e09\u65b9\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u6216\u5546\u6807\uff09\u7684\u5168\u90e8\u7ec6\u8282\uff0c\u53ea\u8981\u8be5\u7b49\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\u4e3a\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u4e14\u4e0e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u7684\u4efb\u4f55\u90e8\u5206\u76f8\u5173\u3002 You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. \u5728\u60a8\u81ea\u613f\u63d0\u4f9b\u652f\u6301\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u60a8\u65e0\u9700\u5bf9\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u63d0\u4f9b\u652f\u6301\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u514d\u8d39\u652f\u6301\u6216\u6536\u8d39\u652f\u6301\uff0c\u4e5f\u53ef\u4ee5\u5b8c\u5168\u4e0d\u63d0\u4f9b\u652f\u6301\u3002\u9664\u975e\u9002\u7528\u6cd5\u5f8b\u53e6\u6709\u89c4\u5b9a\u6216\u53e6\u6709\u4e66\u9762\u7ea6\u5b9a\uff0c\u60a8\u201c\u6309\u7167\u73b0\u72b6\u201d\u63d0\u4f9b\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u800c\u4e0d\u5bf9\u5176\u63d0\u4f9b\u4efb\u4f55\u7c7b\u578b\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\uff0c\u65e0\u8bba\u660e\u793a\u8fd8\u662f\u9ed8\u793a\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u4efb\u4f55\u7279\u5b9a\u76ee\u7684\u5bf9\u6240\u6709\u6743\u3001\u65e0\u4fb5\u6743\u3001\u9002\u9500\u6027\u6216\u9002\u5f53\u6027\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\u3002 Should You wish to submit work that is not Your original creation, You may submit it to Ant Group separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". \u5982\u679c\u60a8\u5e0c\u671b\u63d0\u4ea4\u5e76\u975e\u60a8\u539f\u521b\u7684\u4f5c\u54c1\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u8d21\u732e\u5185\u5bb9\u4e4b\u5916\u5355\u72ec\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u6807\u6ce8\u5173\u4e8e\u5176\u6765\u6e90\u548c\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u7684\u4efb\u4f55\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u3001\u5546\u6807\u548c\u8bb8\u53ef\u534f\u8bae\uff09\u7684\u5b8c\u6574\u4fe1\u606f\uff0c\u5e76\u4ee5\u663e\u8457\u65b9\u5f0f\u6807\u660e\u8be5\u4f5c\u54c1\u5c5e\u4e8e\u201c\u4ee5\u7b2c\u4e09\u65b9\u540d\u4e49\u63d0\u4ea4\uff1a\u3010\u586b\u5199\u59d3\u540d\u3011\u201d\u3002 You agree to notify Ant Group of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect. \u60a8\u540c\u610f\u5728\u60a8\u83b7\u6089\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u4e0a\u8ff0\u4fdd\u8bc1\u5728\u4efb\u4f55\u65b9\u9762\u4e0d\u51c6\u786e\u7684\u4e8b\u5b9e\u6216\u60c5\u51b5\u4e4b\u65f6\u901a\u77e5\u8682\u8681\u96c6\u56e2\u3002 This Agreement will be governed by and construed in accordance with the laws of the People's Republic of China excluding that body of laws known as conflict of laws. The parties expressly agree that the United Nations Convention on Contracts for the International Sale of Goods will not apply. Any legal action or proceeding arising under this Agreement will be brought exclusively in the courts located in Hangzhou, China, and the parties hereby irrevocably consent to the personal jurisdiction and venue therein. \u672c\u534f\u8bae\u53d7\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6cd5\u5f8b\u7ba1\u8f96\uff0c\u5e76\u4f9d\u636e\u5176\u8fdb\u884c\u89e3\u91ca\uff0c\u4f46\u51b2\u7a81\u6cd5\u89c4\u5219\u9664\u5916\u3002\u534f\u8bae\u5404\u65b9\u660e\u786e\u540c\u610f\u6392\u9664\u300a\u8054\u5408\u56fd\u56fd\u9645\u8d27\u7269\u9500\u552e\u5408\u540c\u516c\u7ea6\u300b\u7684\u9002\u7528\u3002\u4efb\u4f55\u7531\u672c\u534f\u8bae\u4ea7\u751f\u7684\u6cd5\u5f8b\u8bc9\u8bbc\u6216\u7a0b\u5e8f\u5747\u5e94\u6392\u4ed6\u6027\u5730\u63d0\u4ea4\u81f3\u4e2d\u56fd\u676d\u5dde\u7684\u6cd5\u9662\u8fdb\u884c\u5ba1\u7406\uff0c\u4e14\u5404\u65b9\u5728\u6b64\u4e0d\u53ef\u64a4\u9500\u5730\u540c\u610f\u8be5\u7b49\u5173\u4e8e\u5c5e\u4eba\u7ba1\u8f96\u548c\u6cd5\u9662\u5730\u7684\u5b89\u6392\u3002 For your reading convenience, this Agreement is written in parallel English and Chinese sections. To the extent there is a conflict between the English and Chinese sections, the English sections shall govern. \u4e3a\u4e86\u60a8\u7684\u9605\u8bfb\u65b9\u4fbf\uff0c\u672c\u534f\u8bae\u540c\u65f6\u63d0\u4f9b\u4e86\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u3002\u5982\u679c\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u6709\u77db\u76fe\uff0c\u5219\u4ee5\u82f1\u6587\u6bb5\u843d\u4e3a\u51c6\u3002 Please sign \u8bf7\u7b7e\u7f72: ** **** ** __ ** **** ** Date \u65e5\u671f: * *____** Company Name \u516c\u53f8\u540d\u79f0: *** ** ** ____ ** ** ** * Full name \u5168\u540d: ***** ** **** _ **** ** **** * Title \u804c\u52a1: ***** ** **** _ **** ** **** * Mailing Address \u4fe1\u4ef6\u5730\u5740: *** ** ** ____ ** ** ** * Country \u56fd\u5bb6: ***** ** **** _ **** ** **** * Telephone \u7535\u8bdd: ***** ** **** _ **** ** **** * E-Mail \u7535\u5b50\u90ae\u7bb1: ***** ** **** __ **** ** **** * Schedule A \u9644\u5f55 A: Please provide an initial list of designated employees authorized to submit Contributions on behalf of the Corporation: \u8bf7\u63d0\u4f9b\u4e00\u4efd\u6709\u6743\u4ee5\u516c\u53f8\u540d\u4e49\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u7684\u6307\u5b9a\u5458\u5de5\u7684\u521d\u59cb\u540d\u5355\uff1a Schedule B \u9644\u5f55 B: Description of Initial Contribution: \u63cf\u8ff0\u521d\u59cb\u8d21\u732e\u5185\u5bb9\uff1a","title":"Corporate CLA"},{"location":"zh-CN/1.guide/1.what-is-graph/","text":"\u4ec0\u4e48\u662f\u56fe \u6211\u4eec\u4eca\u5929\u4ecb\u7ecd\u7684\u56fe\uff0c\u5b83\u65e2\u4e0d\u662f\u56fe\u50cf\u7684\u56fe\uff0c\u4e5f\u4e0d\u662f\u56fe\u5f62\u7684\u56fe\uff0c\u5b83\u662f\u6570\u5b66\u4e2d\u7684\u4e00\u4e2a\u95e8\u7c7b\u53eb\u505a\u56fe\u8bba\uff0c\u8fd9\u91cc\u7684\u56fe\u6307\u7684\u662f\u56fe\u8bba\u7684\u56fe\u3002\u6211\u4eec\u5728\u5c4f\u5e55\u4e0a\u53ef\u4ee5\u770b\u5230\u5de6\u53f3\u6709\u4e24\u4e2a\u56fe\uff0c\u5b83\u8868\u793a\u7684\u662f\u4e8b\u7269\u548c\u5b83\u4eec\u7684\u5173\u7cfb\u3002\u6211\u4eec\u7528\u4e00\u79cd\u5f62\u5f0f\u628a\u5b83\u62bd\u8c61\u51fa\u6765\uff0c\u628a\u8fd9\u6837\u7684\u4e00\u79cd\u5f62\u5f0f\u53eb\u505a\u56fe\u3002 \u56fe\u7684\u57fa\u672c\u5143\u7d20\u662f\u70b9\u548c\u8fb9\uff0c\u70b9\u5c31\u662f\u8868\u793a\u8fd9\u4e2a\u4e8b\u7269\uff0c\u8868\u793a\u8fd9\u4e2a\u5b9e\u4f53\uff0c\u800c\u8fb9\u5c31\u8868\u793a\u4ed6\u4eec\u4e4b\u95f4\u6709\u4e00\u5b9a\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u770b\u5230\u5de6\u8fb9\u7684\u8fd9\u5f20\u56fe\uff0c\u5b83\u7684\u70b9\u6709\u516c\u53f8\uff0c\u6709\u5458\u5de5\uff0c\u8fd8\u6709\u9879\u76ee\u3002\u5b83\u4eec\u7684\u8fb9\u662f\u4ec0\u4e48\u5462\uff1f\u516c\u53f8\u548c\u5458\u5de5\u4e4b\u95f4\u662f\u96c7\u4f63\u5173\u7cfb\uff0c\u5458\u5de5\u548c\u5458\u5de5\u4e4b\u95f4\u53ef\u4ee5\u6709\u597d\u53cb\u5173\u7cfb\uff0c\u9879\u76ee\u548c\u5458\u5de5\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u6709\u53c2\u4e0e\u5173\u7cfb\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u7528\u56fe\u7684\u65b9\u5f0f\u6765\u628a\u4e8b\u7269\u548c\u5b83\u4eec\u7684\u5173\u7cfb\u62bd\u8c61\u51fa\u6765\u3002 \u53f3\u8fb9\u7684\u56fe\u662f\u4e00\u4e2a\u91d1\u878d\u4ea4\u6613\u56fe\u793a\u610f\u3002\u6211\u4eec\u6bcf\u4e2a\u4eba\u90fd\u6709\u94f6\u884c\u8d26\u53f7\uff0c\u6211\u4eec\u7684\u94f6\u884c\u8d26\u53f7\u505a\u4e00\u7b14\u6d88\u8d39\u6216\u8005\u505a\u4e00\u7b14\u8f6c\u8d26\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8d26\u53f7\u5c31\u662f\u56fe\u4e0a\u7684\u70b9\uff0c\u800c\u8fd9\u4e2a\u8fb9\u5462\uff0c\u53ef\u4ee5\u8868\u793a\u6211\u4eec\u4e4b\u95f4\u6709\u8fd9\u6837\u4e00\u79cd\u8f6c\u8d26\u5173\u7cfb\u3002 \u4ece\u8fd9\u4e2a\u4f8b\u5b50\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u8fb9\u53ef\u4ee5\u9644\u7740\u4fe1\u606f\uff0c\u70b9\u4e5f\u53ef\u4ee5\u9644\u7740\u4fe1\u606f\u3002\u70b9\u4e0a\u53ef\u4ee5\u9644\u7740\u8fd9\u4e2a\u8d26\u53f7\u5728\u54ea\u4e2a\u94f6\u884c\uff0c\u8d26\u53f7\u662f\u4ec0\u4e48\u3002\u8fb9\u4e0a\u53ef\u4ee5\u9644\u7740\u4ea4\u6613\u7684\u91d1\u989d\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u7684\u4ea4\u6613\u91d1\u989d\u5f88\u5927\uff0c\u8868\u793a\u9700\u8981\u7279\u522b\u7684\u5173\u6ce8\u3002\u8fd9\u4e2a\u8fb9\u4e0a\u53ef\u80fd\u4e0d\u4e00\u5b9a\u662f\u67d0\u4e00\u6b21\u8f6c\u8d26\u7684\u91d1\u989d\uff0c\u53ef\u80fd\u662f\u4e00\u6bb5\u65f6\u95f4\u5185\u7d2f\u8ba1\u7684\u91d1\u989d\u7b49\u7b49\u3002\u56fe\u5176\u5b9e\u53ef\u4ee5\u6709\u975e\u5e38\u4e30\u5bcc\u7684\u8868\u8fbe\u80fd\u529b\u3002 \u53e6\u5916\uff0c\u50cf\u91d1\u878d\u8fd9\u6837\u7684\u56fe\uff0c\u5b83\u7684\u89c4\u6a21\u53ef\u80fd\u4f1a\u975e\u5e38\u7684\u5927\u3002\u53ef\u80fd\u4f1a\u6709\u8d85\u8fc7 10 \u4ebf\u4e2a\u70b9\uff0c\u6709\u5343\u4ebf\u751a\u81f3\u4e07\u4ebf\u8fb9\u8fd9\u6837\u4e00\u4e2a\u5de8\u5927\u7684\u56fe\u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u8981\u771f\u6b63\u5904\u7406\u8fd9\u4e9b\u56fe\uff0c\u5176\u5b9e\u8fd8\u662f\u5f88\u6709\u6311\u6218\u7684\u3002","title":"\u4ec0\u4e48\u662f\u56fe"},{"location":"zh-CN/1.guide/1.what-is-graph/#_1","text":"\u6211\u4eec\u4eca\u5929\u4ecb\u7ecd\u7684\u56fe\uff0c\u5b83\u65e2\u4e0d\u662f\u56fe\u50cf\u7684\u56fe\uff0c\u4e5f\u4e0d\u662f\u56fe\u5f62\u7684\u56fe\uff0c\u5b83\u662f\u6570\u5b66\u4e2d\u7684\u4e00\u4e2a\u95e8\u7c7b\u53eb\u505a\u56fe\u8bba\uff0c\u8fd9\u91cc\u7684\u56fe\u6307\u7684\u662f\u56fe\u8bba\u7684\u56fe\u3002\u6211\u4eec\u5728\u5c4f\u5e55\u4e0a\u53ef\u4ee5\u770b\u5230\u5de6\u53f3\u6709\u4e24\u4e2a\u56fe\uff0c\u5b83\u8868\u793a\u7684\u662f\u4e8b\u7269\u548c\u5b83\u4eec\u7684\u5173\u7cfb\u3002\u6211\u4eec\u7528\u4e00\u79cd\u5f62\u5f0f\u628a\u5b83\u62bd\u8c61\u51fa\u6765\uff0c\u628a\u8fd9\u6837\u7684\u4e00\u79cd\u5f62\u5f0f\u53eb\u505a\u56fe\u3002 \u56fe\u7684\u57fa\u672c\u5143\u7d20\u662f\u70b9\u548c\u8fb9\uff0c\u70b9\u5c31\u662f\u8868\u793a\u8fd9\u4e2a\u4e8b\u7269\uff0c\u8868\u793a\u8fd9\u4e2a\u5b9e\u4f53\uff0c\u800c\u8fb9\u5c31\u8868\u793a\u4ed6\u4eec\u4e4b\u95f4\u6709\u4e00\u5b9a\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u770b\u5230\u5de6\u8fb9\u7684\u8fd9\u5f20\u56fe\uff0c\u5b83\u7684\u70b9\u6709\u516c\u53f8\uff0c\u6709\u5458\u5de5\uff0c\u8fd8\u6709\u9879\u76ee\u3002\u5b83\u4eec\u7684\u8fb9\u662f\u4ec0\u4e48\u5462\uff1f\u516c\u53f8\u548c\u5458\u5de5\u4e4b\u95f4\u662f\u96c7\u4f63\u5173\u7cfb\uff0c\u5458\u5de5\u548c\u5458\u5de5\u4e4b\u95f4\u53ef\u4ee5\u6709\u597d\u53cb\u5173\u7cfb\uff0c\u9879\u76ee\u548c\u5458\u5de5\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u6709\u53c2\u4e0e\u5173\u7cfb\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u7528\u56fe\u7684\u65b9\u5f0f\u6765\u628a\u4e8b\u7269\u548c\u5b83\u4eec\u7684\u5173\u7cfb\u62bd\u8c61\u51fa\u6765\u3002 \u53f3\u8fb9\u7684\u56fe\u662f\u4e00\u4e2a\u91d1\u878d\u4ea4\u6613\u56fe\u793a\u610f\u3002\u6211\u4eec\u6bcf\u4e2a\u4eba\u90fd\u6709\u94f6\u884c\u8d26\u53f7\uff0c\u6211\u4eec\u7684\u94f6\u884c\u8d26\u53f7\u505a\u4e00\u7b14\u6d88\u8d39\u6216\u8005\u505a\u4e00\u7b14\u8f6c\u8d26\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8d26\u53f7\u5c31\u662f\u56fe\u4e0a\u7684\u70b9\uff0c\u800c\u8fd9\u4e2a\u8fb9\u5462\uff0c\u53ef\u4ee5\u8868\u793a\u6211\u4eec\u4e4b\u95f4\u6709\u8fd9\u6837\u4e00\u79cd\u8f6c\u8d26\u5173\u7cfb\u3002 \u4ece\u8fd9\u4e2a\u4f8b\u5b50\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u8fb9\u53ef\u4ee5\u9644\u7740\u4fe1\u606f\uff0c\u70b9\u4e5f\u53ef\u4ee5\u9644\u7740\u4fe1\u606f\u3002\u70b9\u4e0a\u53ef\u4ee5\u9644\u7740\u8fd9\u4e2a\u8d26\u53f7\u5728\u54ea\u4e2a\u94f6\u884c\uff0c\u8d26\u53f7\u662f\u4ec0\u4e48\u3002\u8fb9\u4e0a\u53ef\u4ee5\u9644\u7740\u4ea4\u6613\u7684\u91d1\u989d\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u7684\u4ea4\u6613\u91d1\u989d\u5f88\u5927\uff0c\u8868\u793a\u9700\u8981\u7279\u522b\u7684\u5173\u6ce8\u3002\u8fd9\u4e2a\u8fb9\u4e0a\u53ef\u80fd\u4e0d\u4e00\u5b9a\u662f\u67d0\u4e00\u6b21\u8f6c\u8d26\u7684\u91d1\u989d\uff0c\u53ef\u80fd\u662f\u4e00\u6bb5\u65f6\u95f4\u5185\u7d2f\u8ba1\u7684\u91d1\u989d\u7b49\u7b49\u3002\u56fe\u5176\u5b9e\u53ef\u4ee5\u6709\u975e\u5e38\u4e30\u5bcc\u7684\u8868\u8fbe\u80fd\u529b\u3002 \u53e6\u5916\uff0c\u50cf\u91d1\u878d\u8fd9\u6837\u7684\u56fe\uff0c\u5b83\u7684\u89c4\u6a21\u53ef\u80fd\u4f1a\u975e\u5e38\u7684\u5927\u3002\u53ef\u80fd\u4f1a\u6709\u8d85\u8fc7 10 \u4ebf\u4e2a\u70b9\uff0c\u6709\u5343\u4ebf\u751a\u81f3\u4e07\u4ebf\u8fb9\u8fd9\u6837\u4e00\u4e2a\u5de8\u5927\u7684\u56fe\u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u8981\u771f\u6b63\u5904\u7406\u8fd9\u4e9b\u56fe\uff0c\u5176\u5b9e\u8fd8\u662f\u5f88\u6709\u6311\u6218\u7684\u3002","title":"\u4ec0\u4e48\u662f\u56fe"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/","text":"\u4ec0\u4e48\u662f\u56fe\u6570\u636e\u5e93 \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662f\u56fe\u6570\u636e\u5e93\uff0c\u56fe\u6570\u636e\u5e93\u5bf9\u6bd4\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4f18\u52bf\uff0c\u4ee5\u53ca\u56fe\u6570\u636e\u5e93\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5bf9\u6bd4 1. \u56fe\u6570\u636e\u5e93\u4ecb\u7ecd \u56fe\u6570\u636e\u5e93\u662f\u57fa\u4e8e\u56fe\u6a21\u578b\u7684\u6570\u636e\u5e93\u3002\u76f8\u6bd4\u8f83\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u56fe\u6570\u636e\u5e93\u662f\u771f\u6b63\u6ce8\u91cd\u201c\u5173\u7cfb\u201d\u7684\u6570\u636e\u5e93\u3002\u56fe\u6570\u636e\u5e93\u7684\u4e3b\u8981\u804c\u80fd\u662f\u7ba1\u7406\u56fe\u6570\u636e\uff0c\u56e0\u6b64\u9700\u8981\u652f\u6301\u9ad8\u6548\u7684\u5bf9\u9876\u70b9/\u8fb9\u7684\u67e5\u8be2\u4e0e\u66f4\u65b0\uff1b\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u7684\u4f7f\u7528\uff0c\u901a\u5e38\u8fd8\u9700\u8981\u589e\u52a0\u5bf9\u4e8b\u52a1\uff08transaction\uff09\u7684\u652f\u6301\uff0c\u4ece\u800c\u4fdd\u8bc1\u5e76\u53d1\u64cd\u4f5c\u4e0b\u7684\u6b63\u5e38\u8fd0\u4f5c\u3002 2. \u56fe\u6570\u636e\u5e93\u76f8\u6bd4\u8f83\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4f18\u52bf \u56fe\u6570\u636e\u5e93\u7684\u529f\u80fd\u662f\u4f20\u7edf\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u62d3\u5c55\uff0c\u76f8\u6bd4\u8f83\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4ec5\u652f\u6301\u8868\u7ed3\u6784\uff0c\u56fe\u6570\u636e\u652f\u6301\u7684\u56fe\u7ed3\u6784\u66f4\u4e3a\u7075\u6d3b\u3002\u56fe\u6570\u636e\u5e93\u5728\u57fa\u4e8e\u56fe\u7684\u6570\u636e\u589e\u52a0\u3001\u5220\u9664\u3001\u67e5\u8be2\u3001\u4fee\u6539\u7b49\u65b9\u9762\u505a\u4e86\u4e0d\u540c\u4e8e\u5176\u4ed6\u6570\u636e\u5e93\u7684\u8bbe\u8ba1\u3002\u5728\u56fe\u6570\u636e\u7684\u64cd\u4f5c\u62bd\u8c61\u4e0a\uff0c\u91c7\u7528\u57fa\u4e8e\u9876\u70b9\u7684\u89c6\u89d2\uff0c\u6bd4\u5982\u9876\u70b9\u901a\u8fc7\u5176\u6240\u6709\u51fa\u8fb9\u8bbf\u95ee\u5176\u90bb\u63a5\u9876\u70b9\uff0c\u8fd9\u4e00\u7c7b\u7684\u64cd\u4f5c\u4e5f\u662f\u56fe\u6570\u636e\u5e93\u7cfb\u7edf\u8bbe\u8ba1\u7684\u6838\u5fc3\u3002 \u56fe\u6570\u636e\u5e93\u7684\u72ec\u7279\u6027\u53ef\u4ee5\u4f53\u73b0\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\uff1a 2.1 \u6027\u80fd \u5728\u5173\u8054\u5173\u7cfb\u7684\u5904\u7406\u4e0a\uff0c\u7528\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5904\u7406\u4e0d\u53ef\u907f\u514d\u8981\u7528\u5230\u8868\u7684 JOIN \u64cd\u4f5c\uff0c\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u8f83\u5927\uff1b\u800c\u56fe\u6570\u636e\u5e93\u5219\u662f\u7c7b\u6307\u9488\u76f4\u63a5\u8df3\u8f6c\u8bbf\u95ee\uff0c\u66f4\u9ad8\u6548\u7684\u64cd\u4f5c\u5173\u8054\u6570\u636e\uff0c\u6bd4\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6709 2 \u5230 4 \u4e2a\u6570\u91cf\u7ea7\u7684\u6027\u80fd\u63d0\u5347\u3002 2.2 \u517c\u5bb9\u6027 \u73b0\u5b9e\u4e2d\uff0c\u9879\u76ee\u7684\u8fdb\u7a0b\u5f80\u5f80\u662f\u4e0d\u65ad\u6f14\u8fdb\u7684\u3002\u6570\u636e\u7684\u5185\u5bb9\u751a\u81f3\u6570\u636e\u683c\u5f0f\u4e5f\u4f1a\u4e0d\u65ad\u53d1\u751f\u53d8\u5316\u3002\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u8868\u7ed3\u6784\u7684\u53d8\u5316\uff0c\u6216\u8005\u591a\u4e2a\u65b0\u8868\u7684\u5efa\u7acb\uff0c\u5bf9\u6e90\u6570\u636e\u7684\u6539\u52a8\u975e\u5e38\u5927\u3002\u800c\u5728\u56fe\u6570\u636e\u5e93\u91cc\uff0c\u4ec5\u9700\u6dfb\u52a0\u65b0\u7684\u9876\u70b9\u3001\u8fb9\u3001\u5c5e\u6027\uff0c\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u7c7b\u578b\u5373\u53ef\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u4e00\u4e2a\u8868\u4ee3\u8868\u4e00\u4e2a\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u9876\u70b9\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\uff0c\u610f\u5473\u7740\u5173\u7cfb\u6570\u636e\u5e93\u66f4\u5173\u6ce8\u6570\u636e\u7684\u7c7b\u578b\uff0c\u800c\u56fe\u6570\u636e\u5e93\u66f4\u5173\u6ce8\u6570\u636e\u7684\u4e2a\u4f53\uff0c\u8bc6\u522b\u5176\u5173\u8054\u5173\u7cfb\u3002 2.3 \u76f4\u89c2\u6027 \u4f7f\u7528\u56fe\uff08\u6216\u8005\u7f51\uff09\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u73b0\u5b9e\u4e16\u754c\u7684\u5173\u7cfb\u66f4\u52a0\u76f4\u63a5\u3001\u81ea\u7136\uff0c\u5728\u4e07\u7269\u4e92\u8054\u7684\u7269\u8054\u7f51\u65f6\u4ee3\u5c24\u4e3a\u7a81\u51fa\u3002\u5982\u679c\u91c7\u7528\u5173\u7cfb\u578b\u6570\u636e\uff0c\u5148\u5c06\u4eba\u7269\u5efa\u8868\uff0c\u518d\u5c06\u5173\u7cfb\u5efa\u8868\uff0c\u6700\u540e\u5c06\u6570\u636e\u8fdb\u884c\u6620\u5c04\uff0c\u9700\u8981\u9ad8\u5ea6\u7684\u62bd\u8c61\u601d\u7ef4\u3002\u5728\u56fe\u6570\u636e\u4e0a\u8fdb\u884c\u5206\u6790\u67e5\u8be2\u65f6\uff0c\u4e5f\u53ef\u4ee5\u76f4\u89c2\u5730\u901a\u8fc7\u70b9\u8fb9\u8fde\u63a5\u7684\u62d3\u6251\uff0c\u4ea4\u4e92\u5f0f\u627e\u5230\u60f3\u8981\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5177\u5907\u4efb\u4f55\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002 3. \u56fe\u6570\u636e\u5e93\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5bf9\u6bd4 \u5206\u7c7b \u6a21\u578b \u4f18\u52bf \u52a3\u52bf \u4e3e\u4f8b \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u8868\u7ed3\u6784 \u6570\u636e\u9ad8\u5ea6\u7ed3\u6784\u5316\uff0c\u4e00\u81f4\u6027\u5f3a\uff0c\u8f6f\u4ef6\u6210\u719f\u5ea6\u9ad8 \u9762\u5411\u591a\u8df3\u7684\u5173\u8054\u5173\u7cfb\u67e5\u8be2\u4f4e\u6548\u6216\u4e0d\u652f\u6301 MySQL\u3001Oracle \u56fe\u6570\u636e\u5e93 \u56fe\u7ed3\u6784 \u9488\u5bf9\u5173\u8054\u5173\u7cfb\u7684\u5efa\u6a21\u3001\u64cd\u4f5c\u975e\u5e38\u9ad8\u6548 \u9ad8\u5ea6\u7ed3\u6784\u5316\u7684\u6570\u636e\u5904\u7406\u80fd\u529b\u4e0d\u53ca\u5173\u7cfb\u578b\u6570\u636e\u5e93 Neo4j\u3001TuGraph \u603b\u800c\u8a00\u4e4b\uff0c\u9762\u5bf9\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8\u548c\u5904\u7406\u95ee\u9898\uff0c\u4f20\u7edf\u7684\u5173\u7cfb\u6570\u636e\u5e93\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u5927\u90e8\u5206\u7684\u65e5\u5e38\u6570\u636e\u50a8\u5b58\u7684\u9700\u6c42\u3002\u56fe\u6570\u636e\u5e93\u6280\u672f\u53ef\u4ee5\u5c06\u5173\u7cfb\u4fe1\u606f\u50a8\u5b58\u4e3a\u5b9e\u4f53\u3001\u7075\u6d3b\u62d3\u5c55\u6570\u636e\u6a21\u578b\u3002\u7531\u4e8e\u63d0\u4f9b\u4e86\u5bf9\u5173\u8054\u6570\u636e\u6700\u76f4\u63a5\u7684\u8868\u8fbe\uff0c\u4ee5\u53ca\u56fe\u6a21\u578b\u5bf9\u5f02\u6784\u6570\u636e\u5929\u7136\u7684\u5305\u5bb9\u529b\u3002\u672a\u6765\uff0c\u56fe\u6570\u636e\u5e93\u6280\u672f\u5fc5\u5c06\u6210\u4e3a\u6700\u4e3a\u70ed\u70b9\u7684\u6280\u672f\u4e4b\u4e00\uff0c\u4e3a\u4f01\u4e1a\u5b58\u50a8\u548c\u5206\u6790\u5927\u89c4\u6a21\u56fe\u6570\u636e\u63d0\u4f9b\u5f3a\u6709\u529b\u7684\u652f\u6301\u3002","title":"\u4ec0\u4e48\u662f GDBMS"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662f\u56fe\u6570\u636e\u5e93\uff0c\u56fe\u6570\u636e\u5e93\u5bf9\u6bd4\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4f18\u52bf\uff0c\u4ee5\u53ca\u56fe\u6570\u636e\u5e93\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5bf9\u6bd4","title":"\u4ec0\u4e48\u662f\u56fe\u6570\u636e\u5e93"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#1","text":"\u56fe\u6570\u636e\u5e93\u662f\u57fa\u4e8e\u56fe\u6a21\u578b\u7684\u6570\u636e\u5e93\u3002\u76f8\u6bd4\u8f83\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u56fe\u6570\u636e\u5e93\u662f\u771f\u6b63\u6ce8\u91cd\u201c\u5173\u7cfb\u201d\u7684\u6570\u636e\u5e93\u3002\u56fe\u6570\u636e\u5e93\u7684\u4e3b\u8981\u804c\u80fd\u662f\u7ba1\u7406\u56fe\u6570\u636e\uff0c\u56e0\u6b64\u9700\u8981\u652f\u6301\u9ad8\u6548\u7684\u5bf9\u9876\u70b9/\u8fb9\u7684\u67e5\u8be2\u4e0e\u66f4\u65b0\uff1b\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u7684\u4f7f\u7528\uff0c\u901a\u5e38\u8fd8\u9700\u8981\u589e\u52a0\u5bf9\u4e8b\u52a1\uff08transaction\uff09\u7684\u652f\u6301\uff0c\u4ece\u800c\u4fdd\u8bc1\u5e76\u53d1\u64cd\u4f5c\u4e0b\u7684\u6b63\u5e38\u8fd0\u4f5c\u3002","title":"1. \u56fe\u6570\u636e\u5e93\u4ecb\u7ecd"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#2","text":"\u56fe\u6570\u636e\u5e93\u7684\u529f\u80fd\u662f\u4f20\u7edf\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u62d3\u5c55\uff0c\u76f8\u6bd4\u8f83\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4ec5\u652f\u6301\u8868\u7ed3\u6784\uff0c\u56fe\u6570\u636e\u652f\u6301\u7684\u56fe\u7ed3\u6784\u66f4\u4e3a\u7075\u6d3b\u3002\u56fe\u6570\u636e\u5e93\u5728\u57fa\u4e8e\u56fe\u7684\u6570\u636e\u589e\u52a0\u3001\u5220\u9664\u3001\u67e5\u8be2\u3001\u4fee\u6539\u7b49\u65b9\u9762\u505a\u4e86\u4e0d\u540c\u4e8e\u5176\u4ed6\u6570\u636e\u5e93\u7684\u8bbe\u8ba1\u3002\u5728\u56fe\u6570\u636e\u7684\u64cd\u4f5c\u62bd\u8c61\u4e0a\uff0c\u91c7\u7528\u57fa\u4e8e\u9876\u70b9\u7684\u89c6\u89d2\uff0c\u6bd4\u5982\u9876\u70b9\u901a\u8fc7\u5176\u6240\u6709\u51fa\u8fb9\u8bbf\u95ee\u5176\u90bb\u63a5\u9876\u70b9\uff0c\u8fd9\u4e00\u7c7b\u7684\u64cd\u4f5c\u4e5f\u662f\u56fe\u6570\u636e\u5e93\u7cfb\u7edf\u8bbe\u8ba1\u7684\u6838\u5fc3\u3002 \u56fe\u6570\u636e\u5e93\u7684\u72ec\u7279\u6027\u53ef\u4ee5\u4f53\u73b0\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\uff1a","title":"2. \u56fe\u6570\u636e\u5e93\u76f8\u6bd4\u8f83\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4f18\u52bf"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#21","text":"\u5728\u5173\u8054\u5173\u7cfb\u7684\u5904\u7406\u4e0a\uff0c\u7528\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5904\u7406\u4e0d\u53ef\u907f\u514d\u8981\u7528\u5230\u8868\u7684 JOIN \u64cd\u4f5c\uff0c\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u8f83\u5927\uff1b\u800c\u56fe\u6570\u636e\u5e93\u5219\u662f\u7c7b\u6307\u9488\u76f4\u63a5\u8df3\u8f6c\u8bbf\u95ee\uff0c\u66f4\u9ad8\u6548\u7684\u64cd\u4f5c\u5173\u8054\u6570\u636e\uff0c\u6bd4\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6709 2 \u5230 4 \u4e2a\u6570\u91cf\u7ea7\u7684\u6027\u80fd\u63d0\u5347\u3002","title":"2.1  \u6027\u80fd"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#22","text":"\u73b0\u5b9e\u4e2d\uff0c\u9879\u76ee\u7684\u8fdb\u7a0b\u5f80\u5f80\u662f\u4e0d\u65ad\u6f14\u8fdb\u7684\u3002\u6570\u636e\u7684\u5185\u5bb9\u751a\u81f3\u6570\u636e\u683c\u5f0f\u4e5f\u4f1a\u4e0d\u65ad\u53d1\u751f\u53d8\u5316\u3002\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u8868\u7ed3\u6784\u7684\u53d8\u5316\uff0c\u6216\u8005\u591a\u4e2a\u65b0\u8868\u7684\u5efa\u7acb\uff0c\u5bf9\u6e90\u6570\u636e\u7684\u6539\u52a8\u975e\u5e38\u5927\u3002\u800c\u5728\u56fe\u6570\u636e\u5e93\u91cc\uff0c\u4ec5\u9700\u6dfb\u52a0\u65b0\u7684\u9876\u70b9\u3001\u8fb9\u3001\u5c5e\u6027\uff0c\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u7c7b\u578b\u5373\u53ef\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u4e00\u4e2a\u8868\u4ee3\u8868\u4e00\u4e2a\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u9876\u70b9\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\uff0c\u610f\u5473\u7740\u5173\u7cfb\u6570\u636e\u5e93\u66f4\u5173\u6ce8\u6570\u636e\u7684\u7c7b\u578b\uff0c\u800c\u56fe\u6570\u636e\u5e93\u66f4\u5173\u6ce8\u6570\u636e\u7684\u4e2a\u4f53\uff0c\u8bc6\u522b\u5176\u5173\u8054\u5173\u7cfb\u3002","title":"2.2 \u517c\u5bb9\u6027"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#23","text":"\u4f7f\u7528\u56fe\uff08\u6216\u8005\u7f51\uff09\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u73b0\u5b9e\u4e16\u754c\u7684\u5173\u7cfb\u66f4\u52a0\u76f4\u63a5\u3001\u81ea\u7136\uff0c\u5728\u4e07\u7269\u4e92\u8054\u7684\u7269\u8054\u7f51\u65f6\u4ee3\u5c24\u4e3a\u7a81\u51fa\u3002\u5982\u679c\u91c7\u7528\u5173\u7cfb\u578b\u6570\u636e\uff0c\u5148\u5c06\u4eba\u7269\u5efa\u8868\uff0c\u518d\u5c06\u5173\u7cfb\u5efa\u8868\uff0c\u6700\u540e\u5c06\u6570\u636e\u8fdb\u884c\u6620\u5c04\uff0c\u9700\u8981\u9ad8\u5ea6\u7684\u62bd\u8c61\u601d\u7ef4\u3002\u5728\u56fe\u6570\u636e\u4e0a\u8fdb\u884c\u5206\u6790\u67e5\u8be2\u65f6\uff0c\u4e5f\u53ef\u4ee5\u76f4\u89c2\u5730\u901a\u8fc7\u70b9\u8fb9\u8fde\u63a5\u7684\u62d3\u6251\uff0c\u4ea4\u4e92\u5f0f\u627e\u5230\u60f3\u8981\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5177\u5907\u4efb\u4f55\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002","title":"2.3 \u76f4\u89c2\u6027"},{"location":"zh-CN/1.guide/2.what-is-GDBMS/#3","text":"\u5206\u7c7b \u6a21\u578b \u4f18\u52bf \u52a3\u52bf \u4e3e\u4f8b \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u8868\u7ed3\u6784 \u6570\u636e\u9ad8\u5ea6\u7ed3\u6784\u5316\uff0c\u4e00\u81f4\u6027\u5f3a\uff0c\u8f6f\u4ef6\u6210\u719f\u5ea6\u9ad8 \u9762\u5411\u591a\u8df3\u7684\u5173\u8054\u5173\u7cfb\u67e5\u8be2\u4f4e\u6548\u6216\u4e0d\u652f\u6301 MySQL\u3001Oracle \u56fe\u6570\u636e\u5e93 \u56fe\u7ed3\u6784 \u9488\u5bf9\u5173\u8054\u5173\u7cfb\u7684\u5efa\u6a21\u3001\u64cd\u4f5c\u975e\u5e38\u9ad8\u6548 \u9ad8\u5ea6\u7ed3\u6784\u5316\u7684\u6570\u636e\u5904\u7406\u80fd\u529b\u4e0d\u53ca\u5173\u7cfb\u578b\u6570\u636e\u5e93 Neo4j\u3001TuGraph \u603b\u800c\u8a00\u4e4b\uff0c\u9762\u5bf9\u6d77\u91cf\u6570\u636e\u7684\u5b58\u50a8\u548c\u5904\u7406\u95ee\u9898\uff0c\u4f20\u7edf\u7684\u5173\u7cfb\u6570\u636e\u5e93\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u5927\u90e8\u5206\u7684\u65e5\u5e38\u6570\u636e\u50a8\u5b58\u7684\u9700\u6c42\u3002\u56fe\u6570\u636e\u5e93\u6280\u672f\u53ef\u4ee5\u5c06\u5173\u7cfb\u4fe1\u606f\u50a8\u5b58\u4e3a\u5b9e\u4f53\u3001\u7075\u6d3b\u62d3\u5c55\u6570\u636e\u6a21\u578b\u3002\u7531\u4e8e\u63d0\u4f9b\u4e86\u5bf9\u5173\u8054\u6570\u636e\u6700\u76f4\u63a5\u7684\u8868\u8fbe\uff0c\u4ee5\u53ca\u56fe\u6a21\u578b\u5bf9\u5f02\u6784\u6570\u636e\u5929\u7136\u7684\u5305\u5bb9\u529b\u3002\u672a\u6765\uff0c\u56fe\u6570\u636e\u5e93\u6280\u672f\u5fc5\u5c06\u6210\u4e3a\u6700\u4e3a\u70ed\u70b9\u7684\u6280\u672f\u4e4b\u4e00\uff0c\u4e3a\u4f01\u4e1a\u5b58\u50a8\u548c\u5206\u6790\u5927\u89c4\u6a21\u56fe\u6570\u636e\u63d0\u4f9b\u5f3a\u6709\u529b\u7684\u652f\u6301\u3002","title":"3. \u56fe\u6570\u636e\u5e93\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5bf9\u6bd4"},{"location":"zh-CN/1.guide/3.quick-start/","text":"TuGraph \u5feb\u901f\u4e0a\u624b \u6b64\u6587\u6863\u4e3b\u8981\u7528\u4e8e\u65b0\u7528\u6237\u5feb\u901f\u4e0a\u624b\uff0c\u5176\u4e2d\u5305\u542b\u4e86 TuGraph \u7684\u7b80\u4ecb\u3001\u7279\u5f81\u3001\u5b89\u88c5\u548c\u4f7f\u7528\u3002 1. \u7b80\u4ecb TuGraph \u662f\u8682\u8681\u96c6\u56e2\u81ea\u4e3b\u7814\u53d1\u7684\u5927\u89c4\u6a21\u56fe\u8ba1\u7b97\u7cfb\u7edf\uff0c\u63d0\u4f9b\u56fe\u6570\u636e\u5e93\u5f15\u64ce\u548c\u56fe\u5206\u6790\u5f15\u64ce\u3002\u5176\u4e3b\u8981\u7279\u70b9\u662f\u5927\u6570\u636e\u91cf\u5b58\u50a8\u548c\u8ba1\u7b97\uff0c\u9ad8\u541e\u5410\u7387\uff0c\u4ee5\u53ca\u7075\u6d3b\u7684 API\uff0c\u540c\u65f6\u652f\u6301\u9ad8\u6548\u7684\u5728\u7ebf\u4e8b\u52a1\u5904\u7406\uff08OLTP\uff09\u548c\u5728\u7ebf\u5206\u6790\u5904\u7406\uff08OLAP\uff09\u3002 LightGraph\u3001GeaGraph \u662f TuGraph \u7684\u66fe\u7528\u540d\u3002 \u4e3b\u8981\u529f\u80fd\u7279\u5f81\u5305\u62ec\uff1a \u6807\u7b7e\u5c5e\u6027\u56fe\u6a21\u578b \u652f\u6301\u591a\u56fe \u5b8c\u5584\u7684 ACID \u4e8b\u52a1\u5904\u7406 \u5185\u7f6e 25+ \u56fe\u5206\u6790\u7b97\u6cd5 \u57fa\u4e8e web \u5ba2\u6237\u7aef\u7684\u56fe\u53ef\u89c6\u5316\u5de5\u5177 \u652f\u6301 RESTful API \u548c RPC OpenCypher \u56fe\u67e5\u8be2\u8bed\u8a00 \u57fa\u4e8e C++/Python/Java \u7684\u5b58\u50a8\u8fc7\u7a0b \u9002\u7528\u4e8e\u9ad8\u6548\u56fe\u7b97\u6cd5\u5f00\u53d1\u7684 Traversal API \u6027\u80fd\u53ca\u53ef\u6269\u5c55\u6027\u7279\u5f81\u5305\u62ec\uff1a TB \u7ea7\u5927\u5bb9\u91cf \u5343\u4e07\u9876\u70b9/\u79d2\u7684\u9ad8\u541e\u5410\u7387 \u9ad8\u53ef\u7528\u6027\u652f\u6301\uff08\u4f01\u4e1a\u7248\uff09 \u9ad8\u6027\u80fd\u6279\u91cf\u5bfc\u5165 \u5728\u7ebf/\u79bb\u7ebf\u5907\u4efd 2. \u5b89\u88c5 TuGraph \u53ef\u4ee5\u901a\u8fc7 Docker Image \u5feb\u901f\u5b89\u88c5\uff0c\u6216\u8005\u901a\u8fc7 rpm/deb \u5305\u672c\u5730\u5b89\u88c5\u3002 rpm/deb/docker\u955c\u50cf \u5b98\u7f51\u4e0b\u8f7d\u5730\u5740: https://www.tugraph.org/download \u901a\u8fc7docker\u5feb\u901f\u4f53\u9a8c \u672c\u5730\u5b89\u88c5 docker \u73af\u5883 \u53c2\u8003 docker \u5b98\u65b9\u6587\u6863\uff1ahttps://docs.docker.com/get-started/ \u62c9\u53d6\u955c\u50cf shell docker pull tugraph/tugraph-runtime-centos7 \u542f\u52a8docker shell docker run -d -p 7070:7070 -p 9090:9090 --name tugraph_demo tugraph/tugraph-runtime-centos7 lgraph_server # 7070\u662f\u9ed8\u8ba4\u7684http\u7aef\u53e3\uff0cweb\u8bbf\u95ee\u4f7f\u7528\u3002 # 9090\u662f\u9ed8\u8ba4\u7684rpc\u7aef\u53e3\uff0crpc client\u8bbf\u95ee\u4f7f\u7528\u3002 web \u8bbf\u95ee http://x.x.x.x:7070 \u9ed8\u8ba4\u7528\u6237\u540d\u4e3a admin \uff0c\u5bc6\u7801\u4e3a 73@TuGraph \u624b\u52a8\u542f\u52a8\u65b9\u5f0f shell docker run -dt -p 7070:7070 --name tugraph_demo tugraph/tugraph-runtime-centos7 docker exec -it tugraph_demo bash # \u8fdb\u5165docker\u73af\u5883\u540e\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u670d\u52a1 lgraph_server -d start web \u64cd\u4f5c \u5efa\u6a21\u548c\u6570\u636e\u5bfc\u5165 \u5b8c\u6210\u767b\u5f55\u540e\uff0c\u70b9\u51fb\u201c \u5e2e\u52a9 \u201d\uff0c\u70b9\u51fb\u201c \u5feb\u901f\u4e0a\u624b \u201d\uff0c\u70b9\u51fb\u201c \u4e00\u952e\u521b\u5efa\u6a21\u578b \u201d\uff0c\u70b9\u51fb\u201c \u4e00\u952e\u521b\u5efa\u6570\u636e \u201d\uff0c\u5b8c\u6210\u6570\u636e\u7684 Movie \u573a\u666f\u56fe\u521b\u5efa\u3002 Movie \u573a\u666f\u56fe\uff1a \u6807\u7b7e \u7c7b\u578b \u8bf4\u660e movie \u5b9e\u4f53 \u8868\u793a\u67d0\u4e00\u90e8\u5177\u4f53\u7684\u5f71\u7247\uff0c\u6bd4\u5982\"\u963f\u7518\u6b63\u4f20\"\u3002 person \u5b9e\u4f53 \u8868\u793a\u4e2a\u4eba\uff0c\u5bf9\u5f71\u7247\u6765\u8bf4\u53ef\u80fd\u662f\u6f14\u5458\u3001\u5bfc\u6f14\uff0c\u6216\u7f16\u5267\u3002 genre \u5b9e\u4f53 \u8868\u793a\u5f71\u7247\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u5267\u60c5\u7247\u3001\u6050\u6016\u7247\u3002 keyword \u5b9e\u4f53 \u8868\u793a\u4e0e\u5f71\u7247\u76f8\u5173\u7684\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u6bd4\u5982\"\u62ef\u6551\u4e16\u754c\"\u3001\"\u865a\u62df\u73b0\u5b9e\"\u3001\"\u5730\u94c1\"\u3002 user \u5b9e\u4f53 \u8868\u793a\u89c2\u5f71\u7684\u7528\u6237\u3002 produce \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u51fa\u54c1\u4eba\u5173\u7cfb\u3002 acted_in \u5173\u7cfb \u8868\u793a\u6f14\u5458\u51fa\u6f14\u4e86\u54ea\u4e9b\u5f71\u7247\u3002 direct \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u5bfc\u6f14\u662f\u8c01\u3002 write \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u7f16\u5267\u5173\u7cfb\u3002 has_genre \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u7c7b\u578b\u5206\u7c7b\u3002 has_keyword \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u5373\u66f4\u7ec6\u5206\u7c7b\u7684\u6807\u7b7e\u3002 rate \u5173\u7cfb \u8868\u793a\u7528\u6237\u5bf9\u5f71\u7247\u7684\u6253\u5206\u3002 \u67e5\u8be2\u793a\u4f8b \u793a\u4f8b\u4e00 \u67e5\u8be2\u5f71\u7247 'Forrest Gump' \u7684\u6240\u6709\u6f14\u5458\uff0c\u8fd4\u56de\u5f71\u7247\u548c\u6f14\u5458\u6784\u6210\u7684\u5b50\u56fe\u3002 MATCH (m:movie {title: 'Forrest Gump'})<-[:acted_in]-(a:person) RETURN a, m \u793a\u4f8b\u4e8c \u67e5\u8be2\u5f71\u7247 'Forrest Gump' \u7684\u6240\u6709\u6f14\u5458\uff0c\u5217\u51fa\u6f14\u5458\u5728\u5f71\u7247\u4e2d\u626e\u6f14\u7684\u89d2\u8272\u3002 MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name,r.role \u793a\u4f8b\u4e09 \u67e5\u8be2 Michael \u6240\u6709\u8bc4\u5206\u4f4e\u4e8e 3 \u5206\u7684\u5f71\u7247\u3002 MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars \u793a\u4f8b\u56db \u67e5\u8be2\u548c Michael \u6709\u76f8\u540c\u8ba8\u538c\u7684\u5f71\u7247\u7684\u7528\u6237\uff0c\u8ba8\u538c\u6807\u51c6\u4e3a\u8bc4\u5206\u5c0f\u4e8e\u4e09\u5206\u3002 MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v) WHERE r.stars < 3 AND s.stars < 3 RETURN u, m, v \u793a\u4f8b\u4e94 \u7ed9 Michael \u63a8\u8350\u5f71\u7247\uff0c\u65b9\u6cd5\u4e3a\u5148\u627e\u51fa\u548c Michael \u8ba8\u538c\u540c\u6837\u5f71\u7247\u7684\u7528\u6237\uff0c\u518d\u7b5b\u9009\u51fa\u8fd9\u90e8\u5206\u7528\u6237\u559c\u6b22\u7684\u5f71\u7247\u3002 MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2 \u793a\u4f8b\u516d \u67e5\u8be2 Michael \u7684\u597d\u53cb\u4eec\u559c\u6b22\u7684\u5f71\u7247\u3002 MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m \u793a\u4f8b\u4e03 \u901a\u8fc7\u67e5\u8be2\u7ed9'Forrest Gump'\u6253\u9ad8\u5206\u7684\u4eba\u4e5f\u559c\u6b22\u54ea\u4e9b\u5f71\u7247\uff0c\u7ed9\u559c\u6b22'Forrest Gump'\u7684\u7528\u6237\u63a8\u8350\u7c7b\u4f3c\u7684\u5f71\u7247\u3002 MATCH (m:movie {title:'Forrest Gump'})<-[r:rate]-(u:user)-[r2:rate]->(m2:movie) WHERE r.stars>3 AND r2.stars>3 RETURN m, u,m2","title":"\u5feb\u901f\u5165\u95e8"},{"location":"zh-CN/1.guide/3.quick-start/#tugraph","text":"\u6b64\u6587\u6863\u4e3b\u8981\u7528\u4e8e\u65b0\u7528\u6237\u5feb\u901f\u4e0a\u624b\uff0c\u5176\u4e2d\u5305\u542b\u4e86 TuGraph \u7684\u7b80\u4ecb\u3001\u7279\u5f81\u3001\u5b89\u88c5\u548c\u4f7f\u7528\u3002","title":"TuGraph \u5feb\u901f\u4e0a\u624b"},{"location":"zh-CN/1.guide/3.quick-start/#1","text":"TuGraph \u662f\u8682\u8681\u96c6\u56e2\u81ea\u4e3b\u7814\u53d1\u7684\u5927\u89c4\u6a21\u56fe\u8ba1\u7b97\u7cfb\u7edf\uff0c\u63d0\u4f9b\u56fe\u6570\u636e\u5e93\u5f15\u64ce\u548c\u56fe\u5206\u6790\u5f15\u64ce\u3002\u5176\u4e3b\u8981\u7279\u70b9\u662f\u5927\u6570\u636e\u91cf\u5b58\u50a8\u548c\u8ba1\u7b97\uff0c\u9ad8\u541e\u5410\u7387\uff0c\u4ee5\u53ca\u7075\u6d3b\u7684 API\uff0c\u540c\u65f6\u652f\u6301\u9ad8\u6548\u7684\u5728\u7ebf\u4e8b\u52a1\u5904\u7406\uff08OLTP\uff09\u548c\u5728\u7ebf\u5206\u6790\u5904\u7406\uff08OLAP\uff09\u3002 LightGraph\u3001GeaGraph \u662f TuGraph \u7684\u66fe\u7528\u540d\u3002 \u4e3b\u8981\u529f\u80fd\u7279\u5f81\u5305\u62ec\uff1a \u6807\u7b7e\u5c5e\u6027\u56fe\u6a21\u578b \u652f\u6301\u591a\u56fe \u5b8c\u5584\u7684 ACID \u4e8b\u52a1\u5904\u7406 \u5185\u7f6e 25+ \u56fe\u5206\u6790\u7b97\u6cd5 \u57fa\u4e8e web \u5ba2\u6237\u7aef\u7684\u56fe\u53ef\u89c6\u5316\u5de5\u5177 \u652f\u6301 RESTful API \u548c RPC OpenCypher \u56fe\u67e5\u8be2\u8bed\u8a00 \u57fa\u4e8e C++/Python/Java \u7684\u5b58\u50a8\u8fc7\u7a0b \u9002\u7528\u4e8e\u9ad8\u6548\u56fe\u7b97\u6cd5\u5f00\u53d1\u7684 Traversal API \u6027\u80fd\u53ca\u53ef\u6269\u5c55\u6027\u7279\u5f81\u5305\u62ec\uff1a TB \u7ea7\u5927\u5bb9\u91cf \u5343\u4e07\u9876\u70b9/\u79d2\u7684\u9ad8\u541e\u5410\u7387 \u9ad8\u53ef\u7528\u6027\u652f\u6301\uff08\u4f01\u4e1a\u7248\uff09 \u9ad8\u6027\u80fd\u6279\u91cf\u5bfc\u5165 \u5728\u7ebf/\u79bb\u7ebf\u5907\u4efd","title":"1. \u7b80\u4ecb"},{"location":"zh-CN/1.guide/3.quick-start/#2","text":"TuGraph \u53ef\u4ee5\u901a\u8fc7 Docker Image \u5feb\u901f\u5b89\u88c5\uff0c\u6216\u8005\u901a\u8fc7 rpm/deb \u5305\u672c\u5730\u5b89\u88c5\u3002 rpm/deb/docker\u955c\u50cf \u5b98\u7f51\u4e0b\u8f7d\u5730\u5740: https://www.tugraph.org/download","title":"2. \u5b89\u88c5"},{"location":"zh-CN/1.guide/3.quick-start/#docker","text":"\u672c\u5730\u5b89\u88c5 docker \u73af\u5883 \u53c2\u8003 docker \u5b98\u65b9\u6587\u6863\uff1ahttps://docs.docker.com/get-started/ \u62c9\u53d6\u955c\u50cf shell docker pull tugraph/tugraph-runtime-centos7 \u542f\u52a8docker shell docker run -d -p 7070:7070 -p 9090:9090 --name tugraph_demo tugraph/tugraph-runtime-centos7 lgraph_server # 7070\u662f\u9ed8\u8ba4\u7684http\u7aef\u53e3\uff0cweb\u8bbf\u95ee\u4f7f\u7528\u3002 # 9090\u662f\u9ed8\u8ba4\u7684rpc\u7aef\u53e3\uff0crpc client\u8bbf\u95ee\u4f7f\u7528\u3002 web \u8bbf\u95ee http://x.x.x.x:7070 \u9ed8\u8ba4\u7528\u6237\u540d\u4e3a admin \uff0c\u5bc6\u7801\u4e3a 73@TuGraph \u624b\u52a8\u542f\u52a8\u65b9\u5f0f shell docker run -dt -p 7070:7070 --name tugraph_demo tugraph/tugraph-runtime-centos7 docker exec -it tugraph_demo bash # \u8fdb\u5165docker\u73af\u5883\u540e\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u670d\u52a1 lgraph_server -d start","title":"\u901a\u8fc7docker\u5feb\u901f\u4f53\u9a8c"},{"location":"zh-CN/1.guide/3.quick-start/#web","text":"","title":"web \u64cd\u4f5c"},{"location":"zh-CN/1.guide/3.quick-start/#_1","text":"\u5b8c\u6210\u767b\u5f55\u540e\uff0c\u70b9\u51fb\u201c \u5e2e\u52a9 \u201d\uff0c\u70b9\u51fb\u201c \u5feb\u901f\u4e0a\u624b \u201d\uff0c\u70b9\u51fb\u201c \u4e00\u952e\u521b\u5efa\u6a21\u578b \u201d\uff0c\u70b9\u51fb\u201c \u4e00\u952e\u521b\u5efa\u6570\u636e \u201d\uff0c\u5b8c\u6210\u6570\u636e\u7684 Movie \u573a\u666f\u56fe\u521b\u5efa\u3002 Movie \u573a\u666f\u56fe\uff1a \u6807\u7b7e \u7c7b\u578b \u8bf4\u660e movie \u5b9e\u4f53 \u8868\u793a\u67d0\u4e00\u90e8\u5177\u4f53\u7684\u5f71\u7247\uff0c\u6bd4\u5982\"\u963f\u7518\u6b63\u4f20\"\u3002 person \u5b9e\u4f53 \u8868\u793a\u4e2a\u4eba\uff0c\u5bf9\u5f71\u7247\u6765\u8bf4\u53ef\u80fd\u662f\u6f14\u5458\u3001\u5bfc\u6f14\uff0c\u6216\u7f16\u5267\u3002 genre \u5b9e\u4f53 \u8868\u793a\u5f71\u7247\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u5267\u60c5\u7247\u3001\u6050\u6016\u7247\u3002 keyword \u5b9e\u4f53 \u8868\u793a\u4e0e\u5f71\u7247\u76f8\u5173\u7684\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u6bd4\u5982\"\u62ef\u6551\u4e16\u754c\"\u3001\"\u865a\u62df\u73b0\u5b9e\"\u3001\"\u5730\u94c1\"\u3002 user \u5b9e\u4f53 \u8868\u793a\u89c2\u5f71\u7684\u7528\u6237\u3002 produce \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u51fa\u54c1\u4eba\u5173\u7cfb\u3002 acted_in \u5173\u7cfb \u8868\u793a\u6f14\u5458\u51fa\u6f14\u4e86\u54ea\u4e9b\u5f71\u7247\u3002 direct \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u5bfc\u6f14\u662f\u8c01\u3002 write \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u7f16\u5267\u5173\u7cfb\u3002 has_genre \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u7c7b\u578b\u5206\u7c7b\u3002 has_keyword \u5173\u7cfb \u8868\u793a\u5f71\u7247\u7684\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u5373\u66f4\u7ec6\u5206\u7c7b\u7684\u6807\u7b7e\u3002 rate \u5173\u7cfb \u8868\u793a\u7528\u6237\u5bf9\u5f71\u7247\u7684\u6253\u5206\u3002","title":"\u5efa\u6a21\u548c\u6570\u636e\u5bfc\u5165"},{"location":"zh-CN/1.guide/3.quick-start/#_2","text":"","title":"\u67e5\u8be2\u793a\u4f8b"},{"location":"zh-CN/1.guide/3.quick-start/#_3","text":"\u67e5\u8be2\u5f71\u7247 'Forrest Gump' \u7684\u6240\u6709\u6f14\u5458\uff0c\u8fd4\u56de\u5f71\u7247\u548c\u6f14\u5458\u6784\u6210\u7684\u5b50\u56fe\u3002 MATCH (m:movie {title: 'Forrest Gump'})<-[:acted_in]-(a:person) RETURN a, m","title":"\u793a\u4f8b\u4e00"},{"location":"zh-CN/1.guide/3.quick-start/#_4","text":"\u67e5\u8be2\u5f71\u7247 'Forrest Gump' \u7684\u6240\u6709\u6f14\u5458\uff0c\u5217\u51fa\u6f14\u5458\u5728\u5f71\u7247\u4e2d\u626e\u6f14\u7684\u89d2\u8272\u3002 MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name,r.role","title":"\u793a\u4f8b\u4e8c"},{"location":"zh-CN/1.guide/3.quick-start/#_5","text":"\u67e5\u8be2 Michael \u6240\u6709\u8bc4\u5206\u4f4e\u4e8e 3 \u5206\u7684\u5f71\u7247\u3002 MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars","title":"\u793a\u4f8b\u4e09"},{"location":"zh-CN/1.guide/3.quick-start/#_6","text":"\u67e5\u8be2\u548c Michael \u6709\u76f8\u540c\u8ba8\u538c\u7684\u5f71\u7247\u7684\u7528\u6237\uff0c\u8ba8\u538c\u6807\u51c6\u4e3a\u8bc4\u5206\u5c0f\u4e8e\u4e09\u5206\u3002 MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v) WHERE r.stars < 3 AND s.stars < 3 RETURN u, m, v","title":"\u793a\u4f8b\u56db"},{"location":"zh-CN/1.guide/3.quick-start/#_7","text":"\u7ed9 Michael \u63a8\u8350\u5f71\u7247\uff0c\u65b9\u6cd5\u4e3a\u5148\u627e\u51fa\u548c Michael \u8ba8\u538c\u540c\u6837\u5f71\u7247\u7684\u7528\u6237\uff0c\u518d\u7b5b\u9009\u51fa\u8fd9\u90e8\u5206\u7528\u6237\u559c\u6b22\u7684\u5f71\u7247\u3002 MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2","title":"\u793a\u4f8b\u4e94"},{"location":"zh-CN/1.guide/3.quick-start/#_8","text":"\u67e5\u8be2 Michael \u7684\u597d\u53cb\u4eec\u559c\u6b22\u7684\u5f71\u7247\u3002 MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m","title":"\u793a\u4f8b\u516d"},{"location":"zh-CN/1.guide/3.quick-start/#_9","text":"\u901a\u8fc7\u67e5\u8be2\u7ed9'Forrest Gump'\u6253\u9ad8\u5206\u7684\u4eba\u4e5f\u559c\u6b22\u54ea\u4e9b\u5f71\u7247\uff0c\u7ed9\u559c\u6b22'Forrest Gump'\u7684\u7528\u6237\u63a8\u8350\u7c7b\u4f3c\u7684\u5f71\u7247\u3002 MATCH (m:movie {title:'Forrest Gump'})<-[r:rate]-(u:user)-[r2:rate]->(m2:movie) WHERE r.stars>3 AND r2.stars>3 RETURN m, u,m2","title":"\u793a\u4f8b\u4e03"},{"location":"zh-CN/2.operating/1.introduce/","text":"\u4ecb\u7ecd \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u4f01\u4e1a\u7248\u548c\u793e\u533a\u7248\u5dee\u5f02\uff0cTuGraph \u7684\u7279\u6027\u3001\u4ee5\u53ca TuGraph \u7684\u7248\u672c\u53f7\u7684\u63a7\u5236\u3002 \u7b80\u4ecb \u56fe\u6570\u636e\u5e93\u662f\u6309\u9876\u70b9\u548c\u8fb9\u5b58\u50a8\u6570\u636e\u7684\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u590d\u6742\u7684\u6570\u636e\u7f51\u7edc\u6a21\u578b\uff0c\u5982\u793e\u4ea4\u7f51\u7edc\u548c\u4e8b\u52a1\u7f51\u7edc\u7b49\u3002TuGraph \u662f\u7531\u8682\u8681\u96c6\u56e2\u5f00\u53d1\u7684\u56fe\u6570\u636e\u5e93\uff0c\u672c\u624b\u518c\u4ecb\u7ecd\u4e86 TuGraph \u7684\u529f\u80fd\u53ca\u4f7f\u7528\u65b9\u6cd5\u3002 TuGraph \u793e\u533a\u7248 \u793e\u533a\u7248\u662f TuGraph \u7684\u5168\u90e8\u57fa\u672c\u529f\u80fd\u7248\u672c\uff0c\u9002\u7528\u4e8e\u5355\u5b9e\u4f8b\u90e8\u7f72\u3002\u5b83\u63d0\u4f9b\u4e86\u5b8c\u5907\u7684\u56fe\u6570\u636e\u5e93\u57fa\u7840\u57fa\u7840\u529f\u80fd\uff0c\u4f8b\u5982 ACID \u517c\u5bb9\u7684\u4e8b\u52a1\uff0c\u7f16\u7a0b API\uff0c\u914d\u5957\u7684\u76f8\u5173\u5de5\u5177\u7b49\u3002\u5b83\u662f\u5b66\u4e60 TuGraph \u548c\u5b9e\u73b0\u5c0f\u578b\u9879\u76ee\u7684\u7406\u60f3\u9009\u62e9\u3002 TuGraph \u4f01\u4e1a\u7248 \u4f01\u4e1a\u7248\u672c\u5728 TuGraph \u7684\u57fa\u672c\u529f\u80fd\u4e0a\u8fdb\u884c\u4e86\u6269\u5c55\u3002\u4f8b\u5982\u90e8\u7f72\u5f62\u5f0f\u5305\u62ec\u9ad8\u53ef\u7528\u548c\u5206\u5e03\u5f0f\uff0c\u6027\u80fd\u63d0\u5347\u901f\u5ea6\u66f4\u5feb\u7684\u5e95\u5c42\u5b58\u50a8\u5f15\u64ce\uff0c\u529f\u80fd\u63d0\u5347\u66f4\u7cbe\u7ec6\u7684\u89d2\u8272\u6743\u9650\u63a7\u5236\u7b49\u3002\u5b83\u662f\u5546\u4e1a\u5316\u89e3\u51b3\u65b9\u6848\u7684\u7406\u60f3\u9009\u62e9\u3002 \u793e\u533a\u7248\u548c\u4f01\u4e1a\u7248\u5dee\u5f02 \u529f\u80fd \u793e\u533a\u7248\u672c \u4f01\u4e1a\u7248\u672c \u6807\u7b7e\u5c5e\u6027\u56fe\u6a21\u578b \u2705 \u2705 \u52a8\u6001\u6a21\u578b\u53d8\u66f4 \u2705 \u2705 \u652f\u6301\u591a\u56fe \u2705 \u2705 \u5b8c\u5584\u7684 ACID \u4e8b\u52a1\u5904\u7406 \u2705 \u2705 \u56fe\u5206\u6790\u7b97\u6cd5 \u2705 \u2705 \u57fa\u4e8e web \u5ba2\u6237\u7aef\u7684\u56fe\u53ef\u89c6\u5316\u5de5\u5177 \u2705 \u2705 OpenCypher \u56fe\u67e5\u8be2\u8bed\u8a00 \u2705 \u2705 \u57fa\u4e8e C++/Python/Java \u7684\u5b58\u50a8\u8fc7\u7a0b \u2705 \u2705 \u9002\u7528\u4e8e\u9ad8\u6548\u56fe\u7b97\u6cd5\u5f00\u53d1\u7684 Traversal API \u2705 \u2705 TB \u7ea7\u5927\u5bb9\u91cf \u2705 \u2705 \u5343\u4e07\u9876\u70b9/\u79d2\u7684\u9ad8\u541e\u5410\u7387 \u2705 \u2705 \u9ad8\u6027\u80fd\u6279\u91cf\u5bfc\u5165 \u2705 \u2705 \u5728\u7ebf/\u79bb\u7ebf\u5907\u4efd \u2705 \u2705 \u6743\u9650\u7ba1\u7406 \u2705 \u2705 \u9ad8\u53ef\u7528\u6027\u652f\u6301 \u274c \u2705 \u56fe\u6570\u636e\u5e93\u4e13\u5bb6\u652f\u6301\u670d\u52a1 \u274c \u2705 \u9ad8\u7ea7 cypher \u4f18\u5316\u5668 \u274c \u2705 \u5c5e\u6027\u7ea7\u522b\u7684\u6743\u9650\u7ba1\u7406 \u274c \u2705 TuGraph \u7279\u6027 TuGraph \u662f\u652f\u6301\u5927\u6570\u636e\u5bb9\u91cf\u3001\u4f4e\u5ef6\u8fdf\u67e5\u627e\u548c\u5feb\u901f\u56fe\u5206\u6790\u529f\u80fd\u7684\u9ad8\u6548\u56fe\u6570\u636e\u5e93\u3002\u540c\u65f6 TuGraph \u4e5f\u662f\u57fa\u4e8e\u78c1\u76d8\u7684\u6570\u636e\u5e93\uff0c\u652f\u6301\u5b58\u50a8\u591a\u8fbe\u6570\u5341 TB \u7684\u6570\u636e\u3002TuGraph \u5177\u6709\u591a\u79cd API\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u8f7b\u677e\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u4f18\u5316\u6027\u3002 \u5b83\u6709\u5982\u4e0b\u529f\u80fd\u7279\u5f81\uff1a \u6807\u7b7e\u5c5e\u6027\u56fe\u6a21\u578b \u652f\u6301\u591a\u56fe \u5b8c\u5584\u7684 ACID \u4e8b\u52a1\u5904\u7406 \u5185\u7f6e 25+ \u56fe\u5206\u6790\u7b97\u6cd5 \u57fa\u4e8e web \u5ba2\u6237\u7aef\u7684\u56fe\u53ef\u89c6\u5316\u5de5\u5177 \u652f\u6301 RESTful API \u548c RPC OpenCypher \u56fe\u67e5\u8be2\u8bed\u8a00 \u57fa\u4e8e C++/Python/Java \u7684\u5b58\u50a8\u8fc7\u7a0b \u9002\u7528\u4e8e\u9ad8\u6548\u56fe\u7b97\u6cd5\u5f00\u53d1\u7684 Traversal API \u6027\u80fd\u548c\u53ef\u6269\u5c55\u6027\uff1a TB \u7ea7\u5927\u5bb9\u91cf \u5343\u4e07\u9876\u70b9/\u79d2\u7684\u9ad8\u541e\u5410\u7387 \u9ad8\u53ef\u7528\u6027\u652f\u6301\uff08\u4f01\u4e1a\u7248\uff09 \u9ad8\u6027\u80fd\u6279\u91cf\u5bfc\u5165 \u5728\u7ebf/\u79bb\u7ebf\u5907\u4efd \u6570\u636e\u6a21\u578b \u56fe\u6a21\u578b TuGraph \u662f\u4e00\u4e2a\u5177\u5907\u591a\u56fe\u80fd\u529b\u7684\u5f3a\u6a21\u5f0f\u5c5e\u6027\u56fe\u6570\u636e\u5e93\u3002\u5176\u652f\u6301\u6700\u591a\u4e00\u4e07\u4ebf\u9876\u70b9\u7684\u6709\u5411\u56fe\u6784\u5efa\u3002 \u591a\u56fe\uff1a\u5728 TuGraph \u4e2d\uff0c\u6bcf\u4e2a\u6570\u636e\u5e93\u670d\u52a1\u5668\u53ef\u4ee5\u627f\u8f7d\u591a\u4e2a\u56fe\u6a21\u578b\uff0c\u6bcf\u4e2a\u56fe\u6a21\u578b\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u8bbf\u95ee\u63a7\u5236\u914d\u7f6e\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u5458\u53ef\u4ee5\u521b\u5efa\u6216\u5220\u9664\u6307\u5b9a\u56fe\u6a21\u578b\u3002 \u5c5e\u6027\u56fe\uff1aTuGraph \u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u5177\u6709\u4e0e\u5176\u5173\u8054\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5c5e\u6027\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u3002 \u5f3a\u6a21\u5f0f\uff1a\u6bcf\u4e2a\u9876\u70b9\u548c\u8fb9\u5fc5\u987b\u6709\u4e00\u4e2a\u6807\u7b7e\uff0c\u4e14\u521b\u5efa\u6807\u7b7e\u540e\uff0c\u5c5e\u6027\u6570\u91cf\u53ca\u7c7b\u578b\u8f83\u96be\u88ab\u4fee\u6539\u3002 \u6709\u5411\u8fb9\uff1aTuGraph \u4e2d\u7684\u8fb9\u4e3a\u6709\u5411\u8fb9\uff0c\u82e5\u8981\u6a21\u62df\u65e0\u5411\u8fb9\uff0c\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u4e24\u4e2a\u65b9\u5411\u76f8\u53cd\u7684\u8fb9\u3002 \u6570\u636e\u7c7b\u578b TuGraph \u652f\u6301\u591a\u79cd\u53ef\u7528\u4f5c\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5177\u4f53\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u5982\u4e0b\u6240\u793a\uff1a \u8868 1. TuGraph \u6240\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b \u6570\u636e\u7c7b\u578b \u6700\u5c0f\u503c \u6700\u5927\u503c \u63cf\u8ff0 BOOL false true \u5e03\u5c14\u503c INT8 -128 127 8-bit \u6574\u578b INT16 -32768 32767 16-bit \u6574\u578b INT32 - 2^31 2^31 - 1 32-bit \u6574\u578b INT64 - 2^63 2^63 - 1 64-bit \u6574\u578b DATE 0000-00-00 9999-12-31 \"YYYY-MM-DD\" \u683c\u5f0f\u7684\u65e5\u671f DATETIME 0000-00-00 00:00:00 9999-12-31 23:59:59 \"YYYY-MM-DD hh:mm:ss\"\u683c\u5f0f\u7684\u65f6\u95f4\u65e5\u671f FLOAT 32-bit \u6d6e\u70b9\u6570 DOUBLE 64-bit \u6d6e\u70b9\u6570 STRING \u957f\u5ea6\u4e0d\u5b9a\u7684\u5b57\u7b26\u4e32 BLOB \u4e8c\u8fdb\u5236\u6570\u636e BLOB \u7c7b\u578b\u7684\u6570\u636e\u5728\u8f93\u5165\u8f93\u51fa\u65f6\u4f7f\u7528 BASE64 \u7f16\u7801 \u7d22\u5f15 TuGraph \u652f\u6301\u5bf9\u9876\u70b9\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\u3002 \u7d22\u5f15\u53ef\u4ee5\u662f\u552f\u4e00\u7d22\u5f15\u6216\u975e\u552f\u4e00\u7d22\u5f15\u3002\u5982\u679c\u4e3a\u9876\u70b9\u6807\u7b7e\u521b\u5efa\u4e86\u552f\u4e00\u7d22\u5f15\uff0c\u5219 TuGraph \u5c06\u5728\u4fee\u6539\u8be5\u6807\u7b7e\u7684\u9876\u70b9\u65f6\u4f1a\u5148\u6267\u884c\u6570\u636e\u5b8c\u6574\u6027\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u8be5\u7d22\u5f15\u7684\u552f\u4e00\u6027\u3002 \u6bcf\u4e2a\u7d22\u5f15\u90fd\u57fa\u4e8e\u4e00\u4e2a\u6807\u7b7e\u7684\u4e00\u4e2a\u5b57\u6bb5\u6784\u5efa\uff0c\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u6807\u7b7e\u5bf9\u591a\u4e2a\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\u3002 BLOB \u7c7b\u578b\u7684\u5b57\u6bb5\u4e0d\u80fd\u5efa\u7acb\u7d22\u5f15\u3002 \u8f6f\u4ef6\u6388\u6743 \u54a8\u8be2\u90ae\u7bb1\uff1a tugraph@service.alipay.com \u54a8\u8be2\u7535\u8bdd\uff1a 0571-85022088\uff0c\u8f6c\u5206\u673a\u53f7 83789993# TuGraph \u7684\u7248\u672c\u53f7\u63a7\u5236 TuGraph \u91c7\u7528 \u8bed\u4e49\u5316\u7248\u672c\u63a7\u5236 2.0.0 \u6807\u51c6 \uff0c\u7248\u672c\u683c\u5f0f\uff1a\u4e3b\u7248\u672c\u53f7.\u6b21\u7248\u672c\u53f7.\u4fee\u8ba2\u53f7\uff0c\u7248\u672c\u9012\u589e\u89c4\u5219\u5982\u4e0b\uff1a \u4e3b\u7248\u672c\u53f7\uff1a\u505a\u4e86\u4e0d\u517c\u5bb9\u7684 API \u4fee\u6539 \u6b21\u7248\u672c\u53f7\uff1a\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u529f\u80fd\u6027\u65b0\u589e \u4fee\u8ba2\u53f7\uff1a\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u95ee\u9898\u4fee\u6b63","title":"\u4ecb\u7ecd"},{"location":"zh-CN/2.operating/1.introduce/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u4f01\u4e1a\u7248\u548c\u793e\u533a\u7248\u5dee\u5f02\uff0cTuGraph \u7684\u7279\u6027\u3001\u4ee5\u53ca TuGraph \u7684\u7248\u672c\u53f7\u7684\u63a7\u5236\u3002","title":"\u4ecb\u7ecd"},{"location":"zh-CN/2.operating/1.introduce/#_2","text":"\u56fe\u6570\u636e\u5e93\u662f\u6309\u9876\u70b9\u548c\u8fb9\u5b58\u50a8\u6570\u636e\u7684\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u590d\u6742\u7684\u6570\u636e\u7f51\u7edc\u6a21\u578b\uff0c\u5982\u793e\u4ea4\u7f51\u7edc\u548c\u4e8b\u52a1\u7f51\u7edc\u7b49\u3002TuGraph \u662f\u7531\u8682\u8681\u96c6\u56e2\u5f00\u53d1\u7684\u56fe\u6570\u636e\u5e93\uff0c\u672c\u624b\u518c\u4ecb\u7ecd\u4e86 TuGraph \u7684\u529f\u80fd\u53ca\u4f7f\u7528\u65b9\u6cd5\u3002","title":"\u7b80\u4ecb"},{"location":"zh-CN/2.operating/1.introduce/#tugraph","text":"\u793e\u533a\u7248\u662f TuGraph \u7684\u5168\u90e8\u57fa\u672c\u529f\u80fd\u7248\u672c\uff0c\u9002\u7528\u4e8e\u5355\u5b9e\u4f8b\u90e8\u7f72\u3002\u5b83\u63d0\u4f9b\u4e86\u5b8c\u5907\u7684\u56fe\u6570\u636e\u5e93\u57fa\u7840\u57fa\u7840\u529f\u80fd\uff0c\u4f8b\u5982 ACID \u517c\u5bb9\u7684\u4e8b\u52a1\uff0c\u7f16\u7a0b API\uff0c\u914d\u5957\u7684\u76f8\u5173\u5de5\u5177\u7b49\u3002\u5b83\u662f\u5b66\u4e60 TuGraph \u548c\u5b9e\u73b0\u5c0f\u578b\u9879\u76ee\u7684\u7406\u60f3\u9009\u62e9\u3002","title":"TuGraph \u793e\u533a\u7248"},{"location":"zh-CN/2.operating/1.introduce/#tugraph_1","text":"\u4f01\u4e1a\u7248\u672c\u5728 TuGraph \u7684\u57fa\u672c\u529f\u80fd\u4e0a\u8fdb\u884c\u4e86\u6269\u5c55\u3002\u4f8b\u5982\u90e8\u7f72\u5f62\u5f0f\u5305\u62ec\u9ad8\u53ef\u7528\u548c\u5206\u5e03\u5f0f\uff0c\u6027\u80fd\u63d0\u5347\u901f\u5ea6\u66f4\u5feb\u7684\u5e95\u5c42\u5b58\u50a8\u5f15\u64ce\uff0c\u529f\u80fd\u63d0\u5347\u66f4\u7cbe\u7ec6\u7684\u89d2\u8272\u6743\u9650\u63a7\u5236\u7b49\u3002\u5b83\u662f\u5546\u4e1a\u5316\u89e3\u51b3\u65b9\u6848\u7684\u7406\u60f3\u9009\u62e9\u3002","title":"TuGraph \u4f01\u4e1a\u7248"},{"location":"zh-CN/2.operating/1.introduce/#_3","text":"\u529f\u80fd \u793e\u533a\u7248\u672c \u4f01\u4e1a\u7248\u672c \u6807\u7b7e\u5c5e\u6027\u56fe\u6a21\u578b \u2705 \u2705 \u52a8\u6001\u6a21\u578b\u53d8\u66f4 \u2705 \u2705 \u652f\u6301\u591a\u56fe \u2705 \u2705 \u5b8c\u5584\u7684 ACID \u4e8b\u52a1\u5904\u7406 \u2705 \u2705 \u56fe\u5206\u6790\u7b97\u6cd5 \u2705 \u2705 \u57fa\u4e8e web \u5ba2\u6237\u7aef\u7684\u56fe\u53ef\u89c6\u5316\u5de5\u5177 \u2705 \u2705 OpenCypher \u56fe\u67e5\u8be2\u8bed\u8a00 \u2705 \u2705 \u57fa\u4e8e C++/Python/Java \u7684\u5b58\u50a8\u8fc7\u7a0b \u2705 \u2705 \u9002\u7528\u4e8e\u9ad8\u6548\u56fe\u7b97\u6cd5\u5f00\u53d1\u7684 Traversal API \u2705 \u2705 TB \u7ea7\u5927\u5bb9\u91cf \u2705 \u2705 \u5343\u4e07\u9876\u70b9/\u79d2\u7684\u9ad8\u541e\u5410\u7387 \u2705 \u2705 \u9ad8\u6027\u80fd\u6279\u91cf\u5bfc\u5165 \u2705 \u2705 \u5728\u7ebf/\u79bb\u7ebf\u5907\u4efd \u2705 \u2705 \u6743\u9650\u7ba1\u7406 \u2705 \u2705 \u9ad8\u53ef\u7528\u6027\u652f\u6301 \u274c \u2705 \u56fe\u6570\u636e\u5e93\u4e13\u5bb6\u652f\u6301\u670d\u52a1 \u274c \u2705 \u9ad8\u7ea7 cypher \u4f18\u5316\u5668 \u274c \u2705 \u5c5e\u6027\u7ea7\u522b\u7684\u6743\u9650\u7ba1\u7406 \u274c \u2705","title":"\u793e\u533a\u7248\u548c\u4f01\u4e1a\u7248\u5dee\u5f02"},{"location":"zh-CN/2.operating/1.introduce/#tugraph_2","text":"TuGraph \u662f\u652f\u6301\u5927\u6570\u636e\u5bb9\u91cf\u3001\u4f4e\u5ef6\u8fdf\u67e5\u627e\u548c\u5feb\u901f\u56fe\u5206\u6790\u529f\u80fd\u7684\u9ad8\u6548\u56fe\u6570\u636e\u5e93\u3002\u540c\u65f6 TuGraph \u4e5f\u662f\u57fa\u4e8e\u78c1\u76d8\u7684\u6570\u636e\u5e93\uff0c\u652f\u6301\u5b58\u50a8\u591a\u8fbe\u6570\u5341 TB \u7684\u6570\u636e\u3002TuGraph \u5177\u6709\u591a\u79cd API\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u8f7b\u677e\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u4f18\u5316\u6027\u3002 \u5b83\u6709\u5982\u4e0b\u529f\u80fd\u7279\u5f81\uff1a \u6807\u7b7e\u5c5e\u6027\u56fe\u6a21\u578b \u652f\u6301\u591a\u56fe \u5b8c\u5584\u7684 ACID \u4e8b\u52a1\u5904\u7406 \u5185\u7f6e 25+ \u56fe\u5206\u6790\u7b97\u6cd5 \u57fa\u4e8e web \u5ba2\u6237\u7aef\u7684\u56fe\u53ef\u89c6\u5316\u5de5\u5177 \u652f\u6301 RESTful API \u548c RPC OpenCypher \u56fe\u67e5\u8be2\u8bed\u8a00 \u57fa\u4e8e C++/Python/Java \u7684\u5b58\u50a8\u8fc7\u7a0b \u9002\u7528\u4e8e\u9ad8\u6548\u56fe\u7b97\u6cd5\u5f00\u53d1\u7684 Traversal API \u6027\u80fd\u548c\u53ef\u6269\u5c55\u6027\uff1a TB \u7ea7\u5927\u5bb9\u91cf \u5343\u4e07\u9876\u70b9/\u79d2\u7684\u9ad8\u541e\u5410\u7387 \u9ad8\u53ef\u7528\u6027\u652f\u6301\uff08\u4f01\u4e1a\u7248\uff09 \u9ad8\u6027\u80fd\u6279\u91cf\u5bfc\u5165 \u5728\u7ebf/\u79bb\u7ebf\u5907\u4efd","title":"TuGraph \u7279\u6027"},{"location":"zh-CN/2.operating/1.introduce/#_4","text":"","title":"\u6570\u636e\u6a21\u578b"},{"location":"zh-CN/2.operating/1.introduce/#_5","text":"TuGraph \u662f\u4e00\u4e2a\u5177\u5907\u591a\u56fe\u80fd\u529b\u7684\u5f3a\u6a21\u5f0f\u5c5e\u6027\u56fe\u6570\u636e\u5e93\u3002\u5176\u652f\u6301\u6700\u591a\u4e00\u4e07\u4ebf\u9876\u70b9\u7684\u6709\u5411\u56fe\u6784\u5efa\u3002 \u591a\u56fe\uff1a\u5728 TuGraph \u4e2d\uff0c\u6bcf\u4e2a\u6570\u636e\u5e93\u670d\u52a1\u5668\u53ef\u4ee5\u627f\u8f7d\u591a\u4e2a\u56fe\u6a21\u578b\uff0c\u6bcf\u4e2a\u56fe\u6a21\u578b\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u8bbf\u95ee\u63a7\u5236\u914d\u7f6e\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u5458\u53ef\u4ee5\u521b\u5efa\u6216\u5220\u9664\u6307\u5b9a\u56fe\u6a21\u578b\u3002 \u5c5e\u6027\u56fe\uff1aTuGraph \u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u5177\u6709\u4e0e\u5176\u5173\u8054\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5c5e\u6027\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u3002 \u5f3a\u6a21\u5f0f\uff1a\u6bcf\u4e2a\u9876\u70b9\u548c\u8fb9\u5fc5\u987b\u6709\u4e00\u4e2a\u6807\u7b7e\uff0c\u4e14\u521b\u5efa\u6807\u7b7e\u540e\uff0c\u5c5e\u6027\u6570\u91cf\u53ca\u7c7b\u578b\u8f83\u96be\u88ab\u4fee\u6539\u3002 \u6709\u5411\u8fb9\uff1aTuGraph \u4e2d\u7684\u8fb9\u4e3a\u6709\u5411\u8fb9\uff0c\u82e5\u8981\u6a21\u62df\u65e0\u5411\u8fb9\uff0c\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u4e24\u4e2a\u65b9\u5411\u76f8\u53cd\u7684\u8fb9\u3002","title":"\u56fe\u6a21\u578b"},{"location":"zh-CN/2.operating/1.introduce/#_6","text":"TuGraph \u652f\u6301\u591a\u79cd\u53ef\u7528\u4f5c\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5177\u4f53\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u5982\u4e0b\u6240\u793a\uff1a \u8868 1. TuGraph \u6240\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b \u6570\u636e\u7c7b\u578b \u6700\u5c0f\u503c \u6700\u5927\u503c \u63cf\u8ff0 BOOL false true \u5e03\u5c14\u503c INT8 -128 127 8-bit \u6574\u578b INT16 -32768 32767 16-bit \u6574\u578b INT32 - 2^31 2^31 - 1 32-bit \u6574\u578b INT64 - 2^63 2^63 - 1 64-bit \u6574\u578b DATE 0000-00-00 9999-12-31 \"YYYY-MM-DD\" \u683c\u5f0f\u7684\u65e5\u671f DATETIME 0000-00-00 00:00:00 9999-12-31 23:59:59 \"YYYY-MM-DD hh:mm:ss\"\u683c\u5f0f\u7684\u65f6\u95f4\u65e5\u671f FLOAT 32-bit \u6d6e\u70b9\u6570 DOUBLE 64-bit \u6d6e\u70b9\u6570 STRING \u957f\u5ea6\u4e0d\u5b9a\u7684\u5b57\u7b26\u4e32 BLOB \u4e8c\u8fdb\u5236\u6570\u636e BLOB \u7c7b\u578b\u7684\u6570\u636e\u5728\u8f93\u5165\u8f93\u51fa\u65f6\u4f7f\u7528 BASE64 \u7f16\u7801","title":"\u6570\u636e\u7c7b\u578b"},{"location":"zh-CN/2.operating/1.introduce/#_7","text":"TuGraph \u652f\u6301\u5bf9\u9876\u70b9\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\u3002 \u7d22\u5f15\u53ef\u4ee5\u662f\u552f\u4e00\u7d22\u5f15\u6216\u975e\u552f\u4e00\u7d22\u5f15\u3002\u5982\u679c\u4e3a\u9876\u70b9\u6807\u7b7e\u521b\u5efa\u4e86\u552f\u4e00\u7d22\u5f15\uff0c\u5219 TuGraph \u5c06\u5728\u4fee\u6539\u8be5\u6807\u7b7e\u7684\u9876\u70b9\u65f6\u4f1a\u5148\u6267\u884c\u6570\u636e\u5b8c\u6574\u6027\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u8be5\u7d22\u5f15\u7684\u552f\u4e00\u6027\u3002 \u6bcf\u4e2a\u7d22\u5f15\u90fd\u57fa\u4e8e\u4e00\u4e2a\u6807\u7b7e\u7684\u4e00\u4e2a\u5b57\u6bb5\u6784\u5efa\uff0c\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u6807\u7b7e\u5bf9\u591a\u4e2a\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\u3002 BLOB \u7c7b\u578b\u7684\u5b57\u6bb5\u4e0d\u80fd\u5efa\u7acb\u7d22\u5f15\u3002","title":"\u7d22\u5f15"},{"location":"zh-CN/2.operating/1.introduce/#_8","text":"\u54a8\u8be2\u90ae\u7bb1\uff1a tugraph@service.alipay.com \u54a8\u8be2\u7535\u8bdd\uff1a 0571-85022088\uff0c\u8f6c\u5206\u673a\u53f7 83789993#","title":"\u8f6f\u4ef6\u6388\u6743"},{"location":"zh-CN/2.operating/1.introduce/#tugraph_3","text":"TuGraph \u91c7\u7528 \u8bed\u4e49\u5316\u7248\u672c\u63a7\u5236 2.0.0 \u6807\u51c6 \uff0c\u7248\u672c\u683c\u5f0f\uff1a\u4e3b\u7248\u672c\u53f7.\u6b21\u7248\u672c\u53f7.\u4fee\u8ba2\u53f7\uff0c\u7248\u672c\u9012\u589e\u89c4\u5219\u5982\u4e0b\uff1a \u4e3b\u7248\u672c\u53f7\uff1a\u505a\u4e86\u4e0d\u517c\u5bb9\u7684 API \u4fee\u6539 \u6b21\u7248\u672c\u53f7\uff1a\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u529f\u80fd\u6027\u65b0\u589e \u4fee\u8ba2\u53f7\uff1a\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u95ee\u9898\u4fee\u6b63","title":"TuGraph \u7684\u7248\u672c\u53f7\u63a7\u5236"},{"location":"zh-CN/2.operating/10.resource-monitoring/","text":"TuGraph\u53ef\u89c6\u5316\u76d1\u63a7\u90e8\u7f72 \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u53ef\u89c6\u5316\u76d1\u63a7\u90e8\u7f72\u65b9\u5f0f \u8bbe\u8ba1\u601d\u8def \u53ef\u89c6\u5316\u76d1\u63a7\u5e76\u4e0d\u662fTuGraph\u81ea\u8eab\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5728\u8bbe\u8ba1\u65f6\u5c06\u53ef\u89c6\u5316\u76d1\u63a7\u4f5c\u4e3aTuGraph\u5468\u8fb9\u751f\u6001\u4e2d\u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u6765\u51cf\u5c11\u548cTuGraph\u6570\u636e\u5e93\u7684\u8026\u5408\u5ea6\uff0c\u4ee5\u53ca\u5bf9\u4e8eTuGraph\u81ea\u8eab\u7684\u5f71\u54cd\u3002TuGraph\u53ef\u89c6\u5316\u76d1\u63a7\u91c7\u7528\u76ee\u524d\u6700\u706b\u70ed\u7684\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\uff0cTuGraph Monitor + Prometheus + Grafana\u6765\u5b9e\u73b0\u3002\u5176\u4e2dTuGraph Monitor\u4f5c\u4e3aTuGraph\u670d\u52a1\u7684\u5ba2\u6237\u7aef\uff0c\u901a\u8fc7TCP\u94fe\u63a5\u5411TuGraph\u670d\u52a1\u53d1\u8d77Procedure\u8bf7\u6c42\uff0cTuGraph\u670d\u52a1\u5728\u63a5\u6536\u5230\u8bf7\u6c42\u540e\u6536\u96c6\u81ea\u8eab\u6240\u5728\u673a\u5668\u7684cpu\uff0cmemory\uff0cdisk\uff0cio\uff0c\u4ee5\u53ca\u8bf7\u6c42\u6570\u91cf\u7b49\u6307\u6807\u7684\u7edf\u8ba1\u7ed3\u679c\u8fdb\u884c\u54cd\u5e94\u3002TuGraph Monitor\u5728\u63a5\u6536\u5230TuGraph\u54cd\u5e94\u7684\u6307\u6807\u6570\u636e\u540e\uff0c\u5c06\u6570\u636e\u5305\u88c5\u6210prometheus\u9700\u8981\u7684\u683c\u5f0f\uff0c\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u7b49\u5f85Prometheus\u670d\u52a1\u901a\u8fc7http\u8bf7\u6c42\u83b7\u53d6\u3002Prometheus\u670d\u52a1\u4f1a\u5b9a\u671f\u901a\u8fc7http\u8bf7\u6c42\u4eceTuGraph Monitor\u83b7\u53d6\u5c01\u88c5\u597d\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u6309\u7167\u83b7\u53d6\u7684\u65f6\u95f4\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u65f6\u5e8f\u6570\u636e\u5e93\u4e2d\u3002Grafana\u53ef\u4ee5\u6839\u636e\u7528\u6237\u7684\u914d\u7f6e\uff0c\u4ecePrometheus\u5904\u83b7\u53d6\u67d0\u4e2a\u65f6\u95f4\u6bb5\u5185\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u5e76\u5728web\u754c\u9762\u4e0a\u7ed8\u5236\u6d45\u663e\u6613\u61c2\u7684\u56fe\u5f62\u6765\u5c55\u793a\u6700\u7ec8\u7ed3\u679c\u3002\u6574\u4e2a\u8bf7\u6c42\u94fe\u8def\u4e2d\uff0c\u90fd\u91c7\u7528\u4e86\u4e3b\u52a8\u83b7\u53d6\uff0c\u5373PULL\u7684\u6a21\u578b\uff0c\u597d\u5904\u4e4b\u4e00\u662f\u5b83\u80fd\u6700\u5927\u9650\u5ea6\u7684\u907f\u514d\u6570\u636e\u751f\u4ea7\u8005\u548c\u6570\u636e\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u4f7f\u5f97\u5f00\u53d1\u66f4\u7b80\u5355\uff0c\u597d\u5904\u4e4b\u4e8c\u662f\u6570\u636e\u751f\u4ea7\u8005\u4e0d\u9700\u8981\u8003\u8651\u6570\u636e\u6d88\u8d39\u8005\u7684\u6570\u636e\u5904\u7406\u80fd\u529b\uff0c\u5373\u4f7f\u67d0\u4e2a\u6d88\u8d39\u8005\u7684\u6570\u636e\u5904\u7406\u80fd\u529b\u8f83\u5f31\uff0c\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u751f\u4ea7\u8005\u751f\u4ea7\u6570\u636e\u8fc7\u5feb\u800c\u538b\u57ae\u6d88\u8d39\u8005\u3002\u4e3b\u52a8\u62c9\u53d6\u6a21\u578b\u7684\u4e0d\u8db3\u4e4b\u5904\u5728\u4e8e\u6570\u636e\u7684\u5b9e\u65f6\u6027\u4e0d\u591f\uff0c\u4f46\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u6570\u636e\u5e76\u6ca1\u6709\u5f88\u9ad8\u7684\u5b9e\u65f6\u6027\u8981\u6c42\u3002 TuGraph TuGraph\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u6536\u96c6\u670d\u52a1\u6240\u5728\u673a\u5668\u4e2d\u78c1\u76d8\uff0c\u5185\u5b58\uff0c\u7f51\u7edcIO\uff0c\u4ee5\u53ca\u67e5\u8be2\u8bf7\u6c42\u7b49\u591a\u79cd\u6570\u636e\u4fe1\u606f\u7684\u80fd\u529b\uff0c\u5e76\u901a\u8fc7\u6807\u51c6Procedure\u65b9\u5f0f\u63d0\u4f9b\u67e5\u8be2\u3002\u6536\u96c6\u6570\u636e\u8fd9\u4e00\u52a8\u4f5c\u4ec5\u5728\u6709\u7528\u6237\u901a\u8fc7\u63a5\u53e3\u67e5\u8be2\u65f6\u624d\u4f1a\u53d1\u751f\uff0c\u907f\u514d\u4e86\u5728\u7528\u6237\u4e0d\u9700\u8981TuGraph\u76d1\u63a7\u670d\u52a1\u6240\u5728\u673a\u5668\u7684\u6307\u6807\u65f6\u5bf9\u7528\u6237\u4e1a\u52a1\u67e5\u8be2\u8bf7\u6c42\u5e26\u6765\u7684\u5f71\u54cd\u3002 TuGraph Monitor TuGraph Monitor\u662fTuGraph\u5468\u8fb9\u751f\u6001\u4e2d\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u5b83\u4f5c\u4e3aTuGraph\u4f17\u591a\u7528\u6237\u4e2d\u7684\u4e00\u4e2a\uff0c\u901a\u8fc7C++ RPC Client\u4e0eTuGraph\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u8fc7Procedure\u67e5\u8be2\u63a5\u53e3\u6765\u67e5\u8be2TuGraph\u670d\u52a1\u6240\u5728\u673a\u5668\u7684\u6027\u80fd\u6307\u6807\uff0c\u5e76\u5c06TuGraph\u8fd4\u56de\u7684\u7ed3\u679c\u5305\u88c5\u6210Prometheus\u9700\u8981\u7684\u6570\u636e\u6a21\u578b\uff0c\u7b49\u5f85Prometheus\u83b7\u53d6\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u67e5\u8be2\u65f6\u95f4\u95f4\u9694\u6765\u4fdd\u8bc1\u83b7\u53d6\u76d1\u63a7\u6307\u6807\u5bf9\u4e8e\u4e1a\u52a1\u67e5\u8be2\u7684\u5f71\u54cd\u6700\u5c0f\u5316\u3002 Prometheus Prometheus\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u76d1\u63a7\u5e73\u53f0\uff0c\u5e76\u914d\u5907\u6709\u4e13\u5c5e\u7684\u65f6\u5e8f\u6570\u636e\u5e93\uff0c\u5b83\u4f1a\u5b9a\u671f\u901a\u8fc7http\u8bf7\u6c42\u4eceTuGraph Monitor\u670d\u52a1\u83b7\u53d6\u7edf\u8ba1\u6307\u6807\uff0c\u5e76\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u65f6\u5e8f\u6570\u636e\u5e93\u4e2d\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003\u5b98\u7f51: https://prometheus.io/docs/introduction/first_steps Grafana Grafana\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u53ef\u89c6\u5316\u548c\u5206\u6790\u8f6f\u4ef6\uff0c\u5b83\u53ef\u4ee5\u4ece\u5305\u542bPrometheus\u5728\u5185\u7684\u591a\u4e2a\u6570\u636e\u6e90\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u65f6\u5e8f\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u7cbe\u7f8e\u56fe\u5f62\u548c\u53ef\u89c6\u5316\u6548\u679c\u7684\u5de5\u5177\u3002\u5177\u4f53\u4fe1\u606f\u8bf7\u53c2\u8003\u5b98\u7f51: https://grafana.com/docs/grafana/v7.5/getting-started/ \u90e8\u7f72\u65b9\u6848 \u7b2c\u4e00\u6b65 \u542f\u52a8TuGraph\u670d\u52a1\uff0c\u8be6\u7ec6\u65b9\u6cd5\u8bf7\u53c2\u8003\u6587\u6863: https://github.com/TuGraph-db/tugraph-db/blob/master/doc/zh-CN/1.guide/3.quick-start.md \u7b2c\u4e8c\u6b65 \u542f\u52a8TuGraph Monitor\u5de5\u5177\uff0c\u542f\u52a8\u547d\u4ee4\u5982\u4e0b\uff1a ./lgraph_monitor --server_host 127.0.0.1:9091 -u admin -p your_password \\ --monitor_host 127.0.0.1:9999 --sampling_interval_ms 1000 \u53c2\u6570\u542b\u4e49\u5982\u4e0b Available command line options: --server_host Host on which the tugraph rpc server runs. Default=127.0.0.1:9091. -u, --user DB username. -p, --password DB password. --monitor_host Host on which the monitor restful server runs. Default=127.0.0.1:9999. --sampling_interval_ms sampling interval in millisecond. Default=1.5e2. -h, --help Print this help message. Default=0. \u7b2c\u4e09\u6b65 \u4e0b\u8f7d\u7b26\u5408\u60a8\u673a\u5668\u67b6\u6784\u4ee5\u53ca\u7cfb\u7edf\u7248\u672c\u7684Prometheus tar\u5305\uff0c\u4e0b\u8f7d\u5730\u5740: https://prometheus.io/download/ \u89e3\u538btar\u5305\uff0c\u547d\u4ee4\u5982\u4e0b tar -zxvf prometheus-2.37.5.linux-amd64.tar.gz \u4fee\u6539\u914d\u7f6e\u6587\u4ef6prometheus.yml\uff0c\u65b0\u589e\u5982\u4e0b\u914d\u7f6e\uff0c\u4f7f\u5176\u53ef\u4ee5\u6293\u53d6TuGraph Monitor\u5305\u88c5\u597d\u7684\u6027\u80fd\u6570\u636e scrape_configs: # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config. - job_name: \"tugraph\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"localhost:9111\"] \u542f\u52a8prometheus\uff0c\u5177\u4f53\u7684\u542f\u52a8\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u83b7\u53d6 ./prometheus -h \u9a8c\u8bc1prometheus\u670d\u52a1\u662f\u5426\u6b63\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7web\u7aef\u767b\u9646prometheus\u670d\u52a1\uff0c\u67e5\u8be2\u76d1\u63a7\u6307\u6807resources_report\u662f\u5426\u5df2\u7ecf\u83b7\u53d6\u5230\uff0c\u80fd\u6210\u529f\u67e5\u8be2\u5230\u6570\u636e\u5219\u6b63\u786e \u7b2c\u56db\u6b65 \u4e0b\u8f7d\u7b26\u5408\u60a8\u673a\u5668\u67b6\u6784\u4ee5\u53ca\u7cfb\u7edf\u7248\u672c\u7684Grafana\u5b89\u88c5\u5305\uff0c\u4e0b\u8f7d\u5730\u5740: https://grafana.com/grafana/download \u5b89\u88c5Grafana\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003: https://grafana.com/docs/grafana/v7.5/installation/ \u542f\u52a8Grafana\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003: https://grafana.com/docs/grafana/v7.5/installation/ \u914d\u7f6eGrafana\uff0c\u9996\u5148\u5728\u6570\u636e\u6e90\u8bbe\u7f6e\u4e2d\u914d\u7f6ePrometheus\u7684IP\u5730\u5740\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\u8fde\u63a5\u529f\u80fd\uff0c\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u8fde\u63a5\u6570\u636e\u6e90\u3002\u7136\u540e\uff0c\u5bfc\u5165\u5982\u4e0b\u6a21\u7248\uff0c\u5e76\u5728\u9875\u9762\u4e2d\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u4fee\u6539\u6b63\u786e\u7684\u63a5\u53e3IP\u548c\u7aef\u53e3\u3002\u6700\u540e\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u7f6e\u5237\u65b0\u65f6\u95f4\u548c\u76d1\u63a7\u65f6\u95f4\u8303\u56f4 { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": { \"type\": \"grafana\", }, \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"target\": { \"limit\": 100, \"matchAny\": false, \"tags\": [], \"type\": \"dashboard\" }, \"type\": \"dashboard\" } ] }, \"editable\": true, \"fiscalYearStartMonth\": 0, \"graphTooltip\": 0, \"id\": 2, \"links\": [], \"liveNow\": false, \"panels\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false } }, \"mappings\": [], \"unit\": \"kbytes\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"D {instance=\\\"localhost:7010\\\", job=\\\"TuGraph\\\", resouces_type=\\\"memory\\\", type=\\\"available\\\"}\" }, \"properties\": [ { \"id\": \"displayName\", \"value\": \"others\" } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"D {__name__=\\\"resources_report\\\", instance=\\\"localhost:7010\\\", job=\\\"TuGraph\\\", resouces_type=\\\"memory\\\", type=\\\"available\\\"}\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-green\", \"mode\": \"fixed\" } }, { \"id\": \"displayName\", \"value\": \"others\" } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"others\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-blue\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"graph_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-orange\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 16, \"w\": 6, \"x\": 0, \"y\": 0 }, \"id\": 14, \"options\": { \"displayLabels\": [ \"name\", \"value\" ], \"legend\": { \"displayMode\": \"table\", \"placement\": \"bottom\", \"values\": [ \"percent\", \"value\" ] }, \"pieType\": \"pie\", \"reduceOptions\": { \"calcs\": [ \"lastNotNull\" ], \"fields\": \"\", \"values\": false }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"memory\\\",type=\\\"self\\\"}\", \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"memory\\\",type=\\\"available\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"B\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"memory\\\",type=\\\"total\\\"}\", \"hide\": true, \"legendFormat\": \"{{label_name}}\", \"range\": true, \"refId\": \"C\" }, { \"datasource\": { \"type\": \"__expr__\", }, \"expression\": \"$C -$A - $B\", \"hide\": false, \"refId\": \"D\", \"type\": \"math\" } ], \"title\": \"\u5185\u5b58\", \"type\": \"piechart\" }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 1000 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"5m\", \"frequency\": \"1m\", \"handler\": 1, \"message\": \"\u3010\u751f\u4ea7\u56fe\u6570\u636e\u5e93Grafana\u3011\\n QPS\u8d85\u8fc71000\", \"name\": \"\u8bf7\u6c42\u7edf\u8ba1 alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"axisLabel\": \"\", \"axisPlacement\": \"auto\", \"barAlignment\": 0, \"drawStyle\": \"line\", \"fillOpacity\": 7, \"gradientMode\": \"none\", \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false }, \"lineInterpolation\": \"smooth\", \"lineWidth\": 1, \"pointSize\": 5, \"scaleDistribution\": { \"type\": \"linear\" }, \"showPoints\": \"auto\", \"spanNulls\": false, \"stacking\": { \"group\": \"A\", \"mode\": \"none\" }, \"thresholdsStyle\": { \"mode\": \"off\" } }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \" \" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"write\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-blue\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 16, \"w\": 12, \"x\": 6, \"y\": 0 }, \"id\": 4, \"options\": { \"legend\": { \"calcs\": [ \"min\", \"max\", \"mean\", \"last\" ], \"displayMode\": \"table\", \"placement\": \"bottom\" }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"request\\\",type=~\\\"total|write\\\"}\", \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"op\": \"gt\", \"value\": 1000, \"visible\": true } ], \"title\": \"\u8bf7\u6c42\u7edf\u8ba1\", \"type\": \"timeseries\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false } }, \"mappings\": [], \"unit\": \"decbits\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"graph_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-red\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"available\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-orange\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"D\" }, \"properties\": [ { \"id\": \"displayName\", \"value\": \"other\" } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"other\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-purple\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 16, \"w\": 6, \"x\": 18, \"y\": 0 }, \"id\": 12, \"options\": { \"displayLabels\": [ \"name\", \"value\" ], \"legend\": { \"displayMode\": \"table\", \"placement\": \"bottom\", \"sortBy\": \"Value\", \"sortDesc\": true, \"values\": [ \"value\", \"percent\" ] }, \"pieType\": \"pie\", \"reduceOptions\": { \"calcs\": [ \"lastNotNull\" ], \"fields\": \"\", \"values\": false }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"exemplar\": false, \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk\\\",type=\\\"available\\\"}\", \"format\": \"time_series\", \"instant\": false, \"interval\": \"\", \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk\\\",type=\\\"self\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"B\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk\\\",type=\\\"total\\\"}\", \"hide\": true, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"C\" }, { \"datasource\": { \"type\": \"__expr__\", }, \"expression\": \"$C - $A - $B\", \"hide\": false, \"refId\": \"D\", \"type\": \"math\" } ], \"title\": \"\u78c1\u76d8\", \"transformations\": [ { \"id\": \"configFromData\", \"options\": { \"applyTo\": { \"id\": \"byFrameRefID\" }, \"configRefId\": \"config\", \"mappings\": [] } } ], \"type\": \"piechart\" }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 90 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"5m\", \"frequency\": \"1m\", \"handler\": 1, \"message\": \"\u3010\u751f\u4ea7\u56fe\u6570\u636e\u5e93Grafana\u3011\\nCPU\u4f7f\u7528\u7387\u8d85\u8fc790%\", \"name\": \"CPU\u4f7f\u7528\u7387 alert\", \"noDataState\": \"no_data\", \"notifications\": [ { } ] }, \"datasource\": { \"type\": \"prometheus\", }, \"description\": \"\", \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"axisLabel\": \"\", \"axisPlacement\": \"auto\", \"barAlignment\": 0, \"drawStyle\": \"line\", \"fillOpacity\": 4, \"gradientMode\": \"none\", \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false }, \"lineInterpolation\": \"linear\", \"lineWidth\": 1, \"pointSize\": 5, \"scaleDistribution\": { \"type\": \"linear\" }, \"showPoints\": \"auto\", \"spanNulls\": false, \"stacking\": { \"group\": \"A\", \"mode\": \"none\" }, \"thresholdsStyle\": { \"mode\": \"off\" } }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \"percent\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"graph_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-orange\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"total_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-purple\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"self\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-green\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"total\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-purple\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 14, \"w\": 12, \"x\": 0, \"y\": 16 }, \"id\": 6, \"options\": { \"legend\": { \"calcs\": [ \"min\", \"max\", \"mean\", \"last\" ], \"displayMode\": \"table\", \"placement\": \"bottom\" }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"cpu\\\",type=~\\\"total|self\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"op\": \"gt\", \"value\": 90, \"visible\": true } ], \"title\": \"CPU\u4f7f\u7528\u7387\", \"type\": \"timeseries\" }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 10000 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"5m\", \"frequency\": \"1m\", \"handler\": 1, \"message\": \"\u3010\u751f\u4ea7\u56fe\u6570\u636e\u5e93Grafana\u3011\\n \u78c1\u76d8IO\u8d85\u8fc710MB/S\", \"name\": \"\u78c1\u76d8IO alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"axisLabel\": \"\", \"axisPlacement\": \"auto\", \"barAlignment\": 0, \"drawStyle\": \"line\", \"fillOpacity\": 7, \"gradientMode\": \"none\", \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false }, \"lineInterpolation\": \"smooth\", \"lineWidth\": 1, \"pointSize\": 5, \"scaleDistribution\": { \"type\": \"linear\" }, \"showPoints\": \"auto\", \"spanNulls\": false, \"stacking\": { \"group\": \"A\", \"mode\": \"none\" }, \"thresholdsStyle\": { \"mode\": \"off\" } }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \"bps\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"read\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"super-light-green\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"write\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"super-light-red\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 14, \"w\": 12, \"x\": 12, \"y\": 16 }, \"id\": 2, \"options\": { \"legend\": { \"calcs\": [ \"min\", \"max\", \"mean\", \"last\" ], \"displayMode\": \"table\", \"placement\": \"bottom\" }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"builder\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk_rate\\\",type=~\\\"read|write\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"op\": \"gt\", \"value\": 10000, \"visible\": true } ], \"title\": \"\u78c1\u76d8IO\", \"type\": \"timeseries\" } ], \"refresh\": \"\", \"schemaVersion\": 36, \"style\": \"dark\", \"tags\": [], \"templating\": { \"list\": [] }, \"time\": { \"from\": \"now-24h\", \"to\": \"now\" }, \"timepicker\": { \"hidden\": false, \"refresh_intervals\": [ \"10s\" ] }, \"timezone\": \"\", \"title\": \"TuGraph\u76d1\u63a7\u9875\u9762\", \"version\": 20, \"weekStart\": \"\" } \u9a8c\u8bc1\u6548\u679c\uff0c\u5237\u65b0\u6d4f\u89c8\u5668\u9875\u9762\u3002\u5982\u679c\u6b63\u786e\u663e\u793a\u997c\u56fe\u548c\u6298\u7ebf\u56fe\uff0c\u5219\u914d\u7f6e\u5b8c\u6210\u3002 \u672a\u6765\u8ba1\u5212 \u76ee\u524d\u53ef\u89c6\u5316\u76d1\u63a7\u53ea\u652f\u6301\u5355\u673a\u76d1\u63a7\uff0c\u80fd\u76d1\u63a7\u670d\u52a1\u6240\u5728\u673a\u5668\u7684cpu\uff0c\u78c1\u76d8\uff0c\u7f51\u7edcio\uff0c\u8bf7\u6c42qps\u7b49\u6027\u80fd\u6307\u6807\uff0c\u672a\u6765\u5c06\u4f1a\u5b9e\u73b0\u76d1\u63a7ha\u96c6\u7fa4\u7684\u529f\u80fd\uff0c\u4e5f\u4f1a\u5c06\u66f4\u591a\u6709\u610f\u4e49\u7684\u6307\u6807\u7eb3\u5165\u76d1\u63a7\u8303\u56f4","title":"\u8d44\u6e90\u76d1\u63a7"},{"location":"zh-CN/2.operating/10.resource-monitoring/#tugraph","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u53ef\u89c6\u5316\u76d1\u63a7\u90e8\u7f72\u65b9\u5f0f","title":"TuGraph\u53ef\u89c6\u5316\u76d1\u63a7\u90e8\u7f72"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_1","text":"\u53ef\u89c6\u5316\u76d1\u63a7\u5e76\u4e0d\u662fTuGraph\u81ea\u8eab\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5728\u8bbe\u8ba1\u65f6\u5c06\u53ef\u89c6\u5316\u76d1\u63a7\u4f5c\u4e3aTuGraph\u5468\u8fb9\u751f\u6001\u4e2d\u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u6765\u51cf\u5c11\u548cTuGraph\u6570\u636e\u5e93\u7684\u8026\u5408\u5ea6\uff0c\u4ee5\u53ca\u5bf9\u4e8eTuGraph\u81ea\u8eab\u7684\u5f71\u54cd\u3002TuGraph\u53ef\u89c6\u5316\u76d1\u63a7\u91c7\u7528\u76ee\u524d\u6700\u706b\u70ed\u7684\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\uff0cTuGraph Monitor + Prometheus + Grafana\u6765\u5b9e\u73b0\u3002\u5176\u4e2dTuGraph Monitor\u4f5c\u4e3aTuGraph\u670d\u52a1\u7684\u5ba2\u6237\u7aef\uff0c\u901a\u8fc7TCP\u94fe\u63a5\u5411TuGraph\u670d\u52a1\u53d1\u8d77Procedure\u8bf7\u6c42\uff0cTuGraph\u670d\u52a1\u5728\u63a5\u6536\u5230\u8bf7\u6c42\u540e\u6536\u96c6\u81ea\u8eab\u6240\u5728\u673a\u5668\u7684cpu\uff0cmemory\uff0cdisk\uff0cio\uff0c\u4ee5\u53ca\u8bf7\u6c42\u6570\u91cf\u7b49\u6307\u6807\u7684\u7edf\u8ba1\u7ed3\u679c\u8fdb\u884c\u54cd\u5e94\u3002TuGraph Monitor\u5728\u63a5\u6536\u5230TuGraph\u54cd\u5e94\u7684\u6307\u6807\u6570\u636e\u540e\uff0c\u5c06\u6570\u636e\u5305\u88c5\u6210prometheus\u9700\u8981\u7684\u683c\u5f0f\uff0c\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u7b49\u5f85Prometheus\u670d\u52a1\u901a\u8fc7http\u8bf7\u6c42\u83b7\u53d6\u3002Prometheus\u670d\u52a1\u4f1a\u5b9a\u671f\u901a\u8fc7http\u8bf7\u6c42\u4eceTuGraph Monitor\u83b7\u53d6\u5c01\u88c5\u597d\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u6309\u7167\u83b7\u53d6\u7684\u65f6\u95f4\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u65f6\u5e8f\u6570\u636e\u5e93\u4e2d\u3002Grafana\u53ef\u4ee5\u6839\u636e\u7528\u6237\u7684\u914d\u7f6e\uff0c\u4ecePrometheus\u5904\u83b7\u53d6\u67d0\u4e2a\u65f6\u95f4\u6bb5\u5185\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u5e76\u5728web\u754c\u9762\u4e0a\u7ed8\u5236\u6d45\u663e\u6613\u61c2\u7684\u56fe\u5f62\u6765\u5c55\u793a\u6700\u7ec8\u7ed3\u679c\u3002\u6574\u4e2a\u8bf7\u6c42\u94fe\u8def\u4e2d\uff0c\u90fd\u91c7\u7528\u4e86\u4e3b\u52a8\u83b7\u53d6\uff0c\u5373PULL\u7684\u6a21\u578b\uff0c\u597d\u5904\u4e4b\u4e00\u662f\u5b83\u80fd\u6700\u5927\u9650\u5ea6\u7684\u907f\u514d\u6570\u636e\u751f\u4ea7\u8005\u548c\u6570\u636e\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u4f7f\u5f97\u5f00\u53d1\u66f4\u7b80\u5355\uff0c\u597d\u5904\u4e4b\u4e8c\u662f\u6570\u636e\u751f\u4ea7\u8005\u4e0d\u9700\u8981\u8003\u8651\u6570\u636e\u6d88\u8d39\u8005\u7684\u6570\u636e\u5904\u7406\u80fd\u529b\uff0c\u5373\u4f7f\u67d0\u4e2a\u6d88\u8d39\u8005\u7684\u6570\u636e\u5904\u7406\u80fd\u529b\u8f83\u5f31\uff0c\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u751f\u4ea7\u8005\u751f\u4ea7\u6570\u636e\u8fc7\u5feb\u800c\u538b\u57ae\u6d88\u8d39\u8005\u3002\u4e3b\u52a8\u62c9\u53d6\u6a21\u578b\u7684\u4e0d\u8db3\u4e4b\u5904\u5728\u4e8e\u6570\u636e\u7684\u5b9e\u65f6\u6027\u4e0d\u591f\uff0c\u4f46\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u6570\u636e\u5e76\u6ca1\u6709\u5f88\u9ad8\u7684\u5b9e\u65f6\u6027\u8981\u6c42\u3002","title":"\u8bbe\u8ba1\u601d\u8def"},{"location":"zh-CN/2.operating/10.resource-monitoring/#tugraph_1","text":"TuGraph\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u6536\u96c6\u670d\u52a1\u6240\u5728\u673a\u5668\u4e2d\u78c1\u76d8\uff0c\u5185\u5b58\uff0c\u7f51\u7edcIO\uff0c\u4ee5\u53ca\u67e5\u8be2\u8bf7\u6c42\u7b49\u591a\u79cd\u6570\u636e\u4fe1\u606f\u7684\u80fd\u529b\uff0c\u5e76\u901a\u8fc7\u6807\u51c6Procedure\u65b9\u5f0f\u63d0\u4f9b\u67e5\u8be2\u3002\u6536\u96c6\u6570\u636e\u8fd9\u4e00\u52a8\u4f5c\u4ec5\u5728\u6709\u7528\u6237\u901a\u8fc7\u63a5\u53e3\u67e5\u8be2\u65f6\u624d\u4f1a\u53d1\u751f\uff0c\u907f\u514d\u4e86\u5728\u7528\u6237\u4e0d\u9700\u8981TuGraph\u76d1\u63a7\u670d\u52a1\u6240\u5728\u673a\u5668\u7684\u6307\u6807\u65f6\u5bf9\u7528\u6237\u4e1a\u52a1\u67e5\u8be2\u8bf7\u6c42\u5e26\u6765\u7684\u5f71\u54cd\u3002","title":"TuGraph"},{"location":"zh-CN/2.operating/10.resource-monitoring/#tugraph-monitor","text":"TuGraph Monitor\u662fTuGraph\u5468\u8fb9\u751f\u6001\u4e2d\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u5b83\u4f5c\u4e3aTuGraph\u4f17\u591a\u7528\u6237\u4e2d\u7684\u4e00\u4e2a\uff0c\u901a\u8fc7C++ RPC Client\u4e0eTuGraph\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u8fc7Procedure\u67e5\u8be2\u63a5\u53e3\u6765\u67e5\u8be2TuGraph\u670d\u52a1\u6240\u5728\u673a\u5668\u7684\u6027\u80fd\u6307\u6807\uff0c\u5e76\u5c06TuGraph\u8fd4\u56de\u7684\u7ed3\u679c\u5305\u88c5\u6210Prometheus\u9700\u8981\u7684\u6570\u636e\u6a21\u578b\uff0c\u7b49\u5f85Prometheus\u83b7\u53d6\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u67e5\u8be2\u65f6\u95f4\u95f4\u9694\u6765\u4fdd\u8bc1\u83b7\u53d6\u76d1\u63a7\u6307\u6807\u5bf9\u4e8e\u4e1a\u52a1\u67e5\u8be2\u7684\u5f71\u54cd\u6700\u5c0f\u5316\u3002","title":"TuGraph Monitor"},{"location":"zh-CN/2.operating/10.resource-monitoring/#prometheus","text":"Prometheus\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u76d1\u63a7\u5e73\u53f0\uff0c\u5e76\u914d\u5907\u6709\u4e13\u5c5e\u7684\u65f6\u5e8f\u6570\u636e\u5e93\uff0c\u5b83\u4f1a\u5b9a\u671f\u901a\u8fc7http\u8bf7\u6c42\u4eceTuGraph Monitor\u670d\u52a1\u83b7\u53d6\u7edf\u8ba1\u6307\u6807\uff0c\u5e76\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u65f6\u5e8f\u6570\u636e\u5e93\u4e2d\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003\u5b98\u7f51: https://prometheus.io/docs/introduction/first_steps","title":"Prometheus"},{"location":"zh-CN/2.operating/10.resource-monitoring/#grafana","text":"Grafana\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u53ef\u89c6\u5316\u548c\u5206\u6790\u8f6f\u4ef6\uff0c\u5b83\u53ef\u4ee5\u4ece\u5305\u542bPrometheus\u5728\u5185\u7684\u591a\u4e2a\u6570\u636e\u6e90\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u65f6\u5e8f\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u7cbe\u7f8e\u56fe\u5f62\u548c\u53ef\u89c6\u5316\u6548\u679c\u7684\u5de5\u5177\u3002\u5177\u4f53\u4fe1\u606f\u8bf7\u53c2\u8003\u5b98\u7f51: https://grafana.com/docs/grafana/v7.5/getting-started/","title":"Grafana"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_2","text":"","title":"\u90e8\u7f72\u65b9\u6848"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_3","text":"\u542f\u52a8TuGraph\u670d\u52a1\uff0c\u8be6\u7ec6\u65b9\u6cd5\u8bf7\u53c2\u8003\u6587\u6863: https://github.com/TuGraph-db/tugraph-db/blob/master/doc/zh-CN/1.guide/3.quick-start.md","title":"\u7b2c\u4e00\u6b65"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_4","text":"\u542f\u52a8TuGraph Monitor\u5de5\u5177\uff0c\u542f\u52a8\u547d\u4ee4\u5982\u4e0b\uff1a ./lgraph_monitor --server_host 127.0.0.1:9091 -u admin -p your_password \\ --monitor_host 127.0.0.1:9999 --sampling_interval_ms 1000 \u53c2\u6570\u542b\u4e49\u5982\u4e0b Available command line options: --server_host Host on which the tugraph rpc server runs. Default=127.0.0.1:9091. -u, --user DB username. -p, --password DB password. --monitor_host Host on which the monitor restful server runs. Default=127.0.0.1:9999. --sampling_interval_ms sampling interval in millisecond. Default=1.5e2. -h, --help Print this help message. Default=0.","title":"\u7b2c\u4e8c\u6b65"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_5","text":"\u4e0b\u8f7d\u7b26\u5408\u60a8\u673a\u5668\u67b6\u6784\u4ee5\u53ca\u7cfb\u7edf\u7248\u672c\u7684Prometheus tar\u5305\uff0c\u4e0b\u8f7d\u5730\u5740: https://prometheus.io/download/ \u89e3\u538btar\u5305\uff0c\u547d\u4ee4\u5982\u4e0b tar -zxvf prometheus-2.37.5.linux-amd64.tar.gz \u4fee\u6539\u914d\u7f6e\u6587\u4ef6prometheus.yml\uff0c\u65b0\u589e\u5982\u4e0b\u914d\u7f6e\uff0c\u4f7f\u5176\u53ef\u4ee5\u6293\u53d6TuGraph Monitor\u5305\u88c5\u597d\u7684\u6027\u80fd\u6570\u636e scrape_configs: # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config. - job_name: \"tugraph\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"localhost:9111\"] \u542f\u52a8prometheus\uff0c\u5177\u4f53\u7684\u542f\u52a8\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u83b7\u53d6 ./prometheus -h \u9a8c\u8bc1prometheus\u670d\u52a1\u662f\u5426\u6b63\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7web\u7aef\u767b\u9646prometheus\u670d\u52a1\uff0c\u67e5\u8be2\u76d1\u63a7\u6307\u6807resources_report\u662f\u5426\u5df2\u7ecf\u83b7\u53d6\u5230\uff0c\u80fd\u6210\u529f\u67e5\u8be2\u5230\u6570\u636e\u5219\u6b63\u786e","title":"\u7b2c\u4e09\u6b65"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_6","text":"\u4e0b\u8f7d\u7b26\u5408\u60a8\u673a\u5668\u67b6\u6784\u4ee5\u53ca\u7cfb\u7edf\u7248\u672c\u7684Grafana\u5b89\u88c5\u5305\uff0c\u4e0b\u8f7d\u5730\u5740: https://grafana.com/grafana/download \u5b89\u88c5Grafana\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003: https://grafana.com/docs/grafana/v7.5/installation/ \u542f\u52a8Grafana\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003: https://grafana.com/docs/grafana/v7.5/installation/ \u914d\u7f6eGrafana\uff0c\u9996\u5148\u5728\u6570\u636e\u6e90\u8bbe\u7f6e\u4e2d\u914d\u7f6ePrometheus\u7684IP\u5730\u5740\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\u8fde\u63a5\u529f\u80fd\uff0c\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u8fde\u63a5\u6570\u636e\u6e90\u3002\u7136\u540e\uff0c\u5bfc\u5165\u5982\u4e0b\u6a21\u7248\uff0c\u5e76\u5728\u9875\u9762\u4e2d\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u4fee\u6539\u6b63\u786e\u7684\u63a5\u53e3IP\u548c\u7aef\u53e3\u3002\u6700\u540e\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u7f6e\u5237\u65b0\u65f6\u95f4\u548c\u76d1\u63a7\u65f6\u95f4\u8303\u56f4 { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": { \"type\": \"grafana\", }, \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"target\": { \"limit\": 100, \"matchAny\": false, \"tags\": [], \"type\": \"dashboard\" }, \"type\": \"dashboard\" } ] }, \"editable\": true, \"fiscalYearStartMonth\": 0, \"graphTooltip\": 0, \"id\": 2, \"links\": [], \"liveNow\": false, \"panels\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false } }, \"mappings\": [], \"unit\": \"kbytes\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"D {instance=\\\"localhost:7010\\\", job=\\\"TuGraph\\\", resouces_type=\\\"memory\\\", type=\\\"available\\\"}\" }, \"properties\": [ { \"id\": \"displayName\", \"value\": \"others\" } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"D {__name__=\\\"resources_report\\\", instance=\\\"localhost:7010\\\", job=\\\"TuGraph\\\", resouces_type=\\\"memory\\\", type=\\\"available\\\"}\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-green\", \"mode\": \"fixed\" } }, { \"id\": \"displayName\", \"value\": \"others\" } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"others\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-blue\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"graph_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-orange\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 16, \"w\": 6, \"x\": 0, \"y\": 0 }, \"id\": 14, \"options\": { \"displayLabels\": [ \"name\", \"value\" ], \"legend\": { \"displayMode\": \"table\", \"placement\": \"bottom\", \"values\": [ \"percent\", \"value\" ] }, \"pieType\": \"pie\", \"reduceOptions\": { \"calcs\": [ \"lastNotNull\" ], \"fields\": \"\", \"values\": false }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"memory\\\",type=\\\"self\\\"}\", \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"memory\\\",type=\\\"available\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"B\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"memory\\\",type=\\\"total\\\"}\", \"hide\": true, \"legendFormat\": \"{{label_name}}\", \"range\": true, \"refId\": \"C\" }, { \"datasource\": { \"type\": \"__expr__\", }, \"expression\": \"$C -$A - $B\", \"hide\": false, \"refId\": \"D\", \"type\": \"math\" } ], \"title\": \"\u5185\u5b58\", \"type\": \"piechart\" }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 1000 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"5m\", \"frequency\": \"1m\", \"handler\": 1, \"message\": \"\u3010\u751f\u4ea7\u56fe\u6570\u636e\u5e93Grafana\u3011\\n QPS\u8d85\u8fc71000\", \"name\": \"\u8bf7\u6c42\u7edf\u8ba1 alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"axisLabel\": \"\", \"axisPlacement\": \"auto\", \"barAlignment\": 0, \"drawStyle\": \"line\", \"fillOpacity\": 7, \"gradientMode\": \"none\", \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false }, \"lineInterpolation\": \"smooth\", \"lineWidth\": 1, \"pointSize\": 5, \"scaleDistribution\": { \"type\": \"linear\" }, \"showPoints\": \"auto\", \"spanNulls\": false, \"stacking\": { \"group\": \"A\", \"mode\": \"none\" }, \"thresholdsStyle\": { \"mode\": \"off\" } }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \" \" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"write\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-blue\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 16, \"w\": 12, \"x\": 6, \"y\": 0 }, \"id\": 4, \"options\": { \"legend\": { \"calcs\": [ \"min\", \"max\", \"mean\", \"last\" ], \"displayMode\": \"table\", \"placement\": \"bottom\" }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"request\\\",type=~\\\"total|write\\\"}\", \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"op\": \"gt\", \"value\": 1000, \"visible\": true } ], \"title\": \"\u8bf7\u6c42\u7edf\u8ba1\", \"type\": \"timeseries\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false } }, \"mappings\": [], \"unit\": \"decbits\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"graph_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-red\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"available\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-orange\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"D\" }, \"properties\": [ { \"id\": \"displayName\", \"value\": \"other\" } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"other\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-purple\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 16, \"w\": 6, \"x\": 18, \"y\": 0 }, \"id\": 12, \"options\": { \"displayLabels\": [ \"name\", \"value\" ], \"legend\": { \"displayMode\": \"table\", \"placement\": \"bottom\", \"sortBy\": \"Value\", \"sortDesc\": true, \"values\": [ \"value\", \"percent\" ] }, \"pieType\": \"pie\", \"reduceOptions\": { \"calcs\": [ \"lastNotNull\" ], \"fields\": \"\", \"values\": false }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"exemplar\": false, \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk\\\",type=\\\"available\\\"}\", \"format\": \"time_series\", \"instant\": false, \"interval\": \"\", \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk\\\",type=\\\"self\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"B\" }, { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk\\\",type=\\\"total\\\"}\", \"hide\": true, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"C\" }, { \"datasource\": { \"type\": \"__expr__\", }, \"expression\": \"$C - $A - $B\", \"hide\": false, \"refId\": \"D\", \"type\": \"math\" } ], \"title\": \"\u78c1\u76d8\", \"transformations\": [ { \"id\": \"configFromData\", \"options\": { \"applyTo\": { \"id\": \"byFrameRefID\" }, \"configRefId\": \"config\", \"mappings\": [] } } ], \"type\": \"piechart\" }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 90 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"5m\", \"frequency\": \"1m\", \"handler\": 1, \"message\": \"\u3010\u751f\u4ea7\u56fe\u6570\u636e\u5e93Grafana\u3011\\nCPU\u4f7f\u7528\u7387\u8d85\u8fc790%\", \"name\": \"CPU\u4f7f\u7528\u7387 alert\", \"noDataState\": \"no_data\", \"notifications\": [ { } ] }, \"datasource\": { \"type\": \"prometheus\", }, \"description\": \"\", \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"axisLabel\": \"\", \"axisPlacement\": \"auto\", \"barAlignment\": 0, \"drawStyle\": \"line\", \"fillOpacity\": 4, \"gradientMode\": \"none\", \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false }, \"lineInterpolation\": \"linear\", \"lineWidth\": 1, \"pointSize\": 5, \"scaleDistribution\": { \"type\": \"linear\" }, \"showPoints\": \"auto\", \"spanNulls\": false, \"stacking\": { \"group\": \"A\", \"mode\": \"none\" }, \"thresholdsStyle\": { \"mode\": \"off\" } }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \"percent\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"graph_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-orange\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"total_used\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-purple\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"self\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-green\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"total\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"light-purple\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 14, \"w\": 12, \"x\": 0, \"y\": 16 }, \"id\": 6, \"options\": { \"legend\": { \"calcs\": [ \"min\", \"max\", \"mean\", \"last\" ], \"displayMode\": \"table\", \"placement\": \"bottom\" }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"code\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"cpu\\\",type=~\\\"total|self\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"op\": \"gt\", \"value\": 90, \"visible\": true } ], \"title\": \"CPU\u4f7f\u7528\u7387\", \"type\": \"timeseries\" }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 10000 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"5m\", \"frequency\": \"1m\", \"handler\": 1, \"message\": \"\u3010\u751f\u4ea7\u56fe\u6570\u636e\u5e93Grafana\u3011\\n \u78c1\u76d8IO\u8d85\u8fc710MB/S\", \"name\": \"\u78c1\u76d8IO alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"datasource\": { \"type\": \"prometheus\", }, \"fieldConfig\": { \"defaults\": { \"color\": { \"mode\": \"palette-classic\" }, \"custom\": { \"axisLabel\": \"\", \"axisPlacement\": \"auto\", \"barAlignment\": 0, \"drawStyle\": \"line\", \"fillOpacity\": 7, \"gradientMode\": \"none\", \"hideFrom\": { \"legend\": false, \"tooltip\": false, \"viz\": false }, \"lineInterpolation\": \"smooth\", \"lineWidth\": 1, \"pointSize\": 5, \"scaleDistribution\": { \"type\": \"linear\" }, \"showPoints\": \"auto\", \"spanNulls\": false, \"stacking\": { \"group\": \"A\", \"mode\": \"none\" }, \"thresholdsStyle\": { \"mode\": \"off\" } }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \"bps\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"read\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"super-light-green\", \"mode\": \"fixed\" } } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"write\" }, \"properties\": [ { \"id\": \"color\", \"value\": { \"fixedColor\": \"super-light-red\", \"mode\": \"fixed\" } } ] } ] }, \"gridPos\": { \"h\": 14, \"w\": 12, \"x\": 12, \"y\": 16 }, \"id\": 2, \"options\": { \"legend\": { \"calcs\": [ \"min\", \"max\", \"mean\", \"last\" ], \"displayMode\": \"table\", \"placement\": \"bottom\" }, \"tooltip\": { \"mode\": \"single\", \"sort\": \"none\" } }, \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", }, \"editorMode\": \"builder\", \"expr\": \"resources_report{instance=\\\"localhost:7010\\\",job=\\\"TuGraph\\\",resouces_type=\\\"disk_rate\\\",type=~\\\"read|write\\\"}\", \"hide\": false, \"legendFormat\": \"{{type}}\", \"range\": true, \"refId\": \"A\" } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"op\": \"gt\", \"value\": 10000, \"visible\": true } ], \"title\": \"\u78c1\u76d8IO\", \"type\": \"timeseries\" } ], \"refresh\": \"\", \"schemaVersion\": 36, \"style\": \"dark\", \"tags\": [], \"templating\": { \"list\": [] }, \"time\": { \"from\": \"now-24h\", \"to\": \"now\" }, \"timepicker\": { \"hidden\": false, \"refresh_intervals\": [ \"10s\" ] }, \"timezone\": \"\", \"title\": \"TuGraph\u76d1\u63a7\u9875\u9762\", \"version\": 20, \"weekStart\": \"\" } \u9a8c\u8bc1\u6548\u679c\uff0c\u5237\u65b0\u6d4f\u89c8\u5668\u9875\u9762\u3002\u5982\u679c\u6b63\u786e\u663e\u793a\u997c\u56fe\u548c\u6298\u7ebf\u56fe\uff0c\u5219\u914d\u7f6e\u5b8c\u6210\u3002","title":"\u7b2c\u56db\u6b65"},{"location":"zh-CN/2.operating/10.resource-monitoring/#_7","text":"\u76ee\u524d\u53ef\u89c6\u5316\u76d1\u63a7\u53ea\u652f\u6301\u5355\u673a\u76d1\u63a7\uff0c\u80fd\u76d1\u63a7\u670d\u52a1\u6240\u5728\u673a\u5668\u7684cpu\uff0c\u78c1\u76d8\uff0c\u7f51\u7edcio\uff0c\u8bf7\u6c42qps\u7b49\u6027\u80fd\u6307\u6807\uff0c\u672a\u6765\u5c06\u4f1a\u5b9e\u73b0\u76d1\u63a7ha\u96c6\u7fa4\u7684\u529f\u80fd\uff0c\u4e5f\u4f1a\u5c06\u66f4\u591a\u6709\u610f\u4e49\u7684\u6307\u6807\u7eb3\u5165\u76d1\u63a7\u8303\u56f4","title":"\u672a\u6765\u8ba1\u5212"},{"location":"zh-CN/2.operating/11.integration-test/","text":"TuGraph \u96c6\u6210\u6d4b\u8bd5\u6846\u67b6 \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\u5982\u4f55\u4f7f\u7528 TuGraph\u96c6\u6210\u6d4b\u8bd5\u7684\u610f\u4e49 \u5728\u5355\u5143\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\u4e2d\uff0c\u6709\u90e8\u5206\u7528\u4f8b\u76f4\u63a5\u5f00\u542fgalaxy\u6216statemachine\u6765\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6d41\u7a0b\u3002\u5728\u5b8c\u6574\u7684cs\u67b6\u6784\u4e2d\uff0c\u7528\u6237\u8bf7\u6c42\u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u53d1\u5f80\u670d\u52a1\u7aef\uff0c\u7f51\u7edc\u901a\u4fe1\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u4e3a\u4e86\u907f\u514d\u5355\u5143\u6d4b\u8bd5\u4e0d\u5b8c\u6574\u5e26\u6765\u7684bug\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f7f\u7528\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\u8fdb\u884c\u5168\u94fe\u8def\u7684\u5b8c\u6574\u6d4b\u8bd5\u3002 TuGraph\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6 TuGraph\u91c7\u7528pytest\u6846\u67b6\u4f5c\u4e3a\u81ea\u5df1\u7684\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\uff0cpytest\u6846\u67b6\u4f5c\u4e3a\u76ee\u524d\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684cs\u7aef\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\uff0c\u4ee5\u5176\u7075\u6d3b\u7b80\u5355\uff0c\u5bb9\u6613\u4e0a\u624b\uff0c\u5e76\u4e14\u652f\u6301\u53c2\u6570\u5316\u7684\u4f7f\u7528\u65b9\u5f0f\u800c\u8457\u79f0\uff0cTuGraph\u57fa\u4e8epytest\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u62bd\u8c61\u51fa\u4e86\u4e0d\u540c\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u53c2\u6570\u6765\u63a7\u5236\u5404\u4e2a\u5de5\u5177\u7684\u5904\u7406\u903b\u8f91\uff0c\u4ee5\u65b9\u4fbf\u5927\u5bb6\u8fdb\u884c\u9ad8\u6548\u7684\u6d4b\u8bd5\u4ee3\u7801\u5f00\u53d1\u3002 \u66f4\u591apytest\u4fe1\u606f\u8bf7\u53c2\u8003\u5b98\u7f51: https://docs.pytest.org/en/7.2.x/getting-started.html \u7ec4\u4ef6\u63cf\u8ff0 \u7ec4\u4ef6\u540d\u79f0 \u7ec4\u4ef6\u529f\u80fd \u5b9e\u73b0\u65b9\u5f0f server TuGraph\u5355\u673a\u670d\u52a1 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u542f\u52a8\u670d\u52a1 client TuGraph Rpc Client \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5f00\u542fTuGraph Python Rpc Client\u53d1\u9001\u8bf7\u6c42 importor TuGraph Importor \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5bfc\u5165\u8bf7\u6c42 exportor TuGraph Exportor \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5bfc\u51fa\u8bf7\u6c42 backup_binlog TuGraph Backup Binlog \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5907\u4efdbinlog\u7684\u8bf7\u6c42 backup_copy_dir TuGraph Backup \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5907\u4efd\u5b8c\u6574db\u7684\u8bf7\u6c42 build_so \u7f16\u8bd1c++\u52a8\u6001\u8fde\u63a5\u5e93\u7684\u7ec4\u4ef6 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406gcc\u7f16\u8bd1\u903b\u8f91 copy_snapshot TuGraph Copy Snapshot \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5904\u7406\u5907\u4efdsnapshot\u7684\u8bf7\u6c42 copydir \u6587\u4ef6\u5939\u62f7\u8d1d \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5904\u7406\u6587\u4ef6\u5939\u62f7\u8d1d\u8bf7\u6c42 exec \u6267\u884cc++/java\u53ef\u6267\u884c\u6587\u4ef6 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u542f\u52a8C++\u53ef\u6267\u884c\u6587\u4ef6 algo \u6267\u884c\u7b97\u6cd5 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u7b97\u6cd5 bash \u6267\u884cbash\u547d\u4ee4 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cbash\u547d\u4ee4 rest TuGraph Python Rest Client \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5f00\u542fTuGraph Python Rest Client\u53d1\u9001\u8bf7\u6c42 \u7ec4\u4ef6\u7528\u6cd5 server \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7072 --rpc_port 9092\", \"cleanup_dir\":[\"./testdb\"]} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u542f\u52a8server\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u505c\u6b62server\uff0c\u5e76\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) def test_server(self, server): pass client \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + host\u662fTuGraph Server\u7684ip\u548c\u7aef\u53e3 + user\u662fTuGraph Server\u7684\u7528\u6237\u540d + password\u662fTuGraph Server \u4e2duser\u5bf9\u5e94\u7684\u5bc6\u7801 CLIENTOPT = {\"host\":\"127.0.0.1:9092\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u542f\u52a8\u5ba2\u6237\u7aef\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\u4f1a\u7ed3\u675f\u5ba2\u6237\u7aef @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"client\", [CLIENTOPT], indirect=True) def test_client(self, server, client): ret = client.callCypher(\"CALL db.createEdgeLabel('followed', '[]', 'address', string, false, 'date', int32, false)\", \"default\") assert ret[0] ret = client.callCypher(\"CALL db.createEdgeLabel('followed', '[]', 'address', string, false, 'date', int32, false)\", \"default\") assert ret[0] == False importor \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 IMPORTOPT = {\"cmd\":\"./lgraph_import --config_file ./data/yago/yago.conf --dir ./testdb --user admin --password 73@TuGraph --graph default --overwrite 1\", \"cleanup_dir\":[\"./testdb\", \"./.import_tmp\"]} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5bfc\u5165\u4e0d\u540c\u7684\u6570\u636e\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5bfc\u5165\u6570\u636e\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"importor\", [IMPORTOPT], indirect=True) def test_importor(self, importor): pass exportor \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 EXPORT_DEF_OPT = {\"cmd\":\"./lgraph_export -d ./testdb -e ./export/default -g default -u admin -p 73@TuGraph\", \"cleanup_dir\":[\"./export\"]} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5bfc\u51fa\u4e0d\u540c\u7684\u6570\u636e\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5bfc\u51fa\u6570\u636e\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"exportor\", [EXPORT_DEF_OPT], indirect=True) def test_exportor(self, exportor): pass backup_binlog \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 BINLOGOPT = {\"cmd\" : \"./lgraph_binlog -a restore --host 127.0.0.1 --port 9093 -u admin -p 73@TuGraph -f ./testdb/binlog/*\", \"cleanup_dir\":[]} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5907\u4efd\u4e0d\u540c\u7684binlog\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1dbinlog\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"backup_binlog\", [BINLOGOPT], indirect=True) def test_backup_binlog(self, backup_binlog): pass backup_copy_dir \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 BACKUPOPT = {\"cmd\" : \"./lgraph_backup --src ./testdb -dst ./testdb1\", \"cleanup_dir\":[]} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5907\u4efd\u4e0d\u540c\u7684db\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1ddb\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"backup_copy_dir\", [BACKUPOPT], indirect=True) def test_backup_copy_dir(self, backup_copy_dir): pass build_so \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4\uff0c\u91c7\u7528python\u5217\u8868\u4f20\u5165\uff0c\u53ef\u4ee5\u4e00\u6b21\u7f16\u8bd1\u591a\u4e2aso + so_name\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684so\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 BUILDOPT = {\"cmd\":[\"g++ -fno-gnu-unique -fPIC -g --std=c++11 -I ../../include -I ../../deps/install/include -rdynamic -O3 -fopenmp -DNDEBUG -o ./scan_graph.so ../../test/test_plugins/scan_graph.cpp ./liblgraph.so -shared\", \"g++ -fno-gnu-unique -fPIC -g --std=c++11 -I ../../include -I ../../deps/install/include -rdynamic -O3 -fopenmp -DNDEBUG -o ./sortstr.so ../../test/test_plugins/sortstr.cpp ./liblgraph.so -shared\"], \"so_name\":[\"./scan_graph.so\", \"./sortstr.so\"]} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u7f16\u8bd1\u4e0d\u540c\u7684so\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u751f\u6210so\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406so_name\u5217\u8868\u6307\u5b9a\u7684\u52a8\u6001\u5e93 @pytest.mark.parametrize(\"build_so\", [BUILDOPT], indirect=True) def test_build_so(self, build_so): pass copy_snapshot \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + src\u662f\u539fdb + dst\u662f\u62f7\u8d1d\u540e\u7684snapshot COPYSNAPOPT = {\"src\" : \"./testdb\", \"dst\" : \"./testdb1\"} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u62f7\u8d1d\u4e0d\u540c\u7684snapshot\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1dsrc\u4e2d\u7684snapshot\u5230dst\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"copy_snapshot\", [COPYSNAPOPT], indirect=True) def test_copy_snapshot(self, copy_snapshot): pass copy_dir \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + src\u662f\u539fdb + dst\u662f\u62f7\u8d1d\u540e\u7684snapshot COPYSNAPOPT = {\"src\" : \"./testdb\", \"dst\" : \"./testdb1\"} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u62f7\u8d1d\u4e0d\u540c\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1dsrc\u5230dst\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"copy_dir\", [COPYDIR], indirect=True) def test_copy_dir(self, copy_dir): pass exec \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 EXECOPT = { \"cmd\" : \"rpc_client/cpp/CppClientTest/build/clienttest\" } \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u6267\u884c\u4e0d\u540c\u7684\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884c\u901a\u8fc7cmd\u53c2\u6570\u4f20\u5165\u7684\u547d\u4ee4 @pytest.mark.parametrize(\"exec\", [EXECOPT], indirect=True) def test_exec(self, exec): pass algo \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + result\u662f\u7b97\u6cd5\u9884\u671f\u7684\u6267\u884c\u7ed3\u679c\uff0c\u6267\u884c\u5b8c\u6210\u4f1a\u901a\u8fc7\u5b9e\u9645\u7ed3\u679c\u4e0e\u9884\u671f\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e0d\u540c\u5219\u6d4b\u8bd5\u5931\u8d25 BFSEMBEDOPT = { \"cmd\" : \"algo/bfs_embed ./testdb\", \"result\" : [\"found_vertices = 3829\"] } \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u6267\u884c\u4e0d\u540c\u7684\u7b97\u6cd5\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884c\u901a\u8fc7cmd\u53c2\u6570\u4f20\u5165\u7684\u7b97\u6cd5\uff0c\u51fd\u6570\u4e3b\u4f53\u7b49\u5f85\u7b97\u6cd5\u6267\u884c\u5b8c\u6210\u540e\u5bf9\u6bd4\u7ed3\u679c @pytest.mark.parametrize(\"algo\", [BFSEMBEDOPT], indirect=True) def test_exec_bfs_embed(self, algo): pass bash \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 BASHOPT = { \"cmd\" : \"sh ./rpc_client/cpp/CppClientTest/compile.sh\" } \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u6267\u884c\u4e0d\u540c\u7684bash\u547d\u4ee4\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884c\u901a\u8fc7cmd\u53c2\u6570\u4f20\u5165\u7684bash\u547d\u4ee4\uff0c\u51fd\u6570\u4e3b\u4f53\u7b49\u5f85\u7b97\u6cd5\u6267\u884c\u5b8c\u6210 @pytest.mark.parametrize(\"bash\", [BASHOPT], indirect=True) def test_bash(self, bash): pass rest \u542f\u52a8\u53c2\u6570 \u91c7\u7528python\u5b57\u5178\u4f20\u5165 + port\u662fTuGraph Server\u7684\u7aef\u53e3 + user\u662fTuGraph Server\u7684\u7528\u6237\u540d + password\u662fTuGraph Server \u4e2duser\u5bf9\u5e94\u7684\u5bc6\u7801 RESTTOPT = {\"port\":\"7073\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} \u542f\u52a8\u547d\u4ee4 \u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u94fe\u63a5\u4e0d\u540c\u7684TuGraph Rest Server\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u542f\u52a8\u5ba2\u6237\u7aef\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\u4f1a\u7ed3\u675f\u5ba2\u6237\u7aef @pytest.mark.parametrize(\"rest\", [RESTTOPT], indirect=True) def test_get_info(self, server, rest): pass \u6d4b\u8bd5\u6837\u4f8b rest \u6837\u4f8b\u4ee3\u7801\u4e2d\u5728test_get_info\u51fd\u6570\u6267\u884c\u4e4b\u524d\u5148\u542f\u52a8server\uff0cserver\u542f\u52a8\u540e\u542f\u52a8\u4e86rest client\uff0c\u8fdb\u5165test_get_info\u51fd\u6570\u540e\u83b7\u53d6server\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5e76\u901a\u8fc7assert\u5224\u65ad\u662f\u5426\u6709\u83b7\u53d6\u5230cpu\u7684\u4fe1\u606f\u3002 SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7073 --rpc_port 9093\", \"cleanup_dir\":[\"./testdb\"]} RESTTOPT = {\"port\":\"7073\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"rest\", [RESTTOPT], indirect=True) def test_get_info(self, server, rest): res = rest.get_server_info() log.info(\"res : %s\", res) assert('cpu' in res) client \u6837\u4f8b\u4ee3\u7801\u4e2d\u5728test_flushdb\u51fd\u6570\u6267\u884c\u4e4b\u524d\u5148\u6267\u884c\u4e86\u6570\u636e\u79bb\u7ebf\u5bfc\u5165\u903b\u8f91\uff0c\u5e76\u542f\u52a8server\u540e\uff0c\u901a\u8fc7client\u521b\u5efa\u94fe\u63a5\uff0c\u8fdb\u5165test_flushdb\u51fd\u6570\u540e\uff0c\u901a\u8fc7\u67e5\u8be2\u70b9\u7684\u4e2a\u6570\u5224\u65ad\u5bfc\u5165\u662f\u5426\u6210\u529f\uff0c\u5bfc\u5165\u6210\u529f\u540e\u6267\u884cflushDB\u64cd\u4f5c\uff0c\u518d\u6b21\u901a\u8fc7assert\u5224\u65ad\u662f\u5426\u80fd\u6b63\u5e38\u6e05\u7a7adb SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7072 --rpc_port 9092\", \"cleanup_dir\":[\"./testdb\"]} CLIENTOPT = {\"host\":\"127.0.0.1:9092\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} IMPORTOPT = {\"cmd\":\"./lgraph_import --config_file ./data/yago/yago.conf --dir ./testdb --user admin --password 73@TuGraph --graph default --overwrite 1\", \"cleanup_dir\":[\"./testdb\", \"./.import_tmp\"]} @pytest.mark.parametrize(\"importor\", [IMPORTOPT], indirect=True) @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"client\", [CLIENTOPT], indirect=True) def test_flushdb(self, importor, server, client): ret = client.callCypher(\"MATCH (n) RETURN n LIMIT 100\", \"default\") assert ret[0] res = json.loads(ret[1]) assert len(res) == 21 ret = client.callCypher(\"CALL db.flushDB()\", \"default\") assert ret[0] res = json.loads(ret[1]) assert res == None exportor/importor \u6837\u4f8b\u4ee3\u7801\u4e2d\u5728test_export_default\u51fd\u6570\u6267\u884c\u4e4b\u524d\u5148\u6267\u884c\u4e86\u6570\u636e\u79bb\u7ebf\u5bfc\u5165\u903b\u8f91\uff0c\u5bfc\u5165\u6210\u529f\u540e\u5c06\u5f53\u524ddb\u7684\u6570\u636e\u5bfc\u51fa\uff0c\u7136\u540e\u518d\u6b21\u901a\u8fc7\u79bb\u7ebf\u5bfc\u5165\u903b\u8f91\u5c06exportor\u5bfc\u51fa\u7684\u6570\u636e\u5bfc\u5165\u5230\u65b0\u7684\u76ee\u5f55\u4e2d\uff0c\u4ee5\u65b0\u5bfc\u5165\u7684\u6570\u636e\u542f\u52a8db\uff0c\u5e76\u4e14\u521b\u5efa\u94fe\u63a5\u3002\u5728test_export_default\u51fd\u6570\u4e3b\u4f53\u4e2d\u5224\u65ad\u5bfc\u51fa\u540e\u518d\u6b21\u5bfc\u5165\u7684\u6570\u636e\u662f\u5426\u4e0e\u539f\u59cb\u6570\u636e\u4e00\u81f4 SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb1 --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7073 --rpc_port 9093\", \"cleanup_dir\":[\"./testdb1\"]} CLIENTOPT = {\"host\":\"127.0.0.1:9093\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} IMPORT_YAGO_OPT = {\"cmd\":\"./lgraph_import --config_file ./data/yago/yago.conf --dir ./testdb --user admin --password 73@TuGraph --graph default --overwrite 1\", \"cleanup_dir\":[\"./.import_tmp\", \"./testdb\"]} IMPORT_DEF_OPT = {\"cmd\":\"./lgraph_import -c ./export/default/import.config -d ./testdb1\", \"cleanup_dir\":[\"./.import_tmp\", \"./testdb1\"]} EXPORT_DEF_OPT = {\"cmd\":\"./lgraph_export -d ./testdb -e ./export/default -g default -u admin -p 73@TuGraph\", \"cleanup_dir\":[\"./export\"]} @pytest.mark.parametrize(\"importor\", [IMPORT_YAGO_OPT], indirect=True) @pytest.mark.parametrize(\"exportor\", [EXPORT_DEF_OPT], indirect=True) @pytest.mark.parametrize(\"importor_1\", [IMPORT_DEF_OPT], indirect=True) @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"client\", [CLIENTOPT], indirect=True) def test_export_default(self, importor, exportor, importor_1, server, client): ret = client.callCypher(\"MATCH (n) RETURN n LIMIT 100\", \"default\") assert ret[0] res = json.loads(ret[1]) log.info(\"res : %s\", res) assert len(res) == 21 \u5176\u4ed6\u6d4b\u8bd5 \u66f4\u591a\u7528\u4f8b\u8bf7\u53c2\u8003\u96c6\u6210\u6d4b\u8bd5\u4ee3\u7801 https://github.com/TuGraph-db/tugraph-db/tree/master/test/integration","title":"\u96c6\u6210\u6d4b\u8bd5"},{"location":"zh-CN/2.operating/11.integration-test/#tugraph","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\u5982\u4f55\u4f7f\u7528","title":"TuGraph \u96c6\u6210\u6d4b\u8bd5\u6846\u67b6"},{"location":"zh-CN/2.operating/11.integration-test/#tugraph_1","text":"\u5728\u5355\u5143\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\u4e2d\uff0c\u6709\u90e8\u5206\u7528\u4f8b\u76f4\u63a5\u5f00\u542fgalaxy\u6216statemachine\u6765\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6d41\u7a0b\u3002\u5728\u5b8c\u6574\u7684cs\u67b6\u6784\u4e2d\uff0c\u7528\u6237\u8bf7\u6c42\u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u53d1\u5f80\u670d\u52a1\u7aef\uff0c\u7f51\u7edc\u901a\u4fe1\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u4e3a\u4e86\u907f\u514d\u5355\u5143\u6d4b\u8bd5\u4e0d\u5b8c\u6574\u5e26\u6765\u7684bug\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f7f\u7528\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\u8fdb\u884c\u5168\u94fe\u8def\u7684\u5b8c\u6574\u6d4b\u8bd5\u3002","title":"TuGraph\u96c6\u6210\u6d4b\u8bd5\u7684\u610f\u4e49"},{"location":"zh-CN/2.operating/11.integration-test/#tugraph_2","text":"TuGraph\u91c7\u7528pytest\u6846\u67b6\u4f5c\u4e3a\u81ea\u5df1\u7684\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\uff0cpytest\u6846\u67b6\u4f5c\u4e3a\u76ee\u524d\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684cs\u7aef\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6\uff0c\u4ee5\u5176\u7075\u6d3b\u7b80\u5355\uff0c\u5bb9\u6613\u4e0a\u624b\uff0c\u5e76\u4e14\u652f\u6301\u53c2\u6570\u5316\u7684\u4f7f\u7528\u65b9\u5f0f\u800c\u8457\u79f0\uff0cTuGraph\u57fa\u4e8epytest\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u62bd\u8c61\u51fa\u4e86\u4e0d\u540c\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u53c2\u6570\u6765\u63a7\u5236\u5404\u4e2a\u5de5\u5177\u7684\u5904\u7406\u903b\u8f91\uff0c\u4ee5\u65b9\u4fbf\u5927\u5bb6\u8fdb\u884c\u9ad8\u6548\u7684\u6d4b\u8bd5\u4ee3\u7801\u5f00\u53d1\u3002 \u66f4\u591apytest\u4fe1\u606f\u8bf7\u53c2\u8003\u5b98\u7f51: https://docs.pytest.org/en/7.2.x/getting-started.html","title":"TuGraph\u96c6\u6210\u6d4b\u8bd5\u6846\u67b6"},{"location":"zh-CN/2.operating/11.integration-test/#_1","text":"\u7ec4\u4ef6\u540d\u79f0 \u7ec4\u4ef6\u529f\u80fd \u5b9e\u73b0\u65b9\u5f0f server TuGraph\u5355\u673a\u670d\u52a1 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u542f\u52a8\u670d\u52a1 client TuGraph Rpc Client \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5f00\u542fTuGraph Python Rpc Client\u53d1\u9001\u8bf7\u6c42 importor TuGraph Importor \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5bfc\u5165\u8bf7\u6c42 exportor TuGraph Exportor \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5bfc\u51fa\u8bf7\u6c42 backup_binlog TuGraph Backup Binlog \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5907\u4efdbinlog\u7684\u8bf7\u6c42 backup_copy_dir TuGraph Backup \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406\u5907\u4efd\u5b8c\u6574db\u7684\u8bf7\u6c42 build_so \u7f16\u8bd1c++\u52a8\u6001\u8fde\u63a5\u5e93\u7684\u7ec4\u4ef6 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5904\u7406gcc\u7f16\u8bd1\u903b\u8f91 copy_snapshot TuGraph Copy Snapshot \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5904\u7406\u5907\u4efdsnapshot\u7684\u8bf7\u6c42 copydir \u6587\u4ef6\u5939\u62f7\u8d1d \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5904\u7406\u6587\u4ef6\u5939\u62f7\u8d1d\u8bf7\u6c42 exec \u6267\u884cc++/java\u53ef\u6267\u884c\u6587\u4ef6 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u542f\u52a8C++\u53ef\u6267\u884c\u6587\u4ef6 algo \u6267\u884c\u7b97\u6cd5 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u7b97\u6cd5 bash \u6267\u884cbash\u547d\u4ee4 \u5f00\u542f\u5b50\u8fdb\u7a0b\u5e76\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cbash\u547d\u4ee4 rest TuGraph Python Rest Client \u5f53\u524d\u8fdb\u7a0b\u4e2d\u5f00\u542fTuGraph Python Rest Client\u53d1\u9001\u8bf7\u6c42","title":"\u7ec4\u4ef6\u63cf\u8ff0"},{"location":"zh-CN/2.operating/11.integration-test/#_2","text":"","title":"\u7ec4\u4ef6\u7528\u6cd5"},{"location":"zh-CN/2.operating/11.integration-test/#server","text":"","title":"server"},{"location":"zh-CN/2.operating/11.integration-test/#_3","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7072 --rpc_port 9092\", \"cleanup_dir\":[\"./testdb\"]}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_4","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u542f\u52a8server\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u505c\u6b62server\uff0c\u5e76\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) def test_server(self, server): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#client","text":"","title":"client"},{"location":"zh-CN/2.operating/11.integration-test/#_5","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + host\u662fTuGraph Server\u7684ip\u548c\u7aef\u53e3 + user\u662fTuGraph Server\u7684\u7528\u6237\u540d + password\u662fTuGraph Server \u4e2duser\u5bf9\u5e94\u7684\u5bc6\u7801 CLIENTOPT = {\"host\":\"127.0.0.1:9092\", \"user\":\"admin\", \"password\":\"73@TuGraph\"}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_6","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u542f\u52a8\u5ba2\u6237\u7aef\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\u4f1a\u7ed3\u675f\u5ba2\u6237\u7aef @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"client\", [CLIENTOPT], indirect=True) def test_client(self, server, client): ret = client.callCypher(\"CALL db.createEdgeLabel('followed', '[]', 'address', string, false, 'date', int32, false)\", \"default\") assert ret[0] ret = client.callCypher(\"CALL db.createEdgeLabel('followed', '[]', 'address', string, false, 'date', int32, false)\", \"default\") assert ret[0] == False","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#importor","text":"","title":"importor"},{"location":"zh-CN/2.operating/11.integration-test/#_7","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 IMPORTOPT = {\"cmd\":\"./lgraph_import --config_file ./data/yago/yago.conf --dir ./testdb --user admin --password 73@TuGraph --graph default --overwrite 1\", \"cleanup_dir\":[\"./testdb\", \"./.import_tmp\"]}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_8","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5bfc\u5165\u4e0d\u540c\u7684\u6570\u636e\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5bfc\u5165\u6570\u636e\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"importor\", [IMPORTOPT], indirect=True) def test_importor(self, importor): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#exportor","text":"","title":"exportor"},{"location":"zh-CN/2.operating/11.integration-test/#_9","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 EXPORT_DEF_OPT = {\"cmd\":\"./lgraph_export -d ./testdb -e ./export/default -g default -u admin -p 73@TuGraph\", \"cleanup_dir\":[\"./export\"]}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_10","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5bfc\u51fa\u4e0d\u540c\u7684\u6570\u636e\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5bfc\u51fa\u6570\u636e\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"exportor\", [EXPORT_DEF_OPT], indirect=True) def test_exportor(self, exportor): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#backup_binlog","text":"","title":"backup_binlog"},{"location":"zh-CN/2.operating/11.integration-test/#_11","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 BINLOGOPT = {\"cmd\" : \"./lgraph_binlog -a restore --host 127.0.0.1 --port 9093 -u admin -p 73@TuGraph -f ./testdb/binlog/*\", \"cleanup_dir\":[]}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_12","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5907\u4efd\u4e0d\u540c\u7684binlog\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1dbinlog\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"backup_binlog\", [BINLOGOPT], indirect=True) def test_backup_binlog(self, backup_binlog): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#backup_copy_dir","text":"","title":"backup_copy_dir"},{"location":"zh-CN/2.operating/11.integration-test/#_13","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + cleanup_dir\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 BACKUPOPT = {\"cmd\" : \"./lgraph_backup --src ./testdb -dst ./testdb1\", \"cleanup_dir\":[]}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_14","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u5907\u4efd\u4e0d\u540c\u7684db\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1ddb\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406cleanup_dir\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"backup_copy_dir\", [BACKUPOPT], indirect=True) def test_backup_copy_dir(self, backup_copy_dir): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#build_so","text":"","title":"build_so"},{"location":"zh-CN/2.operating/11.integration-test/#_15","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4\uff0c\u91c7\u7528python\u5217\u8868\u4f20\u5165\uff0c\u53ef\u4ee5\u4e00\u6b21\u7f16\u8bd1\u591a\u4e2aso + so_name\u662f\u6267\u884c\u5b8c\u6210\u540e\u9700\u8981\u6e05\u7406\u7684so\uff0c\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u901a\u8fc7python\u5217\u8868\u4f20\u5165 BUILDOPT = {\"cmd\":[\"g++ -fno-gnu-unique -fPIC -g --std=c++11 -I ../../include -I ../../deps/install/include -rdynamic -O3 -fopenmp -DNDEBUG -o ./scan_graph.so ../../test/test_plugins/scan_graph.cpp ./liblgraph.so -shared\", \"g++ -fno-gnu-unique -fPIC -g --std=c++11 -I ../../include -I ../../deps/install/include -rdynamic -O3 -fopenmp -DNDEBUG -o ./sortstr.so ../../test/test_plugins/sortstr.cpp ./liblgraph.so -shared\"], \"so_name\":[\"./scan_graph.so\", \"./sortstr.so\"]}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_16","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u7f16\u8bd1\u4e0d\u540c\u7684so\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u751f\u6210so\u5230\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u6e05\u7406so_name\u5217\u8868\u6307\u5b9a\u7684\u52a8\u6001\u5e93 @pytest.mark.parametrize(\"build_so\", [BUILDOPT], indirect=True) def test_build_so(self, build_so): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#copy_snapshot","text":"","title":"copy_snapshot"},{"location":"zh-CN/2.operating/11.integration-test/#_17","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + src\u662f\u539fdb + dst\u662f\u62f7\u8d1d\u540e\u7684snapshot COPYSNAPOPT = {\"src\" : \"./testdb\", \"dst\" : \"./testdb1\"}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_18","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u62f7\u8d1d\u4e0d\u540c\u7684snapshot\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1dsrc\u4e2d\u7684snapshot\u5230dst\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"copy_snapshot\", [COPYSNAPOPT], indirect=True) def test_copy_snapshot(self, copy_snapshot): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#copy_dir","text":"","title":"copy_dir"},{"location":"zh-CN/2.operating/11.integration-test/#_19","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + src\u662f\u539fdb + dst\u662f\u62f7\u8d1d\u540e\u7684snapshot COPYSNAPOPT = {\"src\" : \"./testdb\", \"dst\" : \"./testdb1\"}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_20","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u62f7\u8d1d\u4e0d\u540c\u7684\u76ee\u5f55\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u62f7\u8d1dsrc\u5230dst\u6307\u5b9a\u7684\u76ee\u5f55 @pytest.mark.parametrize(\"copy_dir\", [COPYDIR], indirect=True) def test_copy_dir(self, copy_dir): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#exec","text":"","title":"exec"},{"location":"zh-CN/2.operating/11.integration-test/#_21","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 EXECOPT = { \"cmd\" : \"rpc_client/cpp/CppClientTest/build/clienttest\" }","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_22","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u6267\u884c\u4e0d\u540c\u7684\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884c\u901a\u8fc7cmd\u53c2\u6570\u4f20\u5165\u7684\u547d\u4ee4 @pytest.mark.parametrize(\"exec\", [EXECOPT], indirect=True) def test_exec(self, exec): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#algo","text":"","title":"algo"},{"location":"zh-CN/2.operating/11.integration-test/#_23","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 + result\u662f\u7b97\u6cd5\u9884\u671f\u7684\u6267\u884c\u7ed3\u679c\uff0c\u6267\u884c\u5b8c\u6210\u4f1a\u901a\u8fc7\u5b9e\u9645\u7ed3\u679c\u4e0e\u9884\u671f\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e0d\u540c\u5219\u6d4b\u8bd5\u5931\u8d25 BFSEMBEDOPT = { \"cmd\" : \"algo/bfs_embed ./testdb\", \"result\" : [\"found_vertices = 3829\"] }","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_24","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u6267\u884c\u4e0d\u540c\u7684\u7b97\u6cd5\u903b\u8f91\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884c\u901a\u8fc7cmd\u53c2\u6570\u4f20\u5165\u7684\u7b97\u6cd5\uff0c\u51fd\u6570\u4e3b\u4f53\u7b49\u5f85\u7b97\u6cd5\u6267\u884c\u5b8c\u6210\u540e\u5bf9\u6bd4\u7ed3\u679c @pytest.mark.parametrize(\"algo\", [BFSEMBEDOPT], indirect=True) def test_exec_bfs_embed(self, algo): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#bash","text":"","title":"bash"},{"location":"zh-CN/2.operating/11.integration-test/#_25","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + cmd\u662f\u542f\u52a8\u547d\u4ee4 BASHOPT = { \"cmd\" : \"sh ./rpc_client/cpp/CppClientTest/compile.sh\" }","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_26","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u63a7\u5236\u6267\u884c\u4e0d\u540c\u7684bash\u547d\u4ee4\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884c\u901a\u8fc7cmd\u53c2\u6570\u4f20\u5165\u7684bash\u547d\u4ee4\uff0c\u51fd\u6570\u4e3b\u4f53\u7b49\u5f85\u7b97\u6cd5\u6267\u884c\u5b8c\u6210 @pytest.mark.parametrize(\"bash\", [BASHOPT], indirect=True) def test_bash(self, bash): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#rest","text":"","title":"rest"},{"location":"zh-CN/2.operating/11.integration-test/#_27","text":"\u91c7\u7528python\u5b57\u5178\u4f20\u5165 + port\u662fTuGraph Server\u7684\u7aef\u53e3 + user\u662fTuGraph Server\u7684\u7528\u6237\u540d + password\u662fTuGraph Server \u4e2duser\u5bf9\u5e94\u7684\u5bc6\u7801 RESTTOPT = {\"port\":\"7073\", \"user\":\"admin\", \"password\":\"73@TuGraph\"}","title":"\u542f\u52a8\u53c2\u6570"},{"location":"zh-CN/2.operating/11.integration-test/#_28","text":"\u901a\u8fc7fixtures\u7ec4\u4ef6\u5f15\u5165\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u6765\u94fe\u63a5\u4e0d\u540c\u7684TuGraph Rest Server\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u524d\u4f1a\u542f\u52a8\u5ba2\u6237\u7aef\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\u4f1a\u7ed3\u675f\u5ba2\u6237\u7aef @pytest.mark.parametrize(\"rest\", [RESTTOPT], indirect=True) def test_get_info(self, server, rest): pass","title":"\u542f\u52a8\u547d\u4ee4"},{"location":"zh-CN/2.operating/11.integration-test/#_29","text":"","title":"\u6d4b\u8bd5\u6837\u4f8b"},{"location":"zh-CN/2.operating/11.integration-test/#rest_1","text":"\u6837\u4f8b\u4ee3\u7801\u4e2d\u5728test_get_info\u51fd\u6570\u6267\u884c\u4e4b\u524d\u5148\u542f\u52a8server\uff0cserver\u542f\u52a8\u540e\u542f\u52a8\u4e86rest client\uff0c\u8fdb\u5165test_get_info\u51fd\u6570\u540e\u83b7\u53d6server\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5e76\u901a\u8fc7assert\u5224\u65ad\u662f\u5426\u6709\u83b7\u53d6\u5230cpu\u7684\u4fe1\u606f\u3002 SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7073 --rpc_port 9093\", \"cleanup_dir\":[\"./testdb\"]} RESTTOPT = {\"port\":\"7073\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"rest\", [RESTTOPT], indirect=True) def test_get_info(self, server, rest): res = rest.get_server_info() log.info(\"res : %s\", res) assert('cpu' in res)","title":"rest"},{"location":"zh-CN/2.operating/11.integration-test/#client_1","text":"\u6837\u4f8b\u4ee3\u7801\u4e2d\u5728test_flushdb\u51fd\u6570\u6267\u884c\u4e4b\u524d\u5148\u6267\u884c\u4e86\u6570\u636e\u79bb\u7ebf\u5bfc\u5165\u903b\u8f91\uff0c\u5e76\u542f\u52a8server\u540e\uff0c\u901a\u8fc7client\u521b\u5efa\u94fe\u63a5\uff0c\u8fdb\u5165test_flushdb\u51fd\u6570\u540e\uff0c\u901a\u8fc7\u67e5\u8be2\u70b9\u7684\u4e2a\u6570\u5224\u65ad\u5bfc\u5165\u662f\u5426\u6210\u529f\uff0c\u5bfc\u5165\u6210\u529f\u540e\u6267\u884cflushDB\u64cd\u4f5c\uff0c\u518d\u6b21\u901a\u8fc7assert\u5224\u65ad\u662f\u5426\u80fd\u6b63\u5e38\u6e05\u7a7adb SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7072 --rpc_port 9092\", \"cleanup_dir\":[\"./testdb\"]} CLIENTOPT = {\"host\":\"127.0.0.1:9092\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} IMPORTOPT = {\"cmd\":\"./lgraph_import --config_file ./data/yago/yago.conf --dir ./testdb --user admin --password 73@TuGraph --graph default --overwrite 1\", \"cleanup_dir\":[\"./testdb\", \"./.import_tmp\"]} @pytest.mark.parametrize(\"importor\", [IMPORTOPT], indirect=True) @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"client\", [CLIENTOPT], indirect=True) def test_flushdb(self, importor, server, client): ret = client.callCypher(\"MATCH (n) RETURN n LIMIT 100\", \"default\") assert ret[0] res = json.loads(ret[1]) assert len(res) == 21 ret = client.callCypher(\"CALL db.flushDB()\", \"default\") assert ret[0] res = json.loads(ret[1]) assert res == None","title":"client"},{"location":"zh-CN/2.operating/11.integration-test/#exportorimportor","text":"\u6837\u4f8b\u4ee3\u7801\u4e2d\u5728test_export_default\u51fd\u6570\u6267\u884c\u4e4b\u524d\u5148\u6267\u884c\u4e86\u6570\u636e\u79bb\u7ebf\u5bfc\u5165\u903b\u8f91\uff0c\u5bfc\u5165\u6210\u529f\u540e\u5c06\u5f53\u524ddb\u7684\u6570\u636e\u5bfc\u51fa\uff0c\u7136\u540e\u518d\u6b21\u901a\u8fc7\u79bb\u7ebf\u5bfc\u5165\u903b\u8f91\u5c06exportor\u5bfc\u51fa\u7684\u6570\u636e\u5bfc\u5165\u5230\u65b0\u7684\u76ee\u5f55\u4e2d\uff0c\u4ee5\u65b0\u5bfc\u5165\u7684\u6570\u636e\u542f\u52a8db\uff0c\u5e76\u4e14\u521b\u5efa\u94fe\u63a5\u3002\u5728test_export_default\u51fd\u6570\u4e3b\u4f53\u4e2d\u5224\u65ad\u5bfc\u51fa\u540e\u518d\u6b21\u5bfc\u5165\u7684\u6570\u636e\u662f\u5426\u4e0e\u539f\u59cb\u6570\u636e\u4e00\u81f4 SERVEROPT = {\"cmd\":\"./lgraph_server -c lgraph_standalone.json --directory ./testdb1 --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7073 --rpc_port 9093\", \"cleanup_dir\":[\"./testdb1\"]} CLIENTOPT = {\"host\":\"127.0.0.1:9093\", \"user\":\"admin\", \"password\":\"73@TuGraph\"} IMPORT_YAGO_OPT = {\"cmd\":\"./lgraph_import --config_file ./data/yago/yago.conf --dir ./testdb --user admin --password 73@TuGraph --graph default --overwrite 1\", \"cleanup_dir\":[\"./.import_tmp\", \"./testdb\"]} IMPORT_DEF_OPT = {\"cmd\":\"./lgraph_import -c ./export/default/import.config -d ./testdb1\", \"cleanup_dir\":[\"./.import_tmp\", \"./testdb1\"]} EXPORT_DEF_OPT = {\"cmd\":\"./lgraph_export -d ./testdb -e ./export/default -g default -u admin -p 73@TuGraph\", \"cleanup_dir\":[\"./export\"]} @pytest.mark.parametrize(\"importor\", [IMPORT_YAGO_OPT], indirect=True) @pytest.mark.parametrize(\"exportor\", [EXPORT_DEF_OPT], indirect=True) @pytest.mark.parametrize(\"importor_1\", [IMPORT_DEF_OPT], indirect=True) @pytest.mark.parametrize(\"server\", [SERVEROPT], indirect=True) @pytest.mark.parametrize(\"client\", [CLIENTOPT], indirect=True) def test_export_default(self, importor, exportor, importor_1, server, client): ret = client.callCypher(\"MATCH (n) RETURN n LIMIT 100\", \"default\") assert ret[0] res = json.loads(ret[1]) log.info(\"res : %s\", res) assert len(res) == 21","title":"exportor/importor"},{"location":"zh-CN/2.operating/11.integration-test/#_30","text":"\u66f4\u591a\u7528\u4f8b\u8bf7\u53c2\u8003\u96c6\u6210\u6d4b\u8bd5\u4ee3\u7801 https://github.com/TuGraph-db/tugraph-db/tree/master/test/integration","title":"\u5176\u4ed6\u6d4b\u8bd5"},{"location":"zh-CN/2.operating/2.Install/","text":"\u5b89\u88c5\u90e8\u7f72 \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u4e09\u79cd\u4e0d\u540c\u5b89\u88c5\u65b9\u5f0f\uff1aUbuntu \u7cfb\u7edf\u3001CentOS \u7cfb\u7edf\u3001docker \u955c\u50cf\u3002 \u652f\u6301\u7684\u5e73\u53f0 TuGraph \u65e0\u8bba\u662f\u7269\u7406\u3001\u865a\u62df\u8fd8\u662f\u5bb9\u5668\u5316\u73af\u5883\uff0c\u5747\u652f\u6301 X86_64 \u548c ARM64 \u67b6\u6784\u7684\u7684\u5e73\u53f0\u3002 \u786c\u4ef6\u8981\u6c42 \u76ee\u524d\u6211\u4eec\u5efa\u8bae\u7528\u6237\u4f7f\u7528 NVMe SSD \u914d\u5408\u8f83\u5927\u7684\u5185\u5b58\u914d\u7f6e\u4ee5\u83b7\u53d6\u6700\u4f73\u6027\u80fd\u3002 \u786c\u4ef6 \u6700\u4f4e\u914d\u7f6e \u5efa\u8bae\u914d\u7f6e CPU X86_64 Xeon E5 2670 v4 \u5185\u5b58 4GB 256GB \u786c\u76d8 100GB 1TB NVMe SSD \u64cd\u4f5c\u7cfb\u7edf Linux 2.6 Ubuntu 18.04, CentOS 7.3 \u901a\u8fc7 docker \u955c\u50cf\u5b89\u88c5 \u60f3\u8981\u4f7f\u7528 docker \u955c\u50cf\u8fdb\u884c\u5b89\u88c5\uff0c\u7528\u6237\u9996\u5148\u9700\u8981\u786e\u4fdd\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e2d\u5df2\u7ecf\u5b89\u88c5\u4e86 docker\u3002\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5224\u65ad docker \u662f\u5426\u5df2\u7ecf\u5b89\u88c5\uff1a $ sudo docker --version \u5982\u679c\u4e0a\u9762\u7684\u547d\u4ee4\u80fd\u987a\u5229\u6253\u5370\u51fa docker \u7248\u672c\u53f7\uff0c\u5219\u8bc1\u660e docker \u73af\u5883\u5df2\u7ecf\u5b89\u88c5\uff1b\u5426\u5219\u9700\u8981\u5148\u5b89\u88c5 docker\uff0c\u5b89\u88c5 docker \u7684\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u5176\u5b98\u7f51\uff1a https://docs.docker.com/install/ \u3002 \u76ee\u524d\uff0cTuGraph \u63d0\u4f9b\u57fa\u4e8e Ubuntu 16.04 LTS \u548c CentOS 7.3 \u7cfb\u7edf\u7684\u955c\u50cf\u6587\u4ef6\u3002\u955c\u50cf\u6587\u4ef6\u662f\u4e00\u4e2a\u540d\u4e3a lgraph_x.y.z.tar \u7684\u538b\u7f29\u6587\u4ef6\uff0c\u5176\u4e2d x.y.z \u662f TuGraph \u7684\u7248\u672c\u53f7\u3002 \u538b\u7f29\u5305\u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u52a0\u8f7d\u5230 docker \u955c\u50cf\u4e2d\uff1a $ sudo docker load -i ./tugraph_x.y.z.tar \u5982\u679c\u52a0\u8f7d\u6210\u529f\uff0c\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u5e94\u5177\u6709\u540d\u4e3a tugraph_x.y.z \u7684 docker \u955c\u50cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u8be5\u955c\u50cf\uff1a # \u8fd0\u884c\u955c\u50cf $ sudo docker run -v {data_dir_on_host}:/data_dir_in_docker -it tugraph/tugraph-runtime-centos7:x.y.z /bin/bash # \u8fdb\u5165docker\u5bb9\u5668 $ docker exec -it {container_id} bash -v \u662f\u76ee\u5f55\u6620\u5c04\uff0c {host_data_dir} \u662f\u7528\u6237\u5e0c\u671b\u4fdd\u5b58\u6570\u636e\u7684\u76ee\u5f55\uff0c\u6bd4\u5982 /home/user1/workspace\u3002 -p \u7684\u4f5c\u7528\u662f\u7aef\u53e3\u6620\u5c04\uff0c\u4f8b\u5b50\u4e2d\u5c06 Docker \u7684 7090 \u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7684 7090 \u7aef\u53e3\u3002 {container_id} \u662f Docker \u7684 container id\uff0c\u53ef\u4ee5\u901a\u8fc7 docker ps \u83b7\u5f97\u3002 Ubuntu \u4e0b\u7684\u5b89\u88c5\u65b9\u6cd5 \u7528\u4e8e\u5728 Ubuntu \u4e0a\u5b89\u88c5\u7684 TuGraph \u7684.deb \u5b89\u88c5\u5305\uff0c\u5176\u4e2d\u5305\u542b\u4e86 TuGraph \u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u7f16\u5199\u5d4c\u5165\u5f0f\u7a0b\u5e8f\u548c\u5b58\u50a8\u8fc7\u7a0b\u6240\u9700\u7684\u5934\u6587\u4ef6\u548c\u76f8\u5173\u5e93\u6587\u4ef6\u3002 \u4f7f\u7528\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u7684 tugraph_x.y.z.deb \u5b89\u88c5\u5305\u5728\u7ec8\u7aef\u4e0b\u5b89\u88c5\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ sudo dpkg -i tugraph-x.y.z.deb \u8be5\u547d\u4ee4\u9ed8\u8ba4\u5c06 TuGraph \u5b89\u88c5\u4e8e /usr/local \u76ee\u5f55\u4e0b\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a --instdir=<directory> \u9009\u9879\u66f4\u6539\u5b89\u88c5\u76ee\u5f55\u3002 CentOS \u4e0b\u7684\u5b89\u88c5\u65b9\u6cd5 \u7528\u4e8e\u5728 CentOS \u4e0a\u5b89\u88c5\u7684 TuGraph \u7684.rpm \u5b89\u88c5\u5305\uff0c\u5176\u4e2d\u5305\u542b\u4e86 TuGraph \u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u7f16\u5199\u5d4c\u5165\u5f0f\u7a0b\u5e8f\u548c\u5b58\u50a8\u8fc7\u7a0b\u6240\u9700\u7684\u5934\u6587\u4ef6\u548c\u76f8\u5173\u5e93\u6587\u4ef6\u3002 \u4f7f\u7528\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u7684`tugraph_x.y.z.rpm \u5b89\u88c5\u5305\u5728\u7ec8\u7aef\u4e0b\u5b89\u88c5\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ rpm -ivh tugraph-x.y.z.rpm \u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a --prefix \u9009\u9879\u6307\u5b9a\u5b89\u88c5\u76ee\u5f55\u3002","title":"\u5b89\u88c5"},{"location":"zh-CN/2.operating/2.Install/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u4e09\u79cd\u4e0d\u540c\u5b89\u88c5\u65b9\u5f0f\uff1aUbuntu \u7cfb\u7edf\u3001CentOS \u7cfb\u7edf\u3001docker \u955c\u50cf\u3002","title":"\u5b89\u88c5\u90e8\u7f72"},{"location":"zh-CN/2.operating/2.Install/#_2","text":"TuGraph \u65e0\u8bba\u662f\u7269\u7406\u3001\u865a\u62df\u8fd8\u662f\u5bb9\u5668\u5316\u73af\u5883\uff0c\u5747\u652f\u6301 X86_64 \u548c ARM64 \u67b6\u6784\u7684\u7684\u5e73\u53f0\u3002","title":"\u652f\u6301\u7684\u5e73\u53f0"},{"location":"zh-CN/2.operating/2.Install/#_3","text":"\u76ee\u524d\u6211\u4eec\u5efa\u8bae\u7528\u6237\u4f7f\u7528 NVMe SSD \u914d\u5408\u8f83\u5927\u7684\u5185\u5b58\u914d\u7f6e\u4ee5\u83b7\u53d6\u6700\u4f73\u6027\u80fd\u3002 \u786c\u4ef6 \u6700\u4f4e\u914d\u7f6e \u5efa\u8bae\u914d\u7f6e CPU X86_64 Xeon E5 2670 v4 \u5185\u5b58 4GB 256GB \u786c\u76d8 100GB 1TB NVMe SSD \u64cd\u4f5c\u7cfb\u7edf Linux 2.6 Ubuntu 18.04, CentOS 7.3","title":"\u786c\u4ef6\u8981\u6c42"},{"location":"zh-CN/2.operating/2.Install/#docker","text":"\u60f3\u8981\u4f7f\u7528 docker \u955c\u50cf\u8fdb\u884c\u5b89\u88c5\uff0c\u7528\u6237\u9996\u5148\u9700\u8981\u786e\u4fdd\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e2d\u5df2\u7ecf\u5b89\u88c5\u4e86 docker\u3002\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5224\u65ad docker \u662f\u5426\u5df2\u7ecf\u5b89\u88c5\uff1a $ sudo docker --version \u5982\u679c\u4e0a\u9762\u7684\u547d\u4ee4\u80fd\u987a\u5229\u6253\u5370\u51fa docker \u7248\u672c\u53f7\uff0c\u5219\u8bc1\u660e docker \u73af\u5883\u5df2\u7ecf\u5b89\u88c5\uff1b\u5426\u5219\u9700\u8981\u5148\u5b89\u88c5 docker\uff0c\u5b89\u88c5 docker \u7684\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u5176\u5b98\u7f51\uff1a https://docs.docker.com/install/ \u3002 \u76ee\u524d\uff0cTuGraph \u63d0\u4f9b\u57fa\u4e8e Ubuntu 16.04 LTS \u548c CentOS 7.3 \u7cfb\u7edf\u7684\u955c\u50cf\u6587\u4ef6\u3002\u955c\u50cf\u6587\u4ef6\u662f\u4e00\u4e2a\u540d\u4e3a lgraph_x.y.z.tar \u7684\u538b\u7f29\u6587\u4ef6\uff0c\u5176\u4e2d x.y.z \u662f TuGraph \u7684\u7248\u672c\u53f7\u3002 \u538b\u7f29\u5305\u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u52a0\u8f7d\u5230 docker \u955c\u50cf\u4e2d\uff1a $ sudo docker load -i ./tugraph_x.y.z.tar \u5982\u679c\u52a0\u8f7d\u6210\u529f\uff0c\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u5e94\u5177\u6709\u540d\u4e3a tugraph_x.y.z \u7684 docker \u955c\u50cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u8be5\u955c\u50cf\uff1a # \u8fd0\u884c\u955c\u50cf $ sudo docker run -v {data_dir_on_host}:/data_dir_in_docker -it tugraph/tugraph-runtime-centos7:x.y.z /bin/bash # \u8fdb\u5165docker\u5bb9\u5668 $ docker exec -it {container_id} bash -v \u662f\u76ee\u5f55\u6620\u5c04\uff0c {host_data_dir} \u662f\u7528\u6237\u5e0c\u671b\u4fdd\u5b58\u6570\u636e\u7684\u76ee\u5f55\uff0c\u6bd4\u5982 /home/user1/workspace\u3002 -p \u7684\u4f5c\u7528\u662f\u7aef\u53e3\u6620\u5c04\uff0c\u4f8b\u5b50\u4e2d\u5c06 Docker \u7684 7090 \u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7684 7090 \u7aef\u53e3\u3002 {container_id} \u662f Docker \u7684 container id\uff0c\u53ef\u4ee5\u901a\u8fc7 docker ps \u83b7\u5f97\u3002","title":"\u901a\u8fc7 docker \u955c\u50cf\u5b89\u88c5"},{"location":"zh-CN/2.operating/2.Install/#ubuntu","text":"\u7528\u4e8e\u5728 Ubuntu \u4e0a\u5b89\u88c5\u7684 TuGraph \u7684.deb \u5b89\u88c5\u5305\uff0c\u5176\u4e2d\u5305\u542b\u4e86 TuGraph \u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u7f16\u5199\u5d4c\u5165\u5f0f\u7a0b\u5e8f\u548c\u5b58\u50a8\u8fc7\u7a0b\u6240\u9700\u7684\u5934\u6587\u4ef6\u548c\u76f8\u5173\u5e93\u6587\u4ef6\u3002 \u4f7f\u7528\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u7684 tugraph_x.y.z.deb \u5b89\u88c5\u5305\u5728\u7ec8\u7aef\u4e0b\u5b89\u88c5\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ sudo dpkg -i tugraph-x.y.z.deb \u8be5\u547d\u4ee4\u9ed8\u8ba4\u5c06 TuGraph \u5b89\u88c5\u4e8e /usr/local \u76ee\u5f55\u4e0b\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a --instdir=<directory> \u9009\u9879\u66f4\u6539\u5b89\u88c5\u76ee\u5f55\u3002","title":"Ubuntu \u4e0b\u7684\u5b89\u88c5\u65b9\u6cd5"},{"location":"zh-CN/2.operating/2.Install/#centos","text":"\u7528\u4e8e\u5728 CentOS \u4e0a\u5b89\u88c5\u7684 TuGraph \u7684.rpm \u5b89\u88c5\u5305\uff0c\u5176\u4e2d\u5305\u542b\u4e86 TuGraph \u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u7f16\u5199\u5d4c\u5165\u5f0f\u7a0b\u5e8f\u548c\u5b58\u50a8\u8fc7\u7a0b\u6240\u9700\u7684\u5934\u6587\u4ef6\u548c\u76f8\u5173\u5e93\u6587\u4ef6\u3002 \u4f7f\u7528\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u7684`tugraph_x.y.z.rpm \u5b89\u88c5\u5305\u5728\u7ec8\u7aef\u4e0b\u5b89\u88c5\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ rpm -ivh tugraph-x.y.z.rpm \u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a --prefix \u9009\u9879\u6307\u5b9a\u5b89\u88c5\u76ee\u5f55\u3002","title":"CentOS \u4e0b\u7684\u5b89\u88c5\u65b9\u6cd5"},{"location":"zh-CN/2.operating/3.data-import/","text":"\u6570\u636e\u5bfc\u5165 \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u6570\u636e\u5bfc\u5165\u529f\u80fd\u3002\u5176\u4e2d\u5305\u62ec CSV \u683c\u5f0f\u7684\u5206\u9694\u7b26\uff0cjsonline \u7684\u683c\u5f0f\u793a\u4f8b\uff0c\u4ee5\u53ca\u5bfc\u5165\u5728\u7ebf\u548c\u79bb\u7ebf\u7684\u4e24\u79cd\u6a21\u5f0f\u3002 \u5728\u56fe\u6570\u636e\u5e93\u670d\u52a1\u5b89\u88c5\u6210\u529f\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 lgraph_import \u6279\u91cf\u5bfc\u5165\u5de5\u5177\u5c06\u73b0\u6709\u6570\u636e\u5bfc\u5165 TuGraph\u3002 lgraph_import \u652f\u6301\u4ece CSV \u6587\u4ef6\u548c JSON \u6570\u636e\u6e90\u5bfc\u5165\u6570\u636e\u3002 jsonline\u683c\u5f0f\uff0c\u4e00\u884c\u4e00\u4e2ajson\u6570\u7ec4\u5b57\u7b26\u4e32 CSV \u683c\u5f0f [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 jsonline \u683c\u5f0f [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] TuGraph \u652f\u6301\u4e24\u79cd\u5bfc\u5165\u6a21\u5f0f\uff1a \u79bb\u7ebf\u6a21\u5f0f \uff1a\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u5bfc\u5165\u6307\u5b9a\u670d\u52a1\u5668\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5e94\u4ec5\u5728\u670d\u52a1\u5668\u79bb\u7ebf\u65f6\u5b8c\u6210\u3002 \u5728\u7ebf\u6a21\u5f0f \uff1a\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u53d1\u9001\u5230\u5de5\u4f5c\u4e2d\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u5c06\u6570\u636e\u5bfc\u5165\u5176\u6570\u636e\u5e93\u3002 CSV \u6587\u4ef6\u683c\u5f0f\u5206\u9694\u7b26 CSV\u683c\u5f0f\u7684\u5206\u9694\u7b26\u53ef\u4ee5\u662f\u5355\u5b57\u7b26\u6216\u591a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u4e0d\u80fd\u5305\u542b`\\r`\u6216`\\n`\u3002\u6ce8\u610f\u4e0d\u540c\u7684shell\u4f1a\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u505a\u4e0d\u540c\u7684\u5904\u7406\uff0c\u56e0\u6b64\u9488\u5bf9\u4e0d\u540c\u7684shell\u8f93\u5165\u53c2\u6570\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u8f6c\u4e49\u5904\u7406\u3002 \u6b64\u5916\uff0c lgraph_import \u8fd8\u652f\u6301\u4ee5\u4e0b\u8f6c\u4e49\u5b57\u7b26\uff0c\u4ee5\u4fbf\u8f93\u5165\u7279\u6b8a\u7b26\u53f7\uff1a \u8f6c\u4e49\u7b26 \u8bf4\u660e \\ \u53cd\u659c\u6760 \\\\ \\a \u54cd\u94c3\uff0c\u5373 ASCII \u7801 0x07 \\f form-feed\uff0c\u5373 ASCII \u7801 0x0c \\t \u6c34\u5e73\u5236\u8868\u7b26\uff0c\u5373 ASCII \u7801 0x09 \\v \u5782\u76f4\u5236\u8868\u7b26\uff0c\u5373 ASCII \u7801 0x0b \\xnn \u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\\x9A \\nnn \u4e09\u4f4d\u516b\u8fdb\u5236\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\\001, \\443\uff0c\u6570\u503c\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7 255 \u4f8b\uff1a $ ./lgraph_import -c ./import.config --delimiter \"\\001\\002\" \u914d\u7f6e\u6587\u4ef6 `lgraph_import`\u5de5\u5177\u901a\u8fc7\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u73af\u5883\u914d\u7f6e\u3002\u914d\u7f6e\u6587\u4ef6\u63cf\u8ff0\u8f93\u5165\u6587\u4ef6\u7684\u8def\u5f84\u3001\u5b83\u4eec\u6240\u4ee3\u8868\u7684\u9876\u70b9/\u8fb9\u4ee5\u53ca\u9876\u70b9/\u8fb9\u7684\u683c\u5f0f\u3002 \u914d\u7f6e\u6587\u4ef6\u683c\u5f0f \u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e24\u90e8\u5206\uff1aschema \u548c files\u3002 schema \u90e8\u5206\u5b9a\u4e49 label\uff0c files \u90e8\u5206\u63cf\u8ff0\u8981\u5bfc\u5165\u7684\u6570\u636e\u6587\u4ef6\u3002 \u5173\u952e\u5b57 schema (\u6570\u7ec4\u5f62\u5f0f\uff09 label\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09 type\uff08\u5fc5\u9009\uff0c\u503c\u53ea\u80fd\u662f VERTEX \u6216\u8005 EDGE\uff09 properties\uff08\u6570\u7ec4\u5f62\u5f0f\uff0c\u5bf9\u4e8e\u70b9\u5fc5\u9009\uff0c\u5bf9\u4e8e\u8fb9\u5982\u679c\u6ca1\u6709\u5c5e\u6027\u53ef\u4ee5\u4e0d\u914d\u7f6e\uff09 name\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09 type \uff08\u5fc5\u9009\uff0cBOOL\uff0cINT8\uff0cINT16\uff0cINT32\uff0cINT64\uff0cDATE\uff0cDATETIME\uff0cFLOAT\uff0cDOUBLE\uff0cSTRING\uff0cBLOB\uff09 optional\uff08\u53ef\u9009\uff0c\u4ee3\u8868\u8be5\u5b57\u6bb5\u53ef\u4ee5\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u914d\u7f6e\uff09 index\uff08\u53ef\u9009\uff0c\u8be5\u5b57\u6bb5\u662f\u5426\u9700\u8981\u5efa\u7d22\u5f15\uff09 unique\uff08\u53ef\u9009\uff0c\u8be5\u5b57\u6bb5\u662f\u5426\u5efa\u7d22\u5f15\uff0c\u5e76\u4e14\u662f unique \u7c7b\u578b\u7684\uff09 primary (\u4ec5\u70b9\u914d\u7f6e\uff0c\u5fc5\u9009\uff0c\u4e3b\u952e\u5b57\u6bb5\uff0c\u9700\u6307\u5b9a\u4e00\u4e2a property\uff0c\u7528\u6765\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u70b9) constraints (\u4ec5\u8fb9\u914d\u7f6e\uff0c\u53ef\u9009\uff0c\u6570\u7ec4\u5f62\u5f0f\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u7684 label\uff0c\u4e0d\u914d\u7f6e\u6216\u8005\u4e3a\u7a7a\u4ee3\u8868\u4e0d\u9650\u5236) files \uff08\u6570\u7ec4\u5f62\u5f0f\uff09 path\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u6587\u4ef6\u8def\u5f84\u6216\u8005\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5982\u679c\u662f\u76ee\u5f55\u4f1a\u5bfc\u5165\u6b64\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u9700\u8981\u4fdd\u8bc1\u6709\u76f8\u540c\u7684 schema\uff09 header\uff08\u53ef\u9009\uff0c\u6570\u5b57\uff0c\u5934\u4fe1\u606f\u5360\u6587\u4ef6\u8d77\u59cb\u7684\u51e0\u884c\uff0c\u6ca1\u6709\u5c31\u662f 0\uff09 format\uff08\u5fc5\u987b\u9009\uff0c\u53ea\u80fd\u662f JSON \u6216\u8005 CSV\uff09 label\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\uff09 columns\uff08\u6570\u7ec4\u5f62\u5f0f\uff09 SRC_ID (\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u4ec5\u8fb9\u6709\uff0c\u4ee3\u8868\u8fd9\u5217\u662f\u8d77\u59cb\u70b9\u6570\u636e) DST_ID (\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u4ec5\u8fb9\u6709\uff0c\u4ee3\u8868\u8fd9\u5217\u662f\u76ee\u7684\u70b9\u6570\u636e) SKIP (\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u8df3\u8fc7\u8fd9\u5217\u6570\u636e) [property] SRC_ID (\u4ec5\u8fb9\u914d\u7f6e\uff0c\u503c\u662f\u8d77\u59cb\u70b9\u6807\u7b7e) DST_ID (\u4ec5\u8fb9\u914d\u7f6e\uff0c\u503c\u662f\u76ee\u7684\u70b9\u6807\u7b7e) \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } \u5bf9\u4e8e\u4e0a\u8ff0\u914d\u7f6e\u6587\u4ef6\uff0c\u5b9a\u4e49\u4e86\u4e09\u4e2a label\uff1a\u4e24\u4e2a\u70b9\u7c7b\u578b actor \u548c movie \uff0c\u4e00\u4e2a\u8fb9\u7c7b\u578b role \u3002\u6bcf\u4e2a label \u90fd\u63cf\u8ff0\u4e86\uff1alabel \u7684\u540d\u5b57\u3001\u7c7b\u578b\uff08\u70b9\u8fd8\u662f\u8fb9\uff09\u3001\u5c5e\u6027\u5b57\u6bb5\u6709\u54ea\u4e9b\u4ee5\u53ca\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u3002\u5bf9\u4e8e\u70b9\uff0c\u53e6\u5916\u5b9a\u4e49\u4e86 primary \u5b57\u6bb5\u662f\u54ea\u4e2a\uff1b\u5bf9\u4e8e\u8fb9\uff0c\u53e6\u5916\u5b9a\u4e49\u4e86 constraints \u5b57\u6bb5\uff0c\u7528\u6765\u9650\u5236\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u53ea\u80fd\u662f\u54ea\u4e9b\u7ec4\u5408\u3002 \u8fd8\u63cf\u8ff0\u4e86\u4e09\u4e2a\u6570\u636e\u6587\u4ef6\uff0c\u4e24\u4e2a\u70b9\u7684\u6570\u636e\u6587\u4ef6 actors.csv \u548c movies.csv \uff0c\u4e00\u4e2a\u8fb9\u7684\u6570\u636e\u6587\u4ef6 roles.csv \u3002\u6bcf\u4e2a\u90e8\u5206\u90fd\u63cf\u8ff0\u4e86\uff1a\u6587\u4ef6\u7684\u8def\u5f84\uff08path\uff09\u3001\u6570\u636e\u7c7b\u578b\uff08format\uff09\u3001\u4fe1\u606f\u5934\u5360\u5f00\u5934\u51e0\u884c\uff08header\uff09\u3001\u662f\u54ea\u4e2a label \u7684\u6570\u636e\uff08label\uff09\u3001\u6587\u4ef6\u4e2d\u6bcf\u884c\u6570\u636e\u4e2d\u7684\u6bcf\u4e2a\u5217\u5bf9\u5e94\u7684\u5b57\u6bb5\u662f\u54ea\u4e2a\u3002 \u5bf9\u4e8e\u4e0a\u8ff0\u914d\u7f6e\u6587\u4ef6\uff0cimport \u5de5\u5177\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5148\u5728 TuGraph \u4e2d\u521b\u5efa actor \u3001 movie \u3001 role \u8fd9\u4e09\u4e2a label\uff0c\u7136\u540e\u518d\u6267\u884c\u4e09\u4e2a\u6587\u4ef6\u7684\u6570\u636e\u5bfc\u5165\u3002 \u79bb\u7ebf\u5168\u91cf\u5bfc\u5165 \u79bb\u7ebf\u6a21\u5f0f\u53ea\u80fd\u5728\u79bb\u7ebf\u72b6\u6001\u7684\u670d\u52a1\u5668\u4f7f\u7528\u3002\u79bb\u7ebf\u5bfc\u5165\u4f1a\u521b\u5efa\u4e00\u5f20\u65b0\u56fe\uff0c\u56e0\u6b64\u66f4\u9002\u5408\u65b0\u5b89\u88c5\u7684 TuGraph \u670d\u52a1\u5668\u4e0a\u7684\u7b2c\u4e00\u6b21\u6570\u636e\u5bfc\u5165\u3002 \u8981\u5728\u79bb\u7ebf\u6a21\u5f0f\u4e0b\u4f7f\u7528 lgraph_import \u5de5\u5177\uff0c\u53ef\u4ee5\u6307\u5b9a lgraph_import --online false \u9009\u9879\u3002\u8981\u4e86\u89e3\u53ef\u7528\u7684\u547d\u4ee4\u884c\u9009\u9879\uff0c\u8bf7\u4f7f\u7528 lgraph_import --online false --help \uff1a $ ./lgraph_import --online false -help Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. ... -h, --help Print this help message. Default=0. \u547d\u4ee4\u884c\u53c2\u6570\uff1a -c, --config_file config_file : \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u5176\u683c\u5f0f\u8981\u6c42\u89c1\u4e0b\u8ff0\u3002 --log log_dir : \u65e5\u5fd7\u76ee\u5f55\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6\u5c06\u65e5\u5fd7\u4fe1\u606f\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 --verbose 0/1/2 : \u65e5\u5fd7\u7b49\u7ea7\uff0c\u7b49\u7ea7\u8d8a\u9ad8\u8f93\u51fa\u4fe1\u606f\u8d8a\u8be6\u7ec6\u3002\u9ed8\u8ba4\u4e3a 1\u3002 -i, --continue_on_error true/false : \u5728\u78b0\u5230\u9519\u8bef\u65f6\u8df3\u8fc7\u9519\u8bef\u5e76\u7ee7\u7eed\uff0c\u9ed8\u8ba4\u4e3a false\uff0c\u78b0\u5230\u9519\u8bef\u7acb\u5373\u9000\u51fa\u3002 -d, --dir {diretory} : \u6570\u636e\u5e93\u76ee\u5f55\uff0c\u5bfc\u5165\u5de5\u5177\u4f1a\u5c06\u6570\u636e\u5199\u5230\u8fd9\u4e2a\u76ee\u5f55\u3002\u9ed8\u8ba4\u4e3a ./db \u3002 --delimiter {delimiter} : \u6570\u636e\u6587\u4ef6\u5206\u9694\u7b26\u3002\u53ea\u5728\u6570\u636e\u6e90\u662f CSV \u683c\u5f0f\u65f6\u4f7f\u7528\uff0c\u9ed8\u8ba4\u4e3a \",\" \u3002 -u, --username {user} : \u6570\u636e\u5e93\u7528\u6237\u540d\u3002\u9700\u8981\u662f\u7ba1\u7406\u5458\u7528\u6237\u624d\u80fd\u6267\u884c\u79bb\u7ebf\u5bfc\u5165\u3002 -p, --password {password} : \u6307\u5b9a\u7684\u6570\u636e\u5e93\u7528\u6237\u7684\u5bc6\u7801 --overwrite true/false : \u662f\u5426\u8986\u76d6\u6570\u636e\u3002\u8bbe\u4e3a true \u65f6\uff0c\u5982\u679c\u6570\u636e\u76ee\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u8986\u76d6\u6570\u636e\u3002\u9ed8\u8ba4\u4e3a false \u3002 -g, --graph {graph_name} : \u6307\u5b9a\u9700\u8981\u5bfc\u5165\u7684\u56fe\u79cd\u7c7b\u3002 -h, --help : \u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\u3002 \u79bb\u7ebf\u5bfc\u5165\u793a\u4f8b \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u63cf\u8ff0\u7684\u7535\u5f71-\u6f14\u5458\u6570\u636e\u6765\u6f14\u793a\u5bfc\u5165\u5de5\u5177\u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u5f85\u5bfc\u5165\u6570\u636e\u5206\u4e3a\u4e09\u4e2a\u6587\u4ef6\uff1a`movies.csv`\uff0c`actors.csv`\uff0c`roles.csv`\u3002 movies.csv \u5305\u542b\u7684\u662f\u7535\u5f71\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u6bcf\u90e8\u7535\u5f71\u6709\u4e00\u4e2a id\uff08\u4f5c\u4e3a\u68c0\u7d22\u7684 primary key\uff09\uff0c\u6b64\u5916\u6bcf\u90e8\u7535\u5f71\u8fd8\u62e5\u6709 title\u3001year \u548c rating \u7b49\u5c5e\u6027\u3002\uff08\u6570\u636e\u6765\u81ea IMDb \uff09\u3002 [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 \u5bf9\u5e94\u7684 jsonline \u683c\u5f0f\u5982\u4e0b: \u4e5f\u53ef\u4ee5\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c\u5bfc\u5165\u7684\u65f6\u5019\u4f1a\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u7c7b\u578b [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] [\"tt0188766\",\"King of Comedy\",\"1999\",\"7.3\"] [\"tt0286112\",\"Shaolin Soccer\",\"2001\",\"7.3\"] [\"tt4701660\",\"The Mermaid\",\"2016\",\"6.3\"] actors.csv \u5305\u542b\u7684\u662f\u6f14\u5458\u7684\u4fe1\u606f\u3002\u6bcf\u4e2a\u6f14\u5458\u4e5f\u62e5\u6709\u4e00\u4e2a id\uff0c\u4ee5\u53ca name \u7b49\u5c5e\u6027\u3002 [actors.csv] id, name nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang \u5bf9\u5e94\u7684 jsonline \u683c\u5f0f\u5982\u4e0b: [\"nm015950\",\"Stephen Chow\"] [\"nm0628806\",\"Man-Tat Ng\"] [\"nm0156444\",\"Cecilia Cheung\"] [\"nm2514879\",\"Yuqi Zhang\"] roles.csv \u5219\u5305\u542b\u4e86\u6f14\u5458\u5728\u54ea\u4e2a\u7535\u5f71\u4e2d\u626e\u6f14\u4e86\u54ea\u4e2a\u89d2\u8272\u7684\u4fe1\u606f\u3002\u5176\u4e2d\u6bcf\u4e00\u884c\u8bb0\u5f55\u7684\u662f\u6307\u5b9a\u6f14\u5458\u5728\u6307\u5b9a\u7535\u5f71\u91cc\u9970\u6f14\u7684\u89d2\u8272\uff0c\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u6761\u8fb9\u3002 SRC_ID \u548c DST_ID \u5206\u522b\u662f\u8fb9\u7684\u6e90\u9876\u70b9\u548c\u76ee\u6807\u9876\u70b9\uff0c\u4ed6\u4eec\u5206\u522b\u662f actors.csv \u548c movies.csv \u4e2d\u5b9a\u4e49\u7684 primary \u5c5e\u6027\u3002 [roles.csv] actor, role, movie nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 \u5bf9\u5e94\u7684 jsonline \u683c\u5f0f\u5982\u4e0b: [\"nm015950\",\"Tianchou Yin\",\"tt0188766\"] [\"nm015950\",\"Steel Leg\",\"tt0286112\"] [\"nm0628806\",null,\"tt0188766\"] [\"nm0628806\",\"coach\",\"tt0286112\"] [\"nm0156444\",\"PiaoPiao Liu\",\"tt0188766\"] [\"nm2514879\",\"Ruolan Li\",\"tt4701660\"] \u914d\u7f6e\u6587\u4ef6import.conf \uff0c\u6ce8\u610f\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u6709\u4e24\u4e2a\u6807\u9898\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6307\u5b9a HEADER=2 \u9009\u9879\u3002 { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } \u4f7f\u7528\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5bfc\u5165\u6570\u636e\uff1a $ ./lgraph_import -c import.conf # \u4eceimport.conf\u8bfb\u53d6\u914d\u7f6e\u4fe1\u606f --dir /data/lgraph_db # \u5c06\u6570\u636e\u5b58\u653e\u5728/data/lgraph_db --graph mygraph # \u5bfc\u5165\u540d\u4e3a mygraph \u7684\u56fe \u6ce8\u610f \uff1a \u5982\u679c\u540d\u4e3a mygraph \u7684\u56fe\u5df2\u5b58\u5728\uff0c\u5bfc\u5165\u5de5\u5177\u5c06\u6253\u5370\u9519\u8bef\u6d88\u606f\u5e76\u9000\u51fa\u3002\u8981\u5f3a\u5236\u8986\u76d6\u56fe\u5f62\uff0c\u53ef\u4ee5\u4f7f\u7528 --overwrite true \u9009\u9879\u3002 \u914d\u7f6e\u6587\u4ef6\u548c\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u4f7f\u7528 UTF-8 \u7f16\u7801\uff08\u6216\u666e\u901a ASCII \u7f16\u7801\uff0c\u5373 UTF-8 \u7684\u5b50\u96c6\uff09\u5b58\u50a8\u3002\u5982\u679c\u4efb\u4f55\u6587\u4ef6\u4f7f\u7528 UTF-8 \u4ee5\u5916\u7684\u7f16\u7801\uff08\u4f8b\u5982\uff0c\u5e26\u6709 BOM \u6216 GBK \u7684 UTF-8\uff09\u7f16\u7801\uff0c\u5219\u5bfc\u5165\u5c06\u5931\u8d25\uff0c\u5e76\u8f93\u51fa\u5206\u6790\u5668\u9519\u8bef\u3002 \u5728\u7ebf\u589e\u91cf\u5bfc\u5165 \u5728\u7ebf\u5bfc\u5165\u6a21\u5f0f\u53ef\u7528\u4e8e\u5c06\u4e00\u6279\u6587\u4ef6\u5bfc\u5165\u5df2\u5728\u8fd0\u884c\u4e2d\u7684 TuGraph \u5b9e\u4f8b\u4e2d\u3002\u8fd9\u5bf9\u4e8e\u5904\u7406\u901a\u5e38\u4ee5\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u8fdb\u884c\u7684\u589e\u91cf\u6279\u5904\u7406\u66f4\u65b0\u975e\u5e38\u4fbf\u5229\u3002`lgraph_import --online true`\u9009\u9879\u4f7f\u5bfc\u5165\u5de5\u5177\u80fd\u591f\u5728\u7ebf\u6a21\u5f0f\u5de5\u4f5c\u3002\u4e0e`\u79bb\u7ebf\u6a21\u5f0f`\u4e00\u6837\uff0c\u5728\u7ebf\u6a21\u5f0f\u6709\u81ea\u5df1\u7684\u547d\u4ee4\u884c\u9009\u9879\u96c6\uff0c\u53ef\u4ee5\u4f7f\u7528`-h\uff0c--help`\u9009\u9879\u8fdb\u884c\u6253\u5370\u8f93\u51fa\uff1a $ lgraph_import --online true -h Available command line options: --online Whether to import online. -h, --help Print this help message. Default=0. Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. -c, --config_file Config file path. -r, --url DB REST API address. -u, --username DB username. -p, --password DB password. -i, --continue_on_error When we hit a duplicate uid or missing uid, should we continue or abort. Default=0. -g, --graph The name of the graph to import into. Default=default. --skip_packages How many packages should we skip. Default=0. --delimiter Delimiter used in the CSV files --breakpoint_continue When the transmission process is interrupted,whether to re-transmit from zero package next time. Default=false -h, --help Print this help message. Default=0. \u6587\u4ef6\u7684\u76f8\u5173\u914d\u7f6e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\uff0c\u5176\u683c\u5f0f\u4e0e`\u79bb\u7ebf\u6a21\u5f0f`\u5b8c\u5168\u76f8\u540c\u3002\u4f46\u662f\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u662f\u5c06\u6570\u636e\u5bfc\u5165\u672c\u5730\u6570\u636e\u5e93\uff0c\u800c\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230\u6b63\u5728\u8fd0\u884c\u7684 TuGraph \u5b9e\u4f8b\u4e2d\uff0c\u8be5\u5b9e\u4f8b\u901a\u5e38\u8fd0\u884c\u5728\u4e0e\u8fd0\u884c\u5bfc\u5165\u5de5\u5177\u7684\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u8fdc\u7a0b\u8ba1\u7b97\u673a\u7684 HTTP \u5730\u5740\u7684URL\u3001DB\u7528\u6237\u548c\u5bc6\u7801\u3002 \u5982\u679c\u7528\u6237\u548c\u5bc6\u7801\u6709\u6548\uff0c\u5e76\u4e14\u6307\u5b9a\u7684\u56fe\u5b58\u5728\uff0c\u5bfc\u5165\u5de5\u5177\u5c06\u5c06\u6570\u636e\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u968f\u540e\u89e3\u6790\u6570\u636e\u5e76\u5c06\u5176\u5199\u5165\u6307\u5b9a\u7684\u56fe\u3002\u6570\u636e\u5c06\u4ee5\u5927\u7ea6 16MB \u5927\u5c0f\u7684\u5305\u53d1\u9001\uff0c\u5728\u6700\u8fd1\u7684\u6362\u884c\u7b26\u5904\u4e2d\u65ad\u3002\u6bcf\u4e2a\u5305\u90fd\u662f\u4ee5\u539f\u5b50\u65b9\u5f0f\u5bfc\u5165\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6210\u529f\u5bfc\u5165\u5305\uff0c\u5219\u6210\u529f\u5bfc\u5165\u6240\u6709\u6570\u636e\uff0c\u5426\u5219\uff0c\u4efb\u4f55\u6570\u636e\u90fd\u4e0d\u4f1a\u8fdb\u5165\u6570\u636e\u5e93\u3002\u5982\u679c\u6307\u5b9a\u4e86`--continue_on_error true`\uff0c\u5219\u5ffd\u7565\u6570\u636e\u5b8c\u6574\u6027\u9519\u8bef\uff0c\u5e76\u5ffd\u7565\u8fdd\u89c4\u884c\u3002\u5426\u5219\uff0c\u5bfc\u5165\u5c06\u5728\u7b2c\u4e00\u4e2a\u9519\u8bef\u5305\u5904\u505c\u6b62\uff0c\u5e76\u6253\u5370\u51fa\u5df2\u5bfc\u5165\u7684\u5305\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u4fee\u6539\u6570\u636e\u4ee5\u6d88\u9664\u9519\u8bef\uff0c\u7136\u540e\u4f7f\u7528`--skip_packages N`\u91cd\u505a\u5bfc\u5165\u4ee5\u8df3\u8fc7\u5df2\u5bfc\u5165\u7684\u5305\u3002","title":"\u6570\u636e\u5bfc\u5165"},{"location":"zh-CN/2.operating/3.data-import/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u6570\u636e\u5bfc\u5165\u529f\u80fd\u3002\u5176\u4e2d\u5305\u62ec CSV \u683c\u5f0f\u7684\u5206\u9694\u7b26\uff0cjsonline \u7684\u683c\u5f0f\u793a\u4f8b\uff0c\u4ee5\u53ca\u5bfc\u5165\u5728\u7ebf\u548c\u79bb\u7ebf\u7684\u4e24\u79cd\u6a21\u5f0f\u3002 \u5728\u56fe\u6570\u636e\u5e93\u670d\u52a1\u5b89\u88c5\u6210\u529f\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 lgraph_import \u6279\u91cf\u5bfc\u5165\u5de5\u5177\u5c06\u73b0\u6709\u6570\u636e\u5bfc\u5165 TuGraph\u3002 lgraph_import \u652f\u6301\u4ece CSV \u6587\u4ef6\u548c JSON \u6570\u636e\u6e90\u5bfc\u5165\u6570\u636e\u3002 jsonline\u683c\u5f0f\uff0c\u4e00\u884c\u4e00\u4e2ajson\u6570\u7ec4\u5b57\u7b26\u4e32 CSV \u683c\u5f0f [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 jsonline \u683c\u5f0f [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] TuGraph \u652f\u6301\u4e24\u79cd\u5bfc\u5165\u6a21\u5f0f\uff1a \u79bb\u7ebf\u6a21\u5f0f \uff1a\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u5bfc\u5165\u6307\u5b9a\u670d\u52a1\u5668\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5e94\u4ec5\u5728\u670d\u52a1\u5668\u79bb\u7ebf\u65f6\u5b8c\u6210\u3002 \u5728\u7ebf\u6a21\u5f0f \uff1a\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u53d1\u9001\u5230\u5de5\u4f5c\u4e2d\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u5c06\u6570\u636e\u5bfc\u5165\u5176\u6570\u636e\u5e93\u3002","title":"\u6570\u636e\u5bfc\u5165"},{"location":"zh-CN/2.operating/3.data-import/#csv","text":"CSV\u683c\u5f0f\u7684\u5206\u9694\u7b26\u53ef\u4ee5\u662f\u5355\u5b57\u7b26\u6216\u591a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u4e0d\u80fd\u5305\u542b`\\r`\u6216`\\n`\u3002\u6ce8\u610f\u4e0d\u540c\u7684shell\u4f1a\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u505a\u4e0d\u540c\u7684\u5904\u7406\uff0c\u56e0\u6b64\u9488\u5bf9\u4e0d\u540c\u7684shell\u8f93\u5165\u53c2\u6570\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u8f6c\u4e49\u5904\u7406\u3002 \u6b64\u5916\uff0c lgraph_import \u8fd8\u652f\u6301\u4ee5\u4e0b\u8f6c\u4e49\u5b57\u7b26\uff0c\u4ee5\u4fbf\u8f93\u5165\u7279\u6b8a\u7b26\u53f7\uff1a \u8f6c\u4e49\u7b26 \u8bf4\u660e \\ \u53cd\u659c\u6760 \\\\ \\a \u54cd\u94c3\uff0c\u5373 ASCII \u7801 0x07 \\f form-feed\uff0c\u5373 ASCII \u7801 0x0c \\t \u6c34\u5e73\u5236\u8868\u7b26\uff0c\u5373 ASCII \u7801 0x09 \\v \u5782\u76f4\u5236\u8868\u7b26\uff0c\u5373 ASCII \u7801 0x0b \\xnn \u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\\x9A \\nnn \u4e09\u4f4d\u516b\u8fdb\u5236\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\\001, \\443\uff0c\u6570\u503c\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7 255 \u4f8b\uff1a $ ./lgraph_import -c ./import.config --delimiter \"\\001\\002\"","title":"CSV \u6587\u4ef6\u683c\u5f0f\u5206\u9694\u7b26"},{"location":"zh-CN/2.operating/3.data-import/#_2","text":"`lgraph_import`\u5de5\u5177\u901a\u8fc7\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u73af\u5883\u914d\u7f6e\u3002\u914d\u7f6e\u6587\u4ef6\u63cf\u8ff0\u8f93\u5165\u6587\u4ef6\u7684\u8def\u5f84\u3001\u5b83\u4eec\u6240\u4ee3\u8868\u7684\u9876\u70b9/\u8fb9\u4ee5\u53ca\u9876\u70b9/\u8fb9\u7684\u683c\u5f0f\u3002","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"zh-CN/2.operating/3.data-import/#_3","text":"\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e24\u90e8\u5206\uff1aschema \u548c files\u3002 schema \u90e8\u5206\u5b9a\u4e49 label\uff0c files \u90e8\u5206\u63cf\u8ff0\u8981\u5bfc\u5165\u7684\u6570\u636e\u6587\u4ef6\u3002","title":"\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f"},{"location":"zh-CN/2.operating/3.data-import/#_4","text":"schema (\u6570\u7ec4\u5f62\u5f0f\uff09 label\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09 type\uff08\u5fc5\u9009\uff0c\u503c\u53ea\u80fd\u662f VERTEX \u6216\u8005 EDGE\uff09 properties\uff08\u6570\u7ec4\u5f62\u5f0f\uff0c\u5bf9\u4e8e\u70b9\u5fc5\u9009\uff0c\u5bf9\u4e8e\u8fb9\u5982\u679c\u6ca1\u6709\u5c5e\u6027\u53ef\u4ee5\u4e0d\u914d\u7f6e\uff09 name\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09 type \uff08\u5fc5\u9009\uff0cBOOL\uff0cINT8\uff0cINT16\uff0cINT32\uff0cINT64\uff0cDATE\uff0cDATETIME\uff0cFLOAT\uff0cDOUBLE\uff0cSTRING\uff0cBLOB\uff09 optional\uff08\u53ef\u9009\uff0c\u4ee3\u8868\u8be5\u5b57\u6bb5\u53ef\u4ee5\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u914d\u7f6e\uff09 index\uff08\u53ef\u9009\uff0c\u8be5\u5b57\u6bb5\u662f\u5426\u9700\u8981\u5efa\u7d22\u5f15\uff09 unique\uff08\u53ef\u9009\uff0c\u8be5\u5b57\u6bb5\u662f\u5426\u5efa\u7d22\u5f15\uff0c\u5e76\u4e14\u662f unique \u7c7b\u578b\u7684\uff09 primary (\u4ec5\u70b9\u914d\u7f6e\uff0c\u5fc5\u9009\uff0c\u4e3b\u952e\u5b57\u6bb5\uff0c\u9700\u6307\u5b9a\u4e00\u4e2a property\uff0c\u7528\u6765\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u70b9) constraints (\u4ec5\u8fb9\u914d\u7f6e\uff0c\u53ef\u9009\uff0c\u6570\u7ec4\u5f62\u5f0f\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u7684 label\uff0c\u4e0d\u914d\u7f6e\u6216\u8005\u4e3a\u7a7a\u4ee3\u8868\u4e0d\u9650\u5236) files \uff08\u6570\u7ec4\u5f62\u5f0f\uff09 path\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u6587\u4ef6\u8def\u5f84\u6216\u8005\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5982\u679c\u662f\u76ee\u5f55\u4f1a\u5bfc\u5165\u6b64\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u9700\u8981\u4fdd\u8bc1\u6709\u76f8\u540c\u7684 schema\uff09 header\uff08\u53ef\u9009\uff0c\u6570\u5b57\uff0c\u5934\u4fe1\u606f\u5360\u6587\u4ef6\u8d77\u59cb\u7684\u51e0\u884c\uff0c\u6ca1\u6709\u5c31\u662f 0\uff09 format\uff08\u5fc5\u987b\u9009\uff0c\u53ea\u80fd\u662f JSON \u6216\u8005 CSV\uff09 label\uff08\u5fc5\u9009\uff0c\u5b57\u7b26\u4e32\uff09 columns\uff08\u6570\u7ec4\u5f62\u5f0f\uff09 SRC_ID (\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u4ec5\u8fb9\u6709\uff0c\u4ee3\u8868\u8fd9\u5217\u662f\u8d77\u59cb\u70b9\u6570\u636e) DST_ID (\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u4ec5\u8fb9\u6709\uff0c\u4ee3\u8868\u8fd9\u5217\u662f\u76ee\u7684\u70b9\u6570\u636e) SKIP (\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u8df3\u8fc7\u8fd9\u5217\u6570\u636e) [property] SRC_ID (\u4ec5\u8fb9\u914d\u7f6e\uff0c\u503c\u662f\u8d77\u59cb\u70b9\u6807\u7b7e) DST_ID (\u4ec5\u8fb9\u914d\u7f6e\uff0c\u503c\u662f\u76ee\u7684\u70b9\u6807\u7b7e)","title":"\u5173\u952e\u5b57"},{"location":"zh-CN/2.operating/3.data-import/#_5","text":"{ \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } \u5bf9\u4e8e\u4e0a\u8ff0\u914d\u7f6e\u6587\u4ef6\uff0c\u5b9a\u4e49\u4e86\u4e09\u4e2a label\uff1a\u4e24\u4e2a\u70b9\u7c7b\u578b actor \u548c movie \uff0c\u4e00\u4e2a\u8fb9\u7c7b\u578b role \u3002\u6bcf\u4e2a label \u90fd\u63cf\u8ff0\u4e86\uff1alabel \u7684\u540d\u5b57\u3001\u7c7b\u578b\uff08\u70b9\u8fd8\u662f\u8fb9\uff09\u3001\u5c5e\u6027\u5b57\u6bb5\u6709\u54ea\u4e9b\u4ee5\u53ca\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u3002\u5bf9\u4e8e\u70b9\uff0c\u53e6\u5916\u5b9a\u4e49\u4e86 primary \u5b57\u6bb5\u662f\u54ea\u4e2a\uff1b\u5bf9\u4e8e\u8fb9\uff0c\u53e6\u5916\u5b9a\u4e49\u4e86 constraints \u5b57\u6bb5\uff0c\u7528\u6765\u9650\u5236\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u53ea\u80fd\u662f\u54ea\u4e9b\u7ec4\u5408\u3002 \u8fd8\u63cf\u8ff0\u4e86\u4e09\u4e2a\u6570\u636e\u6587\u4ef6\uff0c\u4e24\u4e2a\u70b9\u7684\u6570\u636e\u6587\u4ef6 actors.csv \u548c movies.csv \uff0c\u4e00\u4e2a\u8fb9\u7684\u6570\u636e\u6587\u4ef6 roles.csv \u3002\u6bcf\u4e2a\u90e8\u5206\u90fd\u63cf\u8ff0\u4e86\uff1a\u6587\u4ef6\u7684\u8def\u5f84\uff08path\uff09\u3001\u6570\u636e\u7c7b\u578b\uff08format\uff09\u3001\u4fe1\u606f\u5934\u5360\u5f00\u5934\u51e0\u884c\uff08header\uff09\u3001\u662f\u54ea\u4e2a label \u7684\u6570\u636e\uff08label\uff09\u3001\u6587\u4ef6\u4e2d\u6bcf\u884c\u6570\u636e\u4e2d\u7684\u6bcf\u4e2a\u5217\u5bf9\u5e94\u7684\u5b57\u6bb5\u662f\u54ea\u4e2a\u3002 \u5bf9\u4e8e\u4e0a\u8ff0\u914d\u7f6e\u6587\u4ef6\uff0cimport \u5de5\u5177\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5148\u5728 TuGraph \u4e2d\u521b\u5efa actor \u3001 movie \u3001 role \u8fd9\u4e09\u4e2a label\uff0c\u7136\u540e\u518d\u6267\u884c\u4e09\u4e2a\u6587\u4ef6\u7684\u6570\u636e\u5bfc\u5165\u3002","title":"\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b"},{"location":"zh-CN/2.operating/3.data-import/#_6","text":"\u79bb\u7ebf\u6a21\u5f0f\u53ea\u80fd\u5728\u79bb\u7ebf\u72b6\u6001\u7684\u670d\u52a1\u5668\u4f7f\u7528\u3002\u79bb\u7ebf\u5bfc\u5165\u4f1a\u521b\u5efa\u4e00\u5f20\u65b0\u56fe\uff0c\u56e0\u6b64\u66f4\u9002\u5408\u65b0\u5b89\u88c5\u7684 TuGraph \u670d\u52a1\u5668\u4e0a\u7684\u7b2c\u4e00\u6b21\u6570\u636e\u5bfc\u5165\u3002 \u8981\u5728\u79bb\u7ebf\u6a21\u5f0f\u4e0b\u4f7f\u7528 lgraph_import \u5de5\u5177\uff0c\u53ef\u4ee5\u6307\u5b9a lgraph_import --online false \u9009\u9879\u3002\u8981\u4e86\u89e3\u53ef\u7528\u7684\u547d\u4ee4\u884c\u9009\u9879\uff0c\u8bf7\u4f7f\u7528 lgraph_import --online false --help \uff1a $ ./lgraph_import --online false -help Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. ... -h, --help Print this help message. Default=0. \u547d\u4ee4\u884c\u53c2\u6570\uff1a -c, --config_file config_file : \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u5176\u683c\u5f0f\u8981\u6c42\u89c1\u4e0b\u8ff0\u3002 --log log_dir : \u65e5\u5fd7\u76ee\u5f55\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6\u5c06\u65e5\u5fd7\u4fe1\u606f\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 --verbose 0/1/2 : \u65e5\u5fd7\u7b49\u7ea7\uff0c\u7b49\u7ea7\u8d8a\u9ad8\u8f93\u51fa\u4fe1\u606f\u8d8a\u8be6\u7ec6\u3002\u9ed8\u8ba4\u4e3a 1\u3002 -i, --continue_on_error true/false : \u5728\u78b0\u5230\u9519\u8bef\u65f6\u8df3\u8fc7\u9519\u8bef\u5e76\u7ee7\u7eed\uff0c\u9ed8\u8ba4\u4e3a false\uff0c\u78b0\u5230\u9519\u8bef\u7acb\u5373\u9000\u51fa\u3002 -d, --dir {diretory} : \u6570\u636e\u5e93\u76ee\u5f55\uff0c\u5bfc\u5165\u5de5\u5177\u4f1a\u5c06\u6570\u636e\u5199\u5230\u8fd9\u4e2a\u76ee\u5f55\u3002\u9ed8\u8ba4\u4e3a ./db \u3002 --delimiter {delimiter} : \u6570\u636e\u6587\u4ef6\u5206\u9694\u7b26\u3002\u53ea\u5728\u6570\u636e\u6e90\u662f CSV \u683c\u5f0f\u65f6\u4f7f\u7528\uff0c\u9ed8\u8ba4\u4e3a \",\" \u3002 -u, --username {user} : \u6570\u636e\u5e93\u7528\u6237\u540d\u3002\u9700\u8981\u662f\u7ba1\u7406\u5458\u7528\u6237\u624d\u80fd\u6267\u884c\u79bb\u7ebf\u5bfc\u5165\u3002 -p, --password {password} : \u6307\u5b9a\u7684\u6570\u636e\u5e93\u7528\u6237\u7684\u5bc6\u7801 --overwrite true/false : \u662f\u5426\u8986\u76d6\u6570\u636e\u3002\u8bbe\u4e3a true \u65f6\uff0c\u5982\u679c\u6570\u636e\u76ee\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u8986\u76d6\u6570\u636e\u3002\u9ed8\u8ba4\u4e3a false \u3002 -g, --graph {graph_name} : \u6307\u5b9a\u9700\u8981\u5bfc\u5165\u7684\u56fe\u79cd\u7c7b\u3002 -h, --help : \u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\u3002","title":"\u79bb\u7ebf\u5168\u91cf\u5bfc\u5165"},{"location":"zh-CN/2.operating/3.data-import/#_7","text":"\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u63cf\u8ff0\u7684\u7535\u5f71-\u6f14\u5458\u6570\u636e\u6765\u6f14\u793a\u5bfc\u5165\u5de5\u5177\u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u5f85\u5bfc\u5165\u6570\u636e\u5206\u4e3a\u4e09\u4e2a\u6587\u4ef6\uff1a`movies.csv`\uff0c`actors.csv`\uff0c`roles.csv`\u3002 movies.csv \u5305\u542b\u7684\u662f\u7535\u5f71\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u6bcf\u90e8\u7535\u5f71\u6709\u4e00\u4e2a id\uff08\u4f5c\u4e3a\u68c0\u7d22\u7684 primary key\uff09\uff0c\u6b64\u5916\u6bcf\u90e8\u7535\u5f71\u8fd8\u62e5\u6709 title\u3001year \u548c rating \u7b49\u5c5e\u6027\u3002\uff08\u6570\u636e\u6765\u81ea IMDb \uff09\u3002 [movies.csv] id, name, year, rating tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 \u5bf9\u5e94\u7684 jsonline \u683c\u5f0f\u5982\u4e0b: \u4e5f\u53ef\u4ee5\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c\u5bfc\u5165\u7684\u65f6\u5019\u4f1a\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u7c7b\u578b [\"tt0188766\",\"King of Comedy\",1999,7.3] [\"tt0286112\",\"Shaolin Soccer\",2001,7.3] [\"tt4701660\",\"The Mermaid\",2016,6.3] [\"tt0188766\",\"King of Comedy\",\"1999\",\"7.3\"] [\"tt0286112\",\"Shaolin Soccer\",\"2001\",\"7.3\"] [\"tt4701660\",\"The Mermaid\",\"2016\",\"6.3\"] actors.csv \u5305\u542b\u7684\u662f\u6f14\u5458\u7684\u4fe1\u606f\u3002\u6bcf\u4e2a\u6f14\u5458\u4e5f\u62e5\u6709\u4e00\u4e2a id\uff0c\u4ee5\u53ca name \u7b49\u5c5e\u6027\u3002 [actors.csv] id, name nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang \u5bf9\u5e94\u7684 jsonline \u683c\u5f0f\u5982\u4e0b: [\"nm015950\",\"Stephen Chow\"] [\"nm0628806\",\"Man-Tat Ng\"] [\"nm0156444\",\"Cecilia Cheung\"] [\"nm2514879\",\"Yuqi Zhang\"] roles.csv \u5219\u5305\u542b\u4e86\u6f14\u5458\u5728\u54ea\u4e2a\u7535\u5f71\u4e2d\u626e\u6f14\u4e86\u54ea\u4e2a\u89d2\u8272\u7684\u4fe1\u606f\u3002\u5176\u4e2d\u6bcf\u4e00\u884c\u8bb0\u5f55\u7684\u662f\u6307\u5b9a\u6f14\u5458\u5728\u6307\u5b9a\u7535\u5f71\u91cc\u9970\u6f14\u7684\u89d2\u8272\uff0c\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u6761\u8fb9\u3002 SRC_ID \u548c DST_ID \u5206\u522b\u662f\u8fb9\u7684\u6e90\u9876\u70b9\u548c\u76ee\u6807\u9876\u70b9\uff0c\u4ed6\u4eec\u5206\u522b\u662f actors.csv \u548c movies.csv \u4e2d\u5b9a\u4e49\u7684 primary \u5c5e\u6027\u3002 [roles.csv] actor, role, movie nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 \u5bf9\u5e94\u7684 jsonline \u683c\u5f0f\u5982\u4e0b: [\"nm015950\",\"Tianchou Yin\",\"tt0188766\"] [\"nm015950\",\"Steel Leg\",\"tt0286112\"] [\"nm0628806\",null,\"tt0188766\"] [\"nm0628806\",\"coach\",\"tt0286112\"] [\"nm0156444\",\"PiaoPiao Liu\",\"tt0188766\"] [\"nm2514879\",\"Ruolan Li\",\"tt4701660\"] \u914d\u7f6e\u6587\u4ef6import.conf \uff0c\u6ce8\u610f\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u6709\u4e24\u4e2a\u6807\u9898\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6307\u5b9a HEADER=2 \u9009\u9879\u3002 { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" }, { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"INT16\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" }, { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\", \"optional\": true }], \"constraints\": [[\"actor\", \"movie\"]] } ], \"files\": [ { \"path\": \"actors.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"actor\", \"columns\": [\"aid\", \"name\"] }, { \"path\": \"movies.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"movie\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] }, { \"path\": \"roles.csv\", \"header\": 2, \"format\": \"CSV\", \"label\": \"play_in\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } \u4f7f\u7528\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5bfc\u5165\u6570\u636e\uff1a $ ./lgraph_import -c import.conf # \u4eceimport.conf\u8bfb\u53d6\u914d\u7f6e\u4fe1\u606f --dir /data/lgraph_db # \u5c06\u6570\u636e\u5b58\u653e\u5728/data/lgraph_db --graph mygraph # \u5bfc\u5165\u540d\u4e3a mygraph \u7684\u56fe \u6ce8\u610f \uff1a \u5982\u679c\u540d\u4e3a mygraph \u7684\u56fe\u5df2\u5b58\u5728\uff0c\u5bfc\u5165\u5de5\u5177\u5c06\u6253\u5370\u9519\u8bef\u6d88\u606f\u5e76\u9000\u51fa\u3002\u8981\u5f3a\u5236\u8986\u76d6\u56fe\u5f62\uff0c\u53ef\u4ee5\u4f7f\u7528 --overwrite true \u9009\u9879\u3002 \u914d\u7f6e\u6587\u4ef6\u548c\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u4f7f\u7528 UTF-8 \u7f16\u7801\uff08\u6216\u666e\u901a ASCII \u7f16\u7801\uff0c\u5373 UTF-8 \u7684\u5b50\u96c6\uff09\u5b58\u50a8\u3002\u5982\u679c\u4efb\u4f55\u6587\u4ef6\u4f7f\u7528 UTF-8 \u4ee5\u5916\u7684\u7f16\u7801\uff08\u4f8b\u5982\uff0c\u5e26\u6709 BOM \u6216 GBK \u7684 UTF-8\uff09\u7f16\u7801\uff0c\u5219\u5bfc\u5165\u5c06\u5931\u8d25\uff0c\u5e76\u8f93\u51fa\u5206\u6790\u5668\u9519\u8bef\u3002","title":"\u79bb\u7ebf\u5bfc\u5165\u793a\u4f8b"},{"location":"zh-CN/2.operating/3.data-import/#_8","text":"\u5728\u7ebf\u5bfc\u5165\u6a21\u5f0f\u53ef\u7528\u4e8e\u5c06\u4e00\u6279\u6587\u4ef6\u5bfc\u5165\u5df2\u5728\u8fd0\u884c\u4e2d\u7684 TuGraph \u5b9e\u4f8b\u4e2d\u3002\u8fd9\u5bf9\u4e8e\u5904\u7406\u901a\u5e38\u4ee5\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u8fdb\u884c\u7684\u589e\u91cf\u6279\u5904\u7406\u66f4\u65b0\u975e\u5e38\u4fbf\u5229\u3002`lgraph_import --online true`\u9009\u9879\u4f7f\u5bfc\u5165\u5de5\u5177\u80fd\u591f\u5728\u7ebf\u6a21\u5f0f\u5de5\u4f5c\u3002\u4e0e`\u79bb\u7ebf\u6a21\u5f0f`\u4e00\u6837\uff0c\u5728\u7ebf\u6a21\u5f0f\u6709\u81ea\u5df1\u7684\u547d\u4ee4\u884c\u9009\u9879\u96c6\uff0c\u53ef\u4ee5\u4f7f\u7528`-h\uff0c--help`\u9009\u9879\u8fdb\u884c\u6253\u5370\u8f93\u51fa\uff1a $ lgraph_import --online true -h Available command line options: --online Whether to import online. -h, --help Print this help message. Default=0. Available command line options: --log Log file to use, empty means stderr. Default=\"\". -v, --verbose Verbose level to use, higher means more verbose. Default=1. -c, --config_file Config file path. -r, --url DB REST API address. -u, --username DB username. -p, --password DB password. -i, --continue_on_error When we hit a duplicate uid or missing uid, should we continue or abort. Default=0. -g, --graph The name of the graph to import into. Default=default. --skip_packages How many packages should we skip. Default=0. --delimiter Delimiter used in the CSV files --breakpoint_continue When the transmission process is interrupted,whether to re-transmit from zero package next time. Default=false -h, --help Print this help message. Default=0. \u6587\u4ef6\u7684\u76f8\u5173\u914d\u7f6e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\uff0c\u5176\u683c\u5f0f\u4e0e`\u79bb\u7ebf\u6a21\u5f0f`\u5b8c\u5168\u76f8\u540c\u3002\u4f46\u662f\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u662f\u5c06\u6570\u636e\u5bfc\u5165\u672c\u5730\u6570\u636e\u5e93\uff0c\u800c\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230\u6b63\u5728\u8fd0\u884c\u7684 TuGraph \u5b9e\u4f8b\u4e2d\uff0c\u8be5\u5b9e\u4f8b\u901a\u5e38\u8fd0\u884c\u5728\u4e0e\u8fd0\u884c\u5bfc\u5165\u5de5\u5177\u7684\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u8fdc\u7a0b\u8ba1\u7b97\u673a\u7684 HTTP \u5730\u5740\u7684URL\u3001DB\u7528\u6237\u548c\u5bc6\u7801\u3002 \u5982\u679c\u7528\u6237\u548c\u5bc6\u7801\u6709\u6548\uff0c\u5e76\u4e14\u6307\u5b9a\u7684\u56fe\u5b58\u5728\uff0c\u5bfc\u5165\u5de5\u5177\u5c06\u5c06\u6570\u636e\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u968f\u540e\u89e3\u6790\u6570\u636e\u5e76\u5c06\u5176\u5199\u5165\u6307\u5b9a\u7684\u56fe\u3002\u6570\u636e\u5c06\u4ee5\u5927\u7ea6 16MB \u5927\u5c0f\u7684\u5305\u53d1\u9001\uff0c\u5728\u6700\u8fd1\u7684\u6362\u884c\u7b26\u5904\u4e2d\u65ad\u3002\u6bcf\u4e2a\u5305\u90fd\u662f\u4ee5\u539f\u5b50\u65b9\u5f0f\u5bfc\u5165\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6210\u529f\u5bfc\u5165\u5305\uff0c\u5219\u6210\u529f\u5bfc\u5165\u6240\u6709\u6570\u636e\uff0c\u5426\u5219\uff0c\u4efb\u4f55\u6570\u636e\u90fd\u4e0d\u4f1a\u8fdb\u5165\u6570\u636e\u5e93\u3002\u5982\u679c\u6307\u5b9a\u4e86`--continue_on_error true`\uff0c\u5219\u5ffd\u7565\u6570\u636e\u5b8c\u6574\u6027\u9519\u8bef\uff0c\u5e76\u5ffd\u7565\u8fdd\u89c4\u884c\u3002\u5426\u5219\uff0c\u5bfc\u5165\u5c06\u5728\u7b2c\u4e00\u4e2a\u9519\u8bef\u5305\u5904\u505c\u6b62\uff0c\u5e76\u6253\u5370\u51fa\u5df2\u5bfc\u5165\u7684\u5305\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u4fee\u6539\u6570\u636e\u4ee5\u6d88\u9664\u9519\u8bef\uff0c\u7136\u540e\u4f7f\u7528`--skip_packages N`\u91cd\u505a\u5bfc\u5165\u4ee5\u8df3\u8fc7\u5df2\u5bfc\u5165\u7684\u5305\u3002","title":"\u5728\u7ebf\u589e\u91cf\u5bfc\u5165"},{"location":"zh-CN/2.operating/4.server-config/","text":"\u670d\u52a1\u914d\u7f6e \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u670d\u52a1\u914d\u7f6e\u53c2\u6570\u3001\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u548c\u547d\u4ee4\u884c\u914d\u7f6e\u53c2\u6570 TuGraph \u670d\u52a1\u5668\u5728\u542f\u52a8\u65f6\u4ece\u914d\u7f6e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u9009\u9879\u52a0\u8f7d\u914d\u7f6e\uff0c\u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u4e2d\u540c\u4e00\u9009\u9879\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u503c\uff0c\u5c06\u4f18\u5148\u4f7f\u7528\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u7684\u503c\u3002 \u914d\u7f6e\u53c2\u6570 \u5177\u4f53\u53c2\u6570\u53ca\u5176\u7c7b\u578b\u63cf\u8ff0\u5982\u4e0b\uff1a \u53c2\u6570\u540d \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e license \u5b57\u7b26\u4e32 \u6388\u6743\u6587\u4ef6\u6240\u5728\u8def\u5f84\u3002\u9ed8\u8ba4\u503c\u4e3a /var/lib/lgraph/fma.lic\u3002 directory \u5b57\u7b26\u4e32 \u6570\u636e\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u3002\u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728 \uff0c\u5219\u81ea\u52a8\u521b\u5efa\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /var/lib/lgraph/data\u3002 async \u5e03\u5c14\u503c \u662f\u5426\u4f7f\u7528\u5f02\u6b65\u6a21\u5f0f\u3002\u5f02\u6b65\u6a21\u5f0f\u53ef\u4ee5\u51cf\u5c11\u78c1\u76d8 IO \u5f00\u9500\uff0c\u4f46\u662f\u5728\u673a\u5668\u65ad\u7535\u7b49\u6781\u7aef\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e22\u5931\u6570\u636e\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002 host \u5b57\u7b26\u4e32 REST \u670d\u52a1\u5668\u76d1\u542c\u65f6\u4f7f\u7528\u7684\u5730\u5740\uff0c\u4e00\u822c\u4e3a\u670d\u52a1\u5668\u7684 IP \u5730\u5740\u3002\u9ed8\u8ba4\u5730\u5740\u4e3a 0.0.0.0\u3002 port \u6574\u578b REST \u670d\u52a1\u5668\u76d1\u542c\u65f6\u4f7f\u7528\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u7aef\u53e3\u4e3a 7070\u3002 enable_rpc \u5e03\u5c14\u503c \u662f\u5426\u4f7f\u7528 RPC \u670d\u52a1\u3002\u9ed8\u8ba4\u503c\u4e3a 0\u3002 rpc_port \u6574\u578b RPC \u53ca HA \u670d\u52a1\u6240\u7528\u7aef\u53e3\u3002\u9ed8\u8ba4\u7aef\u53e3\u4e3a 9090\u3002 enable_ha \u5e03\u5c14\u503c \u662f\u5426\u542f\u52a8\u9ad8\u53ef\u7528\u6a21\u5f0f\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002 ha_log_dir \u5b57\u7b26\u4e32 HA \u65e5\u5fd7\u6240\u5728\u76ee\u5f55\uff0c\u9700\u8981\u542f\u52a8 HA \u6a21\u5f0f\u3002\u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 master \u5b57\u7b26\u4e32 \u6839\u636e host1:port1,host2:port2 \u521d\u59cb\u5316\u8282\u70b9\u3002\u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 verbose \u6574\u578b \u65e5\u5fd7\u8f93\u51fa\u4fe1\u606f\u7684\u8be6\u7ec6\u7a0b\u5ea6\u3002\u53ef\u8bbe\u4e3a 0\uff0c1\uff0c2\uff0c\u503c\u8d8a\u5927\u5219\u8f93\u51fa\u4fe1\u606f\u8d8a\u8be6\u7ec6\u3002\u9ed8\u8ba4\u503c\u4e3a 1\u3002 log_dir \u5b57\u7b26\u4e32 \u65e5\u5fd7\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /var/log/lgraph/\u3002 ssl_auth \u5e03\u5c14\u503c \u662f\u5426\u4f7f\u7528 SSL \u5b89\u5168\u8ba4\u8bc1\u3002\u5f53\u5f00\u542f\u65f6\uff0cREST \u670d\u52a1\u5668\u53ea\u5f00\u542f HTTPS \u670d\u52a1\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002 web \u5b57\u7b26\u4e32 web \u6587\u4ef6\uff08\u5305\u542b\u53ef\u89c6\u5316\u90e8\u5206\uff09\u6240\u5728\u76ee\u5f55\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /usr/local/share/lgraph/resource\u3002 server_cert \u5b57\u7b26\u4e32 \u5728 SSL \u8ba4\u8bc1\u5f00\u542f\u65f6\uff0c\u670d\u52a1\u5668\u6240\u4f7f\u7528\u7684 certificate \u6587\u4ef6\u8def\u5f84\u3002\u9ed8\u8ba4\u8def\u5f84\u4e3a /usr/local/etc/lgraph/server-cert.pem\u3002 server_key \u5b57\u7b26\u4e32 \u5728 SSL \u8ba4\u8bc1\u5f00\u542f\u65f6\uff0c\u670d\u52a1\u5668\u6240\u4f7f\u7528\u7684\u516c\u94a5\u6587\u4ef6\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /usr/local/etc/lgraph/server-key.pem\u3002 enable_audit_log \u5e03\u5c14\u503c \u662f\u5426\u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7\uff0c\u9ed8\u8ba4\u503c\u4e3a false\u3002 audit_log_expire \u6574\u578b \u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7\u65f6\uff0c\u65e5\u5fd7\u7684\u6709\u6548\u65f6\u95f4\uff08\u5c0f\u65f6\uff09\uff0c\u8d85\u65f6\u81ea\u52a8\u6e05\u7406\uff0c\u503c\u4e3a 0 \u65f6\u8868\u793a\u4e0d\u6e05\u7406\u3002\u9ed8\u8ba4\u503c\u4e3a 0\u3002 audit_log_dir \u5b57\u7b26\u4e32 \u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7\u65f6\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u5b58\u653e\u76ee\u5f55\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a $directory/ audit_log \u3002 load_plugins \u5e03\u5c14\u503c \u542f\u52a8\u670d\u52a1\u65f6\u5bfc\u5165\u6240\u6709\u5b58\u50a8\u8fc7\u7a0b\u3002\u9ed8\u8ba4\u503c\u4e3a 1\u3002 optimistic_txn \u5e03\u5c14\u503c \u4e3a Cypher \u5f00\u542f\u4e50\u89c2\u591a\u7ebf\u7a0b\u5199\u5165\u4e8b\u52a1\u3002\u9ed8\u8ba4\u4e3a 0\u3002 disable_auth \u5e03\u5c14\u503c \u5173\u95ed REST \u9a8c\u8bc1\u3002\u9ed8\u8ba4\u4e3a 0\u3002 snapshot_interval \u6574\u578b \u5feb\u7167\u95f4\u9694\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002 \u9ed8\u8ba4\u503c\u4e3a 86400\u3002 heartbeat_interval_ms \u6574\u578b \u5fc3\u8df3\u95f4\u9694\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002 \u9ed8\u8ba4\u503c\u4e3a 1000\u3002 heartbeat_failure_duration_ms \u6574\u578b \u5fc3\u8df3\u8d85\u65f6\u4e14\u8282\u70b9\u4e0b\u7ebf\u95f4\u9694\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u9ed8\u8ba4\u4e3a 60000\u3002 node_dead_duration_ms \u6574\u578b \u8282\u70b9\u88ab\u89c6\u4e3a\u5b8c\u5168\u6b7b\u4ea1\u5e76\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7684\u95f4\u9694\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u9ed8\u8ba4\u503c\u4e3a 120000\u3002 enable_ip_check \u5e03\u5c14\u503c \u5141\u8bb8 IP \u767d\u540d\u5355\uff0c\u9ed8\u8ba4\u503c\u4e3a 0\u3002 idle_seconds \u6574\u578b \u5b50\u8fdb\u7a0b\u53ef\u4ee5\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u7684\u6700\u5927\u79d2\u6570\u3002 \u9ed8\u8ba4\u503c\u4e3a 600\u3002 enable_backup_log \u5e03\u5c14\u503c \u662f\u5426\u542f\u7528\u5907\u4efd\u65e5\u5fd7\u8bb0\u5f55\u3002 \u9ed8\u8ba4\u503c\u4e3a 0\u3002 backup_log_dir \u5b57\u7b26\u4e32 \u5b58\u50a8\u5907\u4efd\u6587\u4ef6\u7684\u76ee\u5f55\u3002 \u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 snapshot_dir \u5b57\u7b26\u4e32 \u5b58\u50a8\u5feb\u7167\u6587\u4ef6\u7684\u76ee\u5f55\u3002 \u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 thread_limit \u6574\u578b \u540c\u65f6\u4f7f\u7528\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u3002 \u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u5373\u4e0d\u505a\u9650\u5236\uff0c\u4ee5 license \u4e3a\u51c6\u3002 help \u5e03\u5c14\u503c \u6253\u5370\u6b64\u5e2e\u52a9\u6d88\u606f\u3002 \u9ed8\u8ba4\u503c\u4e3a 0\u3002 \u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6 TuGraph \u7684\u914d\u7f6e\u6587\u4ef6\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\u3002\u5efa\u8bae\u5c06\u5927\u591a\u6570\u914d\u7f6e\u5b58\u50a8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u4ec5\u5728\u9700\u8981\u65f6\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879\u4e34\u65f6\u4fee\u6539\u67d0\u4e9b\u914d\u7f6e\u53c2\u6570\u3002 \u4e00\u4e2a\u5178\u578b\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff1a { \"directory\": \"/var/lib/lgraph/data\", \"license\": \"/var/lib/lgraph/fma.lic\", \"port\": 7090, \"rpc_port\": 9090, \"enable_ha\": false, \"verbose\": 1, \"log_dir\": \"/var/log/lgraph/\", \"ssl_auth\": false, \"server_key\": \"/usr/local/etc/lgraph/server-key.pem\", \"server_cert\": \"/usr/local/etc/lgraph/server-cert.pem\" }","title":"\u670d\u52a1\u5668\u914d\u7f6e"},{"location":"zh-CN/2.operating/4.server-config/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph \u7684\u670d\u52a1\u914d\u7f6e\u53c2\u6570\u3001\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u548c\u547d\u4ee4\u884c\u914d\u7f6e\u53c2\u6570 TuGraph \u670d\u52a1\u5668\u5728\u542f\u52a8\u65f6\u4ece\u914d\u7f6e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u9009\u9879\u52a0\u8f7d\u914d\u7f6e\uff0c\u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u4e2d\u540c\u4e00\u9009\u9879\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u503c\uff0c\u5c06\u4f18\u5148\u4f7f\u7528\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u7684\u503c\u3002","title":"\u670d\u52a1\u914d\u7f6e"},{"location":"zh-CN/2.operating/4.server-config/#_2","text":"\u5177\u4f53\u53c2\u6570\u53ca\u5176\u7c7b\u578b\u63cf\u8ff0\u5982\u4e0b\uff1a \u53c2\u6570\u540d \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e license \u5b57\u7b26\u4e32 \u6388\u6743\u6587\u4ef6\u6240\u5728\u8def\u5f84\u3002\u9ed8\u8ba4\u503c\u4e3a /var/lib/lgraph/fma.lic\u3002 directory \u5b57\u7b26\u4e32 \u6570\u636e\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u3002\u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728 \uff0c\u5219\u81ea\u52a8\u521b\u5efa\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /var/lib/lgraph/data\u3002 async \u5e03\u5c14\u503c \u662f\u5426\u4f7f\u7528\u5f02\u6b65\u6a21\u5f0f\u3002\u5f02\u6b65\u6a21\u5f0f\u53ef\u4ee5\u51cf\u5c11\u78c1\u76d8 IO \u5f00\u9500\uff0c\u4f46\u662f\u5728\u673a\u5668\u65ad\u7535\u7b49\u6781\u7aef\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e22\u5931\u6570\u636e\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002 host \u5b57\u7b26\u4e32 REST \u670d\u52a1\u5668\u76d1\u542c\u65f6\u4f7f\u7528\u7684\u5730\u5740\uff0c\u4e00\u822c\u4e3a\u670d\u52a1\u5668\u7684 IP \u5730\u5740\u3002\u9ed8\u8ba4\u5730\u5740\u4e3a 0.0.0.0\u3002 port \u6574\u578b REST \u670d\u52a1\u5668\u76d1\u542c\u65f6\u4f7f\u7528\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u7aef\u53e3\u4e3a 7070\u3002 enable_rpc \u5e03\u5c14\u503c \u662f\u5426\u4f7f\u7528 RPC \u670d\u52a1\u3002\u9ed8\u8ba4\u503c\u4e3a 0\u3002 rpc_port \u6574\u578b RPC \u53ca HA \u670d\u52a1\u6240\u7528\u7aef\u53e3\u3002\u9ed8\u8ba4\u7aef\u53e3\u4e3a 9090\u3002 enable_ha \u5e03\u5c14\u503c \u662f\u5426\u542f\u52a8\u9ad8\u53ef\u7528\u6a21\u5f0f\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002 ha_log_dir \u5b57\u7b26\u4e32 HA \u65e5\u5fd7\u6240\u5728\u76ee\u5f55\uff0c\u9700\u8981\u542f\u52a8 HA \u6a21\u5f0f\u3002\u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 master \u5b57\u7b26\u4e32 \u6839\u636e host1:port1,host2:port2 \u521d\u59cb\u5316\u8282\u70b9\u3002\u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 verbose \u6574\u578b \u65e5\u5fd7\u8f93\u51fa\u4fe1\u606f\u7684\u8be6\u7ec6\u7a0b\u5ea6\u3002\u53ef\u8bbe\u4e3a 0\uff0c1\uff0c2\uff0c\u503c\u8d8a\u5927\u5219\u8f93\u51fa\u4fe1\u606f\u8d8a\u8be6\u7ec6\u3002\u9ed8\u8ba4\u503c\u4e3a 1\u3002 log_dir \u5b57\u7b26\u4e32 \u65e5\u5fd7\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /var/log/lgraph/\u3002 ssl_auth \u5e03\u5c14\u503c \u662f\u5426\u4f7f\u7528 SSL \u5b89\u5168\u8ba4\u8bc1\u3002\u5f53\u5f00\u542f\u65f6\uff0cREST \u670d\u52a1\u5668\u53ea\u5f00\u542f HTTPS \u670d\u52a1\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002 web \u5b57\u7b26\u4e32 web \u6587\u4ef6\uff08\u5305\u542b\u53ef\u89c6\u5316\u90e8\u5206\uff09\u6240\u5728\u76ee\u5f55\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /usr/local/share/lgraph/resource\u3002 server_cert \u5b57\u7b26\u4e32 \u5728 SSL \u8ba4\u8bc1\u5f00\u542f\u65f6\uff0c\u670d\u52a1\u5668\u6240\u4f7f\u7528\u7684 certificate \u6587\u4ef6\u8def\u5f84\u3002\u9ed8\u8ba4\u8def\u5f84\u4e3a /usr/local/etc/lgraph/server-cert.pem\u3002 server_key \u5b57\u7b26\u4e32 \u5728 SSL \u8ba4\u8bc1\u5f00\u542f\u65f6\uff0c\u670d\u52a1\u5668\u6240\u4f7f\u7528\u7684\u516c\u94a5\u6587\u4ef6\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a /usr/local/etc/lgraph/server-key.pem\u3002 enable_audit_log \u5e03\u5c14\u503c \u662f\u5426\u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7\uff0c\u9ed8\u8ba4\u503c\u4e3a false\u3002 audit_log_expire \u6574\u578b \u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7\u65f6\uff0c\u65e5\u5fd7\u7684\u6709\u6548\u65f6\u95f4\uff08\u5c0f\u65f6\uff09\uff0c\u8d85\u65f6\u81ea\u52a8\u6e05\u7406\uff0c\u503c\u4e3a 0 \u65f6\u8868\u793a\u4e0d\u6e05\u7406\u3002\u9ed8\u8ba4\u503c\u4e3a 0\u3002 audit_log_dir \u5b57\u7b26\u4e32 \u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7\u65f6\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u5b58\u653e\u76ee\u5f55\u3002\u9ed8\u8ba4\u76ee\u5f55\u4e3a $directory/ audit_log \u3002 load_plugins \u5e03\u5c14\u503c \u542f\u52a8\u670d\u52a1\u65f6\u5bfc\u5165\u6240\u6709\u5b58\u50a8\u8fc7\u7a0b\u3002\u9ed8\u8ba4\u503c\u4e3a 1\u3002 optimistic_txn \u5e03\u5c14\u503c \u4e3a Cypher \u5f00\u542f\u4e50\u89c2\u591a\u7ebf\u7a0b\u5199\u5165\u4e8b\u52a1\u3002\u9ed8\u8ba4\u4e3a 0\u3002 disable_auth \u5e03\u5c14\u503c \u5173\u95ed REST \u9a8c\u8bc1\u3002\u9ed8\u8ba4\u4e3a 0\u3002 snapshot_interval \u6574\u578b \u5feb\u7167\u95f4\u9694\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002 \u9ed8\u8ba4\u503c\u4e3a 86400\u3002 heartbeat_interval_ms \u6574\u578b \u5fc3\u8df3\u95f4\u9694\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002 \u9ed8\u8ba4\u503c\u4e3a 1000\u3002 heartbeat_failure_duration_ms \u6574\u578b \u5fc3\u8df3\u8d85\u65f6\u4e14\u8282\u70b9\u4e0b\u7ebf\u95f4\u9694\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u9ed8\u8ba4\u4e3a 60000\u3002 node_dead_duration_ms \u6574\u578b \u8282\u70b9\u88ab\u89c6\u4e3a\u5b8c\u5168\u6b7b\u4ea1\u5e76\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7684\u95f4\u9694\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u9ed8\u8ba4\u503c\u4e3a 120000\u3002 enable_ip_check \u5e03\u5c14\u503c \u5141\u8bb8 IP \u767d\u540d\u5355\uff0c\u9ed8\u8ba4\u503c\u4e3a 0\u3002 idle_seconds \u6574\u578b \u5b50\u8fdb\u7a0b\u53ef\u4ee5\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u7684\u6700\u5927\u79d2\u6570\u3002 \u9ed8\u8ba4\u503c\u4e3a 600\u3002 enable_backup_log \u5e03\u5c14\u503c \u662f\u5426\u542f\u7528\u5907\u4efd\u65e5\u5fd7\u8bb0\u5f55\u3002 \u9ed8\u8ba4\u503c\u4e3a 0\u3002 backup_log_dir \u5b57\u7b26\u4e32 \u5b58\u50a8\u5907\u4efd\u6587\u4ef6\u7684\u76ee\u5f55\u3002 \u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 snapshot_dir \u5b57\u7b26\u4e32 \u5b58\u50a8\u5feb\u7167\u6587\u4ef6\u7684\u76ee\u5f55\u3002 \u9ed8\u8ba4\u503c\u4e3a\u7a7a\u3002 thread_limit \u6574\u578b \u540c\u65f6\u4f7f\u7528\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u3002 \u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u5373\u4e0d\u505a\u9650\u5236\uff0c\u4ee5 license \u4e3a\u51c6\u3002 help \u5e03\u5c14\u503c \u6253\u5370\u6b64\u5e2e\u52a9\u6d88\u606f\u3002 \u9ed8\u8ba4\u503c\u4e3a 0\u3002","title":"\u914d\u7f6e\u53c2\u6570"},{"location":"zh-CN/2.operating/4.server-config/#_3","text":"TuGraph \u7684\u914d\u7f6e\u6587\u4ef6\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\u3002\u5efa\u8bae\u5c06\u5927\u591a\u6570\u914d\u7f6e\u5b58\u50a8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u4ec5\u5728\u9700\u8981\u65f6\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879\u4e34\u65f6\u4fee\u6539\u67d0\u4e9b\u914d\u7f6e\u53c2\u6570\u3002 \u4e00\u4e2a\u5178\u578b\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff1a { \"directory\": \"/var/lib/lgraph/data\", \"license\": \"/var/lib/lgraph/fma.lic\", \"port\": 7090, \"rpc_port\": 9090, \"enable_ha\": false, \"verbose\": 1, \"log_dir\": \"/var/log/lgraph/\", \"ssl_auth\": false, \"server_key\": \"/usr/local/etc/lgraph/server-key.pem\", \"server_cert\": \"/usr/local/etc/lgraph/server-cert.pem\" }","title":"\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6"},{"location":"zh-CN/2.operating/5.operation/","text":"\u670d\u52a1\u8fd0\u7ef4 \u6b64\u6587\u6863\u4e3b\u8981\u63cf\u8ff0 TuGraph \u670d\u52a1\u7684\u8fd0\u884c\u6a21\u5f0f\u3001\u542f\u52a8\u3001\u505c\u6b62\u548c\u91cd\u542f\u7684\u64cd\u4f5c\u3002 \u8fd0\u884c\u6a21\u5f0f TuGraph \u53ef\u4ee5\u4f5c\u4e3a\u524d\u53f0\u666e\u901a\u8fdb\u7a0b\u542f\u52a8\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u540e\u53f0\u5b88\u62a4\u8fdb\u7a0b\u542f\u52a8\u3002 \u5f53\u4f5c\u4e3a\u666e\u901a\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0cTuGraph \u53ef\u4ee5\u76f4\u63a5\u5c06\u65e5\u5fd7\u6253\u5370\u5230\u7ec8\u7aef\uff0c\u8fd9\u5728\u8c03\u8bd5\u670d\u52a1\u5668\u914d\u7f6e\u65f6\u975e\u5e38\u65b9\u4fbf\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u524d\u53f0\u8fdb\u7a0b\u5728\u7ec8\u7aef\u9000\u51fa\u540e\u88ab\u7ec8\u6b62\uff0c\u56e0\u6b64\u7528\u6237\u987b\u786e\u4fdd\u5728 TuGraph \u670d\u52a1\u5668\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u65f6\uff0c\u7ec8\u7aef\u4fdd\u6301\u6253\u5f00\u72b6\u6001\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u5373\u4f7f\u542f\u52a8\u5b83\u7684\u7ec8\u7aef\u9000\u51fa\uff0cTuGraph \u670d\u52a1\u5668\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5728\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u670d\u52a1\u5668\u4e0b\u63a8\u8350\u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8 TuGraph \u670d\u52a1\u5668\u3002 \u8fd0\u884c\u666e\u901a\u8fdb\u7a0b lgraph_server -d run \u547d\u4ee4\u53ef\u4ee5\u5c06 TuGraph \u4f5c\u4e3a\u666e\u901a\u8fdb\u7a0b\u8fd0\u884c\u3002\u666e\u901a\u8fdb\u7a0b\u4f9d\u8d56\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u56e0\u6b64\u7ec8\u7aef\u7ed3\u675f\u65f6\uff0cTuGraph \u8fdb\u7a0b\u4e5f\u4f1a\u81ea\u52a8\u7ec8\u6b62\u3002\u666e\u901a\u8fdb\u7a0b\u6a21\u5f0f\u914d\u5408 --log_dir \"\" \u53ef\u4ee5\u5c06\u8fdb\u7a0b\u65e5\u5fd7\u76f4\u63a5\u8f93\u51fa\u5230\u7ec8\u7aef\uff0c\u56e0\u6b64\u66f4\u65b9\u4fbf\u8c03\u8bd5\u3002 \u542f\u52a8\u547d\u4ee4\uff1a $ ./lgraph_server -c lgraph_standalone.json --log_dir \"\" \u666e\u901a\u6a21\u5f0f\u7684\u8fd0\u884c\u8f93\u51fa\u793a\u4f8b\uff1a 20200508120723.039: ********************************************************************** 20200508120723.039: * TuGraph Graph Database v3.1.0 * 20200508120723.040: * * 20200508120723.041: * Copyright(C) 2018 Ant Group. All rights reserved. * 20200508120723.041: * * 20200508120723.044: * Licensed host: hostname threads:0, ha:0 * 20200508120723.044: ********************************************************************** 20200508120723.044: Server is configured with the following parameters: 20200508120723.045: data directory: ./lgraph_db 20200508120723.045: license: ./fma.lic 20200508120723.046: enable ha: 0 20200508120723.046: async: 0 20200508120723.047: host: 127.0.0.1 20200508120723.047: REST port: 7071 20200508120723.048: RPC port: 9091 20200508120723.048: enable rpc: 0 20200508120723.051: optimistic txn: 0 20200508120723.059: verbose: 1 20200508120723.074: log_dir: 20200508120723.074: ssl_auth: 0 20200508120723.075: resource dir: ./resource 20200508120723.077: Loading DB state from disk 20200508120723.110: [RestServer] Listening for REST on port 7090 20200508120723.110: [LGraphService] Server started. \u666e\u901a\u8fdb\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6309 CTRL+C \u6765\u63d0\u524d\u7ec8\u6b62 TuGraph \u8fdb\u7a0b\u3002 \u8fd0\u884c\u8fdb\u7a0b\u5b88\u62a4\u6a21\u5f0f \u542f\u52a8\u547d\u4ee4\uff1a $ ./lgraph_server -d start -c lgraph_daemon.json \u5b88\u62a4\u6a21\u5f0f\u7684\u8fd0\u884c\u8f93\u51fa\u793a\u4f8b\uff1a Starting lgraph... The service process is started at pid 12109. \u6b64\u547d\u4ee4\u542f\u52a8\u7684 TuGraph \u670d\u52a1\u5668\u8fdb\u7a0b\u4e3a\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u5c06\u4ece\u6587\u4ef6 lgraph_daemon.json \u52a0\u8f7d\u76f8\u5173\u914d\u7f6e\u3002\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u5b83\u5c06\u5f00\u59cb\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u6253\u5370\u65e5\u5fd7\uff0c\u4e4b\u540e\u53ef\u7528\u8be5\u65e5\u5fd7\u6587\u4ef6\u786e\u5b9a\u670d\u52a1\u5668\u7684\u72b6\u6001\u3002 \u670d\u52a1\u64cd\u4f5c \u542f\u52a8\u670d\u52a1 TuGraph \u9700\u8981\u901a\u8fc7 lgraph_server -d start \u547d\u4ee4\u884c\u542f\u52a8\uff0c\u542f\u52a8\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\uff1a $ ./lgraph_server -d start -c lgraph_daemon.json Starting lgraph... The service process is started at pid 12109. \u6b64\u547d\u4ee4\u542f\u52a8\u7684 TuGraph \u670d\u52a1\u5668\u8fdb\u7a0b\u4e3a\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u5c06\u4ece\u6587\u4ef6 lgraph_daemon.json \u52a0\u8f7d\u76f8\u5173\u914d\u7f6e\u3002\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u5b83\u5c06\u5f00\u59cb\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u6253\u5370\u65e5\u5fd7\uff0c\u4e4b\u540e\u53ef\u7528\u8be5\u65e5\u5fd7\u6587\u4ef6\u786e\u5b9a\u670d\u52a1\u5668\u7684\u72b6\u6001\u3002 \u505c\u6b62\u670d\u52a1 \u7528\u6237\u53ef\u4ee5\u4f7f\u7528 kill \u547d\u4ee4\u4ee5\u53ca lgraph_server -d stop \u547d\u4ee4\u505c\u6b62 TuGraph \u5b88\u62a4\u8fdb\u7a0b\u3002\u7531\u4e8e\u53ef\u80fd\u5728\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u591a\u4e2a TuGraph \u670d\u52a1\u5668\u8fdb\u7a0b\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 .pid \u6587\u4ef6\u533a\u5206\u4e0d\u540c\u7684\u670d\u52a1\u5668\u8fdb\u7a0b\uff0c\u8be5\u6587\u4ef6\u5199\u5165\u542f\u52a8\u8be5\u8fdb\u7a0b\u7684\u5de5\u4f5c\u76ee\u5f55\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5728\u76f8\u540c\u5de5\u4f5c\u76ee\u5f55\u4e2d\u8fd0\u884c lgraph_server-d stop \u547d\u4ee4\uff0c\u4ee5\u505c\u6b62\u6b63\u786e\u7684\u670d\u52a1\u5668\u8fdb\u7a0b\u3002 user@host:~/tugraph$ ./lgraph_server -d start -c lgraph_standalone.json 20200508122306.378: Starting lgraph... 20200508122306.379: The service process is started at pid 93. user@host:~/tugraph$ cat ./lgraph.pid 93 user@host:~/tugraph$ ./lgraph_server -d stop -c lgraph_standalone.json 20200508122334.857: Stopping lgraph... 20200508122334.857: Process stopped. \u91cd\u542f\u670d\u52a1 \u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7 lgraph_server -d restart \u6765\u91cd\u542f TuGraph \u670d\u52a1\uff1a $ ./lgraph_server -d restart Stopping lgraph... Process stopped. Starting lgraph... The service process is started at pid 20899.","title":"\u8fd0\u7ef4"},{"location":"zh-CN/2.operating/5.operation/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u63cf\u8ff0 TuGraph \u670d\u52a1\u7684\u8fd0\u884c\u6a21\u5f0f\u3001\u542f\u52a8\u3001\u505c\u6b62\u548c\u91cd\u542f\u7684\u64cd\u4f5c\u3002","title":"\u670d\u52a1\u8fd0\u7ef4"},{"location":"zh-CN/2.operating/5.operation/#_2","text":"TuGraph \u53ef\u4ee5\u4f5c\u4e3a\u524d\u53f0\u666e\u901a\u8fdb\u7a0b\u542f\u52a8\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u540e\u53f0\u5b88\u62a4\u8fdb\u7a0b\u542f\u52a8\u3002 \u5f53\u4f5c\u4e3a\u666e\u901a\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0cTuGraph \u53ef\u4ee5\u76f4\u63a5\u5c06\u65e5\u5fd7\u6253\u5370\u5230\u7ec8\u7aef\uff0c\u8fd9\u5728\u8c03\u8bd5\u670d\u52a1\u5668\u914d\u7f6e\u65f6\u975e\u5e38\u65b9\u4fbf\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u524d\u53f0\u8fdb\u7a0b\u5728\u7ec8\u7aef\u9000\u51fa\u540e\u88ab\u7ec8\u6b62\uff0c\u56e0\u6b64\u7528\u6237\u987b\u786e\u4fdd\u5728 TuGraph \u670d\u52a1\u5668\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u65f6\uff0c\u7ec8\u7aef\u4fdd\u6301\u6253\u5f00\u72b6\u6001\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u5373\u4f7f\u542f\u52a8\u5b83\u7684\u7ec8\u7aef\u9000\u51fa\uff0cTuGraph \u670d\u52a1\u5668\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5728\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u670d\u52a1\u5668\u4e0b\u63a8\u8350\u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8 TuGraph \u670d\u52a1\u5668\u3002","title":"\u8fd0\u884c\u6a21\u5f0f"},{"location":"zh-CN/2.operating/5.operation/#_3","text":"lgraph_server -d run \u547d\u4ee4\u53ef\u4ee5\u5c06 TuGraph \u4f5c\u4e3a\u666e\u901a\u8fdb\u7a0b\u8fd0\u884c\u3002\u666e\u901a\u8fdb\u7a0b\u4f9d\u8d56\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u56e0\u6b64\u7ec8\u7aef\u7ed3\u675f\u65f6\uff0cTuGraph \u8fdb\u7a0b\u4e5f\u4f1a\u81ea\u52a8\u7ec8\u6b62\u3002\u666e\u901a\u8fdb\u7a0b\u6a21\u5f0f\u914d\u5408 --log_dir \"\" \u53ef\u4ee5\u5c06\u8fdb\u7a0b\u65e5\u5fd7\u76f4\u63a5\u8f93\u51fa\u5230\u7ec8\u7aef\uff0c\u56e0\u6b64\u66f4\u65b9\u4fbf\u8c03\u8bd5\u3002 \u542f\u52a8\u547d\u4ee4\uff1a $ ./lgraph_server -c lgraph_standalone.json --log_dir \"\" \u666e\u901a\u6a21\u5f0f\u7684\u8fd0\u884c\u8f93\u51fa\u793a\u4f8b\uff1a 20200508120723.039: ********************************************************************** 20200508120723.039: * TuGraph Graph Database v3.1.0 * 20200508120723.040: * * 20200508120723.041: * Copyright(C) 2018 Ant Group. All rights reserved. * 20200508120723.041: * * 20200508120723.044: * Licensed host: hostname threads:0, ha:0 * 20200508120723.044: ********************************************************************** 20200508120723.044: Server is configured with the following parameters: 20200508120723.045: data directory: ./lgraph_db 20200508120723.045: license: ./fma.lic 20200508120723.046: enable ha: 0 20200508120723.046: async: 0 20200508120723.047: host: 127.0.0.1 20200508120723.047: REST port: 7071 20200508120723.048: RPC port: 9091 20200508120723.048: enable rpc: 0 20200508120723.051: optimistic txn: 0 20200508120723.059: verbose: 1 20200508120723.074: log_dir: 20200508120723.074: ssl_auth: 0 20200508120723.075: resource dir: ./resource 20200508120723.077: Loading DB state from disk 20200508120723.110: [RestServer] Listening for REST on port 7090 20200508120723.110: [LGraphService] Server started. \u666e\u901a\u8fdb\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6309 CTRL+C \u6765\u63d0\u524d\u7ec8\u6b62 TuGraph \u8fdb\u7a0b\u3002","title":"\u8fd0\u884c\u666e\u901a\u8fdb\u7a0b"},{"location":"zh-CN/2.operating/5.operation/#_4","text":"\u542f\u52a8\u547d\u4ee4\uff1a $ ./lgraph_server -d start -c lgraph_daemon.json \u5b88\u62a4\u6a21\u5f0f\u7684\u8fd0\u884c\u8f93\u51fa\u793a\u4f8b\uff1a Starting lgraph... The service process is started at pid 12109. \u6b64\u547d\u4ee4\u542f\u52a8\u7684 TuGraph \u670d\u52a1\u5668\u8fdb\u7a0b\u4e3a\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u5c06\u4ece\u6587\u4ef6 lgraph_daemon.json \u52a0\u8f7d\u76f8\u5173\u914d\u7f6e\u3002\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u5b83\u5c06\u5f00\u59cb\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u6253\u5370\u65e5\u5fd7\uff0c\u4e4b\u540e\u53ef\u7528\u8be5\u65e5\u5fd7\u6587\u4ef6\u786e\u5b9a\u670d\u52a1\u5668\u7684\u72b6\u6001\u3002","title":"\u8fd0\u884c\u8fdb\u7a0b\u5b88\u62a4\u6a21\u5f0f"},{"location":"zh-CN/2.operating/5.operation/#_5","text":"","title":"\u670d\u52a1\u64cd\u4f5c"},{"location":"zh-CN/2.operating/5.operation/#_6","text":"TuGraph \u9700\u8981\u901a\u8fc7 lgraph_server -d start \u547d\u4ee4\u884c\u542f\u52a8\uff0c\u542f\u52a8\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\uff1a $ ./lgraph_server -d start -c lgraph_daemon.json Starting lgraph... The service process is started at pid 12109. \u6b64\u547d\u4ee4\u542f\u52a8\u7684 TuGraph \u670d\u52a1\u5668\u8fdb\u7a0b\u4e3a\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u5c06\u4ece\u6587\u4ef6 lgraph_daemon.json \u52a0\u8f7d\u76f8\u5173\u914d\u7f6e\u3002\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u5b83\u5c06\u5f00\u59cb\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u6253\u5370\u65e5\u5fd7\uff0c\u4e4b\u540e\u53ef\u7528\u8be5\u65e5\u5fd7\u6587\u4ef6\u786e\u5b9a\u670d\u52a1\u5668\u7684\u72b6\u6001\u3002","title":"\u542f\u52a8\u670d\u52a1"},{"location":"zh-CN/2.operating/5.operation/#_7","text":"\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 kill \u547d\u4ee4\u4ee5\u53ca lgraph_server -d stop \u547d\u4ee4\u505c\u6b62 TuGraph \u5b88\u62a4\u8fdb\u7a0b\u3002\u7531\u4e8e\u53ef\u80fd\u5728\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u591a\u4e2a TuGraph \u670d\u52a1\u5668\u8fdb\u7a0b\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 .pid \u6587\u4ef6\u533a\u5206\u4e0d\u540c\u7684\u670d\u52a1\u5668\u8fdb\u7a0b\uff0c\u8be5\u6587\u4ef6\u5199\u5165\u542f\u52a8\u8be5\u8fdb\u7a0b\u7684\u5de5\u4f5c\u76ee\u5f55\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5728\u76f8\u540c\u5de5\u4f5c\u76ee\u5f55\u4e2d\u8fd0\u884c lgraph_server-d stop \u547d\u4ee4\uff0c\u4ee5\u505c\u6b62\u6b63\u786e\u7684\u670d\u52a1\u5668\u8fdb\u7a0b\u3002 user@host:~/tugraph$ ./lgraph_server -d start -c lgraph_standalone.json 20200508122306.378: Starting lgraph... 20200508122306.379: The service process is started at pid 93. user@host:~/tugraph$ cat ./lgraph.pid 93 user@host:~/tugraph$ ./lgraph_server -d stop -c lgraph_standalone.json 20200508122334.857: Stopping lgraph... 20200508122334.857: Process stopped.","title":"\u505c\u6b62\u670d\u52a1"},{"location":"zh-CN/2.operating/5.operation/#_8","text":"\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7 lgraph_server -d restart \u6765\u91cd\u542f TuGraph \u670d\u52a1\uff1a $ ./lgraph_server -d restart Stopping lgraph... Process stopped. Starting lgraph... The service process is started at pid 20899.","title":"\u91cd\u542f\u670d\u52a1"},{"location":"zh-CN/2.operating/7.ha-mode/","text":"\u90e8\u7f72\u9ad8\u53ef\u7528\u6a21\u5f0f \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86\u9ad8\u53ef\u7528\u6a21\u5f0f\u7684\u539f\u7406\u3001\u51c6\u5907\u5de5\u4f5c\u3001\u4ee5\u53ca\u670d\u52a1\u5668\u7684\u64cd\u4f5c\u8bf4\u660e \u539f\u7406 TuGraph \u901a\u8fc7\u591a\u673a\u70ed\u5907\u4efd\u6765\u63d0\u4f9b\u9ad8\u53ef\u7528\u6a21\u5f0f\uff08HA \u6a21\u5f0f\uff09\u3002\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u5199\u64cd\u4f5c\u4f1a\u88ab\u540c\u6b65\u5230\u6240\u6709\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u6837\u5373\u4f7f\u6709\u90e8\u5206\u670d\u52a1\u5668\u5b95\u673a\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u670d\u52a1\u7684\u53ef\u7528\u6027\u3002 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u591a\u4e2a TuGraph \u670d\u52a1\u5668\u7ec4\u6210\u4e00\u4e2a\u5907\u4efd\u7ec4\u3002\u6bcf\u4e2a\u5907\u4efd\u7ec4\u7531\u4e09\u4e2a\u6216\u66f4\u591a TuGraph \u670d\u52a1\u5668\u7ec4\u6210\uff0c\u5176\u4e2d\u67d0\u53f0\u670d\u52a1\u5668\u4f1a\u4f5c\u4e3a leader \uff0c\u800c\u5176\u4ed6\u590d\u5236\u7ec4\u670d\u52a1\u5668\u5219\u4f5c\u4e3a follower \u3002\u5199\u5165\u8bf7\u6c42\u7531 leader \u63d0\u4f9b\u670d\u52a1\uff0c\u8be5 leader \u5c06\u6bcf\u4e2a\u8bf7\u6c42\u590d\u5236\u540c\u6b65\u5230 follower \uff0c\u5e76\u5728\u8bf7\u6c42\u540c\u6b65\u5230\u670d\u52a1\u5668\u540e\u624d\u80fd\u54cd\u5e94\u5ba2\u6237\u7aef\u3002\u8fd9\u6837\uff0c\u5982\u679c\u4efb\u4f55\u670d\u52a1\u5668\u53d1\u751f\u6545\u969c\uff0c\u5176\u4ed6\u670d\u52a1\u5668\u4ecd\u5c06\u5177\u6709\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u5199\u5165\u7684\u6240\u6709\u6570\u636e\u3002\u5982\u679c leader \u670d\u52a1\u5668\u53d1\u751f\u6545\u969c\uff0c\u5176\u4ed6\u670d\u52a1\u5668\u5c06\u81ea\u52a8\u9009\u62e9\u51fa\u65b0\u7684 leader \u3002 \u9ad8\u53ef\u7528\u6a21\u5f0f\u4ec5\u4f01\u4e1a\u7248\u53ef\u7528\uff0c\u5f00\u6e90\u793e\u533a\u7248\u4e0d\u542b\u6b64\u529f\u80fd\u3002 \u51c6\u5907\u5de5\u4f5c \u8981\u542f\u7528\u9ad8\u53ef\u7528\u6a21\u5f0f\uff0c\u7528\u6237\u9700\u8981\uff1a \u4e09\u53f0\u53ca\u4ee5\u4e0a\u7684 TuGraph \u670d\u52a1\u5668\u5b9e\u4f8b\u3002 \u83b7\u5f97\u4e00\u4e2a\u5177\u6709\u9ad8\u53ef\u7528\u7684 license \u6587\u4ef6\uff0c\u5177\u4f53\u8bf7\u6d3d\u6211\u4eec\u7684\u7ecf\u9500\u5546\u3002 \u5728\u542f\u52a8 lgraph_server \u65f6\u6253\u5f00\u9ad8\u53ef\u7528\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6216\u8005\u547d\u4ee4\u884c\u5c06 enable_ha \u9009\u9879\u8bbe\u7f6e\u4e3a true \u3002 \u8bbe\u7f6e\u6b63\u786e\u7684 rpc_port \uff0c\u53ef\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6216\u8005\u547d\u4ee4\u884c\u8bbe\u7f6e\u3002 \u542f\u52a8\u521d\u59cb\u5907\u4efd\u7ec4 \u521d\u59cb\u6570\u636e\u4e00\u81f4 \u5f53\u542f\u52a8\u65f6\u6240\u6709\u670d\u52a1\u5668\u4e2d\u7684\u6570\u636e\u76f8\u540c\u6216\u6ca1\u6709\u6570\u636e\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 \u6307\u5b9a --conf host1:port1,host2:port2 \u542f\u52a8\u670d\u52a1\u5668\u3002 \u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5c06\u51c6\u5907\u597d\u7684\u6240\u6709TuGraph\u5b9e\u4f8b\u4e00\u6b21\u6027\u52a0\u5165\u521d\u59cb\u5907\u4efd\u7ec4\uff0c \u7531\u5907\u4efd\u7ec4\u4e2d\u7684\u6240\u6709\u670d\u52a1\u5668\u6839\u636eraft\u534f\u8bae\u9009\u4e3e\u51fa leader \uff0c\u5e76\u5c06\u5176\u4ed6 \u670d\u52a1\u5668\u4ee5 follower \u7684\u89d2\u8272\u52a0\u5165\u5907\u4efd\u7ec4\u3002 \u542f\u52a8\u521d\u59cb\u5907\u4efd\u7ec4\u7684\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090,172.22.224.16:9090,172.22.224.17:9090 \u521d\u59cb\u6570\u636e\u4e0d\u4e00\u81f4 \u5982\u679c\u7b2c\u4e00\u53f0\u670d\u52a1\u5668\u4e2d\u5df2\u6709\u6570\u636e\uff08\u4ee5 lgraph_import \u5de5\u5177\u5bfc\u5165\u6216\u4ece\u975e\u9ad8\u53ef\u7528\u6a21\u5f0f\u7684\u670d\u52a1\u5668\u4f20\u8f93\u5f97\u5230\uff09\uff0c \u5e76\u4e14\u4e4b\u524d\u5e76\u672a\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u4f7f\u7528\uff0c\u5219\u7528\u6237\u5e94\u4f7f\u7528 enable_bootstrap \u53c2\u6570 \u5728\u5f15\u5bfc\u6a21\u5f0f\u4e0b\u542f\u52a8\u670d\u52a1\u5668\u3002\u5728\u5f15\u5bfc\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u5728\u5c06\u65b0\u52a0\u5165\u7684\u670d\u52a1\u5668\u6dfb\u52a0\u5230\u5907\u4efd\u7ec4\u4e4b\u524d\u4f1a\u5c06\u81ea\u5df1\u7684 \u6570\u636e\u590d\u5236\u5230\u65b0\u670d\u52a1\u5668\u4e2d\uff0c\u4ee5\u4f7f\u6bcf\u4e2a\u670d\u52a1\u5668\u4e2d\u7684\u6570\u636e\u4fdd\u6301\u4e00\u81f4\u3002 \u542f\u52a8\u6709\u6570\u636e\u670d\u52a1\u5668\u7684\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 --enable_bootstrap true \u5176\u4ed6\u65e0\u6570\u636e\u7684\u670d\u52a1\u5668\u4e0d\u9700\u8981\u6307\u5b9a enable_bootstrap \u53c2\u6570\uff0c\u53ea\u9700\u901a\u8fc7 conf \u53c2\u6570\u6307\u5b9a leader \u5373\u53ef\uff0c\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 \u6a2a\u5411\u6269\u5c55\u5176\u4ed6\u670d\u52a1\u5668 \u542f\u52a8\u521d\u59cb\u5907\u4efd\u7ec4\u540e\uff0c\u5982\u679c\u60f3\u5bf9\u5907\u4efd\u7ec4\u8fdb\u884c\u6a2a\u5411\u6269\u5c55\uff0c\u8981\u5c06\u65b0\u670d\u52a1\u5668\u6dfb\u52a0\u5230\u5907\u4efd\u7ec4\uff0c \u5e94\u4f7f\u7528 --conf HOST\uff1aPORT \u9009\u9879\uff0c\u5176\u4e2d HOST \u53ef\u4ee5\u662f\u8be5\u5907\u4efd\u7ec4\u4e2d\u5df2\u6709\u7684\u4efb\u4f55\u670d\u52a1\u5668\u7684 IP \u5730\u5740\uff0c \u800c PORT \u662f\u5176 RPC \u7aef\u53e3\u3002\u4f8b\u5982\uff1a ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 \u6b64\u547d\u4ee4\u5c06\u542f\u52a8\u4e00\u53f0\u9ad8\u53ef\u7528\u6a21\u5f0f\u7684 TuGraph \u670d\u52a1\u5668\uff0c\u5e76\u5c1d\u8bd5\u5c06\u5176\u6dfb\u52a0\u5230\u5305\u542b\u670d\u52a1\u5668 172.22.224.15:9090 \u7684\u5907\u4efd\u7ec4\u4e2d\u3002 \u8bf7\u6ce8\u610f\uff0c\u52a0\u5165\u5907\u4efd\u7ec4\u9700\u8981\u670d\u52a1\u5668\u5c06\u5176\u6570\u636e\u4e0e\u5907\u4efd\u7ec4\u7684 leader \u670d\u52a1\u5668\u540c\u6b65\uff0c\u6b64\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u5927\u5c0f\u3002 \u505c\u6b62\u670d\u52a1\u5668 \u5f53\u670d\u52a1\u5668\u901a\u8fc7 CTRL-C \u4e0b\u7ebf\u65f6\uff0c\u5b83\u5c06\u901a\u77e5\u5f53\u524d\u7684 leader \u670d\u52a1\u5668\uff0c\u544a\u77e5\u5176\u4ece\u5907\u4efd\u7ec4\u4e2d\u5220\u9664\u8be5\u4e0b\u7ebf\u7684\u670d\u52a1\u5668\u3002\u5982\u679c leader \u670d\u52a1\u5668\u4e0b\u7ebf\uff0c \u5b83\u5c06\u5728\u4e0b\u7ebf\u524d\u5c06 leader \u8eab\u4efd\u6743\u9650\u4f20\u7ed9\u53e6\u4e00\u53f0\u670d\u52a1\u5668\u3002 \u5982\u679c\u670d\u52a1\u5668\u88ab\u7ec8\u6b62\u6216\u8005\u4e0e\u5907\u4efd\u7ec4\u4e2d\u7684\u5176\u4ed6\u670d\u52a1\u5668\u5931\u53bb\u8fde\u63a5\uff0c\u5219\u8be5\u670d\u52a1\u5668\u5c06\u88ab\u89c6\u4e3a\u5931\u8d25\u8282\u70b9\uff0c leader \u670d\u52a1\u5668\u5c06\u5728\u7279\u5b9a\u65f6\u9650\u540e\u5c06\u5176\u4ece\u5907\u4efd\u7ec4\u4e2d\u5220\u9664\u3002 \u5982\u679c\u4efb\u4f55\u670d\u52a1\u5668\u79bb\u5f00\u5907\u4efd\u7ec4\u5e76\u5e0c\u671b\u91cd\u65b0\u52a0\u5165\uff0c\u5219\u5fc5\u987b\u4ece --conf HOST:PORT \u9009\u9879\u5f00\u59cb\uff0c\u5176\u4e2d HOST \u662f\u5f53\u524d\u5907\u4efd\u7ec4\u4e2d\u7684\u67d0\u53f0\u670d\u52a1\u5668\u7684 IP \u5730\u5740\u3002 \u91cd\u542f\u670d\u52a1\u5668 \u4e0d\u5efa\u8bae\u91cd\u65b0\u542f\u52a8\u6574\u4e2a\u5907\u4efd\u7ec4\uff0c\u56e0\u4e3a\u5b83\u4f1a\u4e2d\u65ad\u670d\u52a1\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u5173\u95ed\u6240\u6709\u670d\u52a1\u5668\u3002\u4f46\u5728\u91cd\u65b0\u542f\u52a8\u65f6\uff0c \u5fc5\u987b\u4fdd\u8bc1\u5173\u95ed\u65f6\u7684\u5907\u4efd\u7ec4\u4e2d\u81f3\u5c11\u6709N/2+1\u7684\u670d\u52a1\u5668\u80fd\u6b63\u5e38\u542f\u52a8\uff0c\u5426\u5219\u542f\u52a8\u5931\u8d25\u3002 \u5e76\u4e14\uff0c \u65e0\u8bba\u521d\u59cb\u542f\u52a8\u590d\u5236\u7ec4\u65f6\u662f\u5426\u6307\u5b9a enable_bootstrap \u4e3atrue\uff0c\u91cd\u542f\u670d\u52a1\u5668\u65f6\u90fd\u53ea\u9700\u901a\u8fc7 \u6307\u5b9a --conf host1:port1,host2:port2 \u53c2\u6570\u4e00\u6b21\u6027\u91cd\u542f\u6240\u6709\u670d\u52a1\u5668\u5373\u53ef\uff0c\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090,172.22.224.16:9090,172.22.224.17:9090 \u67e5\u770b\u670d\u52a1\u5668\u72b6\u6001 \u5907\u4efd\u7ec4\u7684\u5f53\u524d\u72b6\u6001\u53ef\u4ee5\u5728 TuGraph \u53ef\u89c6\u5316\u5de5\u5177\u3001REST API \u4ee5\u53ca Cypher \u67e5\u8be2\u4e2d\u83b7\u53d6\u3002 \u5728 TuGraph \u53ef\u89c6\u5316\u5de5\u5177\u4e2d\uff0c\u53ef\u4ee5\u5728 DBInfo \u90e8\u5206\u4e2d\u627e\u5230\u5907\u4efd\u7ec4\u4e2d\u7684\u670d\u52a1\u5668\u53ca\u5176\u89d2\u8272\u5217\u8868\u3002 \u4f7f\u7528 REST API \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 GET /info/peers \u8bf7\u6c42\u83b7\u53d6\u4fe1\u606f\u3002 \u5728 Cypher \u4e2d\uff0c\u4f7f\u7528 CALL dbms.listServers() \u8bed\u53e5\u6765\u67e5\u8be2\u5f53\u524d\u5907\u4efd\u7ec4\u7684\u72b6\u6001\u4fe1\u606f\u3002 \u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u6570\u636e\u540c\u6b65\u95ee\u9898 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u540c\u4e00\u5907\u4efd\u7ec4\u4e2d\u7684\u4e0d\u540c\u670d\u52a1\u5668\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u5904\u4e8e\u76f8\u540c\u7684\u72b6\u6001\u3002\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u5982\u679c\u8bf7\u6c42\u5df2\u540c\u6b65\u5230\u8d85\u8fc7\u4e00\u534a\u7684\u670d\u52a1\u5668\uff0c\u5219 leader \u670d\u52a1\u5668\u5c06\u8ba4\u4e3a\u8be5\u8bf7\u6c42\u5c5e\u4e8e committed \u72b6\u6001\u3002\u5c3d\u7ba1\u5176\u4f59\u670d\u52a1\u5668\u6700\u7ec8\u5c06\u6536\u5230\u65b0\u8bf7\u6c42\uff0c\u4f46\u670d\u52a1\u5668\u7684\u72b6\u6001\u4e0d\u4e00\u81f4\u5c06\u6301\u7eed\u4e00\u6bb5\u65f6\u95f4\u3002\u5ba2\u6237\u7aef\u4e5f\u53ef\u80fd\u5411\u521a\u521a\u91cd\u65b0\u542f\u52a8\u7684\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u5177\u6709\u8f83\u65e7\u7684\u72b6\u6001\u3002 \u4e3a\u4e86\u786e\u4fdd\u5ba2\u6237\u7aef\u770b\u5230\u4e00\u81f4\u8fde\u7eed\u7684\u6570\u636e\uff0c\u7279\u522b\u662f\u4e3a\u4e86\u6446\u8131 \u53cd\u5411\u65f6\u95f4\u65c5\u884c \u95ee\u9898\uff08\u5176\u4e2d\u5ba2\u6237\u7aef\u8bfb\u53d6\u6bd4\u4ee5\u524d\u770b\u5230\u7684\u72b6\u6001\u66f4\u65e7\u7684\u72b6\u6001\uff09\uff0c\u6bcf\u4e2a TuGraph \u670d\u52a1\u5668\u90fd\u4f1a\u4fdd\u6301\u4e00\u4e2a\u5355\u8c03\u589e\u52a0\u7684\u6570\u636e\u7248\u672c\u53f7\u3002\u5907\u4efd\u7ec4\u4e2d\u6570\u636e\u7248\u672c\u53f7\u5230\u6570\u636e\u5e93\u72b6\u6001\u7684\u6620\u5c04\u5168\u5c40\u4e00\u81f4\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u4e24\u53f0\u670d\u52a1\u5668\u5177\u6709\u76f8\u540c\u7684\u6570\u636e\u7248\u672c\u53f7\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u6570\u636e\u3002\u54cd\u5e94\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u4e86\u5176\u6570\u636e\u7248\u672c\u53f7\u3002\u56e0\u6b64\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u77e5\u9053\u5b83\u770b\u5230\u4e86\u54ea\u4e2a\u7248\u672c\u3002\u5ba2\u6237\u7aef\u6536\u5230\u65e7\u7248\u672c\u7684\u6570\u636e\u4e4b\u540e\u53ef\u4ee5\u91cd\u65b0\u5411Master\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u83b7\u53d6\u5230\u6700\u65b0\u7684\u6570\u636e\u3002","title":"\u9ad8\u53ef\u7528\u6a21\u5f0f"},{"location":"zh-CN/2.operating/7.ha-mode/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86\u9ad8\u53ef\u7528\u6a21\u5f0f\u7684\u539f\u7406\u3001\u51c6\u5907\u5de5\u4f5c\u3001\u4ee5\u53ca\u670d\u52a1\u5668\u7684\u64cd\u4f5c\u8bf4\u660e","title":"\u90e8\u7f72\u9ad8\u53ef\u7528\u6a21\u5f0f"},{"location":"zh-CN/2.operating/7.ha-mode/#_2","text":"TuGraph \u901a\u8fc7\u591a\u673a\u70ed\u5907\u4efd\u6765\u63d0\u4f9b\u9ad8\u53ef\u7528\u6a21\u5f0f\uff08HA \u6a21\u5f0f\uff09\u3002\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u5199\u64cd\u4f5c\u4f1a\u88ab\u540c\u6b65\u5230\u6240\u6709\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u6837\u5373\u4f7f\u6709\u90e8\u5206\u670d\u52a1\u5668\u5b95\u673a\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u670d\u52a1\u7684\u53ef\u7528\u6027\u3002 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u591a\u4e2a TuGraph \u670d\u52a1\u5668\u7ec4\u6210\u4e00\u4e2a\u5907\u4efd\u7ec4\u3002\u6bcf\u4e2a\u5907\u4efd\u7ec4\u7531\u4e09\u4e2a\u6216\u66f4\u591a TuGraph \u670d\u52a1\u5668\u7ec4\u6210\uff0c\u5176\u4e2d\u67d0\u53f0\u670d\u52a1\u5668\u4f1a\u4f5c\u4e3a leader \uff0c\u800c\u5176\u4ed6\u590d\u5236\u7ec4\u670d\u52a1\u5668\u5219\u4f5c\u4e3a follower \u3002\u5199\u5165\u8bf7\u6c42\u7531 leader \u63d0\u4f9b\u670d\u52a1\uff0c\u8be5 leader \u5c06\u6bcf\u4e2a\u8bf7\u6c42\u590d\u5236\u540c\u6b65\u5230 follower \uff0c\u5e76\u5728\u8bf7\u6c42\u540c\u6b65\u5230\u670d\u52a1\u5668\u540e\u624d\u80fd\u54cd\u5e94\u5ba2\u6237\u7aef\u3002\u8fd9\u6837\uff0c\u5982\u679c\u4efb\u4f55\u670d\u52a1\u5668\u53d1\u751f\u6545\u969c\uff0c\u5176\u4ed6\u670d\u52a1\u5668\u4ecd\u5c06\u5177\u6709\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u5199\u5165\u7684\u6240\u6709\u6570\u636e\u3002\u5982\u679c leader \u670d\u52a1\u5668\u53d1\u751f\u6545\u969c\uff0c\u5176\u4ed6\u670d\u52a1\u5668\u5c06\u81ea\u52a8\u9009\u62e9\u51fa\u65b0\u7684 leader \u3002 \u9ad8\u53ef\u7528\u6a21\u5f0f\u4ec5\u4f01\u4e1a\u7248\u53ef\u7528\uff0c\u5f00\u6e90\u793e\u533a\u7248\u4e0d\u542b\u6b64\u529f\u80fd\u3002","title":"\u539f\u7406"},{"location":"zh-CN/2.operating/7.ha-mode/#_3","text":"\u8981\u542f\u7528\u9ad8\u53ef\u7528\u6a21\u5f0f\uff0c\u7528\u6237\u9700\u8981\uff1a \u4e09\u53f0\u53ca\u4ee5\u4e0a\u7684 TuGraph \u670d\u52a1\u5668\u5b9e\u4f8b\u3002 \u83b7\u5f97\u4e00\u4e2a\u5177\u6709\u9ad8\u53ef\u7528\u7684 license \u6587\u4ef6\uff0c\u5177\u4f53\u8bf7\u6d3d\u6211\u4eec\u7684\u7ecf\u9500\u5546\u3002 \u5728\u542f\u52a8 lgraph_server \u65f6\u6253\u5f00\u9ad8\u53ef\u7528\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6216\u8005\u547d\u4ee4\u884c\u5c06 enable_ha \u9009\u9879\u8bbe\u7f6e\u4e3a true \u3002 \u8bbe\u7f6e\u6b63\u786e\u7684 rpc_port \uff0c\u53ef\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6216\u8005\u547d\u4ee4\u884c\u8bbe\u7f6e\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"zh-CN/2.operating/7.ha-mode/#_4","text":"","title":"\u542f\u52a8\u521d\u59cb\u5907\u4efd\u7ec4"},{"location":"zh-CN/2.operating/7.ha-mode/#_5","text":"\u5f53\u542f\u52a8\u65f6\u6240\u6709\u670d\u52a1\u5668\u4e2d\u7684\u6570\u636e\u76f8\u540c\u6216\u6ca1\u6709\u6570\u636e\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 \u6307\u5b9a --conf host1:port1,host2:port2 \u542f\u52a8\u670d\u52a1\u5668\u3002 \u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5c06\u51c6\u5907\u597d\u7684\u6240\u6709TuGraph\u5b9e\u4f8b\u4e00\u6b21\u6027\u52a0\u5165\u521d\u59cb\u5907\u4efd\u7ec4\uff0c \u7531\u5907\u4efd\u7ec4\u4e2d\u7684\u6240\u6709\u670d\u52a1\u5668\u6839\u636eraft\u534f\u8bae\u9009\u4e3e\u51fa leader \uff0c\u5e76\u5c06\u5176\u4ed6 \u670d\u52a1\u5668\u4ee5 follower \u7684\u89d2\u8272\u52a0\u5165\u5907\u4efd\u7ec4\u3002 \u542f\u52a8\u521d\u59cb\u5907\u4efd\u7ec4\u7684\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090,172.22.224.16:9090,172.22.224.17:9090","title":"\u521d\u59cb\u6570\u636e\u4e00\u81f4"},{"location":"zh-CN/2.operating/7.ha-mode/#_6","text":"\u5982\u679c\u7b2c\u4e00\u53f0\u670d\u52a1\u5668\u4e2d\u5df2\u6709\u6570\u636e\uff08\u4ee5 lgraph_import \u5de5\u5177\u5bfc\u5165\u6216\u4ece\u975e\u9ad8\u53ef\u7528\u6a21\u5f0f\u7684\u670d\u52a1\u5668\u4f20\u8f93\u5f97\u5230\uff09\uff0c \u5e76\u4e14\u4e4b\u524d\u5e76\u672a\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u4f7f\u7528\uff0c\u5219\u7528\u6237\u5e94\u4f7f\u7528 enable_bootstrap \u53c2\u6570 \u5728\u5f15\u5bfc\u6a21\u5f0f\u4e0b\u542f\u52a8\u670d\u52a1\u5668\u3002\u5728\u5f15\u5bfc\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u5728\u5c06\u65b0\u52a0\u5165\u7684\u670d\u52a1\u5668\u6dfb\u52a0\u5230\u5907\u4efd\u7ec4\u4e4b\u524d\u4f1a\u5c06\u81ea\u5df1\u7684 \u6570\u636e\u590d\u5236\u5230\u65b0\u670d\u52a1\u5668\u4e2d\uff0c\u4ee5\u4f7f\u6bcf\u4e2a\u670d\u52a1\u5668\u4e2d\u7684\u6570\u636e\u4fdd\u6301\u4e00\u81f4\u3002 \u542f\u52a8\u6709\u6570\u636e\u670d\u52a1\u5668\u7684\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 --enable_bootstrap true \u5176\u4ed6\u65e0\u6570\u636e\u7684\u670d\u52a1\u5668\u4e0d\u9700\u8981\u6307\u5b9a enable_bootstrap \u53c2\u6570\uff0c\u53ea\u9700\u901a\u8fc7 conf \u53c2\u6570\u6307\u5b9a leader \u5373\u53ef\uff0c\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090","title":"\u521d\u59cb\u6570\u636e\u4e0d\u4e00\u81f4"},{"location":"zh-CN/2.operating/7.ha-mode/#_7","text":"\u542f\u52a8\u521d\u59cb\u5907\u4efd\u7ec4\u540e\uff0c\u5982\u679c\u60f3\u5bf9\u5907\u4efd\u7ec4\u8fdb\u884c\u6a2a\u5411\u6269\u5c55\uff0c\u8981\u5c06\u65b0\u670d\u52a1\u5668\u6dfb\u52a0\u5230\u5907\u4efd\u7ec4\uff0c \u5e94\u4f7f\u7528 --conf HOST\uff1aPORT \u9009\u9879\uff0c\u5176\u4e2d HOST \u53ef\u4ee5\u662f\u8be5\u5907\u4efd\u7ec4\u4e2d\u5df2\u6709\u7684\u4efb\u4f55\u670d\u52a1\u5668\u7684 IP \u5730\u5740\uff0c \u800c PORT \u662f\u5176 RPC \u7aef\u53e3\u3002\u4f8b\u5982\uff1a ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090 \u6b64\u547d\u4ee4\u5c06\u542f\u52a8\u4e00\u53f0\u9ad8\u53ef\u7528\u6a21\u5f0f\u7684 TuGraph \u670d\u52a1\u5668\uff0c\u5e76\u5c1d\u8bd5\u5c06\u5176\u6dfb\u52a0\u5230\u5305\u542b\u670d\u52a1\u5668 172.22.224.15:9090 \u7684\u5907\u4efd\u7ec4\u4e2d\u3002 \u8bf7\u6ce8\u610f\uff0c\u52a0\u5165\u5907\u4efd\u7ec4\u9700\u8981\u670d\u52a1\u5668\u5c06\u5176\u6570\u636e\u4e0e\u5907\u4efd\u7ec4\u7684 leader \u670d\u52a1\u5668\u540c\u6b65\uff0c\u6b64\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u5927\u5c0f\u3002","title":"\u6a2a\u5411\u6269\u5c55\u5176\u4ed6\u670d\u52a1\u5668"},{"location":"zh-CN/2.operating/7.ha-mode/#_8","text":"\u5f53\u670d\u52a1\u5668\u901a\u8fc7 CTRL-C \u4e0b\u7ebf\u65f6\uff0c\u5b83\u5c06\u901a\u77e5\u5f53\u524d\u7684 leader \u670d\u52a1\u5668\uff0c\u544a\u77e5\u5176\u4ece\u5907\u4efd\u7ec4\u4e2d\u5220\u9664\u8be5\u4e0b\u7ebf\u7684\u670d\u52a1\u5668\u3002\u5982\u679c leader \u670d\u52a1\u5668\u4e0b\u7ebf\uff0c \u5b83\u5c06\u5728\u4e0b\u7ebf\u524d\u5c06 leader \u8eab\u4efd\u6743\u9650\u4f20\u7ed9\u53e6\u4e00\u53f0\u670d\u52a1\u5668\u3002 \u5982\u679c\u670d\u52a1\u5668\u88ab\u7ec8\u6b62\u6216\u8005\u4e0e\u5907\u4efd\u7ec4\u4e2d\u7684\u5176\u4ed6\u670d\u52a1\u5668\u5931\u53bb\u8fde\u63a5\uff0c\u5219\u8be5\u670d\u52a1\u5668\u5c06\u88ab\u89c6\u4e3a\u5931\u8d25\u8282\u70b9\uff0c leader \u670d\u52a1\u5668\u5c06\u5728\u7279\u5b9a\u65f6\u9650\u540e\u5c06\u5176\u4ece\u5907\u4efd\u7ec4\u4e2d\u5220\u9664\u3002 \u5982\u679c\u4efb\u4f55\u670d\u52a1\u5668\u79bb\u5f00\u5907\u4efd\u7ec4\u5e76\u5e0c\u671b\u91cd\u65b0\u52a0\u5165\uff0c\u5219\u5fc5\u987b\u4ece --conf HOST:PORT \u9009\u9879\u5f00\u59cb\uff0c\u5176\u4e2d HOST \u662f\u5f53\u524d\u5907\u4efd\u7ec4\u4e2d\u7684\u67d0\u53f0\u670d\u52a1\u5668\u7684 IP \u5730\u5740\u3002","title":"\u505c\u6b62\u670d\u52a1\u5668"},{"location":"zh-CN/2.operating/7.ha-mode/#_9","text":"\u4e0d\u5efa\u8bae\u91cd\u65b0\u542f\u52a8\u6574\u4e2a\u5907\u4efd\u7ec4\uff0c\u56e0\u4e3a\u5b83\u4f1a\u4e2d\u65ad\u670d\u52a1\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u5173\u95ed\u6240\u6709\u670d\u52a1\u5668\u3002\u4f46\u5728\u91cd\u65b0\u542f\u52a8\u65f6\uff0c \u5fc5\u987b\u4fdd\u8bc1\u5173\u95ed\u65f6\u7684\u5907\u4efd\u7ec4\u4e2d\u81f3\u5c11\u6709N/2+1\u7684\u670d\u52a1\u5668\u80fd\u6b63\u5e38\u542f\u52a8\uff0c\u5426\u5219\u542f\u52a8\u5931\u8d25\u3002 \u5e76\u4e14\uff0c \u65e0\u8bba\u521d\u59cb\u542f\u52a8\u590d\u5236\u7ec4\u65f6\u662f\u5426\u6307\u5b9a enable_bootstrap \u4e3atrue\uff0c\u91cd\u542f\u670d\u52a1\u5668\u65f6\u90fd\u53ea\u9700\u901a\u8fc7 \u6307\u5b9a --conf host1:port1,host2:port2 \u53c2\u6570\u4e00\u6b21\u6027\u91cd\u542f\u6240\u6709\u670d\u52a1\u5668\u5373\u53ef\uff0c\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a $ ./lgraph_server -c lgraph.json --rpc_port 9090 --enable_ha true --conf 172.22.224.15:9090,172.22.224.16:9090,172.22.224.17:9090","title":"\u91cd\u542f\u670d\u52a1\u5668"},{"location":"zh-CN/2.operating/7.ha-mode/#_10","text":"\u5907\u4efd\u7ec4\u7684\u5f53\u524d\u72b6\u6001\u53ef\u4ee5\u5728 TuGraph \u53ef\u89c6\u5316\u5de5\u5177\u3001REST API \u4ee5\u53ca Cypher \u67e5\u8be2\u4e2d\u83b7\u53d6\u3002 \u5728 TuGraph \u53ef\u89c6\u5316\u5de5\u5177\u4e2d\uff0c\u53ef\u4ee5\u5728 DBInfo \u90e8\u5206\u4e2d\u627e\u5230\u5907\u4efd\u7ec4\u4e2d\u7684\u670d\u52a1\u5668\u53ca\u5176\u89d2\u8272\u5217\u8868\u3002 \u4f7f\u7528 REST API \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 GET /info/peers \u8bf7\u6c42\u83b7\u53d6\u4fe1\u606f\u3002 \u5728 Cypher \u4e2d\uff0c\u4f7f\u7528 CALL dbms.listServers() \u8bed\u53e5\u6765\u67e5\u8be2\u5f53\u524d\u5907\u4efd\u7ec4\u7684\u72b6\u6001\u4fe1\u606f\u3002","title":"\u67e5\u770b\u670d\u52a1\u5668\u72b6\u6001"},{"location":"zh-CN/2.operating/7.ha-mode/#_11","text":"\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u540c\u4e00\u5907\u4efd\u7ec4\u4e2d\u7684\u4e0d\u540c\u670d\u52a1\u5668\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u5904\u4e8e\u76f8\u540c\u7684\u72b6\u6001\u3002\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u5982\u679c\u8bf7\u6c42\u5df2\u540c\u6b65\u5230\u8d85\u8fc7\u4e00\u534a\u7684\u670d\u52a1\u5668\uff0c\u5219 leader \u670d\u52a1\u5668\u5c06\u8ba4\u4e3a\u8be5\u8bf7\u6c42\u5c5e\u4e8e committed \u72b6\u6001\u3002\u5c3d\u7ba1\u5176\u4f59\u670d\u52a1\u5668\u6700\u7ec8\u5c06\u6536\u5230\u65b0\u8bf7\u6c42\uff0c\u4f46\u670d\u52a1\u5668\u7684\u72b6\u6001\u4e0d\u4e00\u81f4\u5c06\u6301\u7eed\u4e00\u6bb5\u65f6\u95f4\u3002\u5ba2\u6237\u7aef\u4e5f\u53ef\u80fd\u5411\u521a\u521a\u91cd\u65b0\u542f\u52a8\u7684\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u5177\u6709\u8f83\u65e7\u7684\u72b6\u6001\u3002 \u4e3a\u4e86\u786e\u4fdd\u5ba2\u6237\u7aef\u770b\u5230\u4e00\u81f4\u8fde\u7eed\u7684\u6570\u636e\uff0c\u7279\u522b\u662f\u4e3a\u4e86\u6446\u8131 \u53cd\u5411\u65f6\u95f4\u65c5\u884c \u95ee\u9898\uff08\u5176\u4e2d\u5ba2\u6237\u7aef\u8bfb\u53d6\u6bd4\u4ee5\u524d\u770b\u5230\u7684\u72b6\u6001\u66f4\u65e7\u7684\u72b6\u6001\uff09\uff0c\u6bcf\u4e2a TuGraph \u670d\u52a1\u5668\u90fd\u4f1a\u4fdd\u6301\u4e00\u4e2a\u5355\u8c03\u589e\u52a0\u7684\u6570\u636e\u7248\u672c\u53f7\u3002\u5907\u4efd\u7ec4\u4e2d\u6570\u636e\u7248\u672c\u53f7\u5230\u6570\u636e\u5e93\u72b6\u6001\u7684\u6620\u5c04\u5168\u5c40\u4e00\u81f4\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u4e24\u53f0\u670d\u52a1\u5668\u5177\u6709\u76f8\u540c\u7684\u6570\u636e\u7248\u672c\u53f7\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u6570\u636e\u3002\u54cd\u5e94\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u4e86\u5176\u6570\u636e\u7248\u672c\u53f7\u3002\u56e0\u6b64\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u77e5\u9053\u5b83\u770b\u5230\u4e86\u54ea\u4e2a\u7248\u672c\u3002\u5ba2\u6237\u7aef\u6536\u5230\u65e7\u7248\u672c\u7684\u6570\u636e\u4e4b\u540e\u53ef\u4ee5\u91cd\u65b0\u5411Master\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u83b7\u53d6\u5230\u6700\u65b0\u7684\u6570\u636e\u3002","title":"\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u6570\u636e\u540c\u6b65\u95ee\u9898"},{"location":"zh-CN/2.operating/8.manage-database/","text":"\u6570\u636e\u5e93\u7ba1\u7406 \u6570\u636e\u5e93\u7ba1\u7406 \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f\u6570\u636e\u5e93\u7ba1\u7406\u7684\u5e38\u7528\u529f\u80fd\uff0c\u4f8b\u5982\uff1a\u65e5\u5fd7\u4fe1\u606f\u3001\u6570\u636e\u5bfc\u51fa\u3001\u6570\u636e\u5907\u4efd\u3001\u6570\u636e\u9884\u70ed\u7b49\u64cd\u4f5c \u65e5\u5fd7\u4fe1\u606f TuGraph \u4fdd\u7559\u4e24\u79cd\u7c7b\u578b\u7684\u65e5\u5fd7\uff1a\u670d\u52a1\u5668\u65e5\u5fd7\u548c\u5ba1\u8ba1\u65e5\u5fd7\u3002\u670d\u52a1\u5668\u65e5\u5fd7\u8bb0\u5f55\u4eba\u4e3a\u53ef\u8bfb\u7684\u670d\u52a1\u5668\u72b6\u6001\u4fe1\u606f\uff0c\u800c\u5ba1\u6838\u65e5\u5fd7\u7ef4\u62a4\u670d\u52a1\u5668\u4e0a\u6267\u884c\u7684\u6bcf\u4e2a\u64cd\u4f5c\u52a0\u5bc6\u540e\u7684\u4fe1\u606f\u3002 \u670d\u52a1\u5668\u65e5\u5fd7 \u670d\u52a1\u5668\u65e5\u5fd7\u4f1a\u8ddf\u8e2a\u670d\u52a1\u5668\u7684\u72b6\u6001\u4fe1\u606f\uff08\u5982\u670d\u52a1\u5668\u542f\u52a8\u548c\u505c\u6b62\u7b49\uff09\u4ee5\u53ca\u670d\u52a1\u5668\u5df2\u63d0\u4f9b\u7684\u8bf7\u6c42\u53ca\u5176\u76f8\u5e94\u7684\u54cd\u5e94\u3002\u670d\u52a1\u5668\u65e5\u5fd7\u7684\u8be6\u7ec6\u7a0b\u5ea6\u53ef\u901a\u8fc7 verbose \u9009\u9879\u8fdb\u884c\u914d\u7f6e\u3002\u65e5\u5fd7\u7684\u4f4d\u7f6e\u5728 log_dir \u9009\u9879\u4e2d\u6307\u5b9a\u3002 \u9ed8\u8ba4\u7684 verbose \u7b49\u7ea7\u4e3a 1 \uff0c\u6b64\u7b49\u7ea7\u4e0b\uff0c\u670d\u52a1\u5668\u5c06\u4ec5\u6253\u5370\u4e3b\u8981\u4e8b\u4ef6\u7684\u65e5\u5fd7\uff0c\u5982\u670d\u52a1\u5668\u542f\u52a8/\u505c\u6b62\u3002\u8bf7\u6c42\u548c\u54cd\u5e94\u4e0d\u4f1a\u8bb0\u5f55\u5728\u6b64\u7ea7\u522b\u3002 \u5ba1\u8ba1\u65e5\u5fd7 \u5ba1\u6838\u65e5\u5fd7\u8bb0\u5f55\u6bcf\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u4ee5\u53ca\u53d1\u9001\u8bf7\u6c42\u7684\u7528\u6237\u4ee5\u53ca\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u95f4\u3002\u5ba1\u6838\u65e5\u5fd7\u53ea\u80fd\u662f\u6253\u5f00\u6216\u5173\u95ed\u72b6\u6001\u3002\u53ef\u4ee5\u4f7f\u7528 TuGraph \u53ef\u89c6\u5316\u5de5\u5177\u548c REST API \u67e5\u8be2\u7ed3\u679c\u3002 \u6570\u636e\u5bfc\u51fa TuGraph \u53ef\u4ee5\u901a\u8fc7 lgraph_export \u5de5\u5177\u6765\u5bf9\u5df2\u7ecf\u5bfc\u5165\u6210\u529f\u7684\u6570\u636e\u5e93\u8fdb\u884c\u6570\u636e\u5bfc\u51fa\u3002 lgraph_export \u5de5\u5177\u53ef\u4ee5\u5c06\u6307\u5b9a TuGraph \u6570\u636e\u5e93\u7684\u6570\u636e\u4ee5 csv \u6216\u8005 json \u6587\u4ef6\u5f62\u5f0f\u5bfc\u51fa\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u540c\u65f6\u5bfc\u51fa\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u518d\u5bfc\u5165\u65f6\u9700\u8981\u7684\u914d\u7f6e\u6587\u4ef6 import.config \uff0c\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 \u914d\u7f6e\u6587\u4ef6 \u3002 \u8be5\u5de5\u5177\u7684\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\uff1a $ lgraph_export -d {database_dir} -e {export_destination_dir} -g {graph_to_use} -u {username} -p {password} -f {output_format} \u5176\u4e2d\uff1a -d {database_dir} \u6307\u5b9a\u9700\u8981\u8fdb\u884c\u6570\u636e\u5bfc\u51fa\u7684\u6570\u636e\u5e93\u6240\u5728\u76ee\u5f55\uff0c\u9ed8\u8ba4\u503c\u4e3a ./testdb \u3002 -e {export_destination_dir} \u6307\u5b9a\u5bfc\u51fa\u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u503c\u4e3a ./exportdir \u3002 -g {graph_to_use} \u6307\u5b9a\u56fe\u6570\u636e\u5e93\u7684\u79cd\u7c7b\uff0c\u9ed8\u8ba4\u4e3a default \u3002 -u {username} \u6307\u5b9a\u8fdb\u884c\u8be5\u5bfc\u51fa\u64cd\u4f5c\u7684\u7528\u6237\u7684\u7528\u6237\u540d\u3002 -p {password} \u6307\u5b9a\u8fdb\u884c\u8be5\u5bfc\u51fa\u64cd\u4f5c\u7684\u7528\u6237\u7684\u7528\u6237\u5bc6\u7801\u3002 -s {field_separator} \u6307\u5b9a\u5bfc\u51fa\u6587\u4ef6\u7684\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u9017\u53f7\u3002 -f {output_format} \u6307\u5b9a\u5bfc\u51fa\u6570\u636e\u7684\u683c\u5f0f\uff0c json \u6216\u8005 csv \uff0c\u9ed8\u8ba4\u4e3a csv \u3002 -h \u9664\u4e0a\u8ff0\u6307\u5b9a\u53c2\u6570\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8be5\u53c2\u6570\u67e5\u770b\u8be5\u5de5\u5177\u7684\u4f7f\u7528\u5e2e\u52a9\u3002 \u6570\u636e\u5907\u4efd TuGraph \u53ef\u4ee5\u901a\u8fc7 lgraph_backup \u5de5\u5177\u6765\u8fdb\u884c\u6570\u636e\u5907\u4efd\u3002 lgraph_backup \u5de5\u5177\u53ef\u4ee5\u5c06\u4e00\u4e2a TuGraph \u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5907\u4efd\u5230\u53e6\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff0c\u5b83\u7684\u7528\u6cd5\u5982\u4e0b\uff1a $ lgraph_backup -s {source_dir} -d {destination_dir} -c {true/false} \u5176\u4e2d\uff1a -s {source_dir} \u6307\u5b9a\u9700\u8981\u5907\u4efd\u7684\u6570\u636e\u5e93\uff08\u6e90\u6570\u636e\u5e93\uff09\u6240\u5728\u76ee\u5f55\u3002 -d {destination_dir} \u6307\u5b9a\u5907\u4efd\u6587\u4ef6\uff08\u76ee\u6807\u6570\u636e\u5e93\uff09\u6240\u5728\u76ee\u5f55\u3002 \u5982\u679c\u76ee\u6807\u6570\u636e\u5e93\u4e0d\u4e3a\u7a7a\uff0c lgraph_backup \u4f1a\u63d0\u793a\u662f\u5426\u8986\u76d6\u8be5\u6570\u636e\u5e93\u3002 -c {true/false} \u6307\u660e\u662f\u5426\u5728\u5907\u4efd\u8fc7\u7a0b\u4e2d\u8fdb\u884c compaction\u3002 compaction \u80fd\u4f7f\u4ea7\u751f\u7684\u5907\u4efd\u6587\u4ef6\u66f4\u7d27\u51d1\uff0c\u4f46\u5907\u4efd\u65f6\u95f4\u4e5f\u4f1a\u53d8\u957f\u3002\u8be5\u9009\u9879\u9ed8\u8ba4\u4e3a true \u3002 \u6570\u636e\u9884\u70ed TuGraph \u662f\u57fa\u4e8e\u78c1\u76d8\u7684\u6570\u636e\u5e93\uff0c\u4ec5\u5f53\u8bbf\u95ee\u6570\u636e\u65f6\uff0c\u6570\u636e\u624d\u4f1a\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u56e0\u6b64\u5728\u670d\u52a1\u5668\u521a\u5f00\u542f\u540e\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u7cfb\u7edf\u6027\u80fd\u53ef\u80fd\u4f1a\u7531\u4e8e\u9891\u7e41\u7684 IO \u64cd\u4f5c\u800c\u53d8\u5dee\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e8b\u5148\u8fdb\u884c\u6570\u636e\u9884\u70ed\u6765\u6539\u5584\u8fd9\u4e00\u95ee\u9898\u3002 \u6570\u636e\u9884\u70ed\u53ef\u4ee5\u901a\u8fc7\u5de5\u5177 lgraph_warmup \u6765\u8fdb\u884c\u3002\u5b83\u7684\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a $ lgraph_warmup -d {directory} -g {graph_list} \u5176\u4e2d\uff1a -d {db_dir} \u9009\u9879\u6307\u5b9a\u4e86 TuGraph \u670d\u52a1\u5668\u7684\u6570\u636e\u76ee\u5f55 -g {graph_list} \u9009\u9879\u6307\u5b9a\u9700\u8981\u8fdb\u884c\u6570\u636e\u9884\u70ed\u7684\u56fe\u540d\u79f0\uff0c\u7528\u9017\u53f7\u5206\u9694 \u6839\u636e\u6570\u636e\u5927\u5c0f\u548c\u6240\u4f7f\u7528\u7684\u78c1\u76d8\u7c7b\u578b\u4e0d\u540c\uff0c\u9884\u70ed\u8fc7\u7a0b\u8fd0\u884c\u65f6\u95f4\u4e5f\u4e0d\u540c\u3002\u673a\u68b0\u78c1\u76d8\u4e0a\u9884\u70ed\u4e00\u4e2a\u5927\u6570\u636e\u5e93\u53ef\u80fd\u8017\u65f6\u8f83\u957f\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002","title":"\u7ba1\u7406\u6570\u636e\u5e93"},{"location":"zh-CN/2.operating/8.manage-database/#_1","text":"","title":"\u6570\u636e\u5e93\u7ba1\u7406"},{"location":"zh-CN/2.operating/8.manage-database/#_2","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f\u6570\u636e\u5e93\u7ba1\u7406\u7684\u5e38\u7528\u529f\u80fd\uff0c\u4f8b\u5982\uff1a\u65e5\u5fd7\u4fe1\u606f\u3001\u6570\u636e\u5bfc\u51fa\u3001\u6570\u636e\u5907\u4efd\u3001\u6570\u636e\u9884\u70ed\u7b49\u64cd\u4f5c","title":"\u6570\u636e\u5e93\u7ba1\u7406"},{"location":"zh-CN/2.operating/8.manage-database/#_3","text":"TuGraph \u4fdd\u7559\u4e24\u79cd\u7c7b\u578b\u7684\u65e5\u5fd7\uff1a\u670d\u52a1\u5668\u65e5\u5fd7\u548c\u5ba1\u8ba1\u65e5\u5fd7\u3002\u670d\u52a1\u5668\u65e5\u5fd7\u8bb0\u5f55\u4eba\u4e3a\u53ef\u8bfb\u7684\u670d\u52a1\u5668\u72b6\u6001\u4fe1\u606f\uff0c\u800c\u5ba1\u6838\u65e5\u5fd7\u7ef4\u62a4\u670d\u52a1\u5668\u4e0a\u6267\u884c\u7684\u6bcf\u4e2a\u64cd\u4f5c\u52a0\u5bc6\u540e\u7684\u4fe1\u606f\u3002","title":"\u65e5\u5fd7\u4fe1\u606f"},{"location":"zh-CN/2.operating/8.manage-database/#_4","text":"\u670d\u52a1\u5668\u65e5\u5fd7\u4f1a\u8ddf\u8e2a\u670d\u52a1\u5668\u7684\u72b6\u6001\u4fe1\u606f\uff08\u5982\u670d\u52a1\u5668\u542f\u52a8\u548c\u505c\u6b62\u7b49\uff09\u4ee5\u53ca\u670d\u52a1\u5668\u5df2\u63d0\u4f9b\u7684\u8bf7\u6c42\u53ca\u5176\u76f8\u5e94\u7684\u54cd\u5e94\u3002\u670d\u52a1\u5668\u65e5\u5fd7\u7684\u8be6\u7ec6\u7a0b\u5ea6\u53ef\u901a\u8fc7 verbose \u9009\u9879\u8fdb\u884c\u914d\u7f6e\u3002\u65e5\u5fd7\u7684\u4f4d\u7f6e\u5728 log_dir \u9009\u9879\u4e2d\u6307\u5b9a\u3002 \u9ed8\u8ba4\u7684 verbose \u7b49\u7ea7\u4e3a 1 \uff0c\u6b64\u7b49\u7ea7\u4e0b\uff0c\u670d\u52a1\u5668\u5c06\u4ec5\u6253\u5370\u4e3b\u8981\u4e8b\u4ef6\u7684\u65e5\u5fd7\uff0c\u5982\u670d\u52a1\u5668\u542f\u52a8/\u505c\u6b62\u3002\u8bf7\u6c42\u548c\u54cd\u5e94\u4e0d\u4f1a\u8bb0\u5f55\u5728\u6b64\u7ea7\u522b\u3002","title":"\u670d\u52a1\u5668\u65e5\u5fd7"},{"location":"zh-CN/2.operating/8.manage-database/#_5","text":"\u5ba1\u6838\u65e5\u5fd7\u8bb0\u5f55\u6bcf\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u4ee5\u53ca\u53d1\u9001\u8bf7\u6c42\u7684\u7528\u6237\u4ee5\u53ca\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u95f4\u3002\u5ba1\u6838\u65e5\u5fd7\u53ea\u80fd\u662f\u6253\u5f00\u6216\u5173\u95ed\u72b6\u6001\u3002\u53ef\u4ee5\u4f7f\u7528 TuGraph \u53ef\u89c6\u5316\u5de5\u5177\u548c REST API \u67e5\u8be2\u7ed3\u679c\u3002","title":"\u5ba1\u8ba1\u65e5\u5fd7"},{"location":"zh-CN/2.operating/8.manage-database/#_6","text":"TuGraph \u53ef\u4ee5\u901a\u8fc7 lgraph_export \u5de5\u5177\u6765\u5bf9\u5df2\u7ecf\u5bfc\u5165\u6210\u529f\u7684\u6570\u636e\u5e93\u8fdb\u884c\u6570\u636e\u5bfc\u51fa\u3002 lgraph_export \u5de5\u5177\u53ef\u4ee5\u5c06\u6307\u5b9a TuGraph \u6570\u636e\u5e93\u7684\u6570\u636e\u4ee5 csv \u6216\u8005 json \u6587\u4ef6\u5f62\u5f0f\u5bfc\u51fa\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u540c\u65f6\u5bfc\u51fa\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u518d\u5bfc\u5165\u65f6\u9700\u8981\u7684\u914d\u7f6e\u6587\u4ef6 import.config \uff0c\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 \u914d\u7f6e\u6587\u4ef6 \u3002 \u8be5\u5de5\u5177\u7684\u547d\u4ee4\u793a\u4f8b\u5982\u4e0b\uff1a $ lgraph_export -d {database_dir} -e {export_destination_dir} -g {graph_to_use} -u {username} -p {password} -f {output_format} \u5176\u4e2d\uff1a -d {database_dir} \u6307\u5b9a\u9700\u8981\u8fdb\u884c\u6570\u636e\u5bfc\u51fa\u7684\u6570\u636e\u5e93\u6240\u5728\u76ee\u5f55\uff0c\u9ed8\u8ba4\u503c\u4e3a ./testdb \u3002 -e {export_destination_dir} \u6307\u5b9a\u5bfc\u51fa\u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u503c\u4e3a ./exportdir \u3002 -g {graph_to_use} \u6307\u5b9a\u56fe\u6570\u636e\u5e93\u7684\u79cd\u7c7b\uff0c\u9ed8\u8ba4\u4e3a default \u3002 -u {username} \u6307\u5b9a\u8fdb\u884c\u8be5\u5bfc\u51fa\u64cd\u4f5c\u7684\u7528\u6237\u7684\u7528\u6237\u540d\u3002 -p {password} \u6307\u5b9a\u8fdb\u884c\u8be5\u5bfc\u51fa\u64cd\u4f5c\u7684\u7528\u6237\u7684\u7528\u6237\u5bc6\u7801\u3002 -s {field_separator} \u6307\u5b9a\u5bfc\u51fa\u6587\u4ef6\u7684\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u9017\u53f7\u3002 -f {output_format} \u6307\u5b9a\u5bfc\u51fa\u6570\u636e\u7684\u683c\u5f0f\uff0c json \u6216\u8005 csv \uff0c\u9ed8\u8ba4\u4e3a csv \u3002 -h \u9664\u4e0a\u8ff0\u6307\u5b9a\u53c2\u6570\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8be5\u53c2\u6570\u67e5\u770b\u8be5\u5de5\u5177\u7684\u4f7f\u7528\u5e2e\u52a9\u3002","title":"\u6570\u636e\u5bfc\u51fa"},{"location":"zh-CN/2.operating/8.manage-database/#_7","text":"TuGraph \u53ef\u4ee5\u901a\u8fc7 lgraph_backup \u5de5\u5177\u6765\u8fdb\u884c\u6570\u636e\u5907\u4efd\u3002 lgraph_backup \u5de5\u5177\u53ef\u4ee5\u5c06\u4e00\u4e2a TuGraph \u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5907\u4efd\u5230\u53e6\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff0c\u5b83\u7684\u7528\u6cd5\u5982\u4e0b\uff1a $ lgraph_backup -s {source_dir} -d {destination_dir} -c {true/false} \u5176\u4e2d\uff1a -s {source_dir} \u6307\u5b9a\u9700\u8981\u5907\u4efd\u7684\u6570\u636e\u5e93\uff08\u6e90\u6570\u636e\u5e93\uff09\u6240\u5728\u76ee\u5f55\u3002 -d {destination_dir} \u6307\u5b9a\u5907\u4efd\u6587\u4ef6\uff08\u76ee\u6807\u6570\u636e\u5e93\uff09\u6240\u5728\u76ee\u5f55\u3002 \u5982\u679c\u76ee\u6807\u6570\u636e\u5e93\u4e0d\u4e3a\u7a7a\uff0c lgraph_backup \u4f1a\u63d0\u793a\u662f\u5426\u8986\u76d6\u8be5\u6570\u636e\u5e93\u3002 -c {true/false} \u6307\u660e\u662f\u5426\u5728\u5907\u4efd\u8fc7\u7a0b\u4e2d\u8fdb\u884c compaction\u3002 compaction \u80fd\u4f7f\u4ea7\u751f\u7684\u5907\u4efd\u6587\u4ef6\u66f4\u7d27\u51d1\uff0c\u4f46\u5907\u4efd\u65f6\u95f4\u4e5f\u4f1a\u53d8\u957f\u3002\u8be5\u9009\u9879\u9ed8\u8ba4\u4e3a true \u3002","title":"\u6570\u636e\u5907\u4efd"},{"location":"zh-CN/2.operating/8.manage-database/#_8","text":"TuGraph \u662f\u57fa\u4e8e\u78c1\u76d8\u7684\u6570\u636e\u5e93\uff0c\u4ec5\u5f53\u8bbf\u95ee\u6570\u636e\u65f6\uff0c\u6570\u636e\u624d\u4f1a\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u56e0\u6b64\u5728\u670d\u52a1\u5668\u521a\u5f00\u542f\u540e\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u7cfb\u7edf\u6027\u80fd\u53ef\u80fd\u4f1a\u7531\u4e8e\u9891\u7e41\u7684 IO \u64cd\u4f5c\u800c\u53d8\u5dee\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e8b\u5148\u8fdb\u884c\u6570\u636e\u9884\u70ed\u6765\u6539\u5584\u8fd9\u4e00\u95ee\u9898\u3002 \u6570\u636e\u9884\u70ed\u53ef\u4ee5\u901a\u8fc7\u5de5\u5177 lgraph_warmup \u6765\u8fdb\u884c\u3002\u5b83\u7684\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a $ lgraph_warmup -d {directory} -g {graph_list} \u5176\u4e2d\uff1a -d {db_dir} \u9009\u9879\u6307\u5b9a\u4e86 TuGraph \u670d\u52a1\u5668\u7684\u6570\u636e\u76ee\u5f55 -g {graph_list} \u9009\u9879\u6307\u5b9a\u9700\u8981\u8fdb\u884c\u6570\u636e\u9884\u70ed\u7684\u56fe\u540d\u79f0\uff0c\u7528\u9017\u53f7\u5206\u9694 \u6839\u636e\u6570\u636e\u5927\u5c0f\u548c\u6240\u4f7f\u7528\u7684\u78c1\u76d8\u7c7b\u578b\u4e0d\u540c\uff0c\u9884\u70ed\u8fc7\u7a0b\u8fd0\u884c\u65f6\u95f4\u4e5f\u4e0d\u540c\u3002\u673a\u68b0\u78c1\u76d8\u4e0a\u9884\u70ed\u4e00\u4e2a\u5927\u6570\u636e\u5e93\u53ef\u80fd\u8017\u65f6\u8f83\u957f\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002","title":"\u6570\u636e\u9884\u70ed"},{"location":"zh-CN/2.operating/9.privilege/","text":"\u7528\u6237\u6743\u9650\u7ba1\u7406 \u4ecb\u7ecd TuGraph \u7684\u6743\u9650\u662f\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\u8fdb\u884c\u7ba1\u7406\uff0c\u5b9a\u4e49\u8bbf\u95ee\u63a7\u5236\u7684\u6743\u9650\u5206\u914d\u7ed9\u89d2\u8272\uff0c\u89d2\u8272\u518d\u5206\u914d\u7ed9\u7528\u6237\u3002 \u6743\u9650\u5c42\u7ea7 Global \u5c42\uff1a\u5373\u5168\u5c40\u6743\u9650\uff0c\u5bf9\u7ba1\u7406\u3001\u56fe\u64cd\u4f5c\u5747\u6709\u6743\u9650\uff1b Graph \u5c42\uff1a\u5373\u56fe\u7ea7\u522b\uff0c\u5bf9\u6bcf\u4e2a\u56fe\u7684\u6743\u9650\uff1b \uff08\u4ec5\u5546\u4e1a\u5316\u7248\u672c\u652f\u6301\uff09Property \u5c42\uff1a\u5373\u5c5e\u6027\u7ea7\u522b\uff0c\u5bf9\u67d0\u4e2a\u5c5e\u6027\u7684\u6743\u9650\u63a7\u5236 \u6743\u9650\u5173\u952e\u5b57 \u76ee\u524d\u6743\u9650\u7684\u63a7\u5236\u8f83\u4e3a\u7b80\u6d01 Global \u5c42\u76ee\u524d\u4e3a admin \u6743\u9650\uff0c\u5e76\u4e14\u9884\u7f6e\u4e86 admin \u7528\u6237\uff1b Graph \u5c42\u7684\u64cd\u4f5c\u6743\u9650\u5206\u4e3a\u56db\u79cd\uff1anone\uff0cread\uff0cwrite\uff0cfull none\uff1a\u65e0\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u6743\u9650 read\uff1a\u53ea\u8bfb\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u53ea\u5177\u5907\u8bfb\u53d6\u6743\u9650 write\uff1a\u8bfb\u5199\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u4e0d\u4ec5\u5177\u5907\u8bfb\u53d6\u6743\u9650\uff0c\u8fd8\u5177\u5907\u4e86\u5199\u5165\u7684\u6743\u9650 full\uff1a\u6240\u6709\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u4e0d\u4ec5\u5177\u5907\u8bfb\u5199\u6743\u9650\uff0c\u540c\u65f6\u4e5f\u5177\u5907\u5220\u9664\u56fe\u3001\u4fee\u6539\u56fe\u3001\u4fee\u6539 Schema \u7b49\u6743\u9650 \uff08\u4ec5\u5546\u4e1a\u5316\u7248\u672c\u652f\u6301\uff09Property \u5c42\u7684\u6743\u9650\u5206\u522b\u4e3a\uff1anone\uff0cread\uff0cwrite none\uff1a\u65e0\u6743\u9650\uff0c\u5bf9\u4e8e\u8be5\u5c5e\u6027\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u6743\u9650 read\uff1a\u53ea\u8bfb\u6743\u9650\uff0c\u5bf9\u4e8e\u8be5\u5c5e\u6027\u53ea\u5177\u5907\u8bfb\u53d6\u6743\u9650 write\uff1a\u8bfb\u5199\u6743\u9650\uff0c\u5bf9\u4e8e\u8be5\u5c5e\u6027\u4e0d\u4ec5\u5177\u5907\u8bfb\u53d6\u6743\u9650\uff0c\u8fd8\u5177\u5907\u4e86\u5199\u5165\u7684\u6743\u9650 \u5e38\u7528\u6743\u9650\u64cd\u4f5c \u7528\u6237\u64cd\u4f5c \u521b\u5efa\u7528\u6237 CALL dbms.security.createUser(user_name::STRING,password::STRING) \u5220\u9664\u7528\u6237 CALL dbms.security.deleteUser(user_name::STRING) \u4fee\u6539\u5f53\u524d\u7528\u6237\u5bc6\u7801 CALL dbms.security.changePassword(current_password::STRING,new_password::STRING) \u4fee\u6539\u6307\u5b9a\u7528\u6237\u5bc6\u7801 CALL dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) \u7981\u7528/\u542f\u7528\u7528\u6237 CALL dbms.security.disableUser(user::STRING,disable::BOOLEAN) \u5217\u51fa\u6240\u6709\u7528\u6237 CALL dbms.security.listUsers() \u5217\u51fa\u5f53\u524d\u7528\u6237\u4fe1\u606f CALL dbms.security.showCurrentUser() \u83b7\u53d6\u7528\u6237\u8be6\u60c5 CALL dbms.security.getUserInfo(user::STRING) \u89d2\u8272\u64cd\u4f5c \u521b\u5efa\u89d2\u8272 CALL dbms.security.createRole(role_name::STRING,desc::STRING) \u5220\u9664\u89d2\u8272 CALL dbms.security.deleteRole(role_name::STRING \u5217\u51fa\u6240\u6709\u89d2\u8272 CALL dbms.security.listRoles() \u7981\u7528/\u542f\u7528\u89d2\u8272 CALL dbms.security.disableRole(role::STRING,disable::BOOLEAN) \u8d4b\u4e88\u7528\u6237\u89d2\u8272 \u65b0\u589e\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb CALL dbms.security.addUserRoles(user::STRING,roles::LIST) \u5220\u9664\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb CALL dbms.security.deleteUserRoles(user::STRING,roles::LIST) \u6e05\u7a7a\u7528\u6237\u89d2\u8272\u7684\u5173\u7cfb\u5e76\u91cd\u5efa CALL dbms.security.rebuildUserRoles(user::STRING,roles::LIST) \u89d2\u8272\u8d4b\u6743 \u4fee\u6539\u89d2\u8272\u5bf9\u6307\u5b9a\u56fe\u7684\u8bbf\u95ee\u6743\u9650 CALL dbms.security.modSpecifiedAccessLevel(role::STRING,access_level::MAP)","title":"\u6743\u9650"},{"location":"zh-CN/2.operating/9.privilege/#_1","text":"","title":"\u7528\u6237\u6743\u9650\u7ba1\u7406"},{"location":"zh-CN/2.operating/9.privilege/#_2","text":"TuGraph \u7684\u6743\u9650\u662f\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\u8fdb\u884c\u7ba1\u7406\uff0c\u5b9a\u4e49\u8bbf\u95ee\u63a7\u5236\u7684\u6743\u9650\u5206\u914d\u7ed9\u89d2\u8272\uff0c\u89d2\u8272\u518d\u5206\u914d\u7ed9\u7528\u6237\u3002","title":"\u4ecb\u7ecd"},{"location":"zh-CN/2.operating/9.privilege/#_3","text":"Global \u5c42\uff1a\u5373\u5168\u5c40\u6743\u9650\uff0c\u5bf9\u7ba1\u7406\u3001\u56fe\u64cd\u4f5c\u5747\u6709\u6743\u9650\uff1b Graph \u5c42\uff1a\u5373\u56fe\u7ea7\u522b\uff0c\u5bf9\u6bcf\u4e2a\u56fe\u7684\u6743\u9650\uff1b \uff08\u4ec5\u5546\u4e1a\u5316\u7248\u672c\u652f\u6301\uff09Property \u5c42\uff1a\u5373\u5c5e\u6027\u7ea7\u522b\uff0c\u5bf9\u67d0\u4e2a\u5c5e\u6027\u7684\u6743\u9650\u63a7\u5236","title":"\u6743\u9650\u5c42\u7ea7"},{"location":"zh-CN/2.operating/9.privilege/#_4","text":"\u76ee\u524d\u6743\u9650\u7684\u63a7\u5236\u8f83\u4e3a\u7b80\u6d01 Global \u5c42\u76ee\u524d\u4e3a admin \u6743\u9650\uff0c\u5e76\u4e14\u9884\u7f6e\u4e86 admin \u7528\u6237\uff1b Graph \u5c42\u7684\u64cd\u4f5c\u6743\u9650\u5206\u4e3a\u56db\u79cd\uff1anone\uff0cread\uff0cwrite\uff0cfull none\uff1a\u65e0\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u6743\u9650 read\uff1a\u53ea\u8bfb\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u53ea\u5177\u5907\u8bfb\u53d6\u6743\u9650 write\uff1a\u8bfb\u5199\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u4e0d\u4ec5\u5177\u5907\u8bfb\u53d6\u6743\u9650\uff0c\u8fd8\u5177\u5907\u4e86\u5199\u5165\u7684\u6743\u9650 full\uff1a\u6240\u6709\u6743\u9650\uff0c\u5bf9\u4e8e\u56fe\u4e0d\u4ec5\u5177\u5907\u8bfb\u5199\u6743\u9650\uff0c\u540c\u65f6\u4e5f\u5177\u5907\u5220\u9664\u56fe\u3001\u4fee\u6539\u56fe\u3001\u4fee\u6539 Schema \u7b49\u6743\u9650 \uff08\u4ec5\u5546\u4e1a\u5316\u7248\u672c\u652f\u6301\uff09Property \u5c42\u7684\u6743\u9650\u5206\u522b\u4e3a\uff1anone\uff0cread\uff0cwrite none\uff1a\u65e0\u6743\u9650\uff0c\u5bf9\u4e8e\u8be5\u5c5e\u6027\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u6743\u9650 read\uff1a\u53ea\u8bfb\u6743\u9650\uff0c\u5bf9\u4e8e\u8be5\u5c5e\u6027\u53ea\u5177\u5907\u8bfb\u53d6\u6743\u9650 write\uff1a\u8bfb\u5199\u6743\u9650\uff0c\u5bf9\u4e8e\u8be5\u5c5e\u6027\u4e0d\u4ec5\u5177\u5907\u8bfb\u53d6\u6743\u9650\uff0c\u8fd8\u5177\u5907\u4e86\u5199\u5165\u7684\u6743\u9650","title":"\u6743\u9650\u5173\u952e\u5b57"},{"location":"zh-CN/2.operating/9.privilege/#_5","text":"","title":"\u5e38\u7528\u6743\u9650\u64cd\u4f5c"},{"location":"zh-CN/2.operating/9.privilege/#_6","text":"\u521b\u5efa\u7528\u6237 CALL dbms.security.createUser(user_name::STRING,password::STRING) \u5220\u9664\u7528\u6237 CALL dbms.security.deleteUser(user_name::STRING) \u4fee\u6539\u5f53\u524d\u7528\u6237\u5bc6\u7801 CALL dbms.security.changePassword(current_password::STRING,new_password::STRING) \u4fee\u6539\u6307\u5b9a\u7528\u6237\u5bc6\u7801 CALL dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) \u7981\u7528/\u542f\u7528\u7528\u6237 CALL dbms.security.disableUser(user::STRING,disable::BOOLEAN) \u5217\u51fa\u6240\u6709\u7528\u6237 CALL dbms.security.listUsers() \u5217\u51fa\u5f53\u524d\u7528\u6237\u4fe1\u606f CALL dbms.security.showCurrentUser() \u83b7\u53d6\u7528\u6237\u8be6\u60c5 CALL dbms.security.getUserInfo(user::STRING)","title":"\u7528\u6237\u64cd\u4f5c"},{"location":"zh-CN/2.operating/9.privilege/#_7","text":"\u521b\u5efa\u89d2\u8272 CALL dbms.security.createRole(role_name::STRING,desc::STRING) \u5220\u9664\u89d2\u8272 CALL dbms.security.deleteRole(role_name::STRING \u5217\u51fa\u6240\u6709\u89d2\u8272 CALL dbms.security.listRoles() \u7981\u7528/\u542f\u7528\u89d2\u8272 CALL dbms.security.disableRole(role::STRING,disable::BOOLEAN)","title":"\u89d2\u8272\u64cd\u4f5c"},{"location":"zh-CN/2.operating/9.privilege/#_8","text":"\u65b0\u589e\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb CALL dbms.security.addUserRoles(user::STRING,roles::LIST) \u5220\u9664\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb CALL dbms.security.deleteUserRoles(user::STRING,roles::LIST) \u6e05\u7a7a\u7528\u6237\u89d2\u8272\u7684\u5173\u7cfb\u5e76\u91cd\u5efa CALL dbms.security.rebuildUserRoles(user::STRING,roles::LIST)","title":"\u8d4b\u4e88\u7528\u6237\u89d2\u8272"},{"location":"zh-CN/2.operating/9.privilege/#_9","text":"\u4fee\u6539\u89d2\u8272\u5bf9\u6307\u5b9a\u56fe\u7684\u8bbf\u95ee\u6743\u9650 CALL dbms.security.modSpecifiedAccessLevel(role::STRING,access_level::MAP)","title":"\u89d2\u8272\u8d4b\u6743"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/","text":"tugraph_cypher \u4f7f\u7528\u8bf4\u660e \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd lgraph_cypher \u6587\u6863\u7684\u4f7f\u7528 TuGraph \u53d1\u5e03\u7248\u672c\u9644\u5e26\u540d\u4e3a lgraph_cypher \u7684\u67e5\u8be2\u5ba2\u6237\u7aef\uff0c\u53ef\u7528\u4e8e\u5411 TuGraph \u670d\u52a1\u5668\u63d0\u4ea4 OpenCypher \u8bf7\u6c42\u3002 lgraph_cypher \u5ba2\u6237\u7aef\u6709\u4e24\u79cd\u6267\u884c\u6a21\u5f0f\uff1a\u5355\u547d\u4ee4\u6a21\u5f0f\u548c\u4ea4\u4e92\u5f0f\u6a21\u5f0f\u3002 \u5355\u547d\u4ee4\u6a21\u5f0f \u5728\u5355\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c lgraph_cypher \u53ef\u7528\u4e8e\u63d0\u4ea4\u5355\u4e2a Cypher \u67e5\u8be2\u5e76\u5c06\u7ed3\u679c\u76f4\u63a5\u6253\u5370\u5230\u7ec8\u7aef\uff0c\u6253\u5370\u7ed3\u679c\u4e5f\u53ef\u4ee5\u5bb9\u6613\u5730\u91cd\u5b9a\u5411\u5199\u5165\u6307\u5b9a\u6587\u4ef6\u3002\u5f53\u7528\u6237\u9700\u8981\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u5927\u91cf\u7ed3\u679c\u5e76\u5c06\u5176\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\u65f6\uff0c\u8fd9\u975e\u5e38\u4fbf\u5229\u3002 \u5728\u6b64\u6a21\u5f0f\u4e0b\uff0c lgraph_cypher \u5de5\u5177\u5177\u6709\u4ee5\u4e0b\u9009\u9879\uff1a \u547d\u4ee4\u884c\u53c2\u6570: | \u53c2\u6570 | \u7c7b\u578b | \u8bf4\u660e | | -------- | ------ | ------------------------------------------------------------------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------------------- | | --help | \\ | \u5217\u51fa\u6240\u6709\u53c2\u6570\u53ca\u8bf4\u660e\u3002 | | -example | \\ | \u5217\u51fa\u547d\u4ee4\u5b9e\u4f8b\u3002 | | -c | string | \u6570\u636e\u5e93\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u4e8e\u83b7\u53d6 ip \u4e0e port \u4fe1\u606f\u3002 | | -h | string | \u6570\u636e\u5e93\u670d\u52a1\u5668 ip \u5730\u5740\uff0c\u5982\u6709\u914d\u7f6e\u6587\u4ef6\u5219\u53ef\u820d\u53bb\u6b64\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a 127.0.0.1 \u3002 | | -p | string | \u6570\u636e\u5e93\u670d\u52a1\u5668\u7aef\u53e3\uff0c\u5982\u6709\u914d\u7f6e\u6587\u4ef6\u5219\u53ef\u820d\u53bb\u6b64\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a 7071 \u3002 | | -u | string | \u6570\u636e\u5e93\u767b\u5f55\u7528\u6237\u540d\u3002 | | -P | string | \u6570\u636e\u5e93\u767b\u5f55\u5bc6\u7801\u3002 | | -f | string | \u5305\u542b\u5355\u6761 Cypher \u67e5\u8be2\u5355\u6587\u672c\u6587\u4ef6\u7684\u8def\u5f84\u3002 | | -s | string | \u5355\u884c cypher \u67e5\u8be2\u547d\u4ee4\u3002\u4ee5 \" \u5f00\u5934\u7ed3\u5c3e\u3002 | | -t | int | \u8fdb\u884c cypher \u67e5\u8be2\u65f6\u670d\u52a1\u5668\u7684\u8d85\u65f6\u9608\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a 150 \u79d2\u3002 -format | string | \u67e5\u8be2\u7ed3\u679c\u663e\u793a\u6a21\u5f0f\u3002\u652f\u6301 plain \u4e0e table \u4e24\u79cd\u683c\u5f0f\u3002 plain \u683c\u5f0f\u4f1a\u5c06\u67e5\u8be2\u7ed3\u679c\u5355\u5217\u6253\u5370\u3002 table \u683c\u5f0f\u4f1a\u5c06\u67e5\u8be2\u7ed3\u679c\u4ee5\u8868\u683c\u65b9\u5f0f\u663e\u793a\u3002\u9ed8\u8ba4\u503c\u4e3a table \u3002 | \u547d\u4ee4\u793a\u4f8b: cypher \u547d\u4ee4\u6587\u4ef6\u67e5\u8be2\uff1a $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -f /home/usr/cypher.json cypher \u547d\u4ee4\u5355\u53e5\u67e5\u8be2\uff1a $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" \u4ea4\u4e92\u6a21\u5f0f lgraph_cypher \u4e5f\u53ef\u4ee5\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002\u5728\u4ea4\u4e92\u5f0f\u6a21\u5f0f\u4e0b\uff0c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4fdd\u6301\u8fde\u63a5\uff0c\u5e76\u5728\u8bfb\u53d6-\u8bc4\u4f30-\u6253\u5370-\u5faa\u73af\u4e2d\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\u3002 \u8fdb\u5165 lgraph_cypher \u4ea4\u4e92\u6a21\u5f0f: \u5982\u4e0d\u52a0 -f \u6216 -s \u547d\u4ee4\u884c\u9009\u9879\uff0c\u8fd0\u884c lgraph_cypher \u65f6\u5c06\u4f1a\u8fdb\u5165\u4ea4\u4e92\u6a21\u5f0f\u3002\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u admin -P 73@TuGraph \u5982\u6210\u529f\u8fdb\u5165\u5219\u4f1a\u663e\u793a\u76f8\u5e94\u767b\u5f55\u6210\u529f\u4fe1\u606f\uff1a ********************************************************************** * TuGraph Graph Database X.Y.Z * * * * Copyright(C) 2018 Ant Group. All rights reserved. * * * ********************************************************************** login success ---------------------------------- Host: 127.0.0.1 Port: 7071 Username: admin ---------------------------------- type \":help\" to see all commands. > \u73b0\u5728\u6211\u4eec\u4e5f\u63d0\u4f9b\u4e00\u4e2a\u4ea4\u4e92\u5f0f shell \uff0c\u7528\u4e8e\u7528\u6237\u8f93\u5165 Cypher \u67e5\u8be2\u8bed\u53e5\u6216\u4f7f\u7528 :help \u547d\u4ee4\u6765\u68c0\u67e5\u53ef\u7528\u547d\u4ee4\u3002 command \u79cd\u7c7b\u4e0e\u8bf4\u660e: \u9664 Cypher \u67e5\u8be2\u5916\uff0c lgraph_cypher \u7684 shell \u8fd8\u63a5\u53d7\u4ee5\u4e0b\u547d\u4ee4\uff1a \u547d\u4ee4 \u5bf9\u5e94\u53c2\u6570 \u8bf4\u660e :help \\ \u663e\u793a\u670d\u52a1\u5668\u4fe1\u606f\u4e0e\u6240\u6709 command \u5bf9\u5e94\u8bf4\u660e\u3002 :db_info \\ \u5f53\u524d\u670d\u52a1\u5668\u72b6\u6001\u67e5\u8be2\u3002\u5bf9\u5e94 REST API \u7684/db/info\u3002 :clear \\ \u6e05\u7a7a\u5c4f\u5e55\u3002 :use {\u56fe\u7684\u540d\u79f0} \u4f7f\u7528\u8be5\u540d\u79f0\u6307\u5b9a\u7684\u56fe\uff0c\u9ed8\u8ba4\u503c\u4e3a default \u3002 :source -t {\u67e5\u8be2timeout\u503c} -f {\u67e5\u8be2\u6587\u4ef6} \u53ef\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u7684 cypher \u547d\u4ee4\u6587\u4ef6\u67e5\u8be2\u3002\u8d85\u65f6\u9608\u503c\u9ed8\u8ba4\u503c\u4e3a 150 \u79d2\u3002\u67e5\u8be2\u6587\u4ef6\u683c\u5f0f\u53c2\u8003\u65e0\u4ea4\u4e92\u5f0f\u67e5\u8be2\u53c2\u6570\u3002 :exit \\ \u9000\u51fa\u4ea4\u4e92\u6a21\u5f0f\u5e76\u8fd4\u56de\u539f\u547d\u4ee4\u884c\u3002 :format plain or table \u66f4\u6539 cypher \u67e5\u8be2\u7ed3\u679c\u7684\u663e\u793a\u6a21\u5f0f\u3002\u652f\u6301 plain \u4e0e table \u6a21\u5f0f\u3002 :save all/command/result -f {\u6587\u4ef6\u8def\u5f84} {cypher\u8bed\u53e5} \u5b58\u50a8 cypher \u547d\u4ee4\uff08command\uff09\u6216\u67e5\u8be2\u7ed3\u679c\uff08result\uff09\u6216\u4ee5\u4e0a\u4e8c\u8005\uff08all\uff09\u3002\u9ed8\u8ba4\u5b58\u50a8\u4f4d\u7f6e\u4e3a /saved_cypher.txt \u6ce8\u610f: \u6bcf\u6761\u547d\u4ee4\u90fd\u5e94\u8be5\u4ee5\u5192\u53f7\u5f00\u59cb : . :save \u547d\u4ee4\u4f8b\u5b50: :save all -f /home/usr/saved.txt match (n) where return n, n.name limit 1000 cypher \u67e5\u8be2\u547d\u4ee4: \u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u4e5f\u53ef\u76f4\u63a5\u8f93\u5165\u5355\u53e5 cypher \u547d\u4ee4\u8fdb\u884c\u67e5\u8be2\uff0c\u4ee5\" ; \"\u7ed3\u675f\u3002\u8f93\u5165\u547d\u4ee4\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a login success >MATCH (n) RETURN n, n.name; +---+---+-------------+ | | n |n.name | +---+---+-------------+ | 0 | 0 |david | | 1 | 1 |Ann | | 2 | 2 |first movie | | 3 | 3 |Andres | +---+---+-------------+ time spent: 0.000520706176758 size of query: 4 > lgraph_cypher \u8f93\u5165\u547d\u4ee4\u65f6\u652f\u6301\u591a\u884c\u8f93\u5165\uff0c\u7528\u6237\u53ef\u4f7f\u7528 ENTER \u952e\u5c06\u957f\u67e5\u8be2\u8bed\u53e5\u5206\u591a\u884c\u8f93\u5165\u3002\u591a\u884c\u8f93\u5165\u60c5\u51b5\u4e0b\u547d\u4ee4\u884c\u5f00\u5934\u4f1a\u4ece > \u53d8\u4e3a => \uff0c\u7136\u540e\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u8f93\u5165\u67e5\u8be2\u7684\u5176\u4f59\u90e8\u5206\u3002 \u4f8b\u5b50\u5982\u4e0b\uff1a login success >MATCH (n) =>WHERE n.uid='M11' =>RETURN n, n.name; \u8f85\u52a9\u529f\u80fd: \u5386\u53f2\u67e5\u8be2\uff1a \u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u6309\u4e0a\u4e0b\u65b9\u5411\u952e\u53ef\u67e5\u8be2\u8f93\u5165\u5386\u53f2\u3002 \u81ea\u52a8\u8865\u5168\uff1a lgraph_cypher \u4f1a\u6839\u636e\u8f93\u5165\u5386\u53f2\u8fdb\u884c\u81ea\u52a8\u8865\u5168\u3002\u5728\u8865\u5168\u63d0\u793a\u51fa\u73b0\u7684\u60c5\u51b5\u4e0b\uff0c\u6309\u4e0b\u53f3\u65b9\u5411\u952e\u5c31\u4f1a\u81ea\u52a8\u8865\u5168\u547d\u4ee4\u3002","title":"TuGraph Cypher"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#tugraph_cypher","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd lgraph_cypher \u6587\u6863\u7684\u4f7f\u7528 TuGraph \u53d1\u5e03\u7248\u672c\u9644\u5e26\u540d\u4e3a lgraph_cypher \u7684\u67e5\u8be2\u5ba2\u6237\u7aef\uff0c\u53ef\u7528\u4e8e\u5411 TuGraph \u670d\u52a1\u5668\u63d0\u4ea4 OpenCypher \u8bf7\u6c42\u3002 lgraph_cypher \u5ba2\u6237\u7aef\u6709\u4e24\u79cd\u6267\u884c\u6a21\u5f0f\uff1a\u5355\u547d\u4ee4\u6a21\u5f0f\u548c\u4ea4\u4e92\u5f0f\u6a21\u5f0f\u3002","title":"tugraph_cypher \u4f7f\u7528\u8bf4\u660e"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#_1","text":"\u5728\u5355\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c lgraph_cypher \u53ef\u7528\u4e8e\u63d0\u4ea4\u5355\u4e2a Cypher \u67e5\u8be2\u5e76\u5c06\u7ed3\u679c\u76f4\u63a5\u6253\u5370\u5230\u7ec8\u7aef\uff0c\u6253\u5370\u7ed3\u679c\u4e5f\u53ef\u4ee5\u5bb9\u6613\u5730\u91cd\u5b9a\u5411\u5199\u5165\u6307\u5b9a\u6587\u4ef6\u3002\u5f53\u7528\u6237\u9700\u8981\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u5927\u91cf\u7ed3\u679c\u5e76\u5c06\u5176\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\u65f6\uff0c\u8fd9\u975e\u5e38\u4fbf\u5229\u3002 \u5728\u6b64\u6a21\u5f0f\u4e0b\uff0c lgraph_cypher \u5de5\u5177\u5177\u6709\u4ee5\u4e0b\u9009\u9879\uff1a","title":"\u5355\u547d\u4ee4\u6a21\u5f0f"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#_2","text":"| \u53c2\u6570 | \u7c7b\u578b | \u8bf4\u660e | | -------- | ------ | ------------------------------------------------------------------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------------------- | | --help | \\ | \u5217\u51fa\u6240\u6709\u53c2\u6570\u53ca\u8bf4\u660e\u3002 | | -example | \\ | \u5217\u51fa\u547d\u4ee4\u5b9e\u4f8b\u3002 | | -c | string | \u6570\u636e\u5e93\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u4e8e\u83b7\u53d6 ip \u4e0e port \u4fe1\u606f\u3002 | | -h | string | \u6570\u636e\u5e93\u670d\u52a1\u5668 ip \u5730\u5740\uff0c\u5982\u6709\u914d\u7f6e\u6587\u4ef6\u5219\u53ef\u820d\u53bb\u6b64\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a 127.0.0.1 \u3002 | | -p | string | \u6570\u636e\u5e93\u670d\u52a1\u5668\u7aef\u53e3\uff0c\u5982\u6709\u914d\u7f6e\u6587\u4ef6\u5219\u53ef\u820d\u53bb\u6b64\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a 7071 \u3002 | | -u | string | \u6570\u636e\u5e93\u767b\u5f55\u7528\u6237\u540d\u3002 | | -P | string | \u6570\u636e\u5e93\u767b\u5f55\u5bc6\u7801\u3002 | | -f | string | \u5305\u542b\u5355\u6761 Cypher \u67e5\u8be2\u5355\u6587\u672c\u6587\u4ef6\u7684\u8def\u5f84\u3002 | | -s | string | \u5355\u884c cypher \u67e5\u8be2\u547d\u4ee4\u3002\u4ee5 \" \u5f00\u5934\u7ed3\u5c3e\u3002 | | -t | int | \u8fdb\u884c cypher \u67e5\u8be2\u65f6\u670d\u52a1\u5668\u7684\u8d85\u65f6\u9608\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a 150 \u79d2\u3002 -format | string | \u67e5\u8be2\u7ed3\u679c\u663e\u793a\u6a21\u5f0f\u3002\u652f\u6301 plain \u4e0e table \u4e24\u79cd\u683c\u5f0f\u3002 plain \u683c\u5f0f\u4f1a\u5c06\u67e5\u8be2\u7ed3\u679c\u5355\u5217\u6253\u5370\u3002 table \u683c\u5f0f\u4f1a\u5c06\u67e5\u8be2\u7ed3\u679c\u4ee5\u8868\u683c\u65b9\u5f0f\u663e\u793a\u3002\u9ed8\u8ba4\u503c\u4e3a table \u3002 |","title":"\u547d\u4ee4\u884c\u53c2\u6570:"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#_3","text":"cypher \u547d\u4ee4\u6587\u4ef6\u67e5\u8be2\uff1a $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -f /home/usr/cypher.json cypher \u547d\u4ee4\u5355\u53e5\u67e5\u8be2\uff1a $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\"","title":"\u547d\u4ee4\u793a\u4f8b:"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#_4","text":"lgraph_cypher \u4e5f\u53ef\u4ee5\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002\u5728\u4ea4\u4e92\u5f0f\u6a21\u5f0f\u4e0b\uff0c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4fdd\u6301\u8fde\u63a5\uff0c\u5e76\u5728\u8bfb\u53d6-\u8bc4\u4f30-\u6253\u5370-\u5faa\u73af\u4e2d\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u4ea4\u4e92\u6a21\u5f0f"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#lgraph_cypher","text":"\u5982\u4e0d\u52a0 -f \u6216 -s \u547d\u4ee4\u884c\u9009\u9879\uff0c\u8fd0\u884c lgraph_cypher \u65f6\u5c06\u4f1a\u8fdb\u5165\u4ea4\u4e92\u6a21\u5f0f\u3002\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a $ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u admin -P 73@TuGraph \u5982\u6210\u529f\u8fdb\u5165\u5219\u4f1a\u663e\u793a\u76f8\u5e94\u767b\u5f55\u6210\u529f\u4fe1\u606f\uff1a ********************************************************************** * TuGraph Graph Database X.Y.Z * * * * Copyright(C) 2018 Ant Group. All rights reserved. * * * ********************************************************************** login success ---------------------------------- Host: 127.0.0.1 Port: 7071 Username: admin ---------------------------------- type \":help\" to see all commands. > \u73b0\u5728\u6211\u4eec\u4e5f\u63d0\u4f9b\u4e00\u4e2a\u4ea4\u4e92\u5f0f shell \uff0c\u7528\u4e8e\u7528\u6237\u8f93\u5165 Cypher \u67e5\u8be2\u8bed\u53e5\u6216\u4f7f\u7528 :help \u547d\u4ee4\u6765\u68c0\u67e5\u53ef\u7528\u547d\u4ee4\u3002","title":"\u8fdb\u5165 lgraph_cypher \u4ea4\u4e92\u6a21\u5f0f:"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#command","text":"\u9664 Cypher \u67e5\u8be2\u5916\uff0c lgraph_cypher \u7684 shell \u8fd8\u63a5\u53d7\u4ee5\u4e0b\u547d\u4ee4\uff1a \u547d\u4ee4 \u5bf9\u5e94\u53c2\u6570 \u8bf4\u660e :help \\ \u663e\u793a\u670d\u52a1\u5668\u4fe1\u606f\u4e0e\u6240\u6709 command \u5bf9\u5e94\u8bf4\u660e\u3002 :db_info \\ \u5f53\u524d\u670d\u52a1\u5668\u72b6\u6001\u67e5\u8be2\u3002\u5bf9\u5e94 REST API \u7684/db/info\u3002 :clear \\ \u6e05\u7a7a\u5c4f\u5e55\u3002 :use {\u56fe\u7684\u540d\u79f0} \u4f7f\u7528\u8be5\u540d\u79f0\u6307\u5b9a\u7684\u56fe\uff0c\u9ed8\u8ba4\u503c\u4e3a default \u3002 :source -t {\u67e5\u8be2timeout\u503c} -f {\u67e5\u8be2\u6587\u4ef6} \u53ef\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u7684 cypher \u547d\u4ee4\u6587\u4ef6\u67e5\u8be2\u3002\u8d85\u65f6\u9608\u503c\u9ed8\u8ba4\u503c\u4e3a 150 \u79d2\u3002\u67e5\u8be2\u6587\u4ef6\u683c\u5f0f\u53c2\u8003\u65e0\u4ea4\u4e92\u5f0f\u67e5\u8be2\u53c2\u6570\u3002 :exit \\ \u9000\u51fa\u4ea4\u4e92\u6a21\u5f0f\u5e76\u8fd4\u56de\u539f\u547d\u4ee4\u884c\u3002 :format plain or table \u66f4\u6539 cypher \u67e5\u8be2\u7ed3\u679c\u7684\u663e\u793a\u6a21\u5f0f\u3002\u652f\u6301 plain \u4e0e table \u6a21\u5f0f\u3002 :save all/command/result -f {\u6587\u4ef6\u8def\u5f84} {cypher\u8bed\u53e5} \u5b58\u50a8 cypher \u547d\u4ee4\uff08command\uff09\u6216\u67e5\u8be2\u7ed3\u679c\uff08result\uff09\u6216\u4ee5\u4e0a\u4e8c\u8005\uff08all\uff09\u3002\u9ed8\u8ba4\u5b58\u50a8\u4f4d\u7f6e\u4e3a /saved_cypher.txt \u6ce8\u610f: \u6bcf\u6761\u547d\u4ee4\u90fd\u5e94\u8be5\u4ee5\u5192\u53f7\u5f00\u59cb : . :save \u547d\u4ee4\u4f8b\u5b50: :save all -f /home/usr/saved.txt match (n) where return n, n.name limit 1000","title":"command \u79cd\u7c7b\u4e0e\u8bf4\u660e:"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#cypher","text":"\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u4e5f\u53ef\u76f4\u63a5\u8f93\u5165\u5355\u53e5 cypher \u547d\u4ee4\u8fdb\u884c\u67e5\u8be2\uff0c\u4ee5\" ; \"\u7ed3\u675f\u3002\u8f93\u5165\u547d\u4ee4\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a login success >MATCH (n) RETURN n, n.name; +---+---+-------------+ | | n |n.name | +---+---+-------------+ | 0 | 0 |david | | 1 | 1 |Ann | | 2 | 2 |first movie | | 3 | 3 |Andres | +---+---+-------------+ time spent: 0.000520706176758 size of query: 4 > lgraph_cypher \u8f93\u5165\u547d\u4ee4\u65f6\u652f\u6301\u591a\u884c\u8f93\u5165\uff0c\u7528\u6237\u53ef\u4f7f\u7528 ENTER \u952e\u5c06\u957f\u67e5\u8be2\u8bed\u53e5\u5206\u591a\u884c\u8f93\u5165\u3002\u591a\u884c\u8f93\u5165\u60c5\u51b5\u4e0b\u547d\u4ee4\u884c\u5f00\u5934\u4f1a\u4ece > \u53d8\u4e3a => \uff0c\u7136\u540e\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u8f93\u5165\u67e5\u8be2\u7684\u5176\u4f59\u90e8\u5206\u3002 \u4f8b\u5b50\u5982\u4e0b\uff1a login success >MATCH (n) =>WHERE n.uid='M11' =>RETURN n, n.name;","title":"cypher \u67e5\u8be2\u547d\u4ee4:"},{"location":"zh-CN/2.operating/6.tools/1.tugraph-cypher/#_5","text":"\u5386\u53f2\u67e5\u8be2\uff1a \u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u6309\u4e0a\u4e0b\u65b9\u5411\u952e\u53ef\u67e5\u8be2\u8f93\u5165\u5386\u53f2\u3002 \u81ea\u52a8\u8865\u5168\uff1a lgraph_cypher \u4f1a\u6839\u636e\u8f93\u5165\u5386\u53f2\u8fdb\u884c\u81ea\u52a8\u8865\u5168\u3002\u5728\u8865\u5168\u63d0\u793a\u51fa\u73b0\u7684\u60c5\u51b5\u4e0b\uff0c\u6309\u4e0b\u53f3\u65b9\u5411\u952e\u5c31\u4f1a\u81ea\u52a8\u8865\u5168\u547d\u4ee4\u3002","title":"\u8f85\u52a9\u529f\u80fd:"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/","text":"TuGraph Browser \u7528\u6237\u4f7f\u7528\u8bf4\u660e \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph Browser \u7684\u4f7f\u7528 \u5b9a\u4e49 TuGraph Browser \u662f TuGraph \u63d0\u4f9b\u7684\u53ef\u89c6\u5316\u5f00\u53d1\u5de5\u5177\u3002 \u4f5c\u7528 TuGraph Browser \u7684\u4e3b\u8981\u529f\u80fd\u662f\u4e3a\u4f7f\u7528\u56fe\u6570\u636e\u5e93\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u63d0\u4f9b\u53ef\u89c6\u5316\u7684\u56fe\u6570\u636e\u5f00\u53d1\uff0c\u56fe\u6570\u636e\u7ba1\u7406\u548c\u7ef4\u62a4\u7b49\u529f\u80fd\u3002 \u64cd\u4f5c\u8be6\u60c5 1.\u8fde\u63a5\u6570\u636e\u5e93 \u5f53\u7528\u6237\u5b8c\u6210\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u884c\u8bbf\u95ee\uff0cTuGraph Browser \u5de5\u5177\u3002\u7528\u6237\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u8f93\u5165\uff1aTuGraph \u6240\u5728\u670d\u52a1\u5668\u7684 IP:Port\u3002\u9ed8\u8ba4\u7684\u7aef\u53e3\u4f7f\u7528\u7684\u662f 7090\u3002 2.\u767b\u5f55\u6570\u636e\u5e93 \u9875\u9762\u6253\u5f00\u6210\u529f\u4f1a\uff0c\u9996\u5148\u8fdb\u56fe\u7684\u662f\u767b\u5f55\u9875\u9762\uff0c\u7528\u6237\u9700\u8981\u586b\u5199\u8d26\u53f7\u548c\u5bc6\u7801\u8fdb\u884c\u767b\u5f55\u3002 \u9ed8\u8ba4\u8d26\u53f7\uff1aadmin \u9ed8\u8ba4\u5bc6\u7801\uff1a73@TuGraph \u5efa\u8bae\u7528\u6237\u767b\u5f55\u540e\uff0c\u53ca\u65f6\u4fee\u6539\u521d\u59cb\u5316\u7684\u5bc6\u7801 3.\u5de5\u4f5c\u53f0 3.1 \u5feb\u901f\u4e0a\u624b \u9996\u6b21\u767b\u5f55\uff0c\u7cfb\u7edf\u4f1a\u9ed8\u8ba4\u521b\u5efa default \u7a7a\u56fe \u7528\u6237\u70b9\u51fb\u5e2e\u52a9\u9009\u9879\uff0c\u5e76\u9009\u62e9\u5feb\u901f\u4e0a\u624b \u7136\u540e\u70b9\u51fb\u201c\u4e00\u952e\u521b\u5efa\u6a21\u578b\u201d\u2014\u2014>\"\u4e00\u952e\u521b\u5efa\u6570\u636e\"\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u5185\u7f6e\u7684 Movie \u6570\u636e\u56fe\u8c31\u7684\u6784\u5efa 3.2 \u521b\u5efa\u5b50\u56fe\u548c\u793a\u4f8b 3.2.1 \u521b\u5efa\u5b50\u56fe \u70b9\u51fb\u65b0\u5efa\u5b50\u56fe \u586b\u5199\u8868\u5355\u4fe1\u606f \u5b50\u56fe\u540d\u79f0 \u5b50\u56fe\u63cf\u8ff0 \u914d\u7f6e\u4fe1\u606f \u70b9\u51fb\u786e\u8ba4\uff0c\u63d0\u793a\u521b\u5efa\u6210\u529f \u5207\u6362\u5b50\u56fe \u70b9\u51fb\u65b0\u5efa\u793a\u4f8b \u9009\u62e9\u793a\u4f8b\u5e76\u70b9\u51fb\u521b\u5efa 3.3 \u67e5\u8be2 3.3.1 \u9875\u9762\u7ec4\u6210 cypher \u8f93\u5165\u6846 \u7ed3\u679c\u96c6\u5c55\u793a\u533a\u57df 3.3.2 \u7ed3\u679c\u96c6\u5c55\u793a\u533a\u57df\u529f\u80fd\u8be6\u60c5 \u7ed3\u679c\u96c6\u6807\u7b7e\u5c55\u793a\u53ca\u529f\u80fd \u8fd9\u91cc\u5c55\u793a\u4e86\u7ed3\u679c\u96c6\u7684\u6240\u6709\u7c7b\u578b\u7edf\u8ba1 \u70b9\u51fb\u4e0d\u540c\u7684\u201clabel\uff08\u6807\u7b7e\uff09\u201d\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u4fee\u6539\u64cd\u4f5c \u4fee\u6539\u5c55\u793a\u989c\u8272 \u4fee\u6539\u8282\u70b9\u5927\u5c0f\u6216\u8fb9\u7684\u7c97\u7ec6 \u4fee\u6539\u9ed8\u8ba4\u5c55\u793a\u5c5e\u6027\u6216\u7cfb\u7edf\u5c5e\u6027 \u5e03\u5c40\u4fee\u6539 \u529b\u5bfc\u5e03\u5c40 \u7f51\u683c\u5e03\u5c40 \u6811\u5f62\u5e03\u5c40 \u73af\u5883\u5e03\u5c40 \u8fb9\u805a\u5408 \u76f8\u540c\u7c7b\u578b\uff0c\u65b9\u5411\u7684\u8fb9\u53ef\u4ee5\u8fdb\u884c\u5408\u5e76 \u521b\u5efa\u8282\u70b9 \u70b9\u51fb\u521b\u5efa\u8282\u70b9\u6309\u94ae \u9009\u62e9\u8282\u70b9\u7c7b\u578b \u6dfb\u5199\u8282\u70b9\u5185\u5bb9 \u521b\u5efa\u5173\u7cfb \u5728\u753b\u5e03\u4e2d\u9009\u62e9\u8d77\u70b9\u548c\u7ec8\u70b9 \u9009\u62e9\u53ef\u4ee5\u5339\u914d\u7684\u7c7b\u578b \u586b\u5199\u8282\u70b9\u4fe1\u606f \u505c\u6b62\u5e03\u5c40 \u5f53\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u5bfc\u81f4\u6d4f\u89c8\u5668\u9875\u9762\u5361\u987f\u65f6\u5019\uff0c\u53ef\u4ee5\u70b9\u51fb\u8fd9\u4e2a\u505c\u6b62\u5e03\u5c40\u7684\u6309\u94ae\uff0c\u80fd\u591f\u63d0\u9ad8\u4f53\u9a8c\u7684\u6d41\u7545\u5ea6 \u9f20\u6807\u60ac\u505c \u5f00\u542f\u6b64\u529f\u80fd\uff0c\u53ef\u4ee5\u9ad8\u4eae\u663e\u793a\u9f20\u6807\u60ac\u505c\u8282\u70b9\u7684\u4e00\u5ea6\u90bb\u5c45\u8282\u70b9 \u7ed3\u679c\u96c6\u5bfc\u51fa \u53ef\u4ee5\u5c06\u7ed3\u679c\u96c6\u5bfc\u51fa\u4e3a png\uff0cjson\uff0ccsv \u4e09\u79cd\u4e0d\u540c\u7684\u6587\u4ef6\u5f62\u5f0f \u5237\u65b0 \u70b9\u51fb\u5237\u65b0\u6309\u94ae\uff0c\u4f1a\u91cd\u65b0\u6267\u884c\u5f53\u524d\u9875\u9762\u7684\u521d\u59cb cypher \u8bed\u53e5\uff0c\u5e76\u5237\u65b0\u7ed3\u679c\u96c6 \u6700\u5927\u5316 \u70b9\u51fb\u6700\u5927\u5316\uff0c\u7ed3\u679c\u96c6\u5c55\u793a\u533a\u57df\u5c06\u5168\u5c4f\u5c55\u793a \u7ed3\u679c\u96c6\u5c55\u793a\u5f62\u5f0f\u5207\u6362 \u652f\u6301\u56fe\u8c31\u3001\u8868\u683c\u3001\u6587\u672c\u4e09\u79cd\u5f62\u5f0f 3.3.3 \u5efa\u6a21 \u70b9\u8fb9\u6a21\u578b \u70b9\u8fb9\u6a21\u578b\u652f\u6301\u5b9e\u65f6\u7684\u3001\u589e\u3001\u5220\u3001\u6539\u3001\u67e5 \u70b9\u8fb9\u6a21\u578b\u652f\u6301\u5bfc\u5165\u548c\u5bfc\u51fa 3.3.4 \u6570\u636e\u5bfc\u5165 \u672c\u5730\u6570\u636e\u5bfc\u5165 \u9009\u62e9\u6587\u4ef6\u7f16\u7801\u683c\u5f0f \u9009\u62e9\u672c\u5730 CSV \u6587\u4ef6 \u9009\u62e9\u5bf9\u5e94\u7684\u8282\u70b9\u6216\u8fb9\u7684\u6a21\u578b \u8fdb\u884c\u6570\u636e\u6620\u5c04 \u5b8c\u6210\u6570\u636e\u5bfc\u5165 3.3.5 \u63d2\u4ef6 \u5b58\u50a8\u8fc7\u7a0b\u7684\u4f7f\u7528 \u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u672c\u5730\u7f16\u5199\u7684 Plugin \u7a0b\u5e8f\uff0c\u5e76\u5728\u53ef\u89c6\u5316\u9875\u9762\u8fdb\u884c\u6267\u884c\uff0c\u5e76\u67e5\u770b\u6267\u884c\u7ed3\u679c \u7528\u6237\u53ef\u4ee5\u5728\u53ef\u89c6\u5316\u5bf9\u63d2\u4ef6\u8fdb\u884c\u3001\u5378\u8f7d\u3001\u6267\u884c\u3001\u4e0b\u8f7d\u7b49\u64cd\u4f5c 3.3.6 \u5e2e\u52a9 \u5176\u4e2d\u8bb0\u5f55\u4e86 TuGraph-browser \u7684\u4f7f\u7528\u65b9\u5f0f 3.4 \u63a7\u5236\u53f0 3.4.1 \u6570\u636e\u5e93\u57fa\u7840\u4fe1\u606f \u5c55\u793a\u6570\u636e\u5e93\u76f8\u5173\u7684\u57fa\u7840\u914d\u7f6e\u4fe1\u606f 3.4.2 \u6743\u9650\u7ba1\u7406 \u7528\u6765\u521b\u5efa\u7528\u6237\u548c\u89d2\u8272\u7684\u529f\u80fd\u6a21\u5757\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u6743\u9650\u7684\u7ba1\u7406\u64cd\u4f5c 3.4.3 \u5b9e\u65f6\u72b6\u6001 \u8fd9\u91cc\u5c55\u793a\u4e86\u6570\u636e\u5e93\u5b9e\u65f6\u72b6\u6001\uff0c\u5305\u62ec\uff1aCPU \u4f7f\u7528\u7387\u3001\u5185\u5b58\u7528\u7387\u3001\u78c1\u76d8\u4f7f\u7528\u7387\u3001\u6570\u636e\u8bf7\u6c42\u6b21\u6570\u3001\u78c1\u76d8 IO 3.4.4 \u4efb\u52a1\u7ba1\u7406 \u5728\u8fd9\u91cc\u7528\u6237\u53ef\u4ee5\u770b\u5230\u5728\u6b63\u5728\u6267\u884c\u4e2d\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u5728\u6b64\u8fdb\u884c\u505c\u6b62\u4efb\u52a1\u7684\u64cd\u4f5c 3.4.5 \u5ba1\u8ba1\u65e5\u5fd7 \u8fd9\u91cc\u8bb0\u5f55\u7684\u6570\u636e\u5e93\u76f8\u5173\u7684\u5ba1\u8ba1\u65e5\u5fd7\uff0c\u7528\u6765\u6392\u67e5\u4f7f\u7528\u9047\u5230\u7684\u95ee\u9898","title":"TuGraph Browser"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#tugraph-browser","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph Browser \u7684\u4f7f\u7528","title":"TuGraph Browser \u7528\u6237\u4f7f\u7528\u8bf4\u660e"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#_1","text":"TuGraph Browser \u662f TuGraph \u63d0\u4f9b\u7684\u53ef\u89c6\u5316\u5f00\u53d1\u5de5\u5177\u3002","title":"\u5b9a\u4e49"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#_2","text":"TuGraph Browser \u7684\u4e3b\u8981\u529f\u80fd\u662f\u4e3a\u4f7f\u7528\u56fe\u6570\u636e\u5e93\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u63d0\u4f9b\u53ef\u89c6\u5316\u7684\u56fe\u6570\u636e\u5f00\u53d1\uff0c\u56fe\u6570\u636e\u7ba1\u7406\u548c\u7ef4\u62a4\u7b49\u529f\u80fd\u3002","title":"\u4f5c\u7528"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#_3","text":"","title":"\u64cd\u4f5c\u8be6\u60c5"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#1","text":"\u5f53\u7528\u6237\u5b8c\u6210\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u884c\u8bbf\u95ee\uff0cTuGraph Browser \u5de5\u5177\u3002\u7528\u6237\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u8f93\u5165\uff1aTuGraph \u6240\u5728\u670d\u52a1\u5668\u7684 IP:Port\u3002\u9ed8\u8ba4\u7684\u7aef\u53e3\u4f7f\u7528\u7684\u662f 7090\u3002","title":"1.\u8fde\u63a5\u6570\u636e\u5e93"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#2","text":"\u9875\u9762\u6253\u5f00\u6210\u529f\u4f1a\uff0c\u9996\u5148\u8fdb\u56fe\u7684\u662f\u767b\u5f55\u9875\u9762\uff0c\u7528\u6237\u9700\u8981\u586b\u5199\u8d26\u53f7\u548c\u5bc6\u7801\u8fdb\u884c\u767b\u5f55\u3002 \u9ed8\u8ba4\u8d26\u53f7\uff1aadmin \u9ed8\u8ba4\u5bc6\u7801\uff1a73@TuGraph \u5efa\u8bae\u7528\u6237\u767b\u5f55\u540e\uff0c\u53ca\u65f6\u4fee\u6539\u521d\u59cb\u5316\u7684\u5bc6\u7801","title":"2.\u767b\u5f55\u6570\u636e\u5e93"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#3","text":"","title":"3.\u5de5\u4f5c\u53f0"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#31","text":"\u9996\u6b21\u767b\u5f55\uff0c\u7cfb\u7edf\u4f1a\u9ed8\u8ba4\u521b\u5efa default \u7a7a\u56fe \u7528\u6237\u70b9\u51fb\u5e2e\u52a9\u9009\u9879\uff0c\u5e76\u9009\u62e9\u5feb\u901f\u4e0a\u624b \u7136\u540e\u70b9\u51fb\u201c\u4e00\u952e\u521b\u5efa\u6a21\u578b\u201d\u2014\u2014>\"\u4e00\u952e\u521b\u5efa\u6570\u636e\"\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u5185\u7f6e\u7684 Movie \u6570\u636e\u56fe\u8c31\u7684\u6784\u5efa","title":"3.1 \u5feb\u901f\u4e0a\u624b"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#32","text":"","title":"3.2 \u521b\u5efa\u5b50\u56fe\u548c\u793a\u4f8b"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#321","text":"\u70b9\u51fb\u65b0\u5efa\u5b50\u56fe \u586b\u5199\u8868\u5355\u4fe1\u606f \u5b50\u56fe\u540d\u79f0 \u5b50\u56fe\u63cf\u8ff0 \u914d\u7f6e\u4fe1\u606f \u70b9\u51fb\u786e\u8ba4\uff0c\u63d0\u793a\u521b\u5efa\u6210\u529f \u5207\u6362\u5b50\u56fe \u70b9\u51fb\u65b0\u5efa\u793a\u4f8b \u9009\u62e9\u793a\u4f8b\u5e76\u70b9\u51fb\u521b\u5efa","title":"3.2.1 \u521b\u5efa\u5b50\u56fe"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#33","text":"","title":"3.3 \u67e5\u8be2"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#331","text":"cypher \u8f93\u5165\u6846 \u7ed3\u679c\u96c6\u5c55\u793a\u533a\u57df","title":"3.3.1 \u9875\u9762\u7ec4\u6210"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#332","text":"\u7ed3\u679c\u96c6\u6807\u7b7e\u5c55\u793a\u53ca\u529f\u80fd \u8fd9\u91cc\u5c55\u793a\u4e86\u7ed3\u679c\u96c6\u7684\u6240\u6709\u7c7b\u578b\u7edf\u8ba1 \u70b9\u51fb\u4e0d\u540c\u7684\u201clabel\uff08\u6807\u7b7e\uff09\u201d\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u4fee\u6539\u64cd\u4f5c \u4fee\u6539\u5c55\u793a\u989c\u8272 \u4fee\u6539\u8282\u70b9\u5927\u5c0f\u6216\u8fb9\u7684\u7c97\u7ec6 \u4fee\u6539\u9ed8\u8ba4\u5c55\u793a\u5c5e\u6027\u6216\u7cfb\u7edf\u5c5e\u6027 \u5e03\u5c40\u4fee\u6539 \u529b\u5bfc\u5e03\u5c40 \u7f51\u683c\u5e03\u5c40 \u6811\u5f62\u5e03\u5c40 \u73af\u5883\u5e03\u5c40 \u8fb9\u805a\u5408 \u76f8\u540c\u7c7b\u578b\uff0c\u65b9\u5411\u7684\u8fb9\u53ef\u4ee5\u8fdb\u884c\u5408\u5e76 \u521b\u5efa\u8282\u70b9 \u70b9\u51fb\u521b\u5efa\u8282\u70b9\u6309\u94ae \u9009\u62e9\u8282\u70b9\u7c7b\u578b \u6dfb\u5199\u8282\u70b9\u5185\u5bb9 \u521b\u5efa\u5173\u7cfb \u5728\u753b\u5e03\u4e2d\u9009\u62e9\u8d77\u70b9\u548c\u7ec8\u70b9 \u9009\u62e9\u53ef\u4ee5\u5339\u914d\u7684\u7c7b\u578b \u586b\u5199\u8282\u70b9\u4fe1\u606f \u505c\u6b62\u5e03\u5c40 \u5f53\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u5bfc\u81f4\u6d4f\u89c8\u5668\u9875\u9762\u5361\u987f\u65f6\u5019\uff0c\u53ef\u4ee5\u70b9\u51fb\u8fd9\u4e2a\u505c\u6b62\u5e03\u5c40\u7684\u6309\u94ae\uff0c\u80fd\u591f\u63d0\u9ad8\u4f53\u9a8c\u7684\u6d41\u7545\u5ea6 \u9f20\u6807\u60ac\u505c \u5f00\u542f\u6b64\u529f\u80fd\uff0c\u53ef\u4ee5\u9ad8\u4eae\u663e\u793a\u9f20\u6807\u60ac\u505c\u8282\u70b9\u7684\u4e00\u5ea6\u90bb\u5c45\u8282\u70b9 \u7ed3\u679c\u96c6\u5bfc\u51fa \u53ef\u4ee5\u5c06\u7ed3\u679c\u96c6\u5bfc\u51fa\u4e3a png\uff0cjson\uff0ccsv \u4e09\u79cd\u4e0d\u540c\u7684\u6587\u4ef6\u5f62\u5f0f \u5237\u65b0 \u70b9\u51fb\u5237\u65b0\u6309\u94ae\uff0c\u4f1a\u91cd\u65b0\u6267\u884c\u5f53\u524d\u9875\u9762\u7684\u521d\u59cb cypher \u8bed\u53e5\uff0c\u5e76\u5237\u65b0\u7ed3\u679c\u96c6 \u6700\u5927\u5316 \u70b9\u51fb\u6700\u5927\u5316\uff0c\u7ed3\u679c\u96c6\u5c55\u793a\u533a\u57df\u5c06\u5168\u5c4f\u5c55\u793a \u7ed3\u679c\u96c6\u5c55\u793a\u5f62\u5f0f\u5207\u6362 \u652f\u6301\u56fe\u8c31\u3001\u8868\u683c\u3001\u6587\u672c\u4e09\u79cd\u5f62\u5f0f","title":"3.3.2 \u7ed3\u679c\u96c6\u5c55\u793a\u533a\u57df\u529f\u80fd\u8be6\u60c5"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#333","text":"\u70b9\u8fb9\u6a21\u578b \u70b9\u8fb9\u6a21\u578b\u652f\u6301\u5b9e\u65f6\u7684\u3001\u589e\u3001\u5220\u3001\u6539\u3001\u67e5 \u70b9\u8fb9\u6a21\u578b\u652f\u6301\u5bfc\u5165\u548c\u5bfc\u51fa","title":"3.3.3 \u5efa\u6a21"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#334","text":"\u672c\u5730\u6570\u636e\u5bfc\u5165 \u9009\u62e9\u6587\u4ef6\u7f16\u7801\u683c\u5f0f \u9009\u62e9\u672c\u5730 CSV \u6587\u4ef6 \u9009\u62e9\u5bf9\u5e94\u7684\u8282\u70b9\u6216\u8fb9\u7684\u6a21\u578b \u8fdb\u884c\u6570\u636e\u6620\u5c04 \u5b8c\u6210\u6570\u636e\u5bfc\u5165","title":"3.3.4 \u6570\u636e\u5bfc\u5165"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#335","text":"\u5b58\u50a8\u8fc7\u7a0b\u7684\u4f7f\u7528 \u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u672c\u5730\u7f16\u5199\u7684 Plugin \u7a0b\u5e8f\uff0c\u5e76\u5728\u53ef\u89c6\u5316\u9875\u9762\u8fdb\u884c\u6267\u884c\uff0c\u5e76\u67e5\u770b\u6267\u884c\u7ed3\u679c \u7528\u6237\u53ef\u4ee5\u5728\u53ef\u89c6\u5316\u5bf9\u63d2\u4ef6\u8fdb\u884c\u3001\u5378\u8f7d\u3001\u6267\u884c\u3001\u4e0b\u8f7d\u7b49\u64cd\u4f5c","title":"3.3.5 \u63d2\u4ef6"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#336","text":"\u5176\u4e2d\u8bb0\u5f55\u4e86 TuGraph-browser \u7684\u4f7f\u7528\u65b9\u5f0f","title":"3.3.6 \u5e2e\u52a9"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#34","text":"","title":"3.4 \u63a7\u5236\u53f0"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#341","text":"\u5c55\u793a\u6570\u636e\u5e93\u76f8\u5173\u7684\u57fa\u7840\u914d\u7f6e\u4fe1\u606f","title":"3.4.1 \u6570\u636e\u5e93\u57fa\u7840\u4fe1\u606f"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#342","text":"\u7528\u6765\u521b\u5efa\u7528\u6237\u548c\u89d2\u8272\u7684\u529f\u80fd\u6a21\u5757\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u6743\u9650\u7684\u7ba1\u7406\u64cd\u4f5c","title":"3.4.2 \u6743\u9650\u7ba1\u7406"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#343","text":"\u8fd9\u91cc\u5c55\u793a\u4e86\u6570\u636e\u5e93\u5b9e\u65f6\u72b6\u6001\uff0c\u5305\u62ec\uff1aCPU \u4f7f\u7528\u7387\u3001\u5185\u5b58\u7528\u7387\u3001\u78c1\u76d8\u4f7f\u7528\u7387\u3001\u6570\u636e\u8bf7\u6c42\u6b21\u6570\u3001\u78c1\u76d8 IO","title":"3.4.3 \u5b9e\u65f6\u72b6\u6001"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#344","text":"\u5728\u8fd9\u91cc\u7528\u6237\u53ef\u4ee5\u770b\u5230\u5728\u6b63\u5728\u6267\u884c\u4e2d\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u5728\u6b64\u8fdb\u884c\u505c\u6b62\u4efb\u52a1\u7684\u64cd\u4f5c","title":"3.4.4 \u4efb\u52a1\u7ba1\u7406"},{"location":"zh-CN/2.operating/6.tools/2.tugraph-browser/#345","text":"\u8fd9\u91cc\u8bb0\u5f55\u7684\u6570\u636e\u5e93\u76f8\u5173\u7684\u5ba1\u8ba1\u65e5\u5fd7\uff0c\u7528\u6765\u6392\u67e5\u4f7f\u7528\u9047\u5230\u7684\u95ee\u9898","title":"3.4.5 \u5ba1\u8ba1\u65e5\u5fd7"},{"location":"zh-CN/2.operating/6.tools/3.tugraph-datax/","text":"TuGraph-DataX-Tool \u4f7f\u7528\u8bf4\u660e \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph DataX \u7684\u5b89\u88c5\u7f16\u8bd1\u548c\u4f7f\u7528\u793a\u4f8b \u7b80\u4ecb TuGraph \u5728\u963f\u91cc\u5f00\u6e90\u7684 DataX \u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86 TuGraph \u7684\u5199\u63d2\u4ef6\u4ee5\u53ca TuGraph jsonline \u6570\u636e\u683c\u5f0f\u7684\u652f\u6301\uff0c\u5176\u4ed6\u6570\u636e\u6e90\u53ef\u4ee5\u901a\u8fc7 DataX \u5f80 TuGraph \u91cc\u9762\u5199\u6570\u636e\u3002 DataX \u4ecb\u7ecd\u53c2\u8003 https://github.com/alibaba/DataX \u652f\u6301\u7684\u529f\u80fd\u5305\u62ec\uff1a \u4ece MySQL\u3001SQL Server\u3001Oracle\u3001PostgreSQL\u3001HDFS\u3001Hive\u3001HBase\u3001OTS\u3001ODPS\u3001Kafka \u7b49\u5404\u79cd\u5f02\u6784\u6570\u636e\u6e90\u5bfc\u5165 TuGraph \u5c06 TuGraph \u5bfc\u5165\u76f8\u5e94\u7684\u76ee\u6807\u6e90 \uff08\u5f85\u5f00\u53d1\uff09 \u7f16\u8bd1\u5b89\u88c5 git clone git@code.alipay.com:fma/DataX.git mvn -U clean package assembly:assembly -Dmaven.test.skip=true \u7f16\u8bd1\u51fa\u6765\u7684 DataX \u6587\u4ef6\u5728 target \u76ee\u5f55\u4e0b \u6587\u672c\u6570\u636e\u901a\u8fc7 DataX \u5bfc\u5165 TuGraph \u6211\u4eec\u4ee5 TuGraph \u624b\u518c\u4e2d\u5bfc\u5165\u5de5\u5177 lgraph_import \u7ae0\u8282\u4e3e\u7684\u6570\u636e\u4e3a\u4f8b\u5b50\uff0c\u6709\u4e09\u4e2a csv \u6570\u636e\u6587\u4ef6\uff0c\u5982\u4e0b\uff1a actors.csv nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang movies.csv tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 roles.csv nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 \u7136\u540e\u5efa\u4e09\u4e2a DataX \u7684 job \u914d\u7f6e\u6587\u4ef6\uff1a job_actors.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"actors.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" } ], \"files\": [ { \"label\": \"actor\", \"format\": \"JSON\", \"columns\": [\"aid\", \"name\"] } ] } } } ] } } job_movies.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"movies.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" }, { \"index\": 3, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } job_roles.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"roles.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\" }] } ], \"files\": [ { \"label\": \"play_in\", \"format\": \"JSON\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } } } ] } } ./lgraph_server -c lgraph_standalone.json -d 'run' \u542f\u52a8 TuGraph \u540e\u4f9d\u6b21\u6267\u884c\u5982\u4e0b\u4e09\u4e2a\u547d\u4ee4\uff1a python3 datax/bin/datax.py job_actors.json python3 datax/bin/datax.py job_movies.json python3 datax/bin/datax.py job_roles.json MySQL \u6570\u636e\u901a\u8fc7 DataX \u5bfc\u5165 TuGraph \u6211\u4eec\u5728 test database \u4e0b\u5efa\u7acb\u5982\u4e0b\u7535\u5f71 movies \u8868 CREATE TABLE `movies` ( `mid` varchar(200) NOT NULL, `name` varchar(100) NOT NULL, `year` int(11) NOT NULL, `rate` float(5,2) unsigned NOT NULL, PRIMARY KEY (`mid`) ); \u5f80\u8868\u4e2d\u63d2\u5165\u51e0\u6761\u6570\u636e insert into test.movies (mid, name, year, rate) values ('tt0188766', 'King of Comedy', 1999, 7.3), ('tt0286112', 'Shaolin Soccer', 2001, 7.3), ('tt4701660', 'The Mermaid', 2016, 6.3); \u5efa\u7acb\u4e00\u4e2a DataX \u7684 job \u914d\u7f6e\u6587\u4ef6 job_mysql_to_tugraph.json \u914d\u7f6e\u5b57\u6bb5\u65b9\u5f0f { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"column\": [\"mid\", \"name\", \"year\", \"rate\"], \"splitPk\": \"mid\", \"connection\": [ { \"table\": [\"movies\"], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } \u5199\u7b80\u5355 sql \u65b9\u5f0f { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"connection\": [ { \"querySql\": [ \"select mid, name, year, rate from test.movies where year > 2000;\" ], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } ./lgraph_server -c lgraph_standalone.json -d 'run' \u542f\u52a8 TuGraph \u540e\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a python3 datax/bin/datax.py job_mysql_to_tugraph.json","title":"TuGraph DataX"},{"location":"zh-CN/2.operating/6.tools/3.tugraph-datax/#tugraph-datax-tool","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGraph DataX \u7684\u5b89\u88c5\u7f16\u8bd1\u548c\u4f7f\u7528\u793a\u4f8b","title":"TuGraph-DataX-Tool \u4f7f\u7528\u8bf4\u660e"},{"location":"zh-CN/2.operating/6.tools/3.tugraph-datax/#_1","text":"TuGraph \u5728\u963f\u91cc\u5f00\u6e90\u7684 DataX \u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86 TuGraph \u7684\u5199\u63d2\u4ef6\u4ee5\u53ca TuGraph jsonline \u6570\u636e\u683c\u5f0f\u7684\u652f\u6301\uff0c\u5176\u4ed6\u6570\u636e\u6e90\u53ef\u4ee5\u901a\u8fc7 DataX \u5f80 TuGraph \u91cc\u9762\u5199\u6570\u636e\u3002 DataX \u4ecb\u7ecd\u53c2\u8003 https://github.com/alibaba/DataX \u652f\u6301\u7684\u529f\u80fd\u5305\u62ec\uff1a \u4ece MySQL\u3001SQL Server\u3001Oracle\u3001PostgreSQL\u3001HDFS\u3001Hive\u3001HBase\u3001OTS\u3001ODPS\u3001Kafka \u7b49\u5404\u79cd\u5f02\u6784\u6570\u636e\u6e90\u5bfc\u5165 TuGraph \u5c06 TuGraph \u5bfc\u5165\u76f8\u5e94\u7684\u76ee\u6807\u6e90 \uff08\u5f85\u5f00\u53d1\uff09","title":"\u7b80\u4ecb"},{"location":"zh-CN/2.operating/6.tools/3.tugraph-datax/#_2","text":"git clone git@code.alipay.com:fma/DataX.git mvn -U clean package assembly:assembly -Dmaven.test.skip=true \u7f16\u8bd1\u51fa\u6765\u7684 DataX \u6587\u4ef6\u5728 target \u76ee\u5f55\u4e0b","title":"\u7f16\u8bd1\u5b89\u88c5"},{"location":"zh-CN/2.operating/6.tools/3.tugraph-datax/#datax-tugraph","text":"\u6211\u4eec\u4ee5 TuGraph \u624b\u518c\u4e2d\u5bfc\u5165\u5de5\u5177 lgraph_import \u7ae0\u8282\u4e3e\u7684\u6570\u636e\u4e3a\u4f8b\u5b50\uff0c\u6709\u4e09\u4e2a csv \u6570\u636e\u6587\u4ef6\uff0c\u5982\u4e0b\uff1a actors.csv nm015950,Stephen Chow nm0628806,Man-Tat Ng nm0156444,Cecilia Cheung nm2514879,Yuqi Zhang movies.csv tt0188766,King of Comedy,1999,7.3 tt0286112,Shaolin Soccer,2001,7.3 tt4701660,The Mermaid,2016,6.3 roles.csv nm015950,Tianchou Yin,tt0188766 nm015950,Steel Leg,tt0286112 nm0628806,,tt0188766 nm0628806,coach,tt0286112 nm0156444,PiaoPiao Liu,tt0188766 nm2514879,Ruolan Li,tt4701660 \u7136\u540e\u5efa\u4e09\u4e2a DataX \u7684 job \u914d\u7f6e\u6587\u4ef6\uff1a job_actors.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"actors.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"aid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" } ], \"primary\": \"aid\" } ], \"files\": [ { \"label\": \"actor\", \"format\": \"JSON\", \"columns\": [\"aid\", \"name\"] } ] } } } ] } } job_movies.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"movies.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" }, { \"index\": 3, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } job_roles.json { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"txtfilereader\", \"parameter\": { \"path\": [\"roles.csv\"], \"encoding\": \"UTF-8\", \"column\": [ { \"index\": 0, \"type\": \"string\" }, { \"index\": 1, \"type\": \"string\" }, { \"index\": 2, \"type\": \"string\" } ], \"fieldDelimiter\": \",\" } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"play_in\", \"type\": \"EDGE\", \"properties\": [{ \"name\": \"role\", \"type\": \"STRING\" }] } ], \"files\": [ { \"label\": \"play_in\", \"format\": \"JSON\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } } } ] } } ./lgraph_server -c lgraph_standalone.json -d 'run' \u542f\u52a8 TuGraph \u540e\u4f9d\u6b21\u6267\u884c\u5982\u4e0b\u4e09\u4e2a\u547d\u4ee4\uff1a python3 datax/bin/datax.py job_actors.json python3 datax/bin/datax.py job_movies.json python3 datax/bin/datax.py job_roles.json","title":"\u6587\u672c\u6570\u636e\u901a\u8fc7 DataX \u5bfc\u5165 TuGraph"},{"location":"zh-CN/2.operating/6.tools/3.tugraph-datax/#mysql-datax-tugraph","text":"\u6211\u4eec\u5728 test database \u4e0b\u5efa\u7acb\u5982\u4e0b\u7535\u5f71 movies \u8868 CREATE TABLE `movies` ( `mid` varchar(200) NOT NULL, `name` varchar(100) NOT NULL, `year` int(11) NOT NULL, `rate` float(5,2) unsigned NOT NULL, PRIMARY KEY (`mid`) ); \u5f80\u8868\u4e2d\u63d2\u5165\u51e0\u6761\u6570\u636e insert into test.movies (mid, name, year, rate) values ('tt0188766', 'King of Comedy', 1999, 7.3), ('tt0286112', 'Shaolin Soccer', 2001, 7.3), ('tt4701660', 'The Mermaid', 2016, 6.3); \u5efa\u7acb\u4e00\u4e2a DataX \u7684 job \u914d\u7f6e\u6587\u4ef6 job_mysql_to_tugraph.json \u914d\u7f6e\u5b57\u6bb5\u65b9\u5f0f { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"column\": [\"mid\", \"name\", \"year\", \"rate\"], \"splitPk\": \"mid\", \"connection\": [ { \"table\": [\"movies\"], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } \u5199\u7b80\u5355 sql \u65b9\u5f0f { \"job\": { \"setting\": { \"speed\": { \"channel\": 1 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"root\", \"connection\": [ { \"querySql\": [ \"select mid, name, year, rate from test.movies where year > 2000;\" ], \"jdbcUrl\": [\"jdbc:mysql://127.0.0.1:3306/test?useSSL=false\"] } ] } }, \"writer\": { \"name\": \"tugraphwriter\", \"parameter\": { \"host\": \"127.0.0.1\", \"port\": 7071, \"username\": \"admin\", \"password\": \"73@TuGraph\", \"graphName\": \"default\", \"schema\": [ { \"label\": \"movie\", \"type\": \"VERTEX\", \"properties\": [ { \"name\": \"mid\", \"type\": \"STRING\" }, { \"name\": \"name\", \"type\": \"STRING\" }, { \"name\": \"year\", \"type\": \"STRING\" }, { \"name\": \"rate\", \"type\": \"FLOAT\", \"optional\": true } ], \"primary\": \"mid\" } ], \"files\": [ { \"label\": \"movie\", \"format\": \"JSON\", \"columns\": [\"mid\", \"name\", \"year\", \"rate\"] } ] } } } ] } } ./lgraph_server -c lgraph_standalone.json -d 'run' \u542f\u52a8 TuGraph \u540e\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a python3 datax/bin/datax.py job_mysql_to_tugraph.json","title":"MySQL \u6570\u636e\u901a\u8fc7 DataX \u5bfc\u5165 TuGraph"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/","text":"TuGraph Explore \u4f7f\u7528\u8bf4\u660e TuGraph Explore \u5f3a\u4f9d\u8d56 TuGraph\uff0c\u56e0\u6b64\uff0c\u5728\u542f\u52a8 Explore \u4e4b\u524d\uff0c\u6211\u4eec\u5148\u9700\u8981\u5148\u542f\u52a8 TuGraph\u3002 TuGraph \u7b80\u4ecb TuGraph \u662f\u8682\u8681\u96c6\u56e2\u81ea\u4e3b\u7814\u53d1\u7684\u56fe\u6570\u636e\u5e93\uff0c\u63d0\u4f9b\u56fe\u6570\u636e\u5e93\u5f15\u64ce\u548c\u56fe\u5206\u6790\u5f15\u64ce\u3002\u5176\u4e3b\u8981\u7279\u70b9\u662f\u5927\u6570\u636e\u91cf\u5b58\u50a8\u548c\u8ba1\u7b97\uff0c\u540c\u65f6\u652f\u6301\u9ad8\u6548\u7684\u5728\u7ebf\u4e8b\u52a1\u5904\u7406\uff08OLTP\uff09\u548c\u5728\u7ebf\u5206\u6790\u5904\u7406\uff08OLAP\uff09\u3002 \u5b89\u88c5 TuGraph \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003\u5b98\u7f51\u6587\u6863\uff08\uff09\u3002 TuGraph \u9700\u8981\u901a\u8fc7 Docker Image \u5b89\u88c5\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5728\u672c\u5730\u8fdb\u884c\u5b89\u88c5\uff1a \u5b89\u88c5\u672c\u5730 Docker \u73af\u5883\uff1a\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff1b $ sudo docker --version \u4e0a\u9762\u7684\u547d\u4ee4\u5982\u679c\u80fd\u987a\u5229\u6253\u5370\u51fa docker \u7248\u672c\u53f7\uff0c\u5219\u8bf4\u660e docker \u73af\u5883\u5df2\u5b89\u88c5\u3002 \u4e0b\u8f7d TuGraph \u955c\u50cf\uff1a \u70b9\u51fb\u4e0b\u8f7d TuGraph \u955c\u50cf \u76ee\u524d\uff0cTuGraph \u63d0\u4f9b\u57fa\u4e8e Ubuntu 16.04 LTS \u548c CenterOS 7.3 \u7cfb\u7edf\u7684\u955c\u50cf\u6587\u4ef6\uff0c\u955c\u50cf\u6587\u4ef6\u662f\u4e00\u4e2a\u540d\u4e3a lgraph_x.y.z.tar \u7684\u538b\u7f29\u6587\u4ef6\uff0c\u5176\u4e2d x.y.z \u662f TuGraph \u7684\u7248\u672c\u53f7\u3002 \u52a0\u8f7d TuGraph \u955c\u50cf\uff1a // lgraph_lastest.tar.gz \u662f TuGraph \u955c\u50cf\u6587\u4ef6\u540d $ docker import lgraph_lastest.tar.gz // \u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u63d0\u793a\u5df2\u52a0\u8f7d\u955c\u50cf \u542f\u52a8 Docker $ docker run -d -v {host_data_dir}:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:x.y.z $ docker exec -it {container_id} bash // host_data_dir = /Users/moyee/tugraph // container_id = xxx $ docker run -d -v /Users/moyee/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.1.1 $ docker exec -it xxx bash \u53c2\u6570\u8bf4\u660e\uff1a -v \u662f\u76ee\u5f55\u6620\u5c04 {host_data_dir} \u662f\u7528\u6237\u5e0c\u671b\u4fdd\u5b58\u6570\u636e\u7684\u76ee\u5f55\uff0c\u6bd4\u5982 /home/user1/workspace -p \u7684\u4f5c\u7528\u662f\u7aef\u53e3\u6620\u5c04\uff0c\u793a\u4f8b\u4e2d\u5c06 Docker \u7684 7090 \u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7684 7090 \u7aef\u53e3 {container_id} \u662f Docker \u7684 container id\uff0c\u53ef\u4ee5\u901a\u8fc7 docker ps \u83b7\u5f97 TuGraph \u64cd\u4f5c \u542f\u52a8 TuGraph \u670d\u52a1 $ lgraph_server --license /mnt/fma.lic --config ~/demo/movie/lgraph.json fma.lic \u662f\u6388\u6743\u6587\u4ef6\uff0c\u5e94\u653e\u5728 {host_data_dir} \u6587\u4ef6\u5939\u4e2d\uff0c\u6620\u5c04\u5230 docker \u7684 /mnt \u76ee\u5f55\u4e0b lgraph.json \u662f TuGraph \u7684\u914d\u7f6e\u6587\u4ef6 \u8bbf\u95ee TuGraph Query TuGraph Browser \u662f TuGraph \u63d0\u4f9b\u7684\u53ef\u89c6\u5316\u67e5\u8be2\u5de5\u5177\u3002\u7528\u6237\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8f93\u5165{IP}:{Port}\uff0c\u8f93\u5165\u9ed8\u8ba4\u7528\u6237\u540d\u4e3a admin\uff0c\u5bc6\u7801\u4e3a 73@TuGraph \u5b8c\u6210\u767b\u5f55\uff0c\u767b\u5f55\u6210\u529f\u540e\u8fdb\u5165\u5230 TuGraph Query \u9875\u9762\u3002 TuGraph Explore \u7b80\u4ecb TuGraph Explore \u662f\u57fa\u4e8e GraphInsight \u6784\u5efa\u7684\u56fe\u53ef\u89c6\u5206\u6790\u5e73\u53f0\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u56fe\u63a2\u7d22\u5206\u6790\u80fd\u529b\uff0c\u80fd\u591f\u5e2e\u52a9\u7528\u6237\u4ece\u6d77\u91cf\u7684\u56fe\u6570\u636e\u4e2d\u6d1e\u5bdf\u51fa\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002 \u542f\u52a8 TuGraph Explore TuGraph \u5b89\u88c5\u6210\u529f\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b89\u88c5 TuGraph Explore\u3002 \u52a0\u8f7d TuGraph Explore \u955c\u50cf\uff1a // lgraph_lastest.tar.gz \u662f TuGraph \u955c\u50cf\u6587\u4ef6\u540d $ docker import tugraph_explore.tar.gz // \u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u63d0\u793a\u5df2\u52a0\u8f7d\u955c\u50cf \u542f\u52a8 Docker $ docker run -d -p 7091:7091 -it reg.docker.alibaba-inc.com/tugraph-explore:1.0.1 $ docker exec -it {container_id} bash \u53c2\u6570\u8bf4\u660e\uff1a -p \u7684\u4f5c\u7528\u662f\u7aef\u53e3\u6620\u5c04\uff0c\u793a\u4f8b\u4e2d\u5c06 Docker \u7684 7091 \u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7684 7091 \u7aef\u53e3 {container_id} \u662f Docker \u7684 container id\uff0c\u53ef\u4ee5\u901a\u8fc7 docker ps \u83b7\u5f97 \u542f\u52a8 TuGraph Explore $ cd /usr/src/tugraphexplore $ npm run dev -- -p 7091 TuGraph Explore \u670d\u52a1\u542f\u52a8\u8d77\u6765\u4ee5\u540e\uff0c\u901a\u8fc7 **http://localhost:7091/tugraph/explore.html** \u5c31\u53ef\u4ee5\u8bbf\u95ee\u4e86\uff0c\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u5c31\u4f1a\u770b\u5230\u5982\u4e0b\u9875\u9762\u3002 \u8fde\u63a5 TuGraph TuGraph Explore \u542f\u52a8\u8d77\u6765\u4ee5\u540e\uff0c\u7b2c\u4e00\u6b65\u5c31\u662f\u9700\u8981\u8fde\u63a5 TuGraph \u6570\u636e\u5e93\u3002\u70b9\u51fb\u300c\u8fde\u63a5\u300d\u6309\u94ae\uff0c\u5f39\u51fa\u8fde\u63a5\u56fe\u6570\u636e\u5e93\u7684\u9875\u9762\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u8fde\u63a5 TuGraph \u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f\uff1a \u56fe\u6570\u636e\u5e93\u7684\u8d26\u53f7 \u56fe\u6570\u636e\u5e93\u7684\u5bc6\u7801 \u56fe\u6570\u636e\u5e93\u7684\u5730\u5740\uff1a\u683c\u5f0f\u4e3a ip:port \u5730\u5740\u9700\u8981\u586b\u5199\u5bb9\u5668 IP\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6307\u4ee4\u67e5\u770b \u3002 $ docker run -d -v /Users/xx/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.3.0 $ docker exec -it 8408b49033bc1698(TuGraph \u7684\u5bb9\u5668) bash $ cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.4 8408b543243bc69 \u5982\u4e0a\u6240\u793a\uff0c\u8fde\u63a5\u56fe\u6570\u636e\u5e93\u7684\u5730\u5740\u5e94\u8be5\u586b\u5199\uff1a 172.17.0.4:7090 \u3002","title":"TuGraph Explore"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph-explore","text":"TuGraph Explore \u5f3a\u4f9d\u8d56 TuGraph\uff0c\u56e0\u6b64\uff0c\u5728\u542f\u52a8 Explore \u4e4b\u524d\uff0c\u6211\u4eec\u5148\u9700\u8981\u5148\u542f\u52a8 TuGraph\u3002","title":"TuGraph Explore \u4f7f\u7528\u8bf4\u660e"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph","text":"TuGraph \u662f\u8682\u8681\u96c6\u56e2\u81ea\u4e3b\u7814\u53d1\u7684\u56fe\u6570\u636e\u5e93\uff0c\u63d0\u4f9b\u56fe\u6570\u636e\u5e93\u5f15\u64ce\u548c\u56fe\u5206\u6790\u5f15\u64ce\u3002\u5176\u4e3b\u8981\u7279\u70b9\u662f\u5927\u6570\u636e\u91cf\u5b58\u50a8\u548c\u8ba1\u7b97\uff0c\u540c\u65f6\u652f\u6301\u9ad8\u6548\u7684\u5728\u7ebf\u4e8b\u52a1\u5904\u7406\uff08OLTP\uff09\u548c\u5728\u7ebf\u5206\u6790\u5904\u7406\uff08OLAP\uff09\u3002","title":"TuGraph \u7b80\u4ecb"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph_1","text":"\u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003\u5b98\u7f51\u6587\u6863\uff08\uff09\u3002 TuGraph \u9700\u8981\u901a\u8fc7 Docker Image \u5b89\u88c5\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5728\u672c\u5730\u8fdb\u884c\u5b89\u88c5\uff1a \u5b89\u88c5\u672c\u5730 Docker \u73af\u5883\uff1a\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff1b $ sudo docker --version \u4e0a\u9762\u7684\u547d\u4ee4\u5982\u679c\u80fd\u987a\u5229\u6253\u5370\u51fa docker \u7248\u672c\u53f7\uff0c\u5219\u8bf4\u660e docker \u73af\u5883\u5df2\u5b89\u88c5\u3002 \u4e0b\u8f7d TuGraph \u955c\u50cf\uff1a \u70b9\u51fb\u4e0b\u8f7d TuGraph \u955c\u50cf \u76ee\u524d\uff0cTuGraph \u63d0\u4f9b\u57fa\u4e8e Ubuntu 16.04 LTS \u548c CenterOS 7.3 \u7cfb\u7edf\u7684\u955c\u50cf\u6587\u4ef6\uff0c\u955c\u50cf\u6587\u4ef6\u662f\u4e00\u4e2a\u540d\u4e3a lgraph_x.y.z.tar \u7684\u538b\u7f29\u6587\u4ef6\uff0c\u5176\u4e2d x.y.z \u662f TuGraph \u7684\u7248\u672c\u53f7\u3002 \u52a0\u8f7d TuGraph \u955c\u50cf\uff1a // lgraph_lastest.tar.gz \u662f TuGraph \u955c\u50cf\u6587\u4ef6\u540d $ docker import lgraph_lastest.tar.gz // \u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u63d0\u793a\u5df2\u52a0\u8f7d\u955c\u50cf \u542f\u52a8 Docker $ docker run -d -v {host_data_dir}:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:x.y.z $ docker exec -it {container_id} bash // host_data_dir = /Users/moyee/tugraph // container_id = xxx $ docker run -d -v /Users/moyee/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.1.1 $ docker exec -it xxx bash \u53c2\u6570\u8bf4\u660e\uff1a -v \u662f\u76ee\u5f55\u6620\u5c04 {host_data_dir} \u662f\u7528\u6237\u5e0c\u671b\u4fdd\u5b58\u6570\u636e\u7684\u76ee\u5f55\uff0c\u6bd4\u5982 /home/user1/workspace -p \u7684\u4f5c\u7528\u662f\u7aef\u53e3\u6620\u5c04\uff0c\u793a\u4f8b\u4e2d\u5c06 Docker \u7684 7090 \u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7684 7090 \u7aef\u53e3 {container_id} \u662f Docker \u7684 container id\uff0c\u53ef\u4ee5\u901a\u8fc7 docker ps \u83b7\u5f97","title":"\u5b89\u88c5 TuGraph"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph_2","text":"","title":"TuGraph \u64cd\u4f5c"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph_3","text":"$ lgraph_server --license /mnt/fma.lic --config ~/demo/movie/lgraph.json fma.lic \u662f\u6388\u6743\u6587\u4ef6\uff0c\u5e94\u653e\u5728 {host_data_dir} \u6587\u4ef6\u5939\u4e2d\uff0c\u6620\u5c04\u5230 docker \u7684 /mnt \u76ee\u5f55\u4e0b lgraph.json \u662f TuGraph \u7684\u914d\u7f6e\u6587\u4ef6","title":"\u542f\u52a8 TuGraph \u670d\u52a1"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph-query","text":"TuGraph Browser \u662f TuGraph \u63d0\u4f9b\u7684\u53ef\u89c6\u5316\u67e5\u8be2\u5de5\u5177\u3002\u7528\u6237\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8f93\u5165{IP}:{Port}\uff0c\u8f93\u5165\u9ed8\u8ba4\u7528\u6237\u540d\u4e3a admin\uff0c\u5bc6\u7801\u4e3a 73@TuGraph \u5b8c\u6210\u767b\u5f55\uff0c\u767b\u5f55\u6210\u529f\u540e\u8fdb\u5165\u5230 TuGraph Query \u9875\u9762\u3002","title":"\u8bbf\u95ee TuGraph Query"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph-explore_1","text":"TuGraph Explore \u662f\u57fa\u4e8e GraphInsight \u6784\u5efa\u7684\u56fe\u53ef\u89c6\u5206\u6790\u5e73\u53f0\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u56fe\u63a2\u7d22\u5206\u6790\u80fd\u529b\uff0c\u80fd\u591f\u5e2e\u52a9\u7528\u6237\u4ece\u6d77\u91cf\u7684\u56fe\u6570\u636e\u4e2d\u6d1e\u5bdf\u51fa\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002","title":"TuGraph Explore \u7b80\u4ecb"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph-explore_2","text":"TuGraph \u5b89\u88c5\u6210\u529f\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b89\u88c5 TuGraph Explore\u3002 \u52a0\u8f7d TuGraph Explore \u955c\u50cf\uff1a // lgraph_lastest.tar.gz \u662f TuGraph \u955c\u50cf\u6587\u4ef6\u540d $ docker import tugraph_explore.tar.gz // \u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u63d0\u793a\u5df2\u52a0\u8f7d\u955c\u50cf \u542f\u52a8 Docker $ docker run -d -p 7091:7091 -it reg.docker.alibaba-inc.com/tugraph-explore:1.0.1 $ docker exec -it {container_id} bash \u53c2\u6570\u8bf4\u660e\uff1a -p \u7684\u4f5c\u7528\u662f\u7aef\u53e3\u6620\u5c04\uff0c\u793a\u4f8b\u4e2d\u5c06 Docker \u7684 7091 \u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7684 7091 \u7aef\u53e3 {container_id} \u662f Docker \u7684 container id\uff0c\u53ef\u4ee5\u901a\u8fc7 docker ps \u83b7\u5f97 \u542f\u52a8 TuGraph Explore $ cd /usr/src/tugraphexplore $ npm run dev -- -p 7091 TuGraph Explore \u670d\u52a1\u542f\u52a8\u8d77\u6765\u4ee5\u540e\uff0c\u901a\u8fc7 **http://localhost:7091/tugraph/explore.html** \u5c31\u53ef\u4ee5\u8bbf\u95ee\u4e86\uff0c\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u5c31\u4f1a\u770b\u5230\u5982\u4e0b\u9875\u9762\u3002","title":"\u542f\u52a8 TuGraph Explore"},{"location":"zh-CN/2.operating/6.tools/4.tugraph-explore/#tugraph_4","text":"TuGraph Explore \u542f\u52a8\u8d77\u6765\u4ee5\u540e\uff0c\u7b2c\u4e00\u6b65\u5c31\u662f\u9700\u8981\u8fde\u63a5 TuGraph \u6570\u636e\u5e93\u3002\u70b9\u51fb\u300c\u8fde\u63a5\u300d\u6309\u94ae\uff0c\u5f39\u51fa\u8fde\u63a5\u56fe\u6570\u636e\u5e93\u7684\u9875\u9762\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u8fde\u63a5 TuGraph \u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f\uff1a \u56fe\u6570\u636e\u5e93\u7684\u8d26\u53f7 \u56fe\u6570\u636e\u5e93\u7684\u5bc6\u7801 \u56fe\u6570\u636e\u5e93\u7684\u5730\u5740\uff1a\u683c\u5f0f\u4e3a ip:port \u5730\u5740\u9700\u8981\u586b\u5199\u5bb9\u5668 IP\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6307\u4ee4\u67e5\u770b \u3002 $ docker run -d -v /Users/xx/tugraph:/mnt -p 7090:7090 -it reg.docker.alibaba-inc.com/tugraph/tugraph:3.3.0 $ docker exec -it 8408b49033bc1698(TuGraph \u7684\u5bb9\u5668) bash $ cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.4 8408b543243bc69 \u5982\u4e0a\u6240\u793a\uff0c\u8fde\u63a5\u56fe\u6570\u636e\u5e93\u7684\u5730\u5740\u5e94\u8be5\u586b\u5199\uff1a 172.17.0.4:7090 \u3002","title":"\u8fde\u63a5 TuGraph"},{"location":"zh-CN/3.developer-document/1.restful-api/","text":"RESTful API \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGrpah \u7684 Rest API \u7684\u8c03\u7528\u8be6\u60c5\u3002 \u7b80\u4ecb TuGraph \u63d0\u4f9b\u9075\u4ece REST \u89c4\u8303\u7684 HTTP API\uff0c\u4ee5\u4f9b\u5f00\u53d1\u8005\u901a\u8fc7 HTTP \u8bf7\u6c42\u8fdc\u7a0b\u8c03\u7528 TuGraph \u63d0\u4f9b\u7684\u670d\u52a1\u3002 \u672c\u6587\u6863\u63cf\u8ff0 TuGraph \u7684 HTTP API \u4f7f\u7528\u65b9\u5f0f\u3002 :warning: \u9664\"\u767b\u9646\"\u3001\"\u67e5\u8be2\"\u548c\"\u5b58\u50a8\u8fc7\u7a0b\"\u5916\uff0c\u5176\u4f59\u63a5\u53e3\u81ea 2023\u5e744\u670830\u65e5 \u8d77\u5c06\u4e0d\u518d\u63d0\u4f9b\u652f\u6301\uff0c\u7edf\u4e00\u4f7f\u7528Cypher\u63a5\u53e3\u63d0\u4f9b\u670d\u52a1\u3002 \u8bf7\u6c42\u4e0e\u6570\u636e\u683c\u5f0f \u8bf7\u6c42 TuGraph \u652f\u6301 HTTP GET/POST/PUT/DELETE \u8bf7\u6c42\u3002\u5176\u4e2d\uff1a GET \u8bf7\u6c42\u7528\u4e8e\u53ea\u8bfb\u8bf7\u6c42\uff0c\u5982\u8bfb\u53d6\u9876\u70b9\u5c5e\u6027\uff0c\u8fb9\u5c5e\u6027\u7b49\u64cd\u4f5c\uff1b POST \u8bf7\u6c42\u7528\u4e8e\u521b\u5efa\u5b9e\u4f53\uff0c\u63d0\u4ea4 Cypher\uff0c\u4ee5\u53ca\u52a0\u8f7d\u548c\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b\uff1b PUT \u8bf7\u6c42\u7528\u4e8e\u4fee\u6539\u5df2\u6709\u5b9e\u4f53\uff0c\u5982\u4fee\u6539\u9876\u70b9\u5c5e\u6027\uff0c\u8fb9\u5c5e\u6027\u7b49\uff1b DELETE \u8bf7\u6c42\u7528\u4e8e\u5220\u9664\u5df2\u6709\u5b9e\u4f53\uff0c\u5982\u5220\u9664\u9876\u70b9\uff0c\u8fb9\u7b49\u3002 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u8bf7\u6c42\u7684\u62a5\u5934(request header)\u4e2d\u8bbe\u7f6e server_version \u6765\u4fdd\u8bc1\u8bf7\u6c42\u7684\u670d\u52a1\u5668\u6709\u8db3\u591f\u65b0\u7684\u6570\u636e\u3002 \u5f53\u524d\u7684 server_version \u53ef\u4ee5\u4ece\u670d\u52a1\u5668\u8fd4\u56de\u7684\u62a5\u5934\u4e2d\u83b7\u53d6\u3002 \u6570\u636e\u683c\u5f0f \u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u6570\u636e\u4ea4\u4e92\u7684\u683c\u5f0f\u662f JSON\u3002\u5728\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u8bf7\u5c06\u53d1\u9001\u6570\u636e\u7684\u8bf7\u6c42\u7684\u62a5\u5934\u8bbe\u7f6e\u4e3a Accept:application/json, Content-Type:application/json \u3002 \u4f8b\u5982\u5728\u521b\u5efa\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u8bf7\u6c42\u62a5\u5934\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a Accept: application/json; charset=UTF-8 Content-Type: application/json server_version: 12 \u8fd4\u56de\u503c TuGraph \u8fd4\u56de\u7684 HTTP \u72b6\u6001\u7801\u5305\u542b\u4ee5\u4e0b\u56db\u79cd\uff1a 200 OK: \u64cd\u4f5c\u6210\u529f 307 Temporary Redirect: \u64cd\u4f5c\u88ab\u91cd\u5b9a\u5411\uff0c\u4e00\u822c\u7528\u4e8e\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u628a\u64cd\u4f5c\u91cd\u5b9a\u5411\u5230 master \u4e0a 400 Bad Request: \u8f93\u5165\u6709\u8bef\uff0c\u4f8b\u5982 URI \u9519\u8bef\uff0c\u6216\u8005\u8bf7\u6c42\u4e2d\u7684 JSON \u53c2\u6570\u9519\u8bef 500 Internal Server Error: \u670d\u52a1\u5668\u7aef\u9519\u8bef \u5f53\u64cd\u4f5c\u6210\u529f\u65f6\uff0c\u8fd4\u56de\u7684 JSON \u4e2d\u5305\u542b\u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u3002\u5f53\u64cd\u4f5c\u91cd\u5b9a\u5411\u65f6\uff0c\u8fd4\u56de\u7684 HTTP \u62a5\u5934\u4e2d\u7684 location \u57df\u5305\u542b\u91cd\u5b9a\u5411\u76ee\u7684\u5730\u5740\u3002 \u5f53\u53d1\u751f\u8f93\u5165\u9519\u8bef\u6216\u8005\u670d\u52a1\u5668\u9519\u8bef\u65f6\uff0c\u8fd4\u56de\u7684 JSON \u4e2d\u5305\u542b error_message \u57df\uff0c\u5176\u5185\u5bb9\u662f\u9519\u8bef\u63d0\u793a\u3002 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u8fd8\u4f1a\u5728\u62a5\u5934\u4e2d\u8bbe\u7f6e server_version \uff0c\u4ee5\u544a\u77e5\u5ba2\u6237\u7aef\u5f53\u524d\u670d\u52a1\u5668\u7684\u6570\u636e\u7248\u672c\u53f7\u3002\u5f53\u5ba2\u6237\u7aef\u5728\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u8be5\u6570\u636e\u7248\u672c\u53f7\u53ef\u4ee5\u4fdd\u8bc1\u5ba2\u6237\u7aef\u4e0d\u4f1a\u8bfb\u5230\u9519\u8bef\u7684\u5386\u53f2\u6570\u636e\u3002 URI \u683c\u5f0f TuGraph REST API \u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1aService Root, login, info, label, index, node, relationship, cypher, cpp_plugin, \u4ee5\u53ca python_plugin\u3002 \u5404\u529f\u80fd\u4f7f\u7528\u7684 URI \u683c\u5f0f\u5982\u4e0b\uff1a URI \u8bf4\u660e /web web \u53ef\u89c6\u5316\u754c\u9762 /cypher cypher \u8bf7\u6c42 /acl \u6743\u9650\u63a7\u5236 /user \u7528\u6237\u7ba1\u7406 /login \u7528\u6237\u767b\u5f55 /info \u6570\u636e\u5e93\u72b6\u6001\u53ca\u63d0\u793a\u4fe1\u606f /task \u4efb\u52a1\u7ba1\u7406 /db \u5b50\u56fe\u64cd\u4f5c \u5176\u4e2d\u5b50\u56fe\u64cd\u4f5c\u53c8\u5206\u4e3a\uff1a URI \u8bf4\u660e /db \u5b50\u56fe\u7684\u521b\u5efa\uff0c\u5220\u9664 /db/ {graph_name} /node \u9876\u70b9\u64cd\u4f5c /db/ {graph_name} /relationship \u8fb9\u64cd\u4f5c /db/ {graph_name} /label Label \u76f8\u5173\u64cd\u4f5c /db/ {graph_name} /index \u7d22\u5f15\u76f8\u5173\u64cd\u4f5c /db/ {graph_name} /cypher \u5b50\u56fe\u76f8\u5173 cypher \u64cd\u4f5c /db/ {graph_name} /cpp_plugin C++\u5b58\u50a8\u8fc7\u7a0b /db/ {graph_name} /python_plugin Python \u5b58\u50a8\u8fc7\u7a0b /db/ {graph_name} /import \u5728\u7ebf\u5bfc\u5165 /db/ {graph_name} /misc \u5176\u5b83\u64cd\u4f5c \u767b\u9646 TuGraph \u63d0\u4f9b\u57fa\u4e8e JWT \u7684\u7528\u6237\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTP \u6216 HTTPS \u534f\u8bae\u8fdb\u884c\u4f20\u8f93\u3002\u7cfb\u7edf\u9ed8\u8ba4\u4f7f\u7528 HTTP \u534f\u8bae\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528 HTTPS\uff0c\u9700\u8981\u5728 lgraph.json \u914d\u7f6e\u6587\u4ef6\u4e2d\u5c06 ssl_auth \u8bbe\u4e3a 1\u3002 \u767b\u5f55 \u7528\u6237\u901a\u8fc7\u7528\u6237\u540d\u548c\u5bc6\u7801\u53d1\u9001\u767b\u5f55\u8bf7\u6c42\u3002\u767b\u5f55\u6210\u529f\u4f1a\u6536\u5230\u5e26\u6709\u7b7e\u540d\u7684\u4ee4\u724c\uff0c\u5373 Json Web Token\uff0c\u5ba2\u6237\u7aef\u50a8\u5b58\u8be5\u4ee4\u724c\uff0c\u5e76\u4e14\u7528\u4e8e\u4ee5\u540e\u7684\u6bcf\u6b21\u53d1\u9001\u8bf7\u6c42\u3002\u5982\u679c\u767b\u5f55\u5931\u8d25\u4f1a\u6536\u5230\u201cAuthentication failed\u201d\u9519\u8bef\u3002 URI : /login METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | user | \u7528\u6237\u540d | \u5b57\u7b26\u4e32 | | password | \u5bc6\u7801 | \u5b57\u7b26\u4e32 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | jwt | \u4ee4\u724c | \u5b57\u7b26\u4e32 | Example request. \u2022 POST http://localhost:7070/login \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"user\":\"admin\", \"password\":\"73@TuGraph\" } Example response. \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" } \u8eab\u4efd\u5237\u65b0 Token\u5931\u6548\u540e\uff0c\u524d\u7aef\u53d1\u8d77\u5237\u65b0token\u63a5\u53e3\uff0c\u540e\u7aef\u9a8c\u8bc1token\u5408\u6cd5\u6027\u3002\u521d\u6b21\u767b\u5f55\u540e\uff0c1\u5c0f\u65f6\u5185\u6709\u6548\uff0c\u9700\u5237\u65b0\u4f7f\u7528\u3002\u5373\u4f7f\u5237\u65b0\uff0c24\u5c0f\u65f6\u540e\u4e5f\u4f1a\u5f3a\u5236\u9000\u51fa\uff0c\u9700\u8981\u91cd\u65b0\u767b\u9646\u3002 \u9a8c\u8bc1\u901a\u8fc7\uff0c\u751f\u6210\u65b0\u7684token\uff1b\u9a8c\u8bc1\u5931\u8d25\u8fd4\u56de\u72b6\u6001\u7801401\u3002 URI : /refresh METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | Authorization | \u4ee4\u724c | \u5b57\u7b26\u4e32 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | jwt | \u4ee4\u724c | \u5b57\u7b26\u4e32 | Example request. \u2022 POST http://localhost:7070/refresh \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\": \"Bearer eyJhbGciOiJIUz32NiIsInR5cCI6IkpXVDJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byj3fYVAH4D88dfTD_zYQ_uAvdizTMek\" } Example response. \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" } \u767b\u51fa \u7528\u6237\u767b\u51fa\uff0c\u540c\u65f6\u5220\u9664token\u3002 URI : /logout METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | Authorization | \u4ee4\u724c | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/logout \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\" : \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJmbWEuYWkiLCJwYXNzd29yZCI6IjczQFR1R3JhcGgiLCJ1c2VyIjoiYWRtaW4ifQ.o_yb5veSJkuy-ieBp4MqTk-tC1grcKotgVbgNJ0TyTU\" } Example response. \u2022 200: OK \u67e5\u8be2 URI \u683c\u5f0f\u4e3a http://{host}:{port}/cypher \u8c03\u7528 Cypher URI : /cypher METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | graph | \u6570\u636e\u5e93 | \u5b57\u7b26\u4e32 | | cypher | \u67e5\u8be2\u8bed\u53e5 | \u5b57\u7b26\u4e32 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | result | \u8fd0\u884c\u7ed3\u679c | \u5217\u8868 | | elapsed | \u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09 | \u6d6e\u70b9\u6570 | | header | \u8fd4\u56de\u7ed3\u679c\u7684\u8868\u5934 | \u5217\u8868 | | size | \u7ed3\u679c\u6570 | \u6574\u578b | \u5176\u4e2d header \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e00\u5143\u7d20\u683c\u5f0f\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b name \u5217\u540d \u5b57\u7b26\u4e32 type \u5217\u6570\u636e\u7c7b\u578b\uff0c0 \u4e3a\u6807\u91cf\uff0c1 \u4e3a\u9876\u70b9 id\uff0c2 \u4e3a\u5411\u91cf Example request. \u2022 POST http://localhost:7070/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n) RETURN n,n.name LIMIT 10\" } Example response. \u2022 200: OK Output: { \"elapsed\": 0.001224517822265625, \"header\": [ { \"name\": \"n\", \"type\": 1 }, { \"name\": \"n.name\", \"type\": 0 } ] \"result\": [ [ 0, \"Rachel Kempson\" ], [ 1, \"Michael Redgrave\" ], [ 2, \"Vanessa Redgrave\" ] ], \"size\": 3 } \u8c03\u7528\u5e26\u53c2\u6570\u7684 Cypher Cypher \u652f\u6301\u4f7f\u7528\u53c2\u6570\u8fdb\u884c\u67e5\u8be2\u3002\u5f53\u8c03\u7528\u5e26\u53c2\u6570\u7684 Cypher \u67e5\u8be2\u65f6\uff0cTuGraph \u4f1a\u7f13\u5b58\u8be5\u67e5\u8be2\u7684 \u6267\u884c\u8ba1\u5212\uff08execution plan\uff09\uff0c\u4ee5\u52a0\u901f\u540e\u7eed\u540c\u7c7b\u67e5\u8be2\u7684\u901f\u5ea6\u3002 URI : /cypher METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | graph | \u6570\u636e\u5e93 | \u5b57\u7b26\u4e32 | | cypher | \u67e5\u8be2\u8bed\u53e5 | \u5b57\u7b26\u4e32 | | parameters | \u53c2\u6570 | \u5217\u8868 | RESPONSE : \u4e0e \u8c03\u7528 Cypher \u76f8\u540c\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n:Person {name:$param1}) RETURN n.birthyear\", \"parameters\": { \"$param1\": \"Lindsay Lohan\" } } Example response. \u2022 200: OK Output: { \"elapsed\": 0.005886077880859375, \"header\": [ { \"name\": \"n.birthyear\", \"type\": 0 } ], \"result\": [ [ 1986 ] ], \"size\": 1 } \u5b58\u50a8\u8fc7\u7a0b URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/cpp_plugin|python_plugin \u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b TuGraph \u670d\u52a1\u542f\u52a8\u65f6\uff0c\u5982\u679c load_plugins \u4e3a\u771f\uff0c\u5219\u4f1a\u81ea\u52a8\u52a0\u8f7d plugin \u76ee\u5f55\u4e0b\u7684\u6240\u6709 plugin\u3002\u5426\u5219\u9700\u8981\u624b\u52a8\u52a0\u8f7d\u3002\u6b64\u5916\uff0c\u5982\u679c\u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7ba1\u7406\u5458\u66f4\u65b0\u4e86 plugin \u6587\u4ef6\uff0c\u4e5f\u9700\u8981\u624b\u52a8\u91cd\u65b0\u52a0\u8f7d\u3002\u91cd\u65b0\u52a0\u8f7d plugin \u7684\u8c03\u7528\u683c\u5f0f\u4e3a\uff1a URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u63d2\u4ef6\u540d\u79f0 | \u5b57\u7b26\u4e32 | | description | \u63d2\u4ef6\u8bf4\u660e | \u5b57\u7b26\u4e32 | | code_base64 | \u63d2\u4ef6\u4ee3\u7801 | \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 base64 \u7f16\u7801 | | read_only | \u662f\u5426\u4e3a\u53ea\u8bfb\u5b58\u50a8\u8fc7\u7a0b | \u5e03\u5c14\u503c | | code_type | \u4e0a\u4f20\u4ee3\u7801\u7684\u7c7b\u578b\uff0cC++\u7c7b\u578b\u53ef\u9009 zip/so/cpp\uff0cPython \u4e3a py | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.zip}\", \"read_only\" : true, \"code_type\" : \"zip\" } Example response. \u2022 200: OK \u5217\u51fa\u6240\u6709\u5b58\u50a8\u8fc7\u7a0b URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : GET RESPONSE : \u5b58\u50a8\u8fc7\u7a0b\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a plugin \u7684\u63cf\u8ff0\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u5b58\u50a8\u8fc7\u7a0b\u540d | \u5b57\u7b26\u4e32 | | description | \u5b58\u50a8\u8fc7\u7a0b\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | | read_only | \u5b58\u50a8\u8fc7\u7a0b\u662f\u5426\u53ea\u8bfb | \u5e03\u5c14\u503c | Example request. \u2022 GET http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { [ { \"description\":\"adds a vertex label to the db\", \"name\":\"add_label\", \"read_only\":false }, { \"description\": \"scans graph and get number of edges\", \"name\": \"scan_graph\", \"read_only\": true } ] } \u83b7\u53d6\u5b58\u50a8\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : GET RESPONSE : \u5b58\u50a8\u8fc7\u7a0b\u4fe1\u606f\uff0c\u5305\u62ec\u4ee3\u7801\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u5b58\u50a8\u8fc7\u7a0b\u540d | \u5b57\u7b26\u4e32 | | description | \u5b58\u50a8\u8fc7\u7a0b\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | | read_only | \u5b58\u50a8\u8fc7\u7a0b\u662f\u5426\u53ea\u8bfb | \u5e03\u5c14\u503c | | code_base64 | \u5b58\u50a8\u8fc7\u7a0b\u7684\u4ee3\u7801 | \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 base64 \u7f16\u7801 | | code_type | \u4e0a\u4f20\u4ee3\u7801\u7684\u7c7b\u578b\uff0cC++\u7c7b\u578b\u53ef\u9009 zip/so/cpp\uff0cPython \u4e3a py | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/db/graph1/cpp_plugin/echo \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.zip}\", \"read_only\" : true, \"code_type\" : \"zip\" } \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : POST REQUEST : \u5b57\u7b26\u4e32\u8f93\u5165 | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | data | \u8f93\u5165\u6570\u636e | \u5b57\u7b26\u4e32 | | timeout | \u8d85\u65f6\u957f\u5ea6\uff08\u79d2\uff0c\u53ef\u9009\uff0c\u7f3a\u7701\u503c\u4e3a 0\uff09 | \u6d6e\u70b9 | | in_process | \u662f\u5426\u5728\u672c\u8fdb\u7a0b\u8c03\u7528\uff08\u53ef\u9009\uff0c\u7f3a\u7701\u503c\u4e3a false\uff09 | \u5e03\u5c14\u503c | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | result | \u8fd0\u884c\u7ed3\u679c | \u5b57\u7b26\u4e32 | Example request. \u2022 POST http://localhost:7070/db/graph1/python_plugin/echo \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { data : \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\", timeout : 0, in_process : true } Example response. \u2022 200: OK Output: { \"result\": \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\" } \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1/cpp_plugin/example_plugin \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Deprecated \u4ee5\u4e0b\u63a5\u53e3\u5c06\u57284/30/2023\u4e4b\u540e\u88ab\u5220\u9664\u3002 \u7528\u6237\u7ba1\u7406 \u7cfb\u7edf\u9ed8\u8ba4\u521b\u5efa\u4e00\u4e2a\u7ba1\u7406\u5458\uff0c\u7ba1\u7406\u5458\u7528\u6237\u540d\u4e3a admin \uff0c\u5bc6\u7801\u4e3a 73 _@TuGraph _ _ _\u3002\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u8bf7\u7528\u6237\u5728\u7b2c\u4e00\u6b21\u542f\u52a8\u670d\u52a1\u5668\u540e\u66f4\u6539\u5bc6\u7801\u3002 \u6dfb\u52a0\u7528\u6237 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u6237\uff0c\u5e76\u4e3a\u5176\u8bbe\u7f6e\u521d\u59cb\u5bc6\u7801\u3002\u53ea\u6709\u7ba1\u7406\u5458\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002\u5176\u4e2d\u7528\u6237\u540d\u53ea\u80fd\u7531\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf\u6784\u6210\uff0c\u5bc6\u7801\u5219\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u5b57\u7b26\u3002\u7528\u6237\u540d\u548c\u5bc6\u7801\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7 64 \u5b57\u8282\u3002\u6dfb\u52a0\u7528\u6237\u65f6\u8fd8\u53ef\u4ee5\u4e3a\u7528\u6237\u589e\u52a0\u4e00\u4e2a\u63cf\u8ff0\uff0c\u7528\u6237\u63cf\u8ff0\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u5b57\u7b26\uff0c\u6700\u957f\u4e0d\u8d85\u8fc7 512 \u5b57\u8282\u3002 \u65b0\u7528\u6237\u9ed8\u8ba4\u62e5\u6709\u540c\u540d\u7684\u89d2\u8272\uff0c\u4e0d\u5177\u5907\u4efb\u4f55\u56fe\u7684\u6743\u9650\u3002 URI : /user METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | user | \u7528\u6237\u540d | \u5b57\u7b26\u4e32 | | password | \u5bc6\u7801 | \u5b57\u7b26\u4e32 | | description | \u7528\u6237\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"user\": \"USER1\", \"password\": \"AN_INITIAL_PASSWORD\", \"description\": \"This is a user\" } Example response. \u2022 200: OK \u5217\u51fa\u6240\u6709\u7528\u6237 \u5217\u51fa\u6570\u636e\u5e93\u7684\u6240\u6709\u7528\u6237\u3002\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /user/ METHOD : GET RESPONSE : \u6240\u6709\u7528\u6237\u53ca\u5176\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"admin\": { \"disabled\": false, \"description\": \"Builtin admin user\", \"roles\": [\"admin\"] }, \"guest1\": { \"disabled\": true, \"description\": \"\", \"roles\": [\"guest1\", \"some_other_role\"] } } \u83b7\u53d6\u7528\u6237\u4fe1\u606f \u5217\u51fa\u7ed9\u5b9a\u7528\u6237\u7684\u4fe1\u606f\u3002 URI : /user/{user_name} METHOD : GET RESPONSE : \u7528\u6237\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"disabled\": true, \"description\": \"A guest user\" \"roles\": [\"guest1\", \"some_other_role\"] } \u5217\u51fa\u7528\u6237\u6743\u9650 \u5217\u51fa\u7ed9\u5b9a\u7528\u6237\u6709\u6743\u9650\u8bbf\u95ee\u7684\u6240\u6709\u56fe\u53ca\u76f8\u5e94\u6743\u9650\u3002 URI : /user/{user_name}/graph METHOD : GET RESPONSE : \u7528\u6237\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/user/guest1/graph \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"graph1\" : \"FULL\", \"graph2\" : \"READ\" } \u66f4\u6539\u7528\u6237\u5bc6\u7801 \u7528\u6237\u53ef\u4ee5\u66f4\u6539\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u66f4\u6539\u5bc6\u7801\u65f6\u9700\u8981\u540c\u65f6\u63d0\u4f9b\u539f\u5bc6\u7801\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u6539\u6240\u6709\u7528\u6237\u7684\u5bc6\u7801\u3002\u7ba1\u7406\u5458\u66f4\u6539\u5176\u5b83\u7528\u6237\u5bc6\u7801\u65f6\uff0c\u53ef\u4ee5\u4e0d\u63d0\u4f9b\u5f53\u524d\u5bc6\u7801\u3002 URI : /user/{user_name}/password METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | current_password | \u5f53\u524d\u5bc6\u7801 | \u5b57\u7b26\u4e32 | | new_password | \u65b0\u5bc6\u7801 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/user1/password \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"current_password\": \"THE_CURRENT_PASSWORD\" \"new_password\": \"A_NEW_PASSWORD\" } Example response. \u2022 200: OK \u4fee\u6539\u7528\u6237\u63cf\u8ff0 \u7528\u6237\u53ef\u4ee5\u4fee\u6539\u81ea\u5df1\u7684\u63cf\u8ff0\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u7528\u6237\u7684\u63cf\u8ff0\u3002 URI : /user/{user_name}/description METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u7528\u6237\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/user1/description \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"description\": \"New description for this user.\" } Example response. \u2022 200: OK \u5220\u9664\u7528\u6237 \u5220\u9664\u7528\u6237\u53ca\u5176\u6240\u6709\u76f8\u5173\u6743\u9650\uff0c\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /user/{user_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK \u7981\u7528\u7528\u6237 \u7528\u6237\u53ef\u4ee5\u88ab\u7981\u7528\u3002\u88ab\u7981\u7528\u7684\u7528\u6237\u5c06\u4e0d\u80fd\u767b\u9646\uff0c\u4f46\u662f\u5176\u8d44\u6599\u4ecd\u7136\u4fdd\u5b58\u3002\u88ab\u7981\u7528\u7684\u7528\u6237\u53ef\u4ee5\u88ab\u91cd\u65b0\u542f\u7528\u3002 URI : /user/{user_name}/disable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/guest1/disable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK \u542f\u7528\u7528\u6237 \u542f\u7528\u4e00\u4e2a\u88ab\u7981\u7528\u7684\u7528\u6237\u3002 URI : /user/{user_name}/enable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/guest1/enable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK \u8bbe\u7f6e\u7528\u6237\u89d2\u8272 \u4e3a\u6307\u5b9a\u7528\u6237\u8bbe\u7f6e\u89d2\u8272\u3002\u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u7528\u6237\u89d2\u8272\u5217\u8868\u5fc5\u987b\u662f\u201c\u5168\u91cf\u5217\u8868\u201d\uff0c\u5373\u8be5\u5217\u8868\u9700\u8981\u5305\u542b\u8be5\u7528\u6237\u9700\u8981\u7684\u6240\u6709\u89d2\u8272\u3002\u552f\u4e00\u7684\u4f8b\u5916\u662f\u7528\u6237\u7684\u540c\u540d\u89d2\u8272\uff0c\u5373\u4f7f\u5217\u8868\u4e2d\u4e0d\u542b\u8be5\u89d2\u8272\uff0c\u5b83\u4e5f\u4f1a\u88ab\u52a0\u5230\u7528\u6237\u89d2\u8272\u4e2d\u3002 URI : /user/{user_name}/role METHOD : POST REQUEST : \u89d2\u8272\u5217\u8868 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: [\"role1\", \"role2\"] Example response. \u2022 200: OK \u6b64\u65f6\u7528\u6237 guest1 \u62e5\u6709\u89d2\u8272 guest1 , role1 \u548c role2 \u3002 \u89d2\u8272\u7ba1\u7406 TuGraph \u4f7f\u7528\u57fa\u4e8e\u89d2\u8272\u7684\u6743\u9650\u7ba1\u7406\u3002 \u540c\u4e00\u7528\u6237\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u89d2\u8272\u3002\u65b0\u7528\u6237\u9ed8\u8ba4\u62e5\u6709\u4e0e\u5176\u540c\u540d\u7684\u89d2\u8272\u3002\u5220\u9664\u7528\u6237\u65f6\uff0c\u540c\u540d\u89d2\u8272\u4e5f\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u65b0\u5efa\u7528\u6237\u65f6\u540c\u540d\u89d2\u8272\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 \u540c\u4e00\u89d2\u8272\u53ef\u4ee5\u5bf9\u591a\u4e2a\u56fe\u6709\u4e0d\u540c\u7684\u6743\u9650\u3002\u7528\u6237\u5bf9\u67d0\u5f20\u56fe\u7684\u6743\u9650\u7531\u5176\u6240\u6709\u89d2\u8272\u5bf9\u8be5\u56fe\u7684\u6700\u9ad8\u6743\u9650\u51b3\u5b9a\u3002 TuGraph \u4f7f\u7528\u56db\u7ea7\u6743\u9650\uff0c\u4e0d\u7528\u7684\u7528\u6237\u5bf9\u4e0d\u540c\u7684\u5b50\u56fe\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6743\u9650\uff0c\u56db\u79cd\u6743\u9650\u53ca\u5176\u8bf4\u660e\u5982\u4e0b\uff1a \u6743\u9650 \u8bf4\u660e NONE \u65e0\u6743\u9650 READ \u53ea\u8bfb WRITE \u53ef\u8bfb\u5199\u5b50\u56fe\u4e2d\u7684\u9876\u70b9\u548c\u8fb9 FULL \u5b8c\u5168\u6743\u9650\uff0c\u5305\u62ec\u66f4\u6539\u5143\u6570\u636e\uff08label, index\uff09\uff0c\u7ba1\u7406\u5b58\u50a8\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5220\u9664\u5b50\u56fe\u4e2d\u7684\u6240\u6709\u6570\u636e \u7ba1\u7406\u5458\u5bf9\u6240\u6709\u5b50\u56fe\u90fd\u6709\u5b8c\u5168\u6743\u9650\uff0c\u65b0\u5efa\u7684\u7528\u6237\u5bf9\u6240\u6709\u5b50\u56fe\u90fd\u6ca1\u6709\u6743\u9650\u3002\u5c06\u7528\u6237\u52a0\u5165\u7ba1\u7406\u5458\u89d2\u8272\u4e2d\u53ef\u4ee5\u5c06\u7528\u6237\u63d0\u5347\u4e3a\u7ba1\u7406\u5458\u3002 \u6dfb\u52a0\u89d2\u8272 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u89d2\u8272\uff0c\u5e76\u8bbe\u7f6e\u5176\u63cf\u8ff0\u3002\u53ea\u6709\u7ba1\u7406\u5458\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002 \u89d2\u8272\u540d\u53ea\u80fd\u7531\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf\u6784\u6210\uff0c\u5bc6\u7801\u5219\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u5b57\u7b26\u3002\u89d2\u8272\u540d\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7 64 \u5b57\u8282\u3002 \u89d2\u8272\u63cf\u8ff0\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 512 \u5b57\u8282\u3002 URI : /role METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | role | \u89d2\u8272\u540d | \u5b57\u7b26\u4e32 | | description | \u89d2\u8272\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"role\": \"new_role\", \"description\": \"This is a new role.\", } Example response. \u2022 200: OK \u4fee\u6539\u89d2\u8272\u63cf\u8ff0 \u4fee\u6539\u89d2\u8272\u7684\u63cf\u8ff0\u3002\u53ea\u6709\u7ba1\u7406\u5458\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002\u89d2\u8272\u63cf\u8ff0\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 512 \u5b57\u8282\u3002 URI : /role/{role_name}/description METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u65b0\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/description \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"description\": \"modified description\" } Example response. \u2022 200: OK \u5217\u51fa\u6240\u6709\u89d2\u8272 \u5217\u51fa\u6570\u636e\u5e93\u7684\u6240\u6709\u89d2\u8272\u3002\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /role/ METHOD : GET RESPONSE : \u6240\u6709\u89d2\u8272\u53ca\u5176\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/role \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"admin\": { \"disabled\": false, \"description\": \"Builtin administrator group.\", \"permissions\": {\"default\":\"FULL\", \"graph1\":\"FULL\"} }, \"role1\": { \"disabled\": true, \"description\": \"Another role\", \"permissions\": {\"default\":\"READ\"} } } \u83b7\u53d6\u89d2\u8272\u4fe1\u606f \u5217\u51fa\u7ed9\u5b9a\u89d2\u8272\u7684\u4fe1\u606f\u3002 URI : /role/{role_name} METHOD : GET RESPONSE : \u89d2\u8272\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/role/role1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"disabled\": true, \"description\": \"Another role\", \"permissions\": {\"default\":\"READ\"} } \u5220\u9664\u89d2\u8272 \u5220\u9664\u6307\u5b9a\u89d2\u8272\uff0c\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /role/{role_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/role/role1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK \u7981\u7528\u89d2\u8272 \u89d2\u8272\u53ef\u4ee5\u88ab\u7981\u7528\u3002\u89d2\u8272\u88ab\u7981\u7528\u540e\uff0c\u5177\u6709\u8be5\u89d2\u8272\u7684\u7528\u6237\u5c06\u4e0d\u518d\u4ece\u8be5\u89d2\u8272\u4e2d\u83b7\u5f97\u4efb\u4f55\u6743\u9650\u3002\u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\u3002 URI : /role/{role_name}/disable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/disable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK \u542f\u7528\u89d2\u8272 \u542f\u7528\u4e00\u4e2a\u88ab\u7981\u7528\u7684\u89d2\u8272\u3002 URI : /role/{role_name}/enable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/enable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK \u8bbe\u7f6e\u89d2\u8272\u6743\u9650 \u4e3a\u6307\u5b9a\u89d2\u8272\u8bbe\u7f6e\u6743\u9650\u3002\u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u89d2\u8272\u6743\u9650\u5217\u8868\u5fc5\u987b\u662f\u201c\u5168\u91cf\u5217\u8868\u201d\uff0c\u5373\u8be5\u5217\u8868\u9700\u8981\u5305\u542b\u8be5\u89d2\u8272\u80fd\u64cd\u4f5c\u7684\u6240\u6709\u56fe\u53ca\u5176\u6743\u9650\u3002 URI : /role/{role_name}/permissions METHOD : POST REQUEST : \u56fe\u540d\u79f0\u53ca\u76f8\u5e94\u6743\u9650\u7684\u5b57\u5178\u3002 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/permissions \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"graph1\" : \"FULL\", \"graph2\" : \"READ\" } Example response. \u2022 200: OK \u670d\u52a1\u5668\u72b6\u6001 \u4fee\u6539\u670d\u52a1\u5668\u914d\u7f6e \u4fee\u6539\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u914d\u7f6e\u4fee\u6539\u540e\u7acb\u5373\u751f\u6548\uff0c\u5e76\u5c06\u5f71\u54cd\u6240\u6709\u670d\u52a1\u5668\u3002\u8fd9\u4e9b\u914d\u7f6e\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u914d\u7f6e\u6587\u4ef6\u4ee5\u53ca\u547d\u4ee4\u884c\u53c2\u6570\u3002 URI : /config METHOD : PUT REQUEST : \u8bf7\u6c42\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u4f7f\u7528 {\"opt1\":v1} \u53ef\u4ee5\u5c06\u540d\u4e3a opt1 \u7684\u914d\u7f6e\u4fee\u6539\u4e3a v1 \u3002 \u914d\u7f6e\u540d \u8bf4\u660e \u503c\u7c7b\u578b OPT_DB_ASYNC \u662f\u5426\u542f\u7528\u5f02\u6b65\u6a21\u5f0f \u5e03\u5c14\u503c OPT_TXN_OPTIMISTIC \u662f\u5426\u9ed8\u8ba4\u4f7f\u7528\u4e50\u89c2\u4e8b\u52a1\u9501 \u5e03\u5c14\u503c OPT_AUDIT_LOG_ENABLE \u662f\u5426\u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7 \u5e03\u5c14\u503c RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 PUT http://localhost:7070/config \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"OPT_DB_ASYNC\": true, \"OPT_AUDIT_LOG_ENABLE\": false } Example response. \u2022 200: OK \u5f53\u524d\u670d\u52a1\u5668\u72b6\u6001 URI : /info METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | lgraph_version | \u670d\u52a1\u5668\u7248\u672c\u53f7 | \u5b57\u7b26\u4e32 | | git_branch | \u670d\u52a1\u5668\u4ee3\u7801\u5206\u652f | \u5b57\u7b26\u4e32 | | git_commit | \u670d\u52a1\u5668\u4ee3\u7801\u7248\u672c | \u5b57\u7b26\u4e32 | | web_commit | \u524d\u7aef\u7801\u7248\u672c | \u5b57\u7b26\u4e32 | | cpp_id | CPP \u7f16\u8bd1\u5668 ID | \u5b57\u7b26\u4e32 | | cpp_version | CPP \u7f16\u8bd1\u5668\u7248\u672c | \u5b57\u7b26\u4e32 | | python_version | PYTHON \u7248\u672c | \u5b57\u7b26\u4e32 | | node | \u9876\u70b9 uri | \u5b57\u7b26\u4e32 | | relationship | \u8fb9 uri | \u5b57\u7b26\u4e32 | | cpu | cpu \u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u670d\u52a1\u5668 CPU \u72b6\u6001 | | disk | \u786c\u76d8 IO \u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u670d\u52a1\u5668\u786c\u76d8\u72b6\u6001 | | memory | \u5185\u5b58\u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u670d\u52a1\u5668\u5185\u5b58\u72b6\u6001 | | db_space | \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 | | db_config | \u56fe\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u56fe\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f | | up_time | \u6570\u636e\u5e93\u5728\u7ebf\u65f6\u957f\uff08\u79d2\uff09 | \u6574\u578b | Example request. \u2022 GET http://localhost:7070/info \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"lgraph_version\": \"1.2.0\", \"git_branch\": \"master\", \"git_commit\": \"9e2977d\", \"web_commit\": \"1e2823d\", \"cpu_id\": \"GUN\", \"cpu_version\": \"4.8.5\", \"python_version\": \"3.2\", \"node\": \"/node\", \"relationship\": \"/relationship\", \"cpu\": { \"self\": 25, \"server\": 35, \"unit\": \"%\" }, \"disk\": { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" }, \"memory\": { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" }, \"db_space\": { \"space\": 57344, \"unit\": \"B\" }, \"db_config\": { \"db_async\": false, \"disable_auth\": false, \"enable_ha\": false, ... }, \"up_time\": 3235 } \u670d\u52a1\u5668 CPU \u72b6\u6001 URI : /info/cpu METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | self | \u56fe\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f CPU \u4f7f\u7528\u7387 | \u6574\u578b | | server | \u670d\u52a1\u5668 CPU \u4f7f\u7528\u7387 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/cpu \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25, \"server\": 35, \"unit\": \"%\" } \u670d\u52a1\u5668\u786c\u76d8\u72b6\u6001 URI : /info/disk METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | read | \u670d\u52a1\u5668\u786c\u76d8\u8bfb\u901f\u7387 | \u6574\u578b | | write | \u670d\u52a1\u5668\u786c\u76d8\u5199\u901f\u7387 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/disk \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" } \u670d\u52a1\u5668\u5185\u5b58\u72b6\u6001 URI : /info/memory METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | self | \u56fe\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4f7f\u7528\u91cf | \u6574\u578b | | server_avail | \u670d\u52a1\u5668\u53ef\u7528\u5185\u5b58 | \u6574\u578b | | server_total | \u670d\u52a1\u5668\u603b\u5185\u5b58 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/memory \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" } \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 URI : /info/db_space METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | space | \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 | \u6574\u578b | | disk_avail | \u56fe\u6570\u636e\u5e93\u53ef\u7528\u7a7a\u95f4 | \u6574\u578b | | disk_total | \u670d\u52a1\u5668\u786c\u76d8\u603b\u7a7a\u95f4 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/db_space \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"disk_avail\"::360074579968, \"disk_total\"::984373800960, \"space\": 57344, \"unit\": \"B\" } \u56fe\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f URI : /info/db_config METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | db_async | \u56fe\u6570\u636e\u5e93\u5de5\u4f5c\u6a21\u5f0f\uff08\u540c\u6b65\u6216\u5f02\u6b65\uff09 | \u5e03\u5c14\u503c | | disable_auth | \u662f\u5426\u7981\u7528\u8eab\u4efd\u9a8c\u8bc1 | \u5e03\u5c14\u503c | | enable_ha | \u662f\u5426\u542f\u7528\u9ad8\u53ef\u7528\u6a21\u5f0f | \u5e03\u5c14\u503c | | enable_rpc | \u662f\u5426\u542f\u7528 RPC \u670d\u52a1\u5668 | \u5e03\u5c14\u503c | | bind_host | REST \u670d\u52a1\u5668\u7684\u4e3b\u673a | \u5b57\u7b26\u4e32 | | enable_audit_log | \u662f\u5426\u542f\u7528\u65e5\u5fd7\u5ba1\u8ba1 | \u5e03\u5c14\u503c | | port | REST \u670d\u52a1\u5668\u7684\u7aef\u53e3 | \u6574\u578b | | rpc_port | RPC \u670d\u52a1\u5668\u7684\u7aef\u53e3 | \u6574\u578b | | optimistic_txn | \u662f\u5426\u9ed8\u8ba4\u4f7f\u7528\u4e50\u89c2\u4e8b\u52a1\u9501 | \u5e03\u5c14\u503c | | thread_limit | \u56fe\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u7528\u7ebf\u7a0b\u6570 | \u6574\u578b | | enable_ssl | \u662f\u5426\u4f7f\u7528 SSL \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 | \u5e03\u5c14\u503c | | verbose | \u8f93\u51fa\u7684\u8be6\u7ec6\u7a0b\u5ea6 | \u6574\u578b | Example request. \u2022 GET http://localhost:7070/info/db_config \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"db_async\":false, \"disable_auth\":false, \"enable_ha\":false, \"enable_rpc\":false, \"bind_host\":\"127.0.0.1\", \"enable_audit_log\":false, \"port\":7070, \"optimistic_txn\":false, \"rpc_port\":9091, \"thread_limit\":0, \"enable_ssl\":false, \"verbose\":2 } \u9ad8\u53ef\u7528\u670d\u52a1\u5668\u5217\u8868 (\u4ec5\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u6709\u6548) URI : /info/peers METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u670d\u52a1\u5668\u4fe1\u606f\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u670d\u52a1\u5668\u4fe1\u606f\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | rpc_address | \u670d\u52a1\u5668 RPC \u5730\u5740 | \u5b57\u7b26\u4e32 | | rest_address | \u670d\u52a1\u5668 REST \u5730\u5740 | \u5b57\u7b26\u4e32 | | state | \u670d\u52a1\u5668\u72b6\u6001 | \u5b57\u7b26\u4e32 | \u5176\u4e2d\u670d\u52a1\u5668\u72b6\u6001\u53ef\u4e3a MASTER , SLAVE , OFFLINE \u3002 Example request. \u2022 GET http://localhost:7070/info/peers \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\", \"state\":\"MASTER\" }, { \"rest_address\":\"192.168.1.22:17072\", \"rpc_address\":\"192.168.1.22:19092\", \"state\":\"SLAVE\" } ] } \u5f53\u524d Leader \u4fe1\u606f (\u4ec5\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u6709\u6548) URI : /info/leader METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5f53\u524d leader \u670d\u52a1\u5668\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | rpc_address | \u670d\u52a1\u5668 RPC \u5730\u5740 | \u5b57\u7b26\u4e32 | | rest_address | \u670d\u52a1\u5668 REST \u5730\u5740 | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/leader \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\" } \u670d\u52a1\u5668\u7edf\u8ba1\u4fe1\u606f URI : /info/statistics METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5f53\u524d\u670d\u52a1\u5668\u7edf\u8ba1\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | requests/second | \u6bcf\u79d2\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf | \u6d6e\u70b9\u578b | | writes/second | \u6bcf\u79d2\u5904\u7406\u7684\u5199\u8bf7\u6c42\u6570\u91cf | \u6d6e\u70b9\u578b | | running_tasks | \u6b63\u5728\u6267\u884c\u7684\u8bf7\u6c42\u6570\u91cf | \u6574\u578b | | failure_rate | \u8bf7\u6c42\u5931\u8d25\u7387 | \u6d6e\u70b9\u578b | Example request. \u2022 GET http://localhost:7070/info/statistics \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"failure_rate\": 2.3, \"requests/second\": 122.3, \"running_tasks\": 10, \"writes/second\": 12.4 } \u5ba1\u8ba1\u65e5\u5fd7\u4fe1\u606f URI : /info/log/?begin_time={begin_time}&end_time={end_time}&user={user}&num_log={num_log}&descending_order={descending_order} | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | begin_time | \u67e5\u8be2\u65e5\u5fd7\u7684\u8d77\u59cb\u65f6\u95f4(\u5fc5\u586b\uff0c\u683c\u5f0f\u4e3a YYYY-mm-dd HH:MM:SS) | \u65f6\u95f4\u6233 | | end_time | \u67e5\u8be2\u65e5\u5fd7\u7684\u7ed3\u675f\u65f6\u95f4(\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a YYYY-mm-dd HH:MM:SS) | \u65f6\u95f4\u6233 | | user | \u67e5\u8be2\u65e5\u5fd7\u7684\u64cd\u4f5c\u8005(\u7ba1\u7406\u5458\u53ef\u67e5\u8be2\u6240\u6709\u7528\u6237\u7684\u65e5\u5fd7\uff0c\u666e\u901a\u7528\u6237\u53ea\u80fd\u67e5\u8be2\u672c\u4eba\u65e5\u5fd7) | \u5b57\u7b26\u4e32 | | num_log | \u67e5\u8be2\u65e5\u5fd7\u7684\u6570\u91cf(\u9ed8\u8ba4\u4e3a 100) | \u6574\u578b | | descending_order | \u67e5\u8be2\u7ed3\u679c\u662f\u5426\u964d\u5e8f\u8f93\u51fa(\u9ed8\u8ba4\u4e3a true) | \u5e03\u5c14\u503c | METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5ba1\u8ba1\u65e5\u5fd7\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u6761\u64cd\u4f5c\u65e5\u5fd7\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | index | \u8be5\u64cd\u4f5c\u7684\u7d22\u5f15\u503c | \u6574\u578b | | begin_time | \u8be5\u64cd\u4f5c\u7684\u5f00\u59cb\u65f6\u95f4 | \u5b57\u7b26\u4e32 | | end_time | \u8be5\u64cd\u4f5c\u7684\u7ed3\u675f\u65f6\u95f4 | \u5b57\u7b26\u4e32 | | user | \u8be5\u64cd\u4f5c\u7684\u53d1\u8d77\u8005 | \u5b57\u7b26\u4e32 | | graph | \u8be5\u64cd\u4f5c\u7684\u56fe | \u5b57\u7b26\u4e32 | | type | \u8be5\u64cd\u4f5c\u7684\u7c7b\u578b | \u5b57\u7b26\u4e32 | | read_write | \u8be5\u64cd\u4f5c\u4e3a\u8bfb\u64cd\u4f5c\u6216\u8005\u5199\u64cd\u4f5c | \u5b57\u7b26\u4e32 | | success | \u8be5\u64cd\u4f5c\u662f\u5426\u6210\u529f | \u5e03\u5c14\u503c | | content | \u8be5\u64cd\u4f5c\u7684\u7b80\u8981\u5185\u5bb9 | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/log/?begin_time=2020-02-17%2015:00:00&end_time=2020-02-20%2012:00:00&user=admin&num_log=100&descending_order=false \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"post /login Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"\", \"index\": 1, \"read_write\": \"read\", \"success\": true, \"type\": \"Security\", \"user\":\"admin\" }, { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"Load plugin : `echo` Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"default\", \"index\": 2, \"read_write\": \"write\", \"success\": true, \"type\": \"Plugin\", \"user\": \"admin\" }, ... ] } \u4efb\u52a1\u7ba1\u7406 TuGraph \u63d0\u4f9b\u957f\u4efb\u52a1\u7684\u8ddf\u8e2a\u548c\u4e2d\u6b62\u529f\u80fd\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 REST API \u6765\u67e5\u8be2\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u5728 Cypher \u548c\u5b58\u50a8\u8fc7\u7a0b\u67e5\u8be2\uff0c\u5e76\u9009\u62e9\u4e2d\u6b62\u6b63\u5728\u6267\u884c\u7684\u67e5\u8be2\u3002 \u4efb\u52a1\u7ba1\u7406\u5bf9\u5e94\u7684 URI \u683c\u5f0f\u4e3a http://{host}:{port}/task/{thread_id}/{task_id} \u67e5\u8be2\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1 URI : /task METHOD : GET RESPONSE : \u8fd4\u56de\u7684 JSON \u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u683c\u5f0f\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b description \u4efb\u52a1\u63cf\u8ff0 \u5b57\u7b26\u4e32 time_elapsed \u4efb\u52a1\u5df2\u7ecf\u6267\u884c\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2 \u6d6e\u70b9 task_id \u4efb\u52a1 ID \u5b57\u7b26\u4e32 Example request. \u2022 GET http://localhost:7070/task \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"description\" : \"[CPP_PLUGIN] scan_graph\", \"time_elapsed\" : 13.987, \"task_id\" : \"3_10\" }, { \"description\" : \"[CYPHER] MATCH(n) return n\", \"time_elapsed\" : 30.887, \"task_id\" : \"2_6\" } ] } \u4e2d\u6b62\u4efb\u52a1 URI : /task/{task_id} \u5176\u4e2d {task_id} \u662f GET /task \u8fd4\u56de\u7ed3\u679c\u4e2d\u7684 task_id \u3002 METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/task/3_10 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u5b50\u56fe\u7ba1\u7406 TuGraph \u652f\u6301\u591a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e4b\u95f4\u5b8c\u5168\u72ec\u7acb\uff0c\u4e0d\u540c\u7684\u5b50\u56fe\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7528\u6237\u5f00\u653e\u4e0d\u540c\u6743\u9650\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u6dfb\u52a0\u548c\u5220\u9664\u5b50\u56fe\u3002 \u521b\u5efa\u65b0\u5b50\u56fe URI : /db METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u5b50\u56fe\u540d | \u5b57\u7b26\u4e32 | | config | \u914d\u7f6e | \u5b57\u5178\uff0c\u683c\u5f0f\u4e3a {{\u5217\u540d 1}:{\u5217\u503c 1},...} | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"graph1\", \"config\" : { \"max_size_GB\":2048, \"description\": \"description of graph1\" } } Example response. \u2022 200: OK \u5220\u9664\u5b50\u56fe URI : /db/{graph_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1 Example response. \u2022 200: OK \u5217\u51fa\u6240\u6709\u5b50\u56fe URI : /db METHOD : GET RESPONSE : \u5b50\u56fe\u5217\u8868 Example request. \u2022 GET http://localhost:7070/db Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"graph1\": { \"max_size_GB\":1024, \"description\":\"description of graph1\" } } \u83b7\u53d6\u5b50\u56fe\u4fe1\u606f URI : /db/{graph_name} METHOD : GET RESPONSE : \u5b50\u56fe\u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/graph1 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"max_size_GB\":1024, \"description\":\"description of graph1\" } \u5143\u6570\u636e\u7ba1\u7406 TuGraph \u662f\u4e00\u4e2a\u5177\u5907\u591a\u56fe\u80fd\u529b\u7684\u5f3a\u6a21\u5f0f\u5c5e\u6027\u56fe\u6570\u636e\u5e93\u3002\u5728\u6bcf\u4e00\u5f20\u5b50\u56fe\u4e2d\uff0c\u6bcf\u79cd\u9876\u70b9\u548c\u8fb9\u90fd\u9700\u8981\u6709\u9884\u5b9a\u4e49\u7684\u6570\u636e\u683c\u5f0f\u3002\u6570\u636e\u683c\u5f0f\u7531 Label \u51b3\u5b9a\uff0c\u6bcf\u79cd Label \u90fd\u6709\u81ea\u5df1\u7684\u6570\u636e\u683c\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 REST API \u6dfb\u52a0\uff0c\u5220\u9664\u548c\u67e5\u8be2 Label \u53ca\u5176\u5bf9\u5e94\u7684\u6570\u636e\u683c\u5f0f\u3002 Label \u64cd\u4f5c\u5bf9\u5e94\u7684 URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/label/{type}/{label_name} \u5176\u4e2d{type}\u53ef\u4ee5\u662f node \u6216\u8005 relationship\u3002 \u521b\u5efa Label \u521b\u5efa Label \u7684\u8fc7\u7a0b\u540c\u65f6\u4e5f\u662f\u5b9a\u4e49\u5176\u6570\u636e\u7c7b\u578b\u7684\u8fc7\u7a0b\u3002\u53ea\u6709\u521b\u5efa\u4e86 Label \u624d\u80fd\u5728\u56fe\u4e2d\u63d2\u5165\u76f8\u5e94\u7c7b\u578b\u7684\u9876\u70b9\u6216\u8005\u8fb9\u3002 URI : /db/{graph_name}/label METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | Label \u540d | \u5b57\u7b26\u4e32 | | fields | \u6570\u636e\u5217\u5b9a\u4e49 | \u5217\u8868 | | is_vertex | \u662f\u5426\u662f\u9876\u70b9 Label | \u5e03\u5c14\u503c | | primary | \u70b9\u7684\u4e3b\u952e\u5c5e\u6027 | \u5b57\u7b26\u4e32 | | edge_constraints | \u8fb9\u7684\u7ea6\u675f | \u5217\u8868 | primary \u5728 is_vertex \u4e3a true \u7684\u65f6\u5019\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u53ea\u6709\u70b9\u624d\u6709, \u521b\u5efa\u70b9\u7684\u65f6\u5019\u5fc5\u987b\u8bbe\u7f6e\u3002 edge_constraints \u5728 is_vertex \u4e3a false \u7684\u65f6\u5019\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u53ea\u6709\u8fb9\u6709\u3002\u8fd9\u4e2a\u5b57\u6bb5\u9650\u5236\u4e86\u8be5\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u53ea\u80fd\u662f\u54ea\u4e9b\u70b9\u7684\u7ec4\u5408\uff0c\u6bd4\u5982\uff1a [[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]] \uff0c\u9650\u5236\u4e86\u8be5\u8fb9\u53ea\u80fd\u662f\u4ece vertex_label1 \u5230 vertex_label2 \u548c \u4ece vertex_label3 \u5230 vertex_label4 \u3002\u5982\u679c\u4e0d\u60f3\u6709\u4efb\u4f55\u9650\u5236\uff0c\u4e0d\u8bbe\u7f6e\u8be5\u5b57\u6bb5\u5373\u53ef\u3002 \u5176\u4e2d fields \u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5b9a\u4e49\u6570\u636e\u7684\u4e00\u5217\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b name \u5217\u540d \u5b57\u7b26\u4e32 type \u5217\u6570\u636e\u7c7b\u578b \u5b57\u7b26\u4e32\uff0c\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a int8, int16, int32, int64, float, double, string, date, datetime, binary, bool optional \u6570\u636e\u662f\u5426\u53ef\u4ee5\u4e3a\u7a7a\uff08\u53ef\u9009\uff0c\u7f3a\u7701\u503c\u4e3a false\uff09 \u5e03\u5c14\u503c RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"Actor\", \"fields\": [ {\"name\":\"uid\", \"type\":\"int64\", \"optional\":false}, {\"name\":\"name\", \"type\":\"string\", \"optional\":true} ], \"is_vertex\":true, \"primary\" : \"uid\" } Example response. \u2022 200: OK \u5217\u51fa\u6240\u6709 Label URI : /db/{graph_name}/label METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | edge | \u8fb9 Label \u5217\u8868 | \u5217\u8868 | | vertex | \u9876\u70b9 Label \u5217\u8868 | \u5217\u8868 | Example request. \u2022 GET http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"edge\": [ \"HAS_CHILD\", \"MARRIED\", \"BORN_IN\", \"DIRECTED\", \"WROTE_MUSIC_FOR\", \"ACTED_IN\" ], \"vertex\": [ \"Person\", \"City\", \"Film\" ] } \u83b7\u53d6 Label \u7684\u6570\u636e\u683c\u5f0f\u5b9a\u4e49 URI : /db/{graph_name}/label/{[node|relationship]}/{label_name} METHOD : GET RESPONSE : \u6570\u636e\u5217\u5b9a\u4e49\u8868\uff0c\u7c7b\u578b\u662f\u4e00\u4e2a\u8bcd\u5178\uff0ckey \u4e3a\u5217\u540d\uff0cvalue \u4e3a\u5217\u5b9a\u4e49\uff0c\u5217\u5b9a\u4e49\u89c1\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b optional \u8be5\u5217\u503c\u662f\u5426\u53ef\u4e3a\u7a7a \u5e03\u5c14\u503c type \u5217\u503c\u7c7b\u578b \u5b57\u7b26\u4e32 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/label/node/person \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"age\":{ \"optional\":false, \"type\":\"int16\" }, \"id\":{ \"optional\":false, \"type\":\"int8\" }, \"name\":{ \"optional\":false, \"type\":\"string\" } } Schema \u5bfc\u5165 URI : /db/{graph_name}/schema/text METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u6587\u4ef6\u5185\u5bb9\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | description \u7684\u5177\u4f53\u63cf\u8ff0\u65b9\u6cd5\u89c1\u300aTuGraph \u64cd\u4f5c\u624b\u518c\u300b\u4e2d\u6570\u636e\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u7684\u76f8\u5173\u5185\u5bb9\u3002 RESPONSE : Schema \u5bfc\u5165\u4f1a\u6839\u636e description \u6bd4\u8f83\u65b0\u7684 Schema \u548c\u6570\u636e\u5e93\u4e2d\u539f\u6709\u7684 Schema \u662f\u5426\u517c\u5bb9\uff0c\u68c0\u67e5\u7684\u7c92\u5ea6\u4e3a Label\u3002\u5982\u679c\u4e0d\u4e00\u81f4\u5219\u51fa\u9519\uff0c\u5982\u679c\u4e00\u81f4\u5219\u6dfb\u52a0\u539f\u5148 Schema \u4e2d\u4e0d\u5b58\u5728\u7684 Label\uff0c\u8fd4\u56de 200\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/schema/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"schema\\\\\":[{\\\\\"label\\\\\":\\\\\"actor\\\\\",\\\\\"primary\\\\\":\\\\\"aid\\\\\",\\\\\"properties\\\\\":[{\\\\\"name\\\\\":\\\\\"aid\\\\\",\\\\\"type\\\\\":\\\\\"STRING\\\\\"}],\\\\\"type\\\\\":\\\\\"VERTEX\\\\\"}]}\" } \u4e0a\u8ff0 description \u7684\u503c\u662f\u5982\u4e0b json \u5e8f\u5217\u5316\u540e\u7684\u5b57\u7b26\u4e32: { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [{ \"name\": \"aid\", \"type\": \"STRING\" }], \"primary\": \"aid\" } ] } Example response. \u2022 200: OK Output: { \"log\": \"\" } \u9876\u70b9\u64cd\u4f5c URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/node/{vid} Nodes \u63d0\u4f9b\u8282\u70b9\uff08Vertex\uff09\u7684 CRUD \u64cd\u4f5c\uff0c\u63a5\u53d7 GET/POST/PUT/DELETE \u8bf7\u6c42\u3002 \u5217\u51fa\u9876\u70b9\u6570\u91cf\u548c label \u6570\u91cf URI : /db/{graph_name}/node METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | num_label | \u9876\u70b9 label \u6570\u91cf | \u6574\u6570 | | num_vertex | \u9876\u70b9\u6570\u91cf | \u6574\u6570 | \u6ce8\u610f num_vertex \u8fd4\u56de\u7684\u5e76\u4e0d\u662f\u51c6\u786e\u7684\u9876\u70b9\u6570\u91cf\uff0c\u53ea\u662f\u4e00\u4e2a\u4f30\u8ba1\u503c\u3002 \u521b\u5efa\u4e00\u4e2a\u9876\u70b9 \u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u4e00\u4e2a\u9876\u70b9\u3002 URI : /db/{graph_name}/node METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | Label \u540d | \u5b57\u7b26\u4e32 | | property | \u9876\u70b9\u5c5e\u6027 | \u5b57\u5178\uff0c\u5176\u4e2d key \u662f\u5217\u540d\uff0cvalue \u662f\u76f8\u5e94\u503c\u3002value \u5fc5\u987b\u662f\u4e0e\u5217\u7c7b\u578b\u76f8\u5e94\u7684\u7c7b\u578b\uff0c\u5982\u5217\u4e3a int32\uff0c\u5219 value \u53ea\u80fd\u662f\u6574\u6570\u3002 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002\u5e76\u5728 JSON \u5185\u5bb9\u4e2d\u8fd4\u56de\u65b0\u9876\u70b9 vid\u3002\u8be5 ID \u53ef\u7528\u4e8e\u540e\u7eed\u7684\u9876\u70b9\u64cd\u4f5c\u4e2d\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"property\" : { \"name\" : \"Passerby A\", \"birthyear\" : 1989 } } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { 21 } \u6279\u91cf\u521b\u5efa\u9876\u70b9 TuGraph \u5141\u8bb8\u4e00\u6b21\u6027\u63d2\u5165\u591a\u4e2a\u9876\u70b9\uff0c\u4ee5\u51cf\u5c11\u7f51\u7edc\u5f00\u9500\u3002 URI : /db/{graph_name}/node METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | Label \u540d | \u5b57\u7b26\u4e32 | | fields | \u9876\u70b9\u5c5e\u6027 | \u5217\u8868 | | values | \u9876\u70b9\u6570\u636e | \u5217\u8868 | \u5176\u4e2d fields \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5217\u51fa\u4e00\u7cfb\u5217\u5217\u540d\uff1bvalues \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5217\u6570\u636e\u3002 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002\u5e76\u5728 JSON \u5185\u5bb9\u4e2d\u8fd4\u56de\u65b0\u589e\u52a0\u7684\u9876\u70b9\u7684 vid \u5217\u8868\uff0c\u8be5\u5217\u8868\u4e2d\u6bcf\u4e00\u4e2a vid \u6309\u987a\u5e8f\u5bf9\u5e94\u8bf7\u6c42\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"fields\" : [\"name\", \"birthyear\"], \"values\" : [[\"alex\", 2000], [\"bob\", 1999]] } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ 22, 23 ] } \u83b7\u53d6\u9876\u70b9 URI : /db/{graph_name}/node/{vertex_id} METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | Label \u540d | \u5b57\u7b26\u4e32 | | property | \u5c5e\u6027 | \u5b57\u5178\uff0c\u683c\u5f0f\u4e3a {{\u5217\u540d 1}:{\u5217\u503c 1},...} | Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"label\": \"Person\" } \u5220\u9664\u9876\u70b9 URI : /db/{graph_name}/node/{vertex_id} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | in | \u88ab\u5220\u6389\u7684\u70b9\u7684\u5165\u8fb9\u6570\u91cf | \u6574\u6570\u503c | | out | \u88ab\u5220\u6389\u7684\u70b9\u7684\u51fa\u8fb9\u6570\u91cf | \u6574\u6570\u503c | Example request. \u2022 DELETE http://localhost:7070/db/{graph_name}/node/4 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"in\": 0, \"out\": 0 } \u83b7\u53d6\u9876\u70b9\u6240\u6709\u5c5e\u6027 URI : /db/{graph_name}/node/{vertex_id}/property METHOD : GET RESPONSE : Node \u6240\u6709\u5c5e\u6027\uff08\u5b57\u5178\uff09 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" } \u83b7\u53d6\u9876\u70b9\u5c5e\u6027 URI : /db/{graph_name}/node/{vertex_id}/property/{field} METHOD : GET RESPONSE : Node \u67d0\u4e00\u5c5e\u6027 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property/name \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Natasha Richardson\" } \u66f4\u65b0\u9876\u70b9\u5c5e\u6027 URI : /db/{graph_name}/node/{vertex_id} METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | property | \u9876\u70b9\u5c5e\u6027 | \u5b57\u5178 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 PUT http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"birthyear\" : 1964, \"mobile\" : \"********\" } } Example response. \u2022 200: OK \u8fb9\u64cd\u4f5c URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/relationship/{euid} \u4e0e Nodes \u529f\u80fd\u7c7b\u4f3c\uff0cRelationships \u63d0\u4f9b\u8fb9\uff08edge\uff09\u7684 CRUD \u64cd\u4f5c\uff0c\u63a5\u53d7 GET/POST/PUT/DELETE \u8bf7\u6c42\u3002\u6bcf\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u7531\u4e00\u4e2a\u552f\u4e00 ID\uff08euid\uff09\u6765\u6807\u8bc6\u3002\u8fd9\u4e2a ID \u53ef\u4ee5\u4ece\u5728\u63d2\u5165\u8fb9\u65f6\u83b7\u5f97\uff0c\u6216\u8005\u5728 \u5217\u51fa\u6240\u6709\u8fb9 \u64cd\u4f5c\u4e2d\u5f97\u5230\u3002 \u521b\u5efa\u4e00\u6761\u8fb9 URI : /db/{graph_name}/node/{src}/relationship METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | \u8fb9 Label | \u5b57\u7b26\u4e32 | | destination | \u76ee\u7684\u9876\u70b9 ID | \u6574\u6570\u503c | | property | \u8fb9\u5c5e\u6027 | \u5b57\u5178 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\uff0c\u540c\u65f6\u8fd4\u56de\u65b0\u5efa\u7acb\u7684\u8fb9\u7684 euid\uff08\u5b57\u7b26\u4e32\uff09\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/node/{src}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"destination\" : 14, \"label\" : \"BORN_IN\", \"property\" : {} } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"1_14_1_0\" } \u6279\u91cf\u521b\u5efa\u8fb9 URI : /db/{graph_name}/relationship METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | \u8fb9 Label | \u5b57\u7b26\u4e32 | | fields | \u6570\u636e\u5217\u540d | \u5217\u8868 | | edge | \u8fb9\u6570\u636e | \u5217\u8868 | \u5176\u4e2d edge \u662f\u4e00\u4e2a\u6570\u636e\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u6761\u8fb9\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b source \u8d77\u70b9 id \u6574\u6570 destination \u7ec8\u70b9 id \u6574\u6570 values \u6570\u636e\u5217\u8868 \u5217\u8868\uff0c\u6bcf\u5217\u5bf9\u5e94 fields \u4e2d\u7684\u4e00\u4e2a\u5217\uff0c\u7c7b\u578b\u662f\u8be5\u5217\u5bf9\u5e94\u7684\u7c7b\u578b RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\uff0c\u540c\u65f6\u8fd4\u56de\u65b0\u5efa\u7acb\u7684\u8fb9\u7684 euid \u5217\u8868\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"knows\", \"fields\" : [\"from_year\", \"weight\"], \"edge\" : [ {\"source\":0, \"destination\":1, \"values\":[2011, 0.8]}, {\"source\":1, \"destination\":2, \"values\":[2008, 0.9]} ] } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_1_0_0\", \"1_2_0_0\" ] } \u5217\u51fa\u6240\u6709\u51fa\u8fb9\uff08outgoing relationships\uff09 URI : /db/{graph_name}/node/{src}/relationship/out METHOD : GET RESPONSE : \u9876\u70b9 src \u7684\u6240\u6709\u51fa\u8fb9 euid \u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/out \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"4_5_0_0\", \"4_7_1_2\" ] } \u5217\u51fa\u6240\u6709\u5165\u8fb9\uff08incoming relationships\uff09 URI : /db/{graph_name}/node/{dst}/relationship/in METHOD : GET RESPONSE : \u9876\u70b9 dst \u7684\u6240\u6709\u5165\u8fb9 euid \u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/in \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_4_0_0\", \"3_4_3_1\" ] } \u5217\u51fa\u6240\u6709\u8fb9 URI : /db/{graph_name}/node/{src}/relationship/all METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | in | \u5165\u8fb9 | \u5217\u8868 | | out | \u51fa\u8fb9 | \u5217\u8868 | Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationships/all \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"out\": [ \"4_5_0_0\", \"4_7_1_2\" ], \"in\": [ \"0_4_0_0\", \"3_4_3_1\" ] } \u83b7\u53d6\u8fb9 URI : /db/{graph_name}/relationship/{euid} METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | \u8fb9 Label | \u5b57\u7b26\u4e32 | | property | \u8fb9\u5c5e\u6027 | \u5b57\u5178 | Example request. \u2022 GET http://localhost:7070/db/graph1/relationship/0_4_0_0 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { }, \"label\": \"MARRIED\" } \u5220\u9664\u8fb9 URI : /db/{graph_name}/relationship/{euid} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1/relationship/14_0_1_0 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u83b7\u53d6\u8fb9\u7684\u6240\u6709\u5c5e\u6027 URI : /db/{graph_name}/relationship/{euid}/property METHOD : GET RESPONSE : \u8fb9\u5c5e\u6027\u5b57\u5178 Example request. \u2022 GET http://localhost:7070/db/graph1/relationship/14_0_2_0/property \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { { \"weight\": 0.8, \"begin\": 20180922 } } \u83b7\u53d6\u8fb9\u7684\u5c5e\u6027 URI : /db/{graph_name}/relationship/{euid}/property/{field} METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f,\u8fd4\u56de\u4ee3\u7801 200,\u540c\u65f6\u8fd4\u56de\u8fb9\u7684\u5c5e\u6027\u3002\u5982\u679c\u5931\u8d25,\u8fd4\u56de\u4ee3\u7801 400,\u540c\u65f6\u8fd4\u56de \"Illegal field.\"\u3002 Example request. \u2022 GET http://localhost:7070/db/graph1/relationship/17_0_2_2/property/charactername \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Henri Ducard\" } \u66f4\u65b0\u8fb9\u7684\u5c5e\u6027 URI : /db/{graph_name}/relationship/{euid} METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | property | \u8fb9\u5c5e\u6027 | \u5b57\u5178 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 PUT http://localhost:7070/db/graph1/relationship/17_0_2_2 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"charactername\" : \"Henri Ducard/passer a\" } } Example response. \u2022 200: OK \u7d22\u5f15 URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/index/{label}/{field} \u63d0\u4f9b\u7d22\u5f15\u64cd\u4f5c\uff0c\u63a5\u53d7 GET/POST \u8bf7\u6c42\u3002 \u521b\u5efa\u7d22\u5f15 \u8be5\u64cd\u4f5c\u4f1a\u542f\u52a8\u4e00\u4e2a\u521b\u5efa\u7d22\u5f15\u7684\u540e\u53f0\u4efb\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5217\u51fa\u8be5 Label \u76f8\u5173\u7684\u6240\u6709\u7d22\u5f15\u6765\u68c0\u67e5\u65b0\u5efa\u7d22\u5f15\u7684\u72b6\u6001\u3002 URI : /db/{graph_name}/index METHOD : POST REQUEST : \u57df\u540d \u8bf4\u660e \u7c7b\u578b label Label \u540d \u5b57\u7b26\u4e32 field \u57df\u540d \u5b57\u7b26\u4e32 is_unique \u552f\u4e00\u6027\u6807\u8bc6 \u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a true\uff0c\u8868\u793a\u8be5 index \u4e2d\u7684 key \u662f\u552f\u4e00\u7684 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\": \"Person\", \"field\": \"birthyear\", \"is_unique\" : false } Example response. \u2022 200: OK \u5217\u51fa\u6240\u6709\u7d22\u5f15 URI : /db/{graph_name}/index METHOD : GET RESPONSE : \u7d22\u5f15\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u7d22\u5f15\u63cf\u8ff0\uff0c\u683c\u5f0f\u4e0e \u521b\u5efa\u7d22\u5f15 \u65f6\u4f7f\u7528\u683c\u5f0f\u76f8\u540c\u3002 Example request. \u2022 GET http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"field\": \"name\", \"label\": \"City\", \"is_unique\": false }, { \"field\": \"title\", \"label\": \"Film\", \"is_unique\": false }, { \"field\": \"name\", \"label\": \"Person\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] } \u5217\u51fa\u6240\u6709\u4e0e\u67d0\u4e2a Label \u76f8\u5173\u7684\u7d22\u5f15 URI : /db/{graph_name}/index/{label} METHOD : GET RESPONSE : \u7d22\u5f15\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u7d22\u5f15\u63cf\u8ff0\uff0c\u683c\u5f0f\u4e0e \u521b\u5efa\u7d22\u5f15 \u65f6\u4f7f\u7528\u683c\u5f0f\u76f8\u540c\u3002 Example request. \u2022 GET http://localhost:7070/db/graph1/index/Person \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"label\": \"Person\", \"field\": \"name\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] } \u5220\u9664\u7d22\u5f15 URI : /db/{graph_name}/index/{label}/{field} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1/index/Person/name \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u6839\u636e\u7d22\u5f15\u83b7\u53d6\u9876\u70b9 URI : /db/{graph_name}/index/{label}/?field={field}&value={value} METHOD : GET RESPONSE : \u9876\u70b9 vid \u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/graph1/index/Person/?field=birthyear&value=1986 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { [ 1, 8 ] } \u5728\u7ebf\u589e\u91cf\u5bfc\u5165 \u6307\u5b9a\u6587\u4ef6\u5185\u5bb9\u5bfc\u5165 URI : /db/{graph_name}/import/text METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u6587\u4ef6\u5185\u5bb9\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | | data | \u8981\u5bfc\u5165\u7684\u6587\u4ef6\u5185\u5bb9\uff08\u5efa\u8bae\u6700\u5927\u5728 16MB \u5de6\u53f3\uff0c\u6700\u957f\u4e0d\u8d85\u8fc7 17MB\uff09 | \u5b57\u7b26\u4e32 / \u6570\u7ec4 / \u5bf9\u8c61 | | continue_on_error | \u51fa\u9519\u540e\u662f\u5426\u7ee7\u7eed\u5bfc\u5165\uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a false \uff09 | \u5e03\u5c14\u503c | | delimiter | \u5206\u9694\u7b26\uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a \u201c,\u201d \uff09 | \u5b57\u7b26\u4e32 | description \u7684\u5177\u4f53\u63cf\u8ff0\u65b9\u6cd5\u89c1\u300aTuGraph \u64cd\u4f5c\u624b\u518c\u300b\u4e2d\u6570\u636e\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u5206\u9694\u7b26\u53ef\u4ee5\u662f\u5355\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u4e0d\u80fd\u5305\u542b \\r \u6216\u8005 \\n \u3002 data \u53ef\u4ee5\u662f\u5982\u4e0b\u5f62\u5f0f\u4e4b\u4e00\uff1a \u5b57\u7b26\u4e32\u5982 \"1,2\\n3,4\\n\" ASCII \u7801\u7ec4\u6210\u7684\u6570\u7ec4\u5982 [49,44,50,10,51,44,52,10] \u5f62\u5982\u4e0a\u8ff0\u6570\u7ec4\u7684\u5b57\u5178\u5982 {\"0\":49,\"1\":44,\"2\":50,\"3\":10,\"4\":51,\"5\":44,\"6\":52,\"7\":10} RESPONSE : \u7cfb\u7edf \u4e0d\u4f1a \u81ea\u52a8\u6267\u884c\u65b0\u5efa label\u3001\u6dfb\u52a0\u7d22\u5f15\u7b49\u64cd\u4f5c\u3002\u5728\u6b64\u64cd\u4f5c\u4e4b\u524d\u9700\u8981\u4fdd\u8bc1\u6d89\u53ca\u7684 label \u5df2\u7ecf\u5b58\u5728\u5e76\u5177\u6709\u9002\u5f53\u7684\u7d22\u5f15\u3002 \u5982\u679c\u6210\u529f\u5bfc\u5165\u5b8c\u6bd5\uff0c\u8fd4\u56de\u4ee3\u7801 200\uff0c\u5e76\u5728 log \u5b57\u6bb5\u8fd4\u56de\u4e00\u4e9b\u65e5\u5fd7\u4fe1\u606f\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\uff1b\u5426\u5219\uff0c\u4fdd\u8bc1\u6240\u6709\u7684\u6570\u636e\u5747\u672a\u88ab\u5bfc\u5165\uff0c\u5e76\u5728 error_message \u5b57\u6bb5\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/import/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"files\\\\\":[{\\\\\"columns\\\\\":[\\\\\"SRC_ID\\\\\",\\\\\"role\\\\\",\\\\\"DST_ID\\\\\"],\\\\\"format\\\\\":\\\\\"CSV\\\\\",\\\\\"label\\\\\":\\\\\"role\\\\\",\\\\\"SRC_ID\\\\\":\\\\\"actor\\\\\",\\\\\"DST_ID\\\\\":\\\\\"movie\\\\\"}]}\"}\", \"data\": \"1,Role1,2\\n3,Role2,4\\n\", \"continue_on_error\": true, \"delimiter\": \",\" } \u4e0a\u8ff0 description \u7684\u503c\u662f\u5982\u4e0b json \u5e8f\u5217\u5316\u540e\u7684\u5b57\u7b26\u4e32 { \"files\": [ { \"format\": \"CSV\", \"label\": \"role\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } Example response. \u2022 200: OK Output: { \"log\": \"Missing src uid 1\\n\" } \u7531\u4e8e\u8bf7\u6c42\u4e2d\u6307\u5b9a\u4e86\u5728\u51fa\u9519\u65f6\u7ee7\u7eed\uff0c\u8be5\u8fd4\u56de\u4fe1\u606f\u8bf4\u660e SRC_ID \u4e3a 1 \u7684\u8fb9\u6ca1\u6709\u88ab\u5bfc\u5165\uff0c\u800c\u5176\u4ed6\u4fe1\u606f\u5bfc\u5165\u6210\u529f\u3002 \u5176\u4ed6 URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/misc \u63d0\u53d6\u5b50\u56fe \u7ed9\u51fa\u9876\u70b9 id \u96c6\u5408\uff0c\u8fd4\u56de\u5305\u542b\u8be5\u96c6\u5408\u7684\u6700\u5c0f\u5b50\u56fe\u3002 URI : /db/{graph_name}/misc/sub_graph METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | vertex_ids | \u9876\u70b9 id \u96c6\u5408 | \u5217\u8868 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | nodes | \u9876\u70b9\u6570\u636e | \u5217\u8868\uff0c\u6bcf\u5143\u7d20\u5305\u542b vid, label, \u4ee5\u53ca\u5c5e\u6027 | | relationships | \u8fb9\u6570\u636e | \u5217\u8868\uff0c\u6bcf\u5143\u7d20\u5305\u542b src, dst, euid, label, \u4ee5\u53ca\u5c5e\u6027 | Example request. \u2022 POST http://localhost:7070/db/graph1/misc/sub_graph \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"vertex_ids\": [2, 5, 14, 20] } Example response. \u2022 200: OK Output: { \"nodes\": [ { \"label\": \"Person\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"vid\": 2 }, { \"label\": \"Person\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"vid\": 5 }, { \"label\": \"City\", \"properties\": { \"name\": \"London\" }, \"vid\": 14 }, { \"label\": \"Film\", \"properties\": { \"title\": \"Camelot\" }, \"vid\": 20 } ], \"relationships\": [ { \"destination\": 5, \"label\": \"HAS_CHILD\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 20, \"label\": \"ACTED_IN\", \"properties\": { \"birthyear\": 1937, \"charactername\": \"Guenevere\", \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"source\": 5 } ] }","title":"RESTful API"},{"location":"zh-CN/3.developer-document/1.restful-api/#restful-api","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd TuGrpah \u7684 Rest API \u7684\u8c03\u7528\u8be6\u60c5\u3002","title":"RESTful API"},{"location":"zh-CN/3.developer-document/1.restful-api/#_1","text":"TuGraph \u63d0\u4f9b\u9075\u4ece REST \u89c4\u8303\u7684 HTTP API\uff0c\u4ee5\u4f9b\u5f00\u53d1\u8005\u901a\u8fc7 HTTP \u8bf7\u6c42\u8fdc\u7a0b\u8c03\u7528 TuGraph \u63d0\u4f9b\u7684\u670d\u52a1\u3002 \u672c\u6587\u6863\u63cf\u8ff0 TuGraph \u7684 HTTP API \u4f7f\u7528\u65b9\u5f0f\u3002 :warning: \u9664\"\u767b\u9646\"\u3001\"\u67e5\u8be2\"\u548c\"\u5b58\u50a8\u8fc7\u7a0b\"\u5916\uff0c\u5176\u4f59\u63a5\u53e3\u81ea 2023\u5e744\u670830\u65e5 \u8d77\u5c06\u4e0d\u518d\u63d0\u4f9b\u652f\u6301\uff0c\u7edf\u4e00\u4f7f\u7528Cypher\u63a5\u53e3\u63d0\u4f9b\u670d\u52a1\u3002","title":"\u7b80\u4ecb"},{"location":"zh-CN/3.developer-document/1.restful-api/#_2","text":"","title":"\u8bf7\u6c42\u4e0e\u6570\u636e\u683c\u5f0f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_3","text":"TuGraph \u652f\u6301 HTTP GET/POST/PUT/DELETE \u8bf7\u6c42\u3002\u5176\u4e2d\uff1a GET \u8bf7\u6c42\u7528\u4e8e\u53ea\u8bfb\u8bf7\u6c42\uff0c\u5982\u8bfb\u53d6\u9876\u70b9\u5c5e\u6027\uff0c\u8fb9\u5c5e\u6027\u7b49\u64cd\u4f5c\uff1b POST \u8bf7\u6c42\u7528\u4e8e\u521b\u5efa\u5b9e\u4f53\uff0c\u63d0\u4ea4 Cypher\uff0c\u4ee5\u53ca\u52a0\u8f7d\u548c\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b\uff1b PUT \u8bf7\u6c42\u7528\u4e8e\u4fee\u6539\u5df2\u6709\u5b9e\u4f53\uff0c\u5982\u4fee\u6539\u9876\u70b9\u5c5e\u6027\uff0c\u8fb9\u5c5e\u6027\u7b49\uff1b DELETE \u8bf7\u6c42\u7528\u4e8e\u5220\u9664\u5df2\u6709\u5b9e\u4f53\uff0c\u5982\u5220\u9664\u9876\u70b9\uff0c\u8fb9\u7b49\u3002 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u8bf7\u6c42\u7684\u62a5\u5934(request header)\u4e2d\u8bbe\u7f6e server_version \u6765\u4fdd\u8bc1\u8bf7\u6c42\u7684\u670d\u52a1\u5668\u6709\u8db3\u591f\u65b0\u7684\u6570\u636e\u3002 \u5f53\u524d\u7684 server_version \u53ef\u4ee5\u4ece\u670d\u52a1\u5668\u8fd4\u56de\u7684\u62a5\u5934\u4e2d\u83b7\u53d6\u3002","title":"\u8bf7\u6c42"},{"location":"zh-CN/3.developer-document/1.restful-api/#_4","text":"\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u6570\u636e\u4ea4\u4e92\u7684\u683c\u5f0f\u662f JSON\u3002\u5728\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u8bf7\u5c06\u53d1\u9001\u6570\u636e\u7684\u8bf7\u6c42\u7684\u62a5\u5934\u8bbe\u7f6e\u4e3a Accept:application/json, Content-Type:application/json \u3002 \u4f8b\u5982\u5728\u521b\u5efa\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u8bf7\u6c42\u62a5\u5934\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a Accept: application/json; charset=UTF-8 Content-Type: application/json server_version: 12","title":"\u6570\u636e\u683c\u5f0f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_5","text":"TuGraph \u8fd4\u56de\u7684 HTTP \u72b6\u6001\u7801\u5305\u542b\u4ee5\u4e0b\u56db\u79cd\uff1a 200 OK: \u64cd\u4f5c\u6210\u529f 307 Temporary Redirect: \u64cd\u4f5c\u88ab\u91cd\u5b9a\u5411\uff0c\u4e00\u822c\u7528\u4e8e\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u628a\u64cd\u4f5c\u91cd\u5b9a\u5411\u5230 master \u4e0a 400 Bad Request: \u8f93\u5165\u6709\u8bef\uff0c\u4f8b\u5982 URI \u9519\u8bef\uff0c\u6216\u8005\u8bf7\u6c42\u4e2d\u7684 JSON \u53c2\u6570\u9519\u8bef 500 Internal Server Error: \u670d\u52a1\u5668\u7aef\u9519\u8bef \u5f53\u64cd\u4f5c\u6210\u529f\u65f6\uff0c\u8fd4\u56de\u7684 JSON \u4e2d\u5305\u542b\u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u3002\u5f53\u64cd\u4f5c\u91cd\u5b9a\u5411\u65f6\uff0c\u8fd4\u56de\u7684 HTTP \u62a5\u5934\u4e2d\u7684 location \u57df\u5305\u542b\u91cd\u5b9a\u5411\u76ee\u7684\u5730\u5740\u3002 \u5f53\u53d1\u751f\u8f93\u5165\u9519\u8bef\u6216\u8005\u670d\u52a1\u5668\u9519\u8bef\u65f6\uff0c\u8fd4\u56de\u7684 JSON \u4e2d\u5305\u542b error_message \u57df\uff0c\u5176\u5185\u5bb9\u662f\u9519\u8bef\u63d0\u793a\u3002 \u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u8fd8\u4f1a\u5728\u62a5\u5934\u4e2d\u8bbe\u7f6e server_version \uff0c\u4ee5\u544a\u77e5\u5ba2\u6237\u7aef\u5f53\u524d\u670d\u52a1\u5668\u7684\u6570\u636e\u7248\u672c\u53f7\u3002\u5f53\u5ba2\u6237\u7aef\u5728\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u8be5\u6570\u636e\u7248\u672c\u53f7\u53ef\u4ee5\u4fdd\u8bc1\u5ba2\u6237\u7aef\u4e0d\u4f1a\u8bfb\u5230\u9519\u8bef\u7684\u5386\u53f2\u6570\u636e\u3002","title":"\u8fd4\u56de\u503c"},{"location":"zh-CN/3.developer-document/1.restful-api/#uri","text":"TuGraph REST API \u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1aService Root, login, info, label, index, node, relationship, cypher, cpp_plugin, \u4ee5\u53ca python_plugin\u3002 \u5404\u529f\u80fd\u4f7f\u7528\u7684 URI \u683c\u5f0f\u5982\u4e0b\uff1a URI \u8bf4\u660e /web web \u53ef\u89c6\u5316\u754c\u9762 /cypher cypher \u8bf7\u6c42 /acl \u6743\u9650\u63a7\u5236 /user \u7528\u6237\u7ba1\u7406 /login \u7528\u6237\u767b\u5f55 /info \u6570\u636e\u5e93\u72b6\u6001\u53ca\u63d0\u793a\u4fe1\u606f /task \u4efb\u52a1\u7ba1\u7406 /db \u5b50\u56fe\u64cd\u4f5c \u5176\u4e2d\u5b50\u56fe\u64cd\u4f5c\u53c8\u5206\u4e3a\uff1a URI \u8bf4\u660e /db \u5b50\u56fe\u7684\u521b\u5efa\uff0c\u5220\u9664 /db/ {graph_name} /node \u9876\u70b9\u64cd\u4f5c /db/ {graph_name} /relationship \u8fb9\u64cd\u4f5c /db/ {graph_name} /label Label \u76f8\u5173\u64cd\u4f5c /db/ {graph_name} /index \u7d22\u5f15\u76f8\u5173\u64cd\u4f5c /db/ {graph_name} /cypher \u5b50\u56fe\u76f8\u5173 cypher \u64cd\u4f5c /db/ {graph_name} /cpp_plugin C++\u5b58\u50a8\u8fc7\u7a0b /db/ {graph_name} /python_plugin Python \u5b58\u50a8\u8fc7\u7a0b /db/ {graph_name} /import \u5728\u7ebf\u5bfc\u5165 /db/ {graph_name} /misc \u5176\u5b83\u64cd\u4f5c","title":"URI \u683c\u5f0f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_6","text":"TuGraph \u63d0\u4f9b\u57fa\u4e8e JWT \u7684\u7528\u6237\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTP \u6216 HTTPS \u534f\u8bae\u8fdb\u884c\u4f20\u8f93\u3002\u7cfb\u7edf\u9ed8\u8ba4\u4f7f\u7528 HTTP \u534f\u8bae\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528 HTTPS\uff0c\u9700\u8981\u5728 lgraph.json \u914d\u7f6e\u6587\u4ef6\u4e2d\u5c06 ssl_auth \u8bbe\u4e3a 1\u3002","title":"\u767b\u9646"},{"location":"zh-CN/3.developer-document/1.restful-api/#_7","text":"\u7528\u6237\u901a\u8fc7\u7528\u6237\u540d\u548c\u5bc6\u7801\u53d1\u9001\u767b\u5f55\u8bf7\u6c42\u3002\u767b\u5f55\u6210\u529f\u4f1a\u6536\u5230\u5e26\u6709\u7b7e\u540d\u7684\u4ee4\u724c\uff0c\u5373 Json Web Token\uff0c\u5ba2\u6237\u7aef\u50a8\u5b58\u8be5\u4ee4\u724c\uff0c\u5e76\u4e14\u7528\u4e8e\u4ee5\u540e\u7684\u6bcf\u6b21\u53d1\u9001\u8bf7\u6c42\u3002\u5982\u679c\u767b\u5f55\u5931\u8d25\u4f1a\u6536\u5230\u201cAuthentication failed\u201d\u9519\u8bef\u3002 URI : /login METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | user | \u7528\u6237\u540d | \u5b57\u7b26\u4e32 | | password | \u5bc6\u7801 | \u5b57\u7b26\u4e32 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | jwt | \u4ee4\u724c | \u5b57\u7b26\u4e32 | Example request. \u2022 POST http://localhost:7070/login \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"user\":\"admin\", \"password\":\"73@TuGraph\" } Example response. \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" }","title":"\u767b\u5f55"},{"location":"zh-CN/3.developer-document/1.restful-api/#_8","text":"Token\u5931\u6548\u540e\uff0c\u524d\u7aef\u53d1\u8d77\u5237\u65b0token\u63a5\u53e3\uff0c\u540e\u7aef\u9a8c\u8bc1token\u5408\u6cd5\u6027\u3002\u521d\u6b21\u767b\u5f55\u540e\uff0c1\u5c0f\u65f6\u5185\u6709\u6548\uff0c\u9700\u5237\u65b0\u4f7f\u7528\u3002\u5373\u4f7f\u5237\u65b0\uff0c24\u5c0f\u65f6\u540e\u4e5f\u4f1a\u5f3a\u5236\u9000\u51fa\uff0c\u9700\u8981\u91cd\u65b0\u767b\u9646\u3002 \u9a8c\u8bc1\u901a\u8fc7\uff0c\u751f\u6210\u65b0\u7684token\uff1b\u9a8c\u8bc1\u5931\u8d25\u8fd4\u56de\u72b6\u6001\u7801401\u3002 URI : /refresh METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | Authorization | \u4ee4\u724c | \u5b57\u7b26\u4e32 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | jwt | \u4ee4\u724c | \u5b57\u7b26\u4e32 | Example request. \u2022 POST http://localhost:7070/refresh \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\": \"Bearer eyJhbGciOiJIUz32NiIsInR5cCI6IkpXVDJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byj3fYVAH4D88dfTD_zYQ_uAvdizTMek\" } Example response. \u2022 200: OK Output: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\" }","title":"\u8eab\u4efd\u5237\u65b0"},{"location":"zh-CN/3.developer-document/1.restful-api/#_9","text":"\u7528\u6237\u767b\u51fa\uff0c\u540c\u65f6\u5220\u9664token\u3002 URI : /logout METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | Authorization | \u4ee4\u724c | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/logout \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"Authorization\" : \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJmbWEuYWkiLCJwYXNzd29yZCI6IjczQFR1R3JhcGgiLCJ1c2VyIjoiYWRtaW4ifQ.o_yb5veSJkuy-ieBp4MqTk-tC1grcKotgVbgNJ0TyTU\" } Example response. \u2022 200: OK","title":"\u767b\u51fa"},{"location":"zh-CN/3.developer-document/1.restful-api/#_10","text":"URI \u683c\u5f0f\u4e3a http://{host}:{port}/cypher","title":"\u67e5\u8be2"},{"location":"zh-CN/3.developer-document/1.restful-api/#cypher","text":"URI : /cypher METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | graph | \u6570\u636e\u5e93 | \u5b57\u7b26\u4e32 | | cypher | \u67e5\u8be2\u8bed\u53e5 | \u5b57\u7b26\u4e32 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | result | \u8fd0\u884c\u7ed3\u679c | \u5217\u8868 | | elapsed | \u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09 | \u6d6e\u70b9\u6570 | | header | \u8fd4\u56de\u7ed3\u679c\u7684\u8868\u5934 | \u5217\u8868 | | size | \u7ed3\u679c\u6570 | \u6574\u578b | \u5176\u4e2d header \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e00\u5143\u7d20\u683c\u5f0f\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b name \u5217\u540d \u5b57\u7b26\u4e32 type \u5217\u6570\u636e\u7c7b\u578b\uff0c0 \u4e3a\u6807\u91cf\uff0c1 \u4e3a\u9876\u70b9 id\uff0c2 \u4e3a\u5411\u91cf Example request. \u2022 POST http://localhost:7070/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n) RETURN n,n.name LIMIT 10\" } Example response. \u2022 200: OK Output: { \"elapsed\": 0.001224517822265625, \"header\": [ { \"name\": \"n\", \"type\": 1 }, { \"name\": \"n.name\", \"type\": 0 } ] \"result\": [ [ 0, \"Rachel Kempson\" ], [ 1, \"Michael Redgrave\" ], [ 2, \"Vanessa Redgrave\" ] ], \"size\": 3 }","title":"\u8c03\u7528 Cypher"},{"location":"zh-CN/3.developer-document/1.restful-api/#cypher_1","text":"Cypher \u652f\u6301\u4f7f\u7528\u53c2\u6570\u8fdb\u884c\u67e5\u8be2\u3002\u5f53\u8c03\u7528\u5e26\u53c2\u6570\u7684 Cypher \u67e5\u8be2\u65f6\uff0cTuGraph \u4f1a\u7f13\u5b58\u8be5\u67e5\u8be2\u7684 \u6267\u884c\u8ba1\u5212\uff08execution plan\uff09\uff0c\u4ee5\u52a0\u901f\u540e\u7eed\u540c\u7c7b\u67e5\u8be2\u7684\u901f\u5ea6\u3002 URI : /cypher METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | graph | \u6570\u636e\u5e93 | \u5b57\u7b26\u4e32 | | cypher | \u67e5\u8be2\u8bed\u53e5 | \u5b57\u7b26\u4e32 | | parameters | \u53c2\u6570 | \u5217\u8868 | RESPONSE : \u4e0e \u8c03\u7528 Cypher \u76f8\u540c\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/cypher \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"graph\": \"default\", \"script\": \"MATCH (n:Person {name:$param1}) RETURN n.birthyear\", \"parameters\": { \"$param1\": \"Lindsay Lohan\" } } Example response. \u2022 200: OK Output: { \"elapsed\": 0.005886077880859375, \"header\": [ { \"name\": \"n.birthyear\", \"type\": 0 } ], \"result\": [ [ 1986 ] ], \"size\": 1 }","title":"\u8c03\u7528\u5e26\u53c2\u6570\u7684 Cypher"},{"location":"zh-CN/3.developer-document/1.restful-api/#_11","text":"URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/cpp_plugin|python_plugin","title":"\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/1.restful-api/#_12","text":"TuGraph \u670d\u52a1\u542f\u52a8\u65f6\uff0c\u5982\u679c load_plugins \u4e3a\u771f\uff0c\u5219\u4f1a\u81ea\u52a8\u52a0\u8f7d plugin \u76ee\u5f55\u4e0b\u7684\u6240\u6709 plugin\u3002\u5426\u5219\u9700\u8981\u624b\u52a8\u52a0\u8f7d\u3002\u6b64\u5916\uff0c\u5982\u679c\u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7ba1\u7406\u5458\u66f4\u65b0\u4e86 plugin \u6587\u4ef6\uff0c\u4e5f\u9700\u8981\u624b\u52a8\u91cd\u65b0\u52a0\u8f7d\u3002\u91cd\u65b0\u52a0\u8f7d plugin \u7684\u8c03\u7528\u683c\u5f0f\u4e3a\uff1a URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u63d2\u4ef6\u540d\u79f0 | \u5b57\u7b26\u4e32 | | description | \u63d2\u4ef6\u8bf4\u660e | \u5b57\u7b26\u4e32 | | code_base64 | \u63d2\u4ef6\u4ee3\u7801 | \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 base64 \u7f16\u7801 | | read_only | \u662f\u5426\u4e3a\u53ea\u8bfb\u5b58\u50a8\u8fc7\u7a0b | \u5e03\u5c14\u503c | | code_type | \u4e0a\u4f20\u4ee3\u7801\u7684\u7c7b\u578b\uff0cC++\u7c7b\u578b\u53ef\u9009 zip/so/cpp\uff0cPython \u4e3a py | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.zip}\", \"read_only\" : true, \"code_type\" : \"zip\" } Example response. \u2022 200: OK","title":"\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/1.restful-api/#_13","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin METHOD : GET RESPONSE : \u5b58\u50a8\u8fc7\u7a0b\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a plugin \u7684\u63cf\u8ff0\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u5b58\u50a8\u8fc7\u7a0b\u540d | \u5b57\u7b26\u4e32 | | description | \u5b58\u50a8\u8fc7\u7a0b\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | | read_only | \u5b58\u50a8\u8fc7\u7a0b\u662f\u5426\u53ea\u8bfb | \u5e03\u5c14\u503c | Example request. \u2022 GET http://localhost:7070/db/graph1/cpp_plugin \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { [ { \"description\":\"adds a vertex label to the db\", \"name\":\"add_label\", \"read_only\":false }, { \"description\": \"scans graph and get number of edges\", \"name\": \"scan_graph\", \"read_only\": true } ] }","title":"\u5217\u51fa\u6240\u6709\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/1.restful-api/#_14","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : GET RESPONSE : \u5b58\u50a8\u8fc7\u7a0b\u4fe1\u606f\uff0c\u5305\u62ec\u4ee3\u7801\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u5b58\u50a8\u8fc7\u7a0b\u540d | \u5b57\u7b26\u4e32 | | description | \u5b58\u50a8\u8fc7\u7a0b\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | | read_only | \u5b58\u50a8\u8fc7\u7a0b\u662f\u5426\u53ea\u8bfb | \u5e03\u5c14\u503c | | code_base64 | \u5b58\u50a8\u8fc7\u7a0b\u7684\u4ee3\u7801 | \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 base64 \u7f16\u7801 | | code_type | \u4e0a\u4f20\u4ee3\u7801\u7684\u7c7b\u578b\uff0cC++\u7c7b\u578b\u53ef\u9009 zip/so/cpp\uff0cPython \u4e3a py | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/db/graph1/cpp_plugin/echo \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { \"name\" : \"echo\", \"description\" : \"A test plugin that returns the input\", \"code_base64\" : \"{base64 encoded echo.zip}\", \"read_only\" : true, \"code_type\" : \"zip\" }","title":"\u83b7\u53d6\u5b58\u50a8\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_15","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : POST REQUEST : \u5b57\u7b26\u4e32\u8f93\u5165 | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | data | \u8f93\u5165\u6570\u636e | \u5b57\u7b26\u4e32 | | timeout | \u8d85\u65f6\u957f\u5ea6\uff08\u79d2\uff0c\u53ef\u9009\uff0c\u7f3a\u7701\u503c\u4e3a 0\uff09 | \u6d6e\u70b9 | | in_process | \u662f\u5426\u5728\u672c\u8fdb\u7a0b\u8c03\u7528\uff08\u53ef\u9009\uff0c\u7f3a\u7701\u503c\u4e3a false\uff09 | \u5e03\u5c14\u503c | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | result | \u8fd0\u884c\u7ed3\u679c | \u5b57\u7b26\u4e32 | Example request. \u2022 POST http://localhost:7070/db/graph1/python_plugin/echo \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { data : \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\", timeout : 0, in_process : true } Example response. \u2022 200: OK Output: { \"result\": \"Hello!\\n\u4f60\u597d\uff01\\nKonichiwa!\" }","title":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/1.restful-api/#_16","text":"URI : /db/{graph_name}/cpp_plugin|python_plugin/{plugin_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1/cpp_plugin/example_plugin \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK","title":"\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/1.restful-api/#deprecated","text":"\u4ee5\u4e0b\u63a5\u53e3\u5c06\u57284/30/2023\u4e4b\u540e\u88ab\u5220\u9664\u3002","title":"Deprecated"},{"location":"zh-CN/3.developer-document/1.restful-api/#_17","text":"\u7cfb\u7edf\u9ed8\u8ba4\u521b\u5efa\u4e00\u4e2a\u7ba1\u7406\u5458\uff0c\u7ba1\u7406\u5458\u7528\u6237\u540d\u4e3a admin \uff0c\u5bc6\u7801\u4e3a 73 _@TuGraph _ _ _\u3002\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u8bf7\u7528\u6237\u5728\u7b2c\u4e00\u6b21\u542f\u52a8\u670d\u52a1\u5668\u540e\u66f4\u6539\u5bc6\u7801\u3002","title":"\u7528\u6237\u7ba1\u7406"},{"location":"zh-CN/3.developer-document/1.restful-api/#_18","text":"\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u6237\uff0c\u5e76\u4e3a\u5176\u8bbe\u7f6e\u521d\u59cb\u5bc6\u7801\u3002\u53ea\u6709\u7ba1\u7406\u5458\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002\u5176\u4e2d\u7528\u6237\u540d\u53ea\u80fd\u7531\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf\u6784\u6210\uff0c\u5bc6\u7801\u5219\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u5b57\u7b26\u3002\u7528\u6237\u540d\u548c\u5bc6\u7801\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7 64 \u5b57\u8282\u3002\u6dfb\u52a0\u7528\u6237\u65f6\u8fd8\u53ef\u4ee5\u4e3a\u7528\u6237\u589e\u52a0\u4e00\u4e2a\u63cf\u8ff0\uff0c\u7528\u6237\u63cf\u8ff0\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u5b57\u7b26\uff0c\u6700\u957f\u4e0d\u8d85\u8fc7 512 \u5b57\u8282\u3002 \u65b0\u7528\u6237\u9ed8\u8ba4\u62e5\u6709\u540c\u540d\u7684\u89d2\u8272\uff0c\u4e0d\u5177\u5907\u4efb\u4f55\u56fe\u7684\u6743\u9650\u3002 URI : /user METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | user | \u7528\u6237\u540d | \u5b57\u7b26\u4e32 | | password | \u5bc6\u7801 | \u5b57\u7b26\u4e32 | | description | \u7528\u6237\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"user\": \"USER1\", \"password\": \"AN_INITIAL_PASSWORD\", \"description\": \"This is a user\" } Example response. \u2022 200: OK","title":"\u6dfb\u52a0\u7528\u6237"},{"location":"zh-CN/3.developer-document/1.restful-api/#_19","text":"\u5217\u51fa\u6570\u636e\u5e93\u7684\u6240\u6709\u7528\u6237\u3002\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /user/ METHOD : GET RESPONSE : \u6240\u6709\u7528\u6237\u53ca\u5176\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/user \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"admin\": { \"disabled\": false, \"description\": \"Builtin admin user\", \"roles\": [\"admin\"] }, \"guest1\": { \"disabled\": true, \"description\": \"\", \"roles\": [\"guest1\", \"some_other_role\"] } }","title":"\u5217\u51fa\u6240\u6709\u7528\u6237"},{"location":"zh-CN/3.developer-document/1.restful-api/#_20","text":"\u5217\u51fa\u7ed9\u5b9a\u7528\u6237\u7684\u4fe1\u606f\u3002 URI : /user/{user_name} METHOD : GET RESPONSE : \u7528\u6237\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"disabled\": true, \"description\": \"A guest user\" \"roles\": [\"guest1\", \"some_other_role\"] }","title":"\u83b7\u53d6\u7528\u6237\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_21","text":"\u5217\u51fa\u7ed9\u5b9a\u7528\u6237\u6709\u6743\u9650\u8bbf\u95ee\u7684\u6240\u6709\u56fe\u53ca\u76f8\u5e94\u6743\u9650\u3002 URI : /user/{user_name}/graph METHOD : GET RESPONSE : \u7528\u6237\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/user/guest1/graph \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"graph1\" : \"FULL\", \"graph2\" : \"READ\" }","title":"\u5217\u51fa\u7528\u6237\u6743\u9650"},{"location":"zh-CN/3.developer-document/1.restful-api/#_22","text":"\u7528\u6237\u53ef\u4ee5\u66f4\u6539\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u66f4\u6539\u5bc6\u7801\u65f6\u9700\u8981\u540c\u65f6\u63d0\u4f9b\u539f\u5bc6\u7801\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u6539\u6240\u6709\u7528\u6237\u7684\u5bc6\u7801\u3002\u7ba1\u7406\u5458\u66f4\u6539\u5176\u5b83\u7528\u6237\u5bc6\u7801\u65f6\uff0c\u53ef\u4ee5\u4e0d\u63d0\u4f9b\u5f53\u524d\u5bc6\u7801\u3002 URI : /user/{user_name}/password METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | current_password | \u5f53\u524d\u5bc6\u7801 | \u5b57\u7b26\u4e32 | | new_password | \u65b0\u5bc6\u7801 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/user1/password \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"current_password\": \"THE_CURRENT_PASSWORD\" \"new_password\": \"A_NEW_PASSWORD\" } Example response. \u2022 200: OK","title":"\u66f4\u6539\u7528\u6237\u5bc6\u7801"},{"location":"zh-CN/3.developer-document/1.restful-api/#_23","text":"\u7528\u6237\u53ef\u4ee5\u4fee\u6539\u81ea\u5df1\u7684\u63cf\u8ff0\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u7528\u6237\u7684\u63cf\u8ff0\u3002 URI : /user/{user_name}/description METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u7528\u6237\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/user1/description \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"description\": \"New description for this user.\" } Example response. \u2022 200: OK","title":"\u4fee\u6539\u7528\u6237\u63cf\u8ff0"},{"location":"zh-CN/3.developer-document/1.restful-api/#_24","text":"\u5220\u9664\u7528\u6237\u53ca\u5176\u6240\u6709\u76f8\u5173\u6743\u9650\uff0c\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /user/{user_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK","title":"\u5220\u9664\u7528\u6237"},{"location":"zh-CN/3.developer-document/1.restful-api/#_25","text":"\u7528\u6237\u53ef\u4ee5\u88ab\u7981\u7528\u3002\u88ab\u7981\u7528\u7684\u7528\u6237\u5c06\u4e0d\u80fd\u767b\u9646\uff0c\u4f46\u662f\u5176\u8d44\u6599\u4ecd\u7136\u4fdd\u5b58\u3002\u88ab\u7981\u7528\u7684\u7528\u6237\u53ef\u4ee5\u88ab\u91cd\u65b0\u542f\u7528\u3002 URI : /user/{user_name}/disable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/guest1/disable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK","title":"\u7981\u7528\u7528\u6237"},{"location":"zh-CN/3.developer-document/1.restful-api/#_26","text":"\u542f\u7528\u4e00\u4e2a\u88ab\u7981\u7528\u7684\u7528\u6237\u3002 URI : /user/{user_name}/enable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/guest1/enable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK","title":"\u542f\u7528\u7528\u6237"},{"location":"zh-CN/3.developer-document/1.restful-api/#_27","text":"\u4e3a\u6307\u5b9a\u7528\u6237\u8bbe\u7f6e\u89d2\u8272\u3002\u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u7528\u6237\u89d2\u8272\u5217\u8868\u5fc5\u987b\u662f\u201c\u5168\u91cf\u5217\u8868\u201d\uff0c\u5373\u8be5\u5217\u8868\u9700\u8981\u5305\u542b\u8be5\u7528\u6237\u9700\u8981\u7684\u6240\u6709\u89d2\u8272\u3002\u552f\u4e00\u7684\u4f8b\u5916\u662f\u7528\u6237\u7684\u540c\u540d\u89d2\u8272\uff0c\u5373\u4f7f\u5217\u8868\u4e2d\u4e0d\u542b\u8be5\u89d2\u8272\uff0c\u5b83\u4e5f\u4f1a\u88ab\u52a0\u5230\u7528\u6237\u89d2\u8272\u4e2d\u3002 URI : /user/{user_name}/role METHOD : POST REQUEST : \u89d2\u8272\u5217\u8868 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/user/guest1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: [\"role1\", \"role2\"] Example response. \u2022 200: OK \u6b64\u65f6\u7528\u6237 guest1 \u62e5\u6709\u89d2\u8272 guest1 , role1 \u548c role2 \u3002","title":"\u8bbe\u7f6e\u7528\u6237\u89d2\u8272"},{"location":"zh-CN/3.developer-document/1.restful-api/#_28","text":"TuGraph \u4f7f\u7528\u57fa\u4e8e\u89d2\u8272\u7684\u6743\u9650\u7ba1\u7406\u3002 \u540c\u4e00\u7528\u6237\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u89d2\u8272\u3002\u65b0\u7528\u6237\u9ed8\u8ba4\u62e5\u6709\u4e0e\u5176\u540c\u540d\u7684\u89d2\u8272\u3002\u5220\u9664\u7528\u6237\u65f6\uff0c\u540c\u540d\u89d2\u8272\u4e5f\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u65b0\u5efa\u7528\u6237\u65f6\u540c\u540d\u89d2\u8272\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 \u540c\u4e00\u89d2\u8272\u53ef\u4ee5\u5bf9\u591a\u4e2a\u56fe\u6709\u4e0d\u540c\u7684\u6743\u9650\u3002\u7528\u6237\u5bf9\u67d0\u5f20\u56fe\u7684\u6743\u9650\u7531\u5176\u6240\u6709\u89d2\u8272\u5bf9\u8be5\u56fe\u7684\u6700\u9ad8\u6743\u9650\u51b3\u5b9a\u3002 TuGraph \u4f7f\u7528\u56db\u7ea7\u6743\u9650\uff0c\u4e0d\u7528\u7684\u7528\u6237\u5bf9\u4e0d\u540c\u7684\u5b50\u56fe\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6743\u9650\uff0c\u56db\u79cd\u6743\u9650\u53ca\u5176\u8bf4\u660e\u5982\u4e0b\uff1a \u6743\u9650 \u8bf4\u660e NONE \u65e0\u6743\u9650 READ \u53ea\u8bfb WRITE \u53ef\u8bfb\u5199\u5b50\u56fe\u4e2d\u7684\u9876\u70b9\u548c\u8fb9 FULL \u5b8c\u5168\u6743\u9650\uff0c\u5305\u62ec\u66f4\u6539\u5143\u6570\u636e\uff08label, index\uff09\uff0c\u7ba1\u7406\u5b58\u50a8\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5220\u9664\u5b50\u56fe\u4e2d\u7684\u6240\u6709\u6570\u636e \u7ba1\u7406\u5458\u5bf9\u6240\u6709\u5b50\u56fe\u90fd\u6709\u5b8c\u5168\u6743\u9650\uff0c\u65b0\u5efa\u7684\u7528\u6237\u5bf9\u6240\u6709\u5b50\u56fe\u90fd\u6ca1\u6709\u6743\u9650\u3002\u5c06\u7528\u6237\u52a0\u5165\u7ba1\u7406\u5458\u89d2\u8272\u4e2d\u53ef\u4ee5\u5c06\u7528\u6237\u63d0\u5347\u4e3a\u7ba1\u7406\u5458\u3002","title":"\u89d2\u8272\u7ba1\u7406"},{"location":"zh-CN/3.developer-document/1.restful-api/#_29","text":"\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u89d2\u8272\uff0c\u5e76\u8bbe\u7f6e\u5176\u63cf\u8ff0\u3002\u53ea\u6709\u7ba1\u7406\u5458\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002 \u89d2\u8272\u540d\u53ea\u80fd\u7531\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf\u6784\u6210\uff0c\u5bc6\u7801\u5219\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u5b57\u7b26\u3002\u89d2\u8272\u540d\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7 64 \u5b57\u8282\u3002 \u89d2\u8272\u63cf\u8ff0\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 512 \u5b57\u8282\u3002 URI : /role METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | role | \u89d2\u8272\u540d | \u5b57\u7b26\u4e32 | | description | \u89d2\u8272\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"role\": \"new_role\", \"description\": \"This is a new role.\", } Example response. \u2022 200: OK","title":"\u6dfb\u52a0\u89d2\u8272"},{"location":"zh-CN/3.developer-document/1.restful-api/#_30","text":"\u4fee\u6539\u89d2\u8272\u7684\u63cf\u8ff0\u3002\u53ea\u6709\u7ba1\u7406\u5458\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002\u89d2\u8272\u63cf\u8ff0\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 512 \u5b57\u8282\u3002 URI : /role/{role_name}/description METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u65b0\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/description \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"description\": \"modified description\" } Example response. \u2022 200: OK","title":"\u4fee\u6539\u89d2\u8272\u63cf\u8ff0"},{"location":"zh-CN/3.developer-document/1.restful-api/#_31","text":"\u5217\u51fa\u6570\u636e\u5e93\u7684\u6240\u6709\u89d2\u8272\u3002\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /role/ METHOD : GET RESPONSE : \u6240\u6709\u89d2\u8272\u53ca\u5176\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/role \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"admin\": { \"disabled\": false, \"description\": \"Builtin administrator group.\", \"permissions\": {\"default\":\"FULL\", \"graph1\":\"FULL\"} }, \"role1\": { \"disabled\": true, \"description\": \"Another role\", \"permissions\": {\"default\":\"READ\"} } }","title":"\u5217\u51fa\u6240\u6709\u89d2\u8272"},{"location":"zh-CN/3.developer-document/1.restful-api/#_32","text":"\u5217\u51fa\u7ed9\u5b9a\u89d2\u8272\u7684\u4fe1\u606f\u3002 URI : /role/{role_name} METHOD : GET RESPONSE : \u89d2\u8272\u4fe1\u606f\u3002 Example request. \u2022 GET http://localhost:7070/role/role1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK Output: { \"disabled\": true, \"description\": \"Another role\", \"permissions\": {\"default\":\"READ\"} }","title":"\u83b7\u53d6\u89d2\u8272\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_33","text":"\u5220\u9664\u6307\u5b9a\u89d2\u8272\uff0c\u53ea\u6709\u7ba1\u7406\u5458\u62e5\u6709\u8be5\u64cd\u4f5c\u6743\u9650\u3002 URI : /role/{role_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/role/role1 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK","title":"\u5220\u9664\u89d2\u8272"},{"location":"zh-CN/3.developer-document/1.restful-api/#_34","text":"\u89d2\u8272\u53ef\u4ee5\u88ab\u7981\u7528\u3002\u89d2\u8272\u88ab\u7981\u7528\u540e\uff0c\u5177\u6709\u8be5\u89d2\u8272\u7684\u7528\u6237\u5c06\u4e0d\u518d\u4ece\u8be5\u89d2\u8272\u4e2d\u83b7\u5f97\u4efb\u4f55\u6743\u9650\u3002\u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\u3002 URI : /role/{role_name}/disable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/disable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK","title":"\u7981\u7528\u89d2\u8272"},{"location":"zh-CN/3.developer-document/1.restful-api/#_35","text":"\u542f\u7528\u4e00\u4e2a\u88ab\u7981\u7528\u7684\u89d2\u8272\u3002 URI : /role/{role_name}/enable METHOD : POST RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/enable \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Example response. \u2022 200: OK","title":"\u542f\u7528\u89d2\u8272"},{"location":"zh-CN/3.developer-document/1.restful-api/#_36","text":"\u4e3a\u6307\u5b9a\u89d2\u8272\u8bbe\u7f6e\u6743\u9650\u3002\u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u89d2\u8272\u6743\u9650\u5217\u8868\u5fc5\u987b\u662f\u201c\u5168\u91cf\u5217\u8868\u201d\uff0c\u5373\u8be5\u5217\u8868\u9700\u8981\u5305\u542b\u8be5\u89d2\u8272\u80fd\u64cd\u4f5c\u7684\u6240\u6709\u56fe\u53ca\u5176\u6743\u9650\u3002 URI : /role/{role_name}/permissions METHOD : POST REQUEST : \u56fe\u540d\u79f0\u53ca\u76f8\u5e94\u6743\u9650\u7684\u5b57\u5178\u3002 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/role/role1/permissions \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 \u2022 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek Input: { \"graph1\" : \"FULL\", \"graph2\" : \"READ\" } Example response. \u2022 200: OK","title":"\u8bbe\u7f6e\u89d2\u8272\u6743\u9650"},{"location":"zh-CN/3.developer-document/1.restful-api/#_37","text":"","title":"\u670d\u52a1\u5668\u72b6\u6001"},{"location":"zh-CN/3.developer-document/1.restful-api/#_38","text":"\u4fee\u6539\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u914d\u7f6e\u4fee\u6539\u540e\u7acb\u5373\u751f\u6548\uff0c\u5e76\u5c06\u5f71\u54cd\u6240\u6709\u670d\u52a1\u5668\u3002\u8fd9\u4e9b\u914d\u7f6e\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u914d\u7f6e\u6587\u4ef6\u4ee5\u53ca\u547d\u4ee4\u884c\u53c2\u6570\u3002 URI : /config METHOD : PUT REQUEST : \u8bf7\u6c42\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u4f7f\u7528 {\"opt1\":v1} \u53ef\u4ee5\u5c06\u540d\u4e3a opt1 \u7684\u914d\u7f6e\u4fee\u6539\u4e3a v1 \u3002 \u914d\u7f6e\u540d \u8bf4\u660e \u503c\u7c7b\u578b OPT_DB_ASYNC \u662f\u5426\u542f\u7528\u5f02\u6b65\u6a21\u5f0f \u5e03\u5c14\u503c OPT_TXN_OPTIMISTIC \u662f\u5426\u9ed8\u8ba4\u4f7f\u7528\u4e50\u89c2\u4e8b\u52a1\u9501 \u5e03\u5c14\u503c OPT_AUDIT_LOG_ENABLE \u662f\u5426\u542f\u7528\u5ba1\u8ba1\u65e5\u5fd7 \u5e03\u5c14\u503c RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 PUT http://localhost:7070/config \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"OPT_DB_ASYNC\": true, \"OPT_AUDIT_LOG_ENABLE\": false } Example response. \u2022 200: OK","title":"\u4fee\u6539\u670d\u52a1\u5668\u914d\u7f6e"},{"location":"zh-CN/3.developer-document/1.restful-api/#_39","text":"URI : /info METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | lgraph_version | \u670d\u52a1\u5668\u7248\u672c\u53f7 | \u5b57\u7b26\u4e32 | | git_branch | \u670d\u52a1\u5668\u4ee3\u7801\u5206\u652f | \u5b57\u7b26\u4e32 | | git_commit | \u670d\u52a1\u5668\u4ee3\u7801\u7248\u672c | \u5b57\u7b26\u4e32 | | web_commit | \u524d\u7aef\u7801\u7248\u672c | \u5b57\u7b26\u4e32 | | cpp_id | CPP \u7f16\u8bd1\u5668 ID | \u5b57\u7b26\u4e32 | | cpp_version | CPP \u7f16\u8bd1\u5668\u7248\u672c | \u5b57\u7b26\u4e32 | | python_version | PYTHON \u7248\u672c | \u5b57\u7b26\u4e32 | | node | \u9876\u70b9 uri | \u5b57\u7b26\u4e32 | | relationship | \u8fb9 uri | \u5b57\u7b26\u4e32 | | cpu | cpu \u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u670d\u52a1\u5668 CPU \u72b6\u6001 | | disk | \u786c\u76d8 IO \u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u670d\u52a1\u5668\u786c\u76d8\u72b6\u6001 | | memory | \u5185\u5b58\u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u670d\u52a1\u5668\u5185\u5b58\u72b6\u6001 | | db_space | \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 | | db_config | \u56fe\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f | \u5b57\u5178\uff0c\u683c\u5f0f\u53c2\u89c1 \u56fe\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f | | up_time | \u6570\u636e\u5e93\u5728\u7ebf\u65f6\u957f\uff08\u79d2\uff09 | \u6574\u578b | Example request. \u2022 GET http://localhost:7070/info \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"lgraph_version\": \"1.2.0\", \"git_branch\": \"master\", \"git_commit\": \"9e2977d\", \"web_commit\": \"1e2823d\", \"cpu_id\": \"GUN\", \"cpu_version\": \"4.8.5\", \"python_version\": \"3.2\", \"node\": \"/node\", \"relationship\": \"/relationship\", \"cpu\": { \"self\": 25, \"server\": 35, \"unit\": \"%\" }, \"disk\": { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" }, \"memory\": { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" }, \"db_space\": { \"space\": 57344, \"unit\": \"B\" }, \"db_config\": { \"db_async\": false, \"disable_auth\": false, \"enable_ha\": false, ... }, \"up_time\": 3235 }","title":"\u5f53\u524d\u670d\u52a1\u5668\u72b6\u6001"},{"location":"zh-CN/3.developer-document/1.restful-api/#cpu","text":"URI : /info/cpu METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | self | \u56fe\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f CPU \u4f7f\u7528\u7387 | \u6574\u578b | | server | \u670d\u52a1\u5668 CPU \u4f7f\u7528\u7387 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/cpu \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25, \"server\": 35, \"unit\": \"%\" }","title":"\u670d\u52a1\u5668 CPU \u72b6\u6001"},{"location":"zh-CN/3.developer-document/1.restful-api/#_40","text":"URI : /info/disk METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | read | \u670d\u52a1\u5668\u786c\u76d8\u8bfb\u901f\u7387 | \u6574\u578b | | write | \u670d\u52a1\u5668\u786c\u76d8\u5199\u901f\u7387 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/disk \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"read\": 2000, \"write\": 2000, \"unit\": \"B/s\" }","title":"\u670d\u52a1\u5668\u786c\u76d8\u72b6\u6001"},{"location":"zh-CN/3.developer-document/1.restful-api/#_41","text":"URI : /info/memory METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | self | \u56fe\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4f7f\u7528\u91cf | \u6574\u578b | | server_avail | \u670d\u52a1\u5668\u53ef\u7528\u5185\u5b58 | \u6574\u578b | | server_total | \u670d\u52a1\u5668\u603b\u5185\u5b58 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/memory \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"self\": 25016, \"server_avail\": 46865636, \"server_total\": 65860552, \"unit\": \"KB\" }","title":"\u670d\u52a1\u5668\u5185\u5b58\u72b6\u6001"},{"location":"zh-CN/3.developer-document/1.restful-api/#_42","text":"URI : /info/db_space METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | space | \u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4 | \u6574\u578b | | disk_avail | \u56fe\u6570\u636e\u5e93\u53ef\u7528\u7a7a\u95f4 | \u6574\u578b | | disk_total | \u670d\u52a1\u5668\u786c\u76d8\u603b\u7a7a\u95f4 | \u6574\u578b | | unit | \u5355\u4f4d | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/db_space \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"disk_avail\"::360074579968, \"disk_total\"::984373800960, \"space\": 57344, \"unit\": \"B\" }","title":"\u56fe\u6570\u636e\u5e93\u5360\u7528\u7a7a\u95f4"},{"location":"zh-CN/3.developer-document/1.restful-api/#_43","text":"URI : /info/db_config METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | db_async | \u56fe\u6570\u636e\u5e93\u5de5\u4f5c\u6a21\u5f0f\uff08\u540c\u6b65\u6216\u5f02\u6b65\uff09 | \u5e03\u5c14\u503c | | disable_auth | \u662f\u5426\u7981\u7528\u8eab\u4efd\u9a8c\u8bc1 | \u5e03\u5c14\u503c | | enable_ha | \u662f\u5426\u542f\u7528\u9ad8\u53ef\u7528\u6a21\u5f0f | \u5e03\u5c14\u503c | | enable_rpc | \u662f\u5426\u542f\u7528 RPC \u670d\u52a1\u5668 | \u5e03\u5c14\u503c | | bind_host | REST \u670d\u52a1\u5668\u7684\u4e3b\u673a | \u5b57\u7b26\u4e32 | | enable_audit_log | \u662f\u5426\u542f\u7528\u65e5\u5fd7\u5ba1\u8ba1 | \u5e03\u5c14\u503c | | port | REST \u670d\u52a1\u5668\u7684\u7aef\u53e3 | \u6574\u578b | | rpc_port | RPC \u670d\u52a1\u5668\u7684\u7aef\u53e3 | \u6574\u578b | | optimistic_txn | \u662f\u5426\u9ed8\u8ba4\u4f7f\u7528\u4e50\u89c2\u4e8b\u52a1\u9501 | \u5e03\u5c14\u503c | | thread_limit | \u56fe\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u7528\u7ebf\u7a0b\u6570 | \u6574\u578b | | enable_ssl | \u662f\u5426\u4f7f\u7528 SSL \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 | \u5e03\u5c14\u503c | | verbose | \u8f93\u51fa\u7684\u8be6\u7ec6\u7a0b\u5ea6 | \u6574\u578b | Example request. \u2022 GET http://localhost:7070/info/db_config \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"db_async\":false, \"disable_auth\":false, \"enable_ha\":false, \"enable_rpc\":false, \"bind_host\":\"127.0.0.1\", \"enable_audit_log\":false, \"port\":7070, \"optimistic_txn\":false, \"rpc_port\":9091, \"thread_limit\":0, \"enable_ssl\":false, \"verbose\":2 }","title":"\u56fe\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_44","text":"(\u4ec5\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u6709\u6548) URI : /info/peers METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u670d\u52a1\u5668\u4fe1\u606f\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u670d\u52a1\u5668\u4fe1\u606f\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | rpc_address | \u670d\u52a1\u5668 RPC \u5730\u5740 | \u5b57\u7b26\u4e32 | | rest_address | \u670d\u52a1\u5668 REST \u5730\u5740 | \u5b57\u7b26\u4e32 | | state | \u670d\u52a1\u5668\u72b6\u6001 | \u5b57\u7b26\u4e32 | \u5176\u4e2d\u670d\u52a1\u5668\u72b6\u6001\u53ef\u4e3a MASTER , SLAVE , OFFLINE \u3002 Example request. \u2022 GET http://localhost:7070/info/peers \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\", \"state\":\"MASTER\" }, { \"rest_address\":\"192.168.1.22:17072\", \"rpc_address\":\"192.168.1.22:19092\", \"state\":\"SLAVE\" } ] }","title":"\u9ad8\u53ef\u7528\u670d\u52a1\u5668\u5217\u8868"},{"location":"zh-CN/3.developer-document/1.restful-api/#leader","text":"(\u4ec5\u5728\u9ad8\u53ef\u7528\u6a21\u5f0f\u4e0b\u6709\u6548) URI : /info/leader METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5f53\u524d leader \u670d\u52a1\u5668\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | rpc_address | \u670d\u52a1\u5668 RPC \u5730\u5740 | \u5b57\u7b26\u4e32 | | rest_address | \u670d\u52a1\u5668 REST \u5730\u5740 | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/leader \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"rest_address\":\"192.168.1.22:17071\", \"rpc_address\":\"192.168.1.22:19091\" }","title":"\u5f53\u524d Leader \u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_45","text":"URI : /info/statistics METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5f53\u524d\u670d\u52a1\u5668\u7edf\u8ba1\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | requests/second | \u6bcf\u79d2\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf | \u6d6e\u70b9\u578b | | writes/second | \u6bcf\u79d2\u5904\u7406\u7684\u5199\u8bf7\u6c42\u6570\u91cf | \u6d6e\u70b9\u578b | | running_tasks | \u6b63\u5728\u6267\u884c\u7684\u8bf7\u6c42\u6570\u91cf | \u6574\u578b | | failure_rate | \u8bf7\u6c42\u5931\u8d25\u7387 | \u6d6e\u70b9\u578b | Example request. \u2022 GET http://localhost:7070/info/statistics \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"failure_rate\": 2.3, \"requests/second\": 122.3, \"running_tasks\": 10, \"writes/second\": 12.4 }","title":"\u670d\u52a1\u5668\u7edf\u8ba1\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_46","text":"URI : /info/log/?begin_time={begin_time}&end_time={end_time}&user={user}&num_log={num_log}&descending_order={descending_order} | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | begin_time | \u67e5\u8be2\u65e5\u5fd7\u7684\u8d77\u59cb\u65f6\u95f4(\u5fc5\u586b\uff0c\u683c\u5f0f\u4e3a YYYY-mm-dd HH:MM:SS) | \u65f6\u95f4\u6233 | | end_time | \u67e5\u8be2\u65e5\u5fd7\u7684\u7ed3\u675f\u65f6\u95f4(\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a YYYY-mm-dd HH:MM:SS) | \u65f6\u95f4\u6233 | | user | \u67e5\u8be2\u65e5\u5fd7\u7684\u64cd\u4f5c\u8005(\u7ba1\u7406\u5458\u53ef\u67e5\u8be2\u6240\u6709\u7528\u6237\u7684\u65e5\u5fd7\uff0c\u666e\u901a\u7528\u6237\u53ea\u80fd\u67e5\u8be2\u672c\u4eba\u65e5\u5fd7) | \u5b57\u7b26\u4e32 | | num_log | \u67e5\u8be2\u65e5\u5fd7\u7684\u6570\u91cf(\u9ed8\u8ba4\u4e3a 100) | \u6574\u578b | | descending_order | \u67e5\u8be2\u7ed3\u679c\u662f\u5426\u964d\u5e8f\u8f93\u51fa(\u9ed8\u8ba4\u4e3a true) | \u5e03\u5c14\u503c | METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de 200 \u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5ba1\u8ba1\u65e5\u5fd7\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u6761\u64cd\u4f5c\u65e5\u5fd7\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | index | \u8be5\u64cd\u4f5c\u7684\u7d22\u5f15\u503c | \u6574\u578b | | begin_time | \u8be5\u64cd\u4f5c\u7684\u5f00\u59cb\u65f6\u95f4 | \u5b57\u7b26\u4e32 | | end_time | \u8be5\u64cd\u4f5c\u7684\u7ed3\u675f\u65f6\u95f4 | \u5b57\u7b26\u4e32 | | user | \u8be5\u64cd\u4f5c\u7684\u53d1\u8d77\u8005 | \u5b57\u7b26\u4e32 | | graph | \u8be5\u64cd\u4f5c\u7684\u56fe | \u5b57\u7b26\u4e32 | | type | \u8be5\u64cd\u4f5c\u7684\u7c7b\u578b | \u5b57\u7b26\u4e32 | | read_write | \u8be5\u64cd\u4f5c\u4e3a\u8bfb\u64cd\u4f5c\u6216\u8005\u5199\u64cd\u4f5c | \u5b57\u7b26\u4e32 | | success | \u8be5\u64cd\u4f5c\u662f\u5426\u6210\u529f | \u5e03\u5c14\u503c | | content | \u8be5\u64cd\u4f5c\u7684\u7b80\u8981\u5185\u5bb9 | \u5b57\u7b26\u4e32 | Example request. \u2022 GET http://localhost:7070/info/log/?begin_time=2020-02-17%2015:00:00&end_time=2020-02-20%2012:00:00&user=admin&num_log=100&descending_order=false \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"post /login Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"\", \"index\": 1, \"read_write\": \"read\", \"success\": true, \"type\": \"Security\", \"user\":\"admin\" }, { \"begin_time\": \"2020-02-17 15:27:15\", \"content\": \"Load plugin : `echo` Successful\", \"end_time\": \"2020-02-17 15:27:15\", \"graph\": \"default\", \"index\": 2, \"read_write\": \"write\", \"success\": true, \"type\": \"Plugin\", \"user\": \"admin\" }, ... ] }","title":"\u5ba1\u8ba1\u65e5\u5fd7\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_47","text":"TuGraph \u63d0\u4f9b\u957f\u4efb\u52a1\u7684\u8ddf\u8e2a\u548c\u4e2d\u6b62\u529f\u80fd\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 REST API \u6765\u67e5\u8be2\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u5728 Cypher \u548c\u5b58\u50a8\u8fc7\u7a0b\u67e5\u8be2\uff0c\u5e76\u9009\u62e9\u4e2d\u6b62\u6b63\u5728\u6267\u884c\u7684\u67e5\u8be2\u3002 \u4efb\u52a1\u7ba1\u7406\u5bf9\u5e94\u7684 URI \u683c\u5f0f\u4e3a http://{host}:{port}/task/{thread_id}/{task_id}","title":"\u4efb\u52a1\u7ba1\u7406"},{"location":"zh-CN/3.developer-document/1.restful-api/#_48","text":"URI : /task METHOD : GET RESPONSE : \u8fd4\u56de\u7684 JSON \u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u683c\u5f0f\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b description \u4efb\u52a1\u63cf\u8ff0 \u5b57\u7b26\u4e32 time_elapsed \u4efb\u52a1\u5df2\u7ecf\u6267\u884c\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2 \u6d6e\u70b9 task_id \u4efb\u52a1 ID \u5b57\u7b26\u4e32 Example request. \u2022 GET http://localhost:7070/task \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"description\" : \"[CPP_PLUGIN] scan_graph\", \"time_elapsed\" : 13.987, \"task_id\" : \"3_10\" }, { \"description\" : \"[CYPHER] MATCH(n) return n\", \"time_elapsed\" : 30.887, \"task_id\" : \"2_6\" } ] }","title":"\u67e5\u8be2\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1"},{"location":"zh-CN/3.developer-document/1.restful-api/#_49","text":"URI : /task/{task_id} \u5176\u4e2d {task_id} \u662f GET /task \u8fd4\u56de\u7ed3\u679c\u4e2d\u7684 task_id \u3002 METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/task/3_10 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK","title":"\u4e2d\u6b62\u4efb\u52a1"},{"location":"zh-CN/3.developer-document/1.restful-api/#_50","text":"TuGraph \u652f\u6301\u591a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e4b\u95f4\u5b8c\u5168\u72ec\u7acb\uff0c\u4e0d\u540c\u7684\u5b50\u56fe\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7528\u6237\u5f00\u653e\u4e0d\u540c\u6743\u9650\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u6dfb\u52a0\u548c\u5220\u9664\u5b50\u56fe\u3002","title":"\u5b50\u56fe\u7ba1\u7406"},{"location":"zh-CN/3.developer-document/1.restful-api/#_51","text":"URI : /db METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | \u5b50\u56fe\u540d | \u5b57\u7b26\u4e32 | | config | \u914d\u7f6e | \u5b57\u5178\uff0c\u683c\u5f0f\u4e3a {{\u5217\u540d 1}:{\u5217\u503c 1},...} | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"graph1\", \"config\" : { \"max_size_GB\":2048, \"description\": \"description of graph1\" } } Example response. \u2022 200: OK","title":"\u521b\u5efa\u65b0\u5b50\u56fe"},{"location":"zh-CN/3.developer-document/1.restful-api/#_52","text":"URI : /db/{graph_name} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1 Example response. \u2022 200: OK","title":"\u5220\u9664\u5b50\u56fe"},{"location":"zh-CN/3.developer-document/1.restful-api/#_53","text":"URI : /db METHOD : GET RESPONSE : \u5b50\u56fe\u5217\u8868 Example request. \u2022 GET http://localhost:7070/db Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"graph1\": { \"max_size_GB\":1024, \"description\":\"description of graph1\" } }","title":"\u5217\u51fa\u6240\u6709\u5b50\u56fe"},{"location":"zh-CN/3.developer-document/1.restful-api/#_54","text":"URI : /db/{graph_name} METHOD : GET RESPONSE : \u5b50\u56fe\u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/graph1 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"max_size_GB\":1024, \"description\":\"description of graph1\" }","title":"\u83b7\u53d6\u5b50\u56fe\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/1.restful-api/#_55","text":"TuGraph \u662f\u4e00\u4e2a\u5177\u5907\u591a\u56fe\u80fd\u529b\u7684\u5f3a\u6a21\u5f0f\u5c5e\u6027\u56fe\u6570\u636e\u5e93\u3002\u5728\u6bcf\u4e00\u5f20\u5b50\u56fe\u4e2d\uff0c\u6bcf\u79cd\u9876\u70b9\u548c\u8fb9\u90fd\u9700\u8981\u6709\u9884\u5b9a\u4e49\u7684\u6570\u636e\u683c\u5f0f\u3002\u6570\u636e\u683c\u5f0f\u7531 Label \u51b3\u5b9a\uff0c\u6bcf\u79cd Label \u90fd\u6709\u81ea\u5df1\u7684\u6570\u636e\u683c\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 REST API \u6dfb\u52a0\uff0c\u5220\u9664\u548c\u67e5\u8be2 Label \u53ca\u5176\u5bf9\u5e94\u7684\u6570\u636e\u683c\u5f0f\u3002 Label \u64cd\u4f5c\u5bf9\u5e94\u7684 URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/label/{type}/{label_name} \u5176\u4e2d{type}\u53ef\u4ee5\u662f node \u6216\u8005 relationship\u3002","title":"\u5143\u6570\u636e\u7ba1\u7406"},{"location":"zh-CN/3.developer-document/1.restful-api/#label","text":"\u521b\u5efa Label \u7684\u8fc7\u7a0b\u540c\u65f6\u4e5f\u662f\u5b9a\u4e49\u5176\u6570\u636e\u7c7b\u578b\u7684\u8fc7\u7a0b\u3002\u53ea\u6709\u521b\u5efa\u4e86 Label \u624d\u80fd\u5728\u56fe\u4e2d\u63d2\u5165\u76f8\u5e94\u7c7b\u578b\u7684\u9876\u70b9\u6216\u8005\u8fb9\u3002 URI : /db/{graph_name}/label METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | name | Label \u540d | \u5b57\u7b26\u4e32 | | fields | \u6570\u636e\u5217\u5b9a\u4e49 | \u5217\u8868 | | is_vertex | \u662f\u5426\u662f\u9876\u70b9 Label | \u5e03\u5c14\u503c | | primary | \u70b9\u7684\u4e3b\u952e\u5c5e\u6027 | \u5b57\u7b26\u4e32 | | edge_constraints | \u8fb9\u7684\u7ea6\u675f | \u5217\u8868 | primary \u5728 is_vertex \u4e3a true \u7684\u65f6\u5019\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u53ea\u6709\u70b9\u624d\u6709, \u521b\u5efa\u70b9\u7684\u65f6\u5019\u5fc5\u987b\u8bbe\u7f6e\u3002 edge_constraints \u5728 is_vertex \u4e3a false \u7684\u65f6\u5019\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u53ea\u6709\u8fb9\u6709\u3002\u8fd9\u4e2a\u5b57\u6bb5\u9650\u5236\u4e86\u8be5\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u53ea\u80fd\u662f\u54ea\u4e9b\u70b9\u7684\u7ec4\u5408\uff0c\u6bd4\u5982\uff1a [[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]] \uff0c\u9650\u5236\u4e86\u8be5\u8fb9\u53ea\u80fd\u662f\u4ece vertex_label1 \u5230 vertex_label2 \u548c \u4ece vertex_label3 \u5230 vertex_label4 \u3002\u5982\u679c\u4e0d\u60f3\u6709\u4efb\u4f55\u9650\u5236\uff0c\u4e0d\u8bbe\u7f6e\u8be5\u5b57\u6bb5\u5373\u53ef\u3002 \u5176\u4e2d fields \u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5b9a\u4e49\u6570\u636e\u7684\u4e00\u5217\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b name \u5217\u540d \u5b57\u7b26\u4e32 type \u5217\u6570\u636e\u7c7b\u578b \u5b57\u7b26\u4e32\uff0c\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a int8, int16, int32, int64, float, double, string, date, datetime, binary, bool optional \u6570\u636e\u662f\u5426\u53ef\u4ee5\u4e3a\u7a7a\uff08\u53ef\u9009\uff0c\u7f3a\u7701\u503c\u4e3a false\uff09 \u5e03\u5c14\u503c RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"name\":\"Actor\", \"fields\": [ {\"name\":\"uid\", \"type\":\"int64\", \"optional\":false}, {\"name\":\"name\", \"type\":\"string\", \"optional\":true} ], \"is_vertex\":true, \"primary\" : \"uid\" } Example response. \u2022 200: OK","title":"\u521b\u5efa Label"},{"location":"zh-CN/3.developer-document/1.restful-api/#label_1","text":"URI : /db/{graph_name}/label METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | edge | \u8fb9 Label \u5217\u8868 | \u5217\u8868 | | vertex | \u9876\u70b9 Label \u5217\u8868 | \u5217\u8868 | Example request. \u2022 GET http://localhost:7070/db/{graph_name}/label \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"edge\": [ \"HAS_CHILD\", \"MARRIED\", \"BORN_IN\", \"DIRECTED\", \"WROTE_MUSIC_FOR\", \"ACTED_IN\" ], \"vertex\": [ \"Person\", \"City\", \"Film\" ] }","title":"\u5217\u51fa\u6240\u6709 Label"},{"location":"zh-CN/3.developer-document/1.restful-api/#label_2","text":"URI : /db/{graph_name}/label/{[node|relationship]}/{label_name} METHOD : GET","title":"\u83b7\u53d6 Label \u7684\u6570\u636e\u683c\u5f0f\u5b9a\u4e49"},{"location":"zh-CN/3.developer-document/1.restful-api/#response-key-value","text":"\u57df\u540d \u8bf4\u660e \u7c7b\u578b optional \u8be5\u5217\u503c\u662f\u5426\u53ef\u4e3a\u7a7a \u5e03\u5c14\u503c type \u5217\u503c\u7c7b\u578b \u5b57\u7b26\u4e32 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/label/node/person \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"age\":{ \"optional\":false, \"type\":\"int16\" }, \"id\":{ \"optional\":false, \"type\":\"int8\" }, \"name\":{ \"optional\":false, \"type\":\"string\" } }","title":"RESPONSE: \u6570\u636e\u5217\u5b9a\u4e49\u8868\uff0c\u7c7b\u578b\u662f\u4e00\u4e2a\u8bcd\u5178\uff0ckey \u4e3a\u5217\u540d\uff0cvalue \u4e3a\u5217\u5b9a\u4e49\uff0c\u5217\u5b9a\u4e49\u89c1\u5982\u4e0b\uff1a"},{"location":"zh-CN/3.developer-document/1.restful-api/#schema","text":"URI : /db/{graph_name}/schema/text METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u6587\u4ef6\u5185\u5bb9\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | description \u7684\u5177\u4f53\u63cf\u8ff0\u65b9\u6cd5\u89c1\u300aTuGraph \u64cd\u4f5c\u624b\u518c\u300b\u4e2d\u6570\u636e\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u7684\u76f8\u5173\u5185\u5bb9\u3002 RESPONSE : Schema \u5bfc\u5165\u4f1a\u6839\u636e description \u6bd4\u8f83\u65b0\u7684 Schema \u548c\u6570\u636e\u5e93\u4e2d\u539f\u6709\u7684 Schema \u662f\u5426\u517c\u5bb9\uff0c\u68c0\u67e5\u7684\u7c92\u5ea6\u4e3a Label\u3002\u5982\u679c\u4e0d\u4e00\u81f4\u5219\u51fa\u9519\uff0c\u5982\u679c\u4e00\u81f4\u5219\u6dfb\u52a0\u539f\u5148 Schema \u4e2d\u4e0d\u5b58\u5728\u7684 Label\uff0c\u8fd4\u56de 200\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/schema/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"schema\\\\\":[{\\\\\"label\\\\\":\\\\\"actor\\\\\",\\\\\"primary\\\\\":\\\\\"aid\\\\\",\\\\\"properties\\\\\":[{\\\\\"name\\\\\":\\\\\"aid\\\\\",\\\\\"type\\\\\":\\\\\"STRING\\\\\"}],\\\\\"type\\\\\":\\\\\"VERTEX\\\\\"}]}\" } \u4e0a\u8ff0 description \u7684\u503c\u662f\u5982\u4e0b json \u5e8f\u5217\u5316\u540e\u7684\u5b57\u7b26\u4e32: { \"schema\": [ { \"label\": \"actor\", \"type\": \"VERTEX\", \"properties\": [{ \"name\": \"aid\", \"type\": \"STRING\" }], \"primary\": \"aid\" } ] } Example response. \u2022 200: OK Output: { \"log\": \"\" }","title":"Schema \u5bfc\u5165"},{"location":"zh-CN/3.developer-document/1.restful-api/#_56","text":"URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/node/{vid} Nodes \u63d0\u4f9b\u8282\u70b9\uff08Vertex\uff09\u7684 CRUD \u64cd\u4f5c\uff0c\u63a5\u53d7 GET/POST/PUT/DELETE \u8bf7\u6c42\u3002","title":"\u9876\u70b9\u64cd\u4f5c"},{"location":"zh-CN/3.developer-document/1.restful-api/#label_3","text":"URI : /db/{graph_name}/node METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | num_label | \u9876\u70b9 label \u6570\u91cf | \u6574\u6570 | | num_vertex | \u9876\u70b9\u6570\u91cf | \u6574\u6570 | \u6ce8\u610f num_vertex \u8fd4\u56de\u7684\u5e76\u4e0d\u662f\u51c6\u786e\u7684\u9876\u70b9\u6570\u91cf\uff0c\u53ea\u662f\u4e00\u4e2a\u4f30\u8ba1\u503c\u3002","title":"\u5217\u51fa\u9876\u70b9\u6570\u91cf\u548c label \u6570\u91cf"},{"location":"zh-CN/3.developer-document/1.restful-api/#_57","text":"\u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u4e00\u4e2a\u9876\u70b9\u3002 URI : /db/{graph_name}/node METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | Label \u540d | \u5b57\u7b26\u4e32 | | property | \u9876\u70b9\u5c5e\u6027 | \u5b57\u5178\uff0c\u5176\u4e2d key \u662f\u5217\u540d\uff0cvalue \u662f\u76f8\u5e94\u503c\u3002value \u5fc5\u987b\u662f\u4e0e\u5217\u7c7b\u578b\u76f8\u5e94\u7684\u7c7b\u578b\uff0c\u5982\u5217\u4e3a int32\uff0c\u5219 value \u53ea\u80fd\u662f\u6574\u6570\u3002 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002\u5e76\u5728 JSON \u5185\u5bb9\u4e2d\u8fd4\u56de\u65b0\u9876\u70b9 vid\u3002\u8be5 ID \u53ef\u7528\u4e8e\u540e\u7eed\u7684\u9876\u70b9\u64cd\u4f5c\u4e2d\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"property\" : { \"name\" : \"Passerby A\", \"birthyear\" : 1989 } } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { 21 }","title":"\u521b\u5efa\u4e00\u4e2a\u9876\u70b9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_58","text":"TuGraph \u5141\u8bb8\u4e00\u6b21\u6027\u63d2\u5165\u591a\u4e2a\u9876\u70b9\uff0c\u4ee5\u51cf\u5c11\u7f51\u7edc\u5f00\u9500\u3002 URI : /db/{graph_name}/node METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | Label \u540d | \u5b57\u7b26\u4e32 | | fields | \u9876\u70b9\u5c5e\u6027 | \u5217\u8868 | | values | \u9876\u70b9\u6570\u636e | \u5217\u8868 | \u5176\u4e2d fields \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5217\u51fa\u4e00\u7cfb\u5217\u5217\u540d\uff1bvalues \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5217\u6570\u636e\u3002 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002\u5e76\u5728 JSON \u5185\u5bb9\u4e2d\u8fd4\u56de\u65b0\u589e\u52a0\u7684\u9876\u70b9\u7684 vid \u5217\u8868\uff0c\u8be5\u5217\u8868\u4e2d\u6bcf\u4e00\u4e2a vid \u6309\u987a\u5e8f\u5bf9\u5e94\u8bf7\u6c42\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/node \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"Person\", \"fields\" : [\"name\", \"birthyear\"], \"values\" : [[\"alex\", 2000], [\"bob\", 1999]] } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ 22, 23 ] }","title":"\u6279\u91cf\u521b\u5efa\u9876\u70b9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_59","text":"URI : /db/{graph_name}/node/{vertex_id} METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | Label \u540d | \u5b57\u7b26\u4e32 | | property | \u5c5e\u6027 | \u5b57\u5178\uff0c\u683c\u5f0f\u4e3a {{\u5217\u540d 1}:{\u5217\u503c 1},...} | Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"label\": \"Person\" }","title":"\u83b7\u53d6\u9876\u70b9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_60","text":"URI : /db/{graph_name}/node/{vertex_id} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | in | \u88ab\u5220\u6389\u7684\u70b9\u7684\u5165\u8fb9\u6570\u91cf | \u6574\u6570\u503c | | out | \u88ab\u5220\u6389\u7684\u70b9\u7684\u51fa\u8fb9\u6570\u91cf | \u6574\u6570\u503c | Example request. \u2022 DELETE http://localhost:7070/db/{graph_name}/node/4 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"in\": 0, \"out\": 0 }","title":"\u5220\u9664\u9876\u70b9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_61","text":"URI : /db/{graph_name}/node/{vertex_id}/property METHOD : GET RESPONSE : Node \u6240\u6709\u5c5e\u6027\uff08\u5b57\u5178\uff09 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }","title":"\u83b7\u53d6\u9876\u70b9\u6240\u6709\u5c5e\u6027"},{"location":"zh-CN/3.developer-document/1.restful-api/#_62","text":"URI : /db/{graph_name}/node/{vertex_id}/property/{field} METHOD : GET RESPONSE : Node \u67d0\u4e00\u5c5e\u6027 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/5/property/name \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Natasha Richardson\" }","title":"\u83b7\u53d6\u9876\u70b9\u5c5e\u6027"},{"location":"zh-CN/3.developer-document/1.restful-api/#_63","text":"URI : /db/{graph_name}/node/{vertex_id} METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | property | \u9876\u70b9\u5c5e\u6027 | \u5b57\u5178 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 PUT http://localhost:7070/db/{graph_name}/node/5 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"birthyear\" : 1964, \"mobile\" : \"********\" } } Example response. \u2022 200: OK","title":"\u66f4\u65b0\u9876\u70b9\u5c5e\u6027"},{"location":"zh-CN/3.developer-document/1.restful-api/#_64","text":"URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/relationship/{euid} \u4e0e Nodes \u529f\u80fd\u7c7b\u4f3c\uff0cRelationships \u63d0\u4f9b\u8fb9\uff08edge\uff09\u7684 CRUD \u64cd\u4f5c\uff0c\u63a5\u53d7 GET/POST/PUT/DELETE \u8bf7\u6c42\u3002\u6bcf\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u7531\u4e00\u4e2a\u552f\u4e00 ID\uff08euid\uff09\u6765\u6807\u8bc6\u3002\u8fd9\u4e2a ID \u53ef\u4ee5\u4ece\u5728\u63d2\u5165\u8fb9\u65f6\u83b7\u5f97\uff0c\u6216\u8005\u5728 \u5217\u51fa\u6240\u6709\u8fb9 \u64cd\u4f5c\u4e2d\u5f97\u5230\u3002","title":"\u8fb9\u64cd\u4f5c"},{"location":"zh-CN/3.developer-document/1.restful-api/#_65","text":"URI : /db/{graph_name}/node/{src}/relationship METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | \u8fb9 Label | \u5b57\u7b26\u4e32 | | destination | \u76ee\u7684\u9876\u70b9 ID | \u6574\u6570\u503c | | property | \u8fb9\u5c5e\u6027 | \u5b57\u5178 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\uff0c\u540c\u65f6\u8fd4\u56de\u65b0\u5efa\u7acb\u7684\u8fb9\u7684 euid\uff08\u5b57\u7b26\u4e32\uff09\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/node/{src}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"destination\" : 14, \"label\" : \"BORN_IN\", \"property\" : {} } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"1_14_1_0\" }","title":"\u521b\u5efa\u4e00\u6761\u8fb9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_66","text":"URI : /db/{graph_name}/relationship METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | \u8fb9 Label | \u5b57\u7b26\u4e32 | | fields | \u6570\u636e\u5217\u540d | \u5217\u8868 | | edge | \u8fb9\u6570\u636e | \u5217\u8868 | \u5176\u4e2d edge \u662f\u4e00\u4e2a\u6570\u636e\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u6761\u8fb9\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a \u57df\u540d \u8bf4\u660e \u7c7b\u578b source \u8d77\u70b9 id \u6574\u6570 destination \u7ec8\u70b9 id \u6574\u6570 values \u6570\u636e\u5217\u8868 \u5217\u8868\uff0c\u6bcf\u5217\u5bf9\u5e94 fields \u4e2d\u7684\u4e00\u4e2a\u5217\uff0c\u7c7b\u578b\u662f\u8be5\u5217\u5bf9\u5e94\u7684\u7c7b\u578b RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\uff0c\u540c\u65f6\u8fd4\u56de\u65b0\u5efa\u7acb\u7684\u8fb9\u7684 euid \u5217\u8868\u3002 Example request. \u2022 POST http://localhost:7070/db/{graph_name}/relationship \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\" : \"knows\", \"fields\" : [\"from_year\", \"weight\"], \"edge\" : [ {\"source\":0, \"destination\":1, \"values\":[2011, 0.8]}, {\"source\":1, \"destination\":2, \"values\":[2008, 0.9]} ] } Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_1_0_0\", \"1_2_0_0\" ] }","title":"\u6279\u91cf\u521b\u5efa\u8fb9"},{"location":"zh-CN/3.developer-document/1.restful-api/#outgoing-relationships","text":"URI : /db/{graph_name}/node/{src}/relationship/out METHOD : GET RESPONSE : \u9876\u70b9 src \u7684\u6240\u6709\u51fa\u8fb9 euid \u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/out \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"4_5_0_0\", \"4_7_1_2\" ] }","title":"\u5217\u51fa\u6240\u6709\u51fa\u8fb9\uff08outgoing relationships\uff09"},{"location":"zh-CN/3.developer-document/1.restful-api/#incoming-relationships","text":"URI : /db/{graph_name}/node/{dst}/relationship/in METHOD : GET RESPONSE : \u9876\u70b9 dst \u7684\u6240\u6709\u5165\u8fb9 euid \u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationship/in \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ \"0_4_0_0\", \"3_4_3_1\" ] }","title":"\u5217\u51fa\u6240\u6709\u5165\u8fb9\uff08incoming relationships\uff09"},{"location":"zh-CN/3.developer-document/1.restful-api/#_67","text":"URI : /db/{graph_name}/node/{src}/relationship/all METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | in | \u5165\u8fb9 | \u5217\u8868 | | out | \u51fa\u8fb9 | \u5217\u8868 | Example request. \u2022 GET http://localhost:7070/db/{graph_name}/node/4/relationships/all \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"out\": [ \"4_5_0_0\", \"4_7_1_2\" ], \"in\": [ \"0_4_0_0\", \"3_4_3_1\" ] }","title":"\u5217\u51fa\u6240\u6709\u8fb9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_68","text":"URI : /db/{graph_name}/relationship/{euid} METHOD : GET RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | label | \u8fb9 Label | \u5b57\u7b26\u4e32 | | property | \u8fb9\u5c5e\u6027 | \u5b57\u5178 | Example request. \u2022 GET http://localhost:7070/db/graph1/relationship/0_4_0_0 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"property\": { }, \"label\": \"MARRIED\" }","title":"\u83b7\u53d6\u8fb9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_69","text":"URI : /db/{graph_name}/relationship/{euid} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1/relationship/14_0_1_0 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK","title":"\u5220\u9664\u8fb9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_70","text":"URI : /db/{graph_name}/relationship/{euid}/property METHOD : GET RESPONSE : \u8fb9\u5c5e\u6027\u5b57\u5178 Example request. \u2022 GET http://localhost:7070/db/graph1/relationship/14_0_2_0/property \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { { \"weight\": 0.8, \"begin\": 20180922 } }","title":"\u83b7\u53d6\u8fb9\u7684\u6240\u6709\u5c5e\u6027"},{"location":"zh-CN/3.developer-document/1.restful-api/#_71","text":"URI : /db/{graph_name}/relationship/{euid}/property/{field} METHOD : GET RESPONSE : \u5982\u679c\u6210\u529f,\u8fd4\u56de\u4ee3\u7801 200,\u540c\u65f6\u8fd4\u56de\u8fb9\u7684\u5c5e\u6027\u3002\u5982\u679c\u5931\u8d25,\u8fd4\u56de\u4ee3\u7801 400,\u540c\u65f6\u8fd4\u56de \"Illegal field.\"\u3002 Example request. \u2022 GET http://localhost:7070/db/graph1/relationship/17_0_2_2/property/charactername \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { \"Henri Ducard\" }","title":"\u83b7\u53d6\u8fb9\u7684\u5c5e\u6027"},{"location":"zh-CN/3.developer-document/1.restful-api/#_72","text":"URI : /db/{graph_name}/relationship/{euid} METHOD : PUT REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | property | \u8fb9\u5c5e\u6027 | \u5b57\u5178 | RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 PUT http://localhost:7070/db/graph1/relationship/17_0_2_2 \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"property\" : { \"charactername\" : \"Henri Ducard/passer a\" } } Example response. \u2022 200: OK","title":"\u66f4\u65b0\u8fb9\u7684\u5c5e\u6027"},{"location":"zh-CN/3.developer-document/1.restful-api/#_73","text":"URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/index/{label}/{field} \u63d0\u4f9b\u7d22\u5f15\u64cd\u4f5c\uff0c\u63a5\u53d7 GET/POST \u8bf7\u6c42\u3002","title":"\u7d22\u5f15"},{"location":"zh-CN/3.developer-document/1.restful-api/#_74","text":"\u8be5\u64cd\u4f5c\u4f1a\u542f\u52a8\u4e00\u4e2a\u521b\u5efa\u7d22\u5f15\u7684\u540e\u53f0\u4efb\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5217\u51fa\u8be5 Label \u76f8\u5173\u7684\u6240\u6709\u7d22\u5f15\u6765\u68c0\u67e5\u65b0\u5efa\u7d22\u5f15\u7684\u72b6\u6001\u3002 URI : /db/{graph_name}/index METHOD : POST REQUEST :","title":"\u521b\u5efa\u7d22\u5f15"},{"location":"zh-CN/3.developer-document/1.restful-api/#_75","text":"\u57df\u540d \u8bf4\u660e \u7c7b\u578b label Label \u540d \u5b57\u7b26\u4e32 field \u57df\u540d \u5b57\u7b26\u4e32 is_unique \u552f\u4e00\u6027\u6807\u8bc6 \u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a true\uff0c\u8868\u793a\u8be5 index \u4e2d\u7684 key \u662f\u552f\u4e00\u7684 RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json Input: { \"label\": \"Person\", \"field\": \"birthyear\", \"is_unique\" : false } Example response. \u2022 200: OK","title":""},{"location":"zh-CN/3.developer-document/1.restful-api/#_76","text":"URI : /db/{graph_name}/index METHOD : GET RESPONSE : \u7d22\u5f15\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u7d22\u5f15\u63cf\u8ff0\uff0c\u683c\u5f0f\u4e0e \u521b\u5efa\u7d22\u5f15 \u65f6\u4f7f\u7528\u683c\u5f0f\u76f8\u540c\u3002 Example request. \u2022 GET http://localhost:7070/db/graph1/index \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"field\": \"name\", \"label\": \"City\", \"is_unique\": false }, { \"field\": \"title\", \"label\": \"Film\", \"is_unique\": false }, { \"field\": \"name\", \"label\": \"Person\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] }","title":"\u5217\u51fa\u6240\u6709\u7d22\u5f15"},{"location":"zh-CN/3.developer-document/1.restful-api/#label_4","text":"URI : /db/{graph_name}/index/{label} METHOD : GET RESPONSE : \u7d22\u5f15\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u7d22\u5f15\u63cf\u8ff0\uff0c\u683c\u5f0f\u4e0e \u521b\u5efa\u7d22\u5f15 \u65f6\u4f7f\u7528\u683c\u5f0f\u76f8\u540c\u3002 Example request. \u2022 GET http://localhost:7070/db/graph1/index/Person \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK \u2022 Content-Type: application/json; charset=UTF-8 Output: { [ { \"label\": \"Person\", \"field\": \"name\", \"is_unique\": true }, { \"label\": \"Person\", \"field\": \"age\", \"is_unique\": false } ] }","title":"\u5217\u51fa\u6240\u6709\u4e0e\u67d0\u4e2a Label \u76f8\u5173\u7684\u7d22\u5f15"},{"location":"zh-CN/3.developer-document/1.restful-api/#_77","text":"URI : /db/{graph_name}/index/{label}/{field} METHOD : DELETE RESPONSE : \u5982\u679c\u6210\u529f\uff0c\u8fd4\u56de\u4ee3\u7801 200\u3002 Example request. \u2022 DELETE http://localhost:7070/db/graph1/index/Person/name \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK","title":"\u5220\u9664\u7d22\u5f15"},{"location":"zh-CN/3.developer-document/1.restful-api/#_78","text":"URI : /db/{graph_name}/index/{label}/?field={field}&value={value} METHOD : GET RESPONSE : \u9876\u70b9 vid \u5217\u8868 Example request. \u2022 GET http://localhost:7070/db/graph1/index/Person/?field=birthyear&value=1986 \u2022 Accept: application/json; charset=UTF-8 Example response. \u2022 200: OK Output: { [ 1, 8 ] }","title":"\u6839\u636e\u7d22\u5f15\u83b7\u53d6\u9876\u70b9"},{"location":"zh-CN/3.developer-document/1.restful-api/#_79","text":"","title":"\u5728\u7ebf\u589e\u91cf\u5bfc\u5165"},{"location":"zh-CN/3.developer-document/1.restful-api/#_80","text":"URI : /db/{graph_name}/import/text METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | description | \u6587\u4ef6\u5185\u5bb9\u63cf\u8ff0 | \u5b57\u7b26\u4e32 | | data | \u8981\u5bfc\u5165\u7684\u6587\u4ef6\u5185\u5bb9\uff08\u5efa\u8bae\u6700\u5927\u5728 16MB \u5de6\u53f3\uff0c\u6700\u957f\u4e0d\u8d85\u8fc7 17MB\uff09 | \u5b57\u7b26\u4e32 / \u6570\u7ec4 / \u5bf9\u8c61 | | continue_on_error | \u51fa\u9519\u540e\u662f\u5426\u7ee7\u7eed\u5bfc\u5165\uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a false \uff09 | \u5e03\u5c14\u503c | | delimiter | \u5206\u9694\u7b26\uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a \u201c,\u201d \uff09 | \u5b57\u7b26\u4e32 | description \u7684\u5177\u4f53\u63cf\u8ff0\u65b9\u6cd5\u89c1\u300aTuGraph \u64cd\u4f5c\u624b\u518c\u300b\u4e2d\u6570\u636e\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u5206\u9694\u7b26\u53ef\u4ee5\u662f\u5355\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u4e0d\u80fd\u5305\u542b \\r \u6216\u8005 \\n \u3002 data \u53ef\u4ee5\u662f\u5982\u4e0b\u5f62\u5f0f\u4e4b\u4e00\uff1a \u5b57\u7b26\u4e32\u5982 \"1,2\\n3,4\\n\" ASCII \u7801\u7ec4\u6210\u7684\u6570\u7ec4\u5982 [49,44,50,10,51,44,52,10] \u5f62\u5982\u4e0a\u8ff0\u6570\u7ec4\u7684\u5b57\u5178\u5982 {\"0\":49,\"1\":44,\"2\":50,\"3\":10,\"4\":51,\"5\":44,\"6\":52,\"7\":10} RESPONSE : \u7cfb\u7edf \u4e0d\u4f1a \u81ea\u52a8\u6267\u884c\u65b0\u5efa label\u3001\u6dfb\u52a0\u7d22\u5f15\u7b49\u64cd\u4f5c\u3002\u5728\u6b64\u64cd\u4f5c\u4e4b\u524d\u9700\u8981\u4fdd\u8bc1\u6d89\u53ca\u7684 label \u5df2\u7ecf\u5b58\u5728\u5e76\u5177\u6709\u9002\u5f53\u7684\u7d22\u5f15\u3002 \u5982\u679c\u6210\u529f\u5bfc\u5165\u5b8c\u6bd5\uff0c\u8fd4\u56de\u4ee3\u7801 200\uff0c\u5e76\u5728 log \u5b57\u6bb5\u8fd4\u56de\u4e00\u4e9b\u65e5\u5fd7\u4fe1\u606f\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\uff1b\u5426\u5219\uff0c\u4fdd\u8bc1\u6240\u6709\u7684\u6570\u636e\u5747\u672a\u88ab\u5bfc\u5165\uff0c\u5e76\u5728 error_message \u5b57\u6bb5\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002 Example request. \u2022 POST http://localhost:7070/db/graph1/import/text \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"description\": \"{\\\\\"files\\\\\":[{\\\\\"columns\\\\\":[\\\\\"SRC_ID\\\\\",\\\\\"role\\\\\",\\\\\"DST_ID\\\\\"],\\\\\"format\\\\\":\\\\\"CSV\\\\\",\\\\\"label\\\\\":\\\\\"role\\\\\",\\\\\"SRC_ID\\\\\":\\\\\"actor\\\\\",\\\\\"DST_ID\\\\\":\\\\\"movie\\\\\"}]}\"}\", \"data\": \"1,Role1,2\\n3,Role2,4\\n\", \"continue_on_error\": true, \"delimiter\": \",\" } \u4e0a\u8ff0 description \u7684\u503c\u662f\u5982\u4e0b json \u5e8f\u5217\u5316\u540e\u7684\u5b57\u7b26\u4e32 { \"files\": [ { \"format\": \"CSV\", \"label\": \"role\", \"SRC_ID\": \"actor\", \"DST_ID\": \"movie\", \"columns\": [\"SRC_ID\", \"role\", \"DST_ID\"] } ] } Example response. \u2022 200: OK Output: { \"log\": \"Missing src uid 1\\n\" } \u7531\u4e8e\u8bf7\u6c42\u4e2d\u6307\u5b9a\u4e86\u5728\u51fa\u9519\u65f6\u7ee7\u7eed\uff0c\u8be5\u8fd4\u56de\u4fe1\u606f\u8bf4\u660e SRC_ID \u4e3a 1 \u7684\u8fb9\u6ca1\u6709\u88ab\u5bfc\u5165\uff0c\u800c\u5176\u4ed6\u4fe1\u606f\u5bfc\u5165\u6210\u529f\u3002","title":"\u6307\u5b9a\u6587\u4ef6\u5185\u5bb9\u5bfc\u5165"},{"location":"zh-CN/3.developer-document/1.restful-api/#_81","text":"URI \u683c\u5f0f\u4e3a http://{host}:{port}/db/{graph_name}/misc","title":"\u5176\u4ed6"},{"location":"zh-CN/3.developer-document/1.restful-api/#_82","text":"\u7ed9\u51fa\u9876\u70b9 id \u96c6\u5408\uff0c\u8fd4\u56de\u5305\u542b\u8be5\u96c6\u5408\u7684\u6700\u5c0f\u5b50\u56fe\u3002 URI : /db/{graph_name}/misc/sub_graph METHOD : POST REQUEST : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | vertex_ids | \u9876\u70b9 id \u96c6\u5408 | \u5217\u8868 | RESPONSE : | \u57df\u540d | \u8bf4\u660e | \u7c7b\u578b | | --- | --- | --- | | nodes | \u9876\u70b9\u6570\u636e | \u5217\u8868\uff0c\u6bcf\u5143\u7d20\u5305\u542b vid, label, \u4ee5\u53ca\u5c5e\u6027 | | relationships | \u8fb9\u6570\u636e | \u5217\u8868\uff0c\u6bcf\u5143\u7d20\u5305\u542b src, dst, euid, label, \u4ee5\u53ca\u5c5e\u6027 | Example request. \u2022 POST http://localhost:7070/db/graph1/misc/sub_graph \u2022 Accept: application/json; charset=UTF-8 \u2022 Content-Type: application/json; charset=UTF-8 Input: { \"vertex_ids\": [2, 5, 14, 20] } Example response. \u2022 200: OK Output: { \"nodes\": [ { \"label\": \"Person\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"vid\": 2 }, { \"label\": \"Person\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"vid\": 5 }, { \"label\": \"City\", \"properties\": { \"name\": \"London\" }, \"vid\": 14 }, { \"label\": \"Film\", \"properties\": { \"title\": \"Camelot\" }, \"vid\": 20 } ], \"relationships\": [ { \"destination\": 5, \"label\": \"HAS_CHILD\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1937, \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 20, \"label\": \"ACTED_IN\", \"properties\": { \"birthyear\": 1937, \"charactername\": \"Guenevere\", \"name\": \"Vanessa Redgrave\" }, \"source\": 2 }, { \"destination\": 14, \"label\": \"BORN_IN\", \"properties\": { \"birthyear\": 1963, \"name\": \"Natasha Richardson\" }, \"source\": 5 } ] }","title":"\u63d0\u53d6\u5b50\u56fe"},{"location":"zh-CN/3.developer-document/2.cypher/","text":"TuGraph-Cypher \u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86TuGraph-Cypher\u7684\u8be6\u7ec6\u4f7f\u7528\u8bf4\u660e Operators Summary Operators\u652f\u6301\u8fdb\u5ea6\u4e00\u89c8\uff1a \u7c7b\u522b \u652f\u6301 \u5f85\u652f\u6301 General operators DISTINCT , . for property access [] for dynamic property access Mathematical operators + , - , * , / , % , ^ Comparison operators = , <> , < , > , <= , >= , IS NULL , IS NOT NULL String-specific comparison operators STARTS WITH , ENDS WITH , CONTAINS , REGEXP Boolean operators AND , OR , XOR , NOT String operators + for concatenation List operators + for concatenation, IN to check existence of an element in a list, [] for accessing element(s) General operators \u2713 Using the DISTINCT operator MATCH (p:person) RETURN DISTINCT p.born \u274f Accessing properties of a nested literal map using the . operator WITH {person: {name: 'Anne', age: 25}} AS p RETURN p.person.name \u274f Filtering on a dynamically-computed property key using the [] operator CREATE (a:Restaurant {name: 'Hungry Jo', rating_hygiene: 10, rating_food: 7}), (b:Restaurant {name: 'Buttercup Tea Rooms', rating_hygiene: 5, rating_food:6}), (c1:Category {name: 'hygiene'}), (c2:Category {name: 'food'}) MATCH (restaurant:Restaurant), (category:Category) WHERE restaurant[\"rating_\" + category.name] > 6 RETURN DISTINCT restaurant.name Mathematical operators \u2713 Using the exponentiation operator ^ WITH 2 AS number, 3 AS exponent RETURN number ^ exponent AS result \u2713 Using the unary minus operator - WITH -3 AS a, 4 AS b RETURN b - a AS result Comparison operators \u2713 Comparing two numbers WITH 4 AS one, 3 AS two RETURN one > two AS result String-specific comparison operators \u2713 Using STARTS WITH to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate STARTS WITH 'Jo' RETURN candidate \u2713 Using REGEXP to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate REGEXP 'Jo.*n' RETURN candidate Boolean operators \u2713 Using boolean operators to filter numbers WITH [2, 4, 7, 9, 12] AS numberlist UNWIND numberlist AS number WITH number WHERE number = 4 OR (number > 6 AND number < 10) RETURN number String operators String operators comprise: \u2713 concatenating strings: + List operators \u2713 Concatenating two lists using + RETURN [1,2,3,4,5]+[6,7] AS myList \u2713 Using IN to check if a number is in a list WITH [2, 3, 4, 5] AS numberlist UNWIND numberlist AS number WITH number WHERE number IN [2, 3, 8] RETURN number \u2713 Accessing elements in a list using the [] operator WITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names RETURN names[1..3] AS result Clauses Summary Clauses\u652f\u6301\u8fdb\u5ea6\u4e00\u89c8\uff1a \u7c7b\u522b \u8bed\u6cd5 \u5907\u6ce8 Reading clauses MATCH \u652f\u6301 OPTIONAL MATCH \u652f\u6301 MANDATORY MATCH \u5f85\u652f\u6301 Projecting clauses RETURN \u2026 [AS] \u652f\u6301 WITH \u2026 [AS] \u652f\u6301 UNWIND \u2026 [AS] \u652f\u6301 Reading sub-clauses WHERE \u652f\u6301 ORDER BY [ASC[ENDING] / DESC[ENDING]] \u652f\u6301 SKIP \u652f\u6301 LIMIT \u652f\u6301 Writing clauses CREATE \u652f\u6301 DELETE \u652f\u6301 DETACH DELETE \u652f\u6301 SET \u652f\u6301 REMOVE \u652f\u6301 Reading/Writing clauses MERGE \u652f\u6301 CALL [\u2026YIELD] \u652f\u6301 Set operations UNION \u5f85\u652f\u6301 UNION ALL \u652f\u6301 MATCH Basic node finding \u2713 Get all nodes MATCH (n) RETURN n \u2713 Get all nodes with a label MATCH (movie:movie) RETURN movie.title \u2713 Related nodes MATCH (person {name: 'Laurence Fishburne'})-[]-(movie) RETURN movie.title \u2713 Match with labels MATCH (:person {name: 'Laurence Fishburne'})-[]-(movie:movie) RETURN movie.title Relationship basics \u2713 Outgoing relationships MATCH (:person {name: 'Laurence Fishburne'})-[]->(movie) RETURN movie.title \u2713 Directed relationships and variable MATCH (:person {name: 'Laurence Fishburne'})-[r]->(movie) RETURN type(r) \u2713 Match on relationship type MATCH (matrix:movie {title: 'The Matrix'})<-[:acted_in]-(actor) RETURN actor.name \u2713 Match on multiple relationship types MATCH (matrix {title: 'The Matrix'})<-[:acted_in|:directed]-(person) RETURN person.name \u2713 Match on relationship type and use a variable MATCH (matrix {title: 'The Matrix'})<-[r:acted_in]-(actor) RETURN r.role - Relationships in depth \u274f Relationship types with uncommon characters MATCH (n {name: 'Rob Reiner'})-[r:`TYPE WITH SPACE`]->() RETURN type(r) \u2713 Multiple relationships MATCH (laurence {name: 'Laurence Fishburne'})-[:acted_in]->(movie)<-[:directed]-(director) RETURN movie.title, director.name \u2713 Variable-length relationships MATCH (laurence {name: 'Laurence Fishburne'})-[:acted_in*1..3]-(movie:movie) RETURN movie.title \u2713 Relationship variable in variable-length relationships MATCH p = (laurence {name: 'Laurence Fishburne'})-[:acted_in*2]-(co_actor) RETURN p \u274f Match with properties on a variable-length path MATCH p = (charlie:person)-[* {blocked:false}]-(martin:person) WHERE charlie.name = 'Charlie Sheen' AND martin.name = 'Martin Sheen' RETURN p \u2713 Zero-length paths MATCH (matrix:movie {title: 'The Matrix'})-[*0..1]-(x) RETURN x \u2713 Named paths MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p \u2713 Matching on a bound relationship MATCH (a)-[r]->(b) WHERE euid(r)=\"0_3937_0_0_0\" RETURN a,b Shortest path \u2713 Single shortest path MATCH (martin:person {name: 'Carrie-Anne Moss'}), (laurence:person {name: 'Laurence Fishburne'}) CALL algo.shortestPath(martin, laurence) YIELD nodeCount,totalCost,path RETURN nodeCount,totalCost,path \u2713 All shortest paths MATCH (martin:person {name: 'Carrie-Anne Moss'}), (laurence:person {name: 'Laurence Fishburne'}) WITH martin, laurence CALL algo.allShortestPaths(martin, laurence) YIELD nodeIds,relationshipIds,cost RETURN nodeIds,relationshipIds,cost - Get node or relationship by id \u2713 Node by id MATCH (n) WHERE id(n)= 0 RETURN n \u2713 Relationship by id MATCH ()-[r]->() WHERE euid(r) = \"0_3937_0_0_0\" RETURN r \u2713 Multiple nodes by id MATCH (n) WHERE id(n) IN [0, 3, 5] RETURN n RETURN \u2713 Return nodes MATCH (n {name: 'Carrie-Anne Moss'}) RETURN n \u2713 Return relationships MATCH (n {name: 'Carrie-Anne Moss'})-[r:acted_in]->(c) RETURN r \u2713 Return property MATCH (n {name: 'Carrie-Anne Moss'}) RETURN n.born \u274f Return all elements MATCH p = (a {name: 'A'})-[r]->(b) RETURN * \u274f Variable with uncommon characters MATCH (`This isn\\'t a common variable`) WHERE `This isn\\'t a common variable`.name = 'A' RETURN `This isn\\'t a common variable`.happy \u2713 Aliasing a field MATCH (a {name: 'Carrie-Anne Moss'}) RETURN a.born AS SomethingTotallyDifferent \u2713 Optional properties MATCH (n) RETURN n.age \u274f Other expressions MATCH (a {name: 'Carrie-Anne Moss'}) RETURN a.born > 1900, \"I'm a literal\", (a)-[]->() (a)-[]->() not supported. \u2713 Unique results MATCH (a {name: 'Carrie-Anne Moss'})-[]->(b) RETURN DISTINCT b WHERE Basic usage \u2713 Boolean operations MATCH (n) WHERE n.name = 'Laurence Fishburne' XOR (n.born > 1965 AND n.name = 'Carrie-Anne Moss') RETURN n.name, n.born \u2713 Filter on node label MATCH (n) WHERE n:person RETURN n.name, n.born \u2713 Filter on node property MATCH (n) WHERE n.born > 2000 RETURN n.name, n.born \u2713 Filter on relationship property MATCH (n)-[k:acted_in]->(f) WHERE k.role = \"Trinity\" RETURN f.title \u274f Filter on dynamically-computed property WITH 'AGE' AS propname MATCH (n) WHERE n[toLower(propname)]< 30 RETURN n.name, n.age \u2713 Property existence checking MATCH (n) WHERE exists(n.born) RETURN n.name, n.born String matching \u2713 Match the beginning of a string MATCH (n) WHERE n.name STARTS WITH 'Pet' RETURN n.name, n.born \u2713 Match the ending of a string MATCH (n) WHERE n.name ENDS WITH 'ter' RETURN n.name, n.born \u2713 Match anywhere within a string MATCH (n) WHERE n.name CONTAINS 'ete' RETURN n.name, n.born \u2713 String matching negation MATCH (n) WHERE NOT n.name ENDS WITH 's' RETURN n.name, n.born Using path patterns in WHERE \u274f Filter on patterns MATCH (tobias {name: 'Tobias'}), (others) WHERE others.name IN ['Andres', 'Peter'] AND (tobias)<-[]-(others) RETURN others.name, others.age \u274f Filter on patterns using NOT MATCH (persons), (peter {name: 'Peter'}) WHERE NOT (persons)-[]->(peter) RETURN persons.name, persons.age \u274f Filter on patterns with properties MATCH (n) WHERE (n)-[:KNOWS]-({name: 'Tobias'}) RETURN n.name, n.age \u2713 Filter on relationship type MATCH (n)-[r]->() WHERE n.name='Laurence Fishburne' AND type(r) STARTS WITH 'ac' RETURN type(r), r.role Lists \u2713 IN operator MATCH (a) WHERE a.name IN ['Laurence Fishburne', 'Tobias'] RETURN a.name, a.born Missing properties and values \u2713 Default to false if property is missing MATCH (n) WHERE n.belt = 'white' RETURN n.name, n.age, n.belt \u2713 Default to true if property is missing MATCH (n) WHERE n.belt = 'white' OR n.belt IS NULL RETURN n.name, n.age, n.belt ORDER BY n.name \u2713 Filter on null MATCH (person) WHERE person.name = 'Peter' AND person.belt IS NULL RETURN person.name, person.age, person.belt Using ranges \u2713 Simple range MATCH (a) WHERE a.name >= 'Peter' RETURN a.name, a.born \u2713 Composite range MATCH (a) WHERE a.name > 'Andres' AND a.name < 'Tobias' RETURN a.name, a.born SKIP \u2713 Skip first three records MATCH (n:person) RETURN n.name ORDER BY n.name SKIP 3 \u2713 Return middle two records MATCH (n:person) RETURN n.name ORDER BY n.name SKIP 1 LIMIT 2 \u274f Using an expression with SKIP to return a subset of the records MATCH (n:person) RETURN n.name ORDER BY n.name SKIP toInteger(3*rand())+ 1 LIMIT \u2713 Return a subset of the records MATCH (n:person) RETURN n.name LIMIT 3 \u274f Using an expression with LIMIT to return a subset of the records MATCH (n:person) RETURN n.name LIMIT toInteger(3 * rand())+ 1 CREATE Create nodes Note TuGraph\u4e0d\u652f\u6301\u521b\u5efa\u7a7a\u7684nodes\uff0c\u4e0d\u652f\u6301\u591alabels\u3002 \u2612 Create single node CREATE (n) \u2612 Create multiple nodes CREATE (n), (m) \u2612 Create a node with a label CREATE (n:person) \u2612 Create a node with multiple labels CREATE (n:Person:Swedish) \u2713 Create node and add labels and properties CREATE (n:person {id:2001, name: 'Andres'}) \u2713 Return created node CREATE (n:person {id:2002, name: 'Andres'}) RETURN n Create relationships \u2713 Create a relationship between two nodes MATCH (n:person), (m:movie) WHERE n.name = 'Jada Pinkett Smith' AND m.title = 'The Matrix' CREATE (n)-[r:write]->(m) \u2713 Create a relationship and set properties MATCH (n:person), (m:movie) WHERE n.name = 'Jada Pinkett Smith' AND m.title = 'The Matrix' CREATE (n)-[r:acted_in{role: 'Trinity'}]->(m) \u274f Create a full path CREATE p = (andres:person {id: 2005, name:'Andres'})-[:acted_in {role: 'Trinity'}]-> (m:movie {id: 2006})<-[:acted_in {role: 'Trinity'}]-(michael {id: 2006, name:'Michael'}) RETURN p Use parameters with CREATE \u274f Create node with a parameter for the properties CREATE (n:Person $props) RETURN n \u2612 Create multiple nodes with a parameter for their properties UNWIND $props AS map CREATE (n) SET n = map cannot create vertex without label. CALL[\u2026YIELD] \u2713 Call a procedure using CALL CALL db.vertexLabels \u2713 View the signature for a procedure CALL dbms.procedures() YIELD name, signature RETURN signature \u274f Call a procedure using a quoted namespace and name CALL `db`.`vertexLabels` \u2713 Call a procedure with literal arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0, 'name') \u274f Call a procedure with parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex($indexName,$node,$propKey) \u274f Call a procedure with mixed literal and parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', $node, 'name') \u2713 Call a procedure with literal and default arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0) \u2713 Call a procedure within a complex query using CALL\u2026YIELD CALL db.vertexLabels() YIELD label RETURN count(label) AS numLabels \u274f Call a procedure and filter its results CALL db.vertexLabels() YIELD label WHERE label CONTAINS 'User' RETURN count(label) AS numLabels \u274f Call a procedure within a complex query and rename its outputs CALL db.propertyKeys() YIELD propertyKey AS prop MATCH (n) WHERE n[prop] IS NOT NULL RETURN prop, count(n) AS numNodes UNION \u2713 Combine two queries and retain duplicates MATCH (n:person) RETURN n.name AS name UNION ALL MATCH (n:movie) RETURN n.title AS name \u274f Combine two queries and remove duplicates MATCH (n:Actor) RETURN n.name AS name UNION MATCH (n:Movie) RETURN n.title AS name Functions Whole List Of Functions \u79cd\u7c7b \u529f\u80fd \u5907\u6ce8 Predicate functions exists() all() \u4e0d\u652f\u6301 any() \u4e0d\u652f\u6301 single() \u4e0d\u652f\u6301 none() \u4e0d\u652f\u6301 Scalar functions id() euid() properties() head() last() toBoolean() toFloat() toInteger() toString() type() startnode() endnode() size() length() label() OpenCypher\u6269\u5c55\u65b9\u6cd5 Aggregating functions avg() collect() count() max() min() percentileCont() percentileDisc() stDev() stDevP() variance() varianceP() sum() List functions keys() labels() \u8fd4\u56de\u7ed3\u679c\u6709\u4e14\u53ea\u6709\u4e00\u4e2alabel range() subscript() \u4e0d\u652f\u6301 Mathematical functions abs() ceil() floor() rand() round() sign() String functions / Predicate functions exists() judge it whether a vertex or edge has the field . Scope: whole instance. Example input: MATCH (n) WHERE exists(n.born) RETURN n.name, n.born Example output: exists(name) true Scalar functions id() get the id of vertex. Scope: whole instance. Example input: MATCH (a) RETURN id(a) Example output: vid 1 2 ... properties() get a map containing all the properties of a node or relationship. Scope: whole instance. Example input: MATCH (n:person {name: 'Laurence Fishburne'}) RETURN n head() get the first element of a list. Scope: whole instance. Example input: WITH ['one','two','three'] AS coll RETURN coll, head(coll) Example output: coll head(coll) [\"one\",\"two\",\"three\"] \"one\" last() get the last element of a list. Scope: whole instance. Example input: WITH ['one','two','three'] AS coll RETURN coll, last(coll) Example output: coll last(coll) [\"one\",\"two\",\"three\"] \"three\" toFloat() Converts an integer or string value to a floating point number. Scope: whole instance. Example input: RETURN toFloat('11.5') Example output: float 11.5 toInteger() Converts a floating point or string value to an integer value. Scope: whole instance. Example input: RETURN toInteger('2.3') AS integer Example output: integer 2 toString() Converts an integer, float, boolean value to a string. Scope: whole instance. Example input: RETURN toString(2.3) type() get the string representation of the relationship type. Scope: whole instance. Example input: MATCH (n)-[r]->() WHERE n.name = 'Laurence Fishburne' RETURN type(r) Example output: type acted_in acted_in Aggregating functions avg() Returns the average of a set of numeric values. Scope: whole instance. Example input: MATCH (n:person) RETURN avg(n.born) Example output: avg(n.born) 1869.2661654135338 collect() Returns a list containing the values returned by an expression. Scope: whole instance. Example input: MATCH (n:person) RETURN collect(n.born) Example output: collect(n.born) [1967,...] count() Returns the number of values or records. Scope: whole instance. Example input: MATCH (n {name: 'Laurence Fishburne'})-[]->(x) RETURN labels(n), n.born, count(*) Example output: labels(n) n.born count(*) [\"person\"] 1961 3 max() Returns the maximum value in a set of values. Scope: whole instance. Example input: MATCH (n:person) RETURN max(n.born) Example output: max(n.born) 2003 min() Returns the minimum value in a set of values. Scope: whole instance. Example input: MATCH (n:person) RETURN min(n.born) Example output: min(n.born) 1000 percentileCont() Returns the percentile of a value over a group using linear interpolation. Scope: whole instance. Example input: MATCH (n:person) RETURN percentileCont(n.born, 0.4) Example output: percentileCont(n.born, 0.4) 1953 percentileDisc() Returns the nearest value to the given percentile over a group using a rounding method. Scope: whole instance. Output: the percentile of the given value over a group. Example input: MATCH (n:person) RETURN percentileDisc(n.born, 0.5) Example output: percentileDisc(n.age, 0.5) 1959 stDev() Returns the standard deviation for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) RETURN stDev(n.born) Example output: stDev(n.born) 279.53117993401725 stDevP() Returns the standard deviation for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) RETURN stDevP(n.born) Example output: stDevP(n.born) 279.3209270423399 variance() Returns the variance for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) RETURN variance(n.born) Example output: variance(n.age) 78137.68055530392 varianceP() Returns the variance for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) RETURN varianceP(n.born) Example output: varianceP(n.age) 78020.18028379219 sum() Returns the sum of a set of numeric values. Scope: whole instance. Example input: MATCH (n:person) RETURN sum(n.born) Example output: sum(n.born) 1243062 List Funtions: keys() get the field names of some vertex. Scope: whole instance. Example input: MATCH (a) RETURN keys(a) LIMIT 1 Example output: keys(a) [\"name\",\"age\",\"eyes\"] labels()/label() Returns a list containing the string representations for all the property names of a node, relationship, or map. Scope: whole instance. Example input: MATCH (a) RETURN labels(a) LIMIT 1 Example output: labels [\"Person\"] Mathematical functions abs() get the absolute value of some data. Scope: whole instance. Example input: MATCH (a:person {name: 'Laurence Fishburne'}), (e:person {name: 'Carrie-Anne Moss'}) RETURN a.born, e.born, abs(a.born-e.born) Example output: a.born e.born abs(a.born - e.born) 38 41 1 ceil() Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN ceil(0.1) Example output: ceil(0.1) 1.0 floor() get the largest floating point number that is less than or equal to the given number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN floor(0.9) Example output: floor(0.9) 0.0 round() Returns the value of a number rounded to the nearest integer. Scope: whole instance. Example input: RETURN round(3.141592) Example output: round 3 rand() Returns returns a random floating point number in the range from 0 (inclusive) to 1 exclusive). Scope: whole instance. Example input: RETURN rand() Example output: rand() 0.9797131960534085 sign() Get the signum of the given number: 0 if the number is 0, -1 for any negative number, and 1 for any positive number. Scope: whole instance. Example input: RETURN sign(-17), sign(0.1) Example output: sign(-17) sign(0.1) -1 1 TuGraph \u67e5\u8be2\u8bed\u8a00\u4e0e OpenCypher \u7684\u4e0d\u540c\u70b9\u5982\u4e0b\uff1a Label \u6570\u91cf TuGraph: Each node/relationship must have one and only one label. So error occurs when there is no label, and the 1st label will be picked as the label if there are more than one label. OpenCypher: One node/relationship may have 0 to many labels. Schema. TuGraph: TuGraph has strong schema OpenCypher: schema-less \u9644\u5f551. \u8bed\u6cd5\u6269\u5145\u53ca\u4e0d\u540c TuGraph\u67e5\u8be2\u8bed\u8a00\u4e0eOpenCypher\u7684\u4e0d\u540c\u70b9\u5982\u4e0b\uff1a Label\u6570\u91cf TuGraph: Each node/relationship must have one and only one label. So error occurs when there is no label, and the 1st label will be picked as the label if there are more than one label. OpenCypher: One node/relationship may have 0 to many labels. Schema. TuGraph: TuGraph has strong schema OpenCypher: schema-less \u9644\u5f552. \u5185\u7f6eprocedures\u5217\u8868 procedures\u6837\u4f8b dbms.procedures() Lists all available procedures. Scope: whole instance. Output: a list of { signature , name }. Example input: CALL dbms.procedures() Example output: signature name db.vertexLabels() :: (label::STRING) db.vertexLabels db.edgeLabels() :: (edgeLabels::STRING) db.edgeLabels db.indexes() :: (index::LIST) db.indexes ... ... db.subgraph() Scope: whole instance. Parameters: parameter parameter type description vids list list of vertex id Output: Get a json containing all the properties of nodes and relationships. Example input: CALL db.subgraph([3937,4126,4066,4010]) Example output subgraph {\"nodes\":[{\"identity\":3937,\"label\":\"movie\",\"properties\":{\"duration\":136,\"id\":1,\"poster_image\":\"http://image.tmdb.org/t/p/w185/gynBNzwyaHKtXqlEKKLioNkjKgN.jpg\",\"rated\":\"R\",\"summary\":\"Thomas A. Anderson is a man living two lives. By day he is an average computer programmer and by night a malevolent hacker known as Neo who finds himself targeted by the police when he is contacted by Morpheus a legendary computer hacker who reveals the shocking truth about our reality.\",\"tagline\":\"Welcome to the Real World.\",\"title\":\"The Matrix\"}},{\"identity\":4010,\"label\":\"user\",\"properties\":{\"id\":44,\"login\":\"Howard\"}},{\"identity\":4066,\"label\":\"user\",\"properties\":{\"id\":202,\"login\":\"Enoch\"}},{\"identity\":4126,\"label\":\"user\",\"properties\":{\"id\":464,\"login\":\"Wilburn\"}}],\"relationships\":[{\"dst\":4126,\"forward\":true,\"identity\":0,\"label\":\"is_friend\",\"label_id\":3,\"src\":4010,\"temporal_id\":0},{\"dst\":4010,\"forward\":true,\"identity\":0,\"label\":\"is_friend\",\"label_id\":3,\"src\":4066,\"temporal_id\":0},{\"dst\":4066,\"forward\":true,\"identity\":0,\"label\":\"is_friend\",\"label_id\":3,\"src\":4126,\"temporal_id\":0}]} db.vertexLabels() Lists all available vertex labels of vertex. Scope: whole instance. Output: a list of { name }. Example input: CALL db.vertexLabels() Example output: | label | | ------- | | genre | | keyword | | movie | | ... | db.edgeLabels() Lists all available labels of edges. Scope: whole instance. Output: a list of {edge labels}. Example input: CALL db.edgeLabels() Example output: relationshipType acted_in directed ... db.createVertexLabel(label_name, primary_field, field_spec...) Create a vertex label. Scope: whole instance. Parameters: parameter parameter type description label_name string name of vertex label primary_field string primary field of vertex label field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, true] , where true is specified only for optional fields. **Output:** If successful, it returns a success message. **Example input:** ``` CALL db.createVertexLabel('Person', 'id', 'id', int64, false, 'name', string, true) ``` **Example output:** ``` Added label [Person] ``` db.getLabelSchema(label_type, label_name) Get the schema definition of the label in a subgraph. Scope: subgraph, as specified in the graph parameter in REST or RPC request. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: a list of label specifications, in which each element is a list of the following fields: field_name field_type description name string name of the field type string type of the field optional boolean whether the field is optional Example input: CALL db.getLabelSchema('vertex', 'Person') Example output: name type optional id INT32 false born INT32 true name STRING true poster_image STRING true db.createLabel(label_type, label_name, extra, field_spec...) Create a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label extra string for edge, it means constraints; for vertex, it means primary property field_spec list specification of a field in which each `field_spec` is a list of string in the form of `[field_name, field_type, optional]`. for edge, `extra` should be a json array string, like this `[[\"label1\",\"label2\"], [\"label3\",\"label4\"]]`, if edge has no constraints, give an empty json array, like this `[]` Output: If successful, it returns a success message. Example input: CALL db.createLabel('vertex', 'new_label', 'id', ['id',int32,false], ['name',string, true]); CALL db.createLabel('edge', 'new_edge', '[[\"id1\",\"id2\"]]', ['id',int32,false], ['name', string, true]); Example output: Vertex label [new_label] successfully added. db.deleteLabel(label_type, label_name) Delete a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: field_name field_type description affected integer number of vertexes/edges deleted Example input: CALL db.deleteLabel('vertex', 'Person') Example output: affected 1024 db.alterLabelDelFields(label_type, label_name, field_names) Delete specified fields from the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_names list of strings names of the fields to delete Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelDelFields('vertex', 'Person', ['name', 'image']) Example output: affected 1024 db.alterLabelAddFields(label_type, label_name, field_value_spec...) Adds specified fields to the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_value_spec list specification of a field in which each `field_value_spec` is a list of string in the form of `[field_name, field_type, field_value, optional]`, where: `field_value` is the default value of the field. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelAddFields( 'vertex', 'new_label', ['birth_date', DATE, '', true], ['img', BLOB, '', true]) Example output: affected 1024 db.alterLabelModFields(label_type, label_name, field_spec...) Modifies the specified fields in the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_spec list specification of a field in which each `field_spec` is a list of string in the form of `[field_name, field_type, optional]`.The target field should exist. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: ``` CALL db.alterLabelModFields( 'vertex', 'new_label', ['birth_date', DATETIME, true], ['gender', BOOL, true]) ``` Example output: affected 1024 db.createEdgeLabel( label_name, field_spec...) Create an edge label. Parameters: parameter parameter type description label_name string name of the label edge_constraints string edge constraints field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, optional] , where optional is specified as true, only for optional fields. edge_constraints is a json array string, This parameter limits the combination of starting and ending vertex of the edge, for example: '[[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]]' , which limits the edge direction can only be from vertex_label1 to vertex_label2 or from vertex_label3 to vertex_label4 . If you don't want to have any constraints, give an empty array string, like this '[]' Output: If successful, it returns a success message. Example input: CALL db.createEdgeLabel('KNOWS', '[]', 'name', int32, true) Example output: Added type [KNOWS] db.addIndex(label_name, field_name, is_unique) create an index on some field of one vertex label . Parameters: parameter parameter type description label_name string name of the label field_name string specification of a field is_unique boolean Specifies whether the index is unique Output: If successful, it returns a success message. Example input: CALL db.addIndex('Person', 'id', true) Example output: Added index [Perosn:id] dbms.security.changePassword(current_password ,new_password) Change the current user's password. Parameters: parameter parameter type description current_password string the current password new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changePassword('73@TuGraph','admin') Example output: true dbms.security.changeUserPassword(user_name, new_password) Change the current user's password. Parameters: parameter parameter type description user_name string the user's name new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changeUserPassword('quest','73@TuGraph') Example output: true dbms.security.createUser(user_name, password) create new user on this graph database. Parameters: parameter parameter type description user_name string the new user name password string the password of new user Output: If successful, it returns a success message. Example input: CALL dbms.security.createUser('quest',\"admin\") Example output: true dbms.security.deleteUser(user_name) delete user on this graph database. Parameters: parameter parameter type description user_name string the user name to be deleted Output: If successful, it returns a success message. Example input: CALL dbms.security.deleteUser('quest') Example output: true dbms.security.listUsers() get all user's name of the graph database. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.name string the user name is.admin boolean the permission of this user Example input: CALL dbms.security.listUsers() Example output: user.name is.admin admin true ... ... dbms.security.showCurrentUser() get current user's name. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.user string the current user name Example input: CALL dbms.security.showCurrentUser() Example output: user.name admin dbms.security.listAllowedHosts() get the list of ips to be allowed . Output: a list of ips which are allowed. Example input: CALL dbms.security.listAllowedHosts() Example output: host 192.168.1.22 ... dbms.security.deleteAllowedHosts(hosts) delete some ips from the list of ips to be allowed . Output: the number of ip which been deleted. Example input: CALL dbms.security.deleteAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.security.addAllowedHosts(hosts) add some ips from the list of ips to be allowed . Output: the number of ip which been added. Example input: CALL dbms.security.addAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.graph.createGraph(graph_name, description, max_size_GB) create a new subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of new subgraph description string description of new subgraph max_size_GB integer Upper limit of subgraph capacity Output: if successful , it will return true. Example input: CALL dbms.graph.createGraph('graph1', 'description', 2045) Example output: success true dbms.graph.deleteGraph(graph_name) delete a subgraph in this graph database . parameter parameter type description graph_name string the name of subgraph to been deleted Output: if successful , it will return true. Example input: CALL dbms.graph.deleteGraph('graph1') Example output: success true dbms.graph.modGraph(graph_name, config) delete a subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of subgraph to been deleted config map the configuration to be modified Output: if successful , it will return true. Example input: CALL dbms.graph.modGraph('graph1',{description:'this graph', max_size_GB:20}) Example output: success true dbms.graph.listGraphs() get all subgraphs in this graph database. Output: a list of {subgraph and configuration}. Example input: CALL dbms.graph.listGraphs() Example output: graph.name configuration default {\"description\":\"\",\"max_size_GB\":1024} graph1 {\"description\":\"this graph\",\"max_size_GB\":20} ... ... dbms.config.list() get config of this graph database. Output: a list of {configuration}. Example input: CALL dbms.config.list() Example output: name value bind_host 0.0.0.0 durable true ... ... dbms.config.update(updates) get some config of this graph database. Output: If successful, it returns a success message Example input: CALL dbms.config.update({ enable_ip_check:false, durable:true, optimistic_txn:true, enable_audit_log:true}) Example output: Update succeeded. dbms.takeSnapshot() take the snapshot on this current graph database. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.takeSnapshot() Example output: path log/db/snapshot/2020-07-20_17.20.03 dbms.listBackupFiles() get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.listBackupFiles() Example output: path tugraph/db/binlog/binlog_0 algo.shortestPath(startNode, endNode, config) get one of the shortest paths between two vertexes. Parameters: parameter parameter type description startNode Node the source node of paths endNode Node the destination node paths config MAP the filter of shortest paths, the formate as {maxHops:3, relationshipQuery:'HAS_CHILD'} Output: If successful, it will returns one group result of the shortest path. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost Example output: nodeCount totalCost 2 1 algo.allShortestPaths(startNode, endNode, config)) get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,cost RETURN nodeIds,cost Example output: nodeIds cost [2,665] 1 ... algo.algo.native.extract(id, config)) get the field values of a list of vertexes or edges. Parameters: parameter parameter type description id ANY the id of vertexes or edges , the id must be variable config MAP the configuration of this extraction of vertexes or edges in which each config is a map in the form of {isNode:true, filed:'HAS_CHILD'} , if isNode is specified true, the id is a vertex id, or it is an edge id. Output: If successful, it returns a list of the value of vertexes or edges specified field . Example input: with [2,3] as vids CALL algo.native.extract(vids,{isNode:true, field:'id'}) YIELD value RETURN value Example output: value [4,5] \u5185\u7f6eprocedures\u5b8c\u6574\u5217\u8868 Name Description Signature db.subgraph \u5217\u51fa\u70b9\u7684\u5b50\u56fe db.subgraph(vids::LIST) :: (subgraph::STRING) db.vertexLabels \u5217\u51fa\u6240\u6709Vertex Label db.vertexLabels() :: (label::STRING) db.edgeLabels \u5217\u51fa\u6240\u6709Edge Label db.edgeLabels() :: (edgeLabels::STRING) db.indexes \u5217\u51fa\u6240\u6709\u7d22\u5f15 db.indexes() :: (label::STRING,field::STRING,unique::BOOLEAN) db.listLabelIndexes(label_name) \u5217\u51fa\u6240\u6709\u4e0e\u67d0\u4e2aLabel\u76f8\u5173\u7684\u7d22\u5f15 db.listLabelIndexes(label_name:STRING) :: (label::STRING,field::STRING,unique::BOOLEAN) db.warmup \u9884\u70ed\u6570\u636e db.warmup() :: (time_used::STRING) db.createVertexLabel \u521b\u5efaVertex Label db.createVertexLabel(label_name::STRING,field_specs::LIST) :: (::VOID) db.createLabel \u521b\u5efaVertex/Edge Label db.createLabel(label_type::STRING,label_name::STRING,extra::STRING,field_specs::LIST) :: () db.getLabelSchema \u5217\u51falabel schema db.getLabelSchema(label_type::STRING,label_name::STRING) :: (name::STRING,type::STRING,optional::BOOLEAN) db.getVertexSchema \u5217\u51fa\u70b9\u7684 schema db.getVertexSchema(label::STRING) :: (schema::MAP) db.getEdgeSchema \u5217\u51fa\u8fb9\u7684 schema db.getEdgeSchema(label::STRING) :: (schema::MAP) db.deleteLabel \u5220\u9664Vertex/Edge Label db.deleteLabel(label_type::STRING,label_name::STRING) :: (::VOID) db.alterLabelDelFields \u4fee\u6539label\u5220\u9664\u5c5e\u6027 db.alterLabelDelFields(label_type::STRING,label_name::STRING,del_fields::LIST) :: (record_affected::INTEGER) db.alterLabelAddFields \u4fee\u6539label\u6dfb\u52a0field db.alterLabelAddFields(label_type::STRING,label_name::STRING,add_field_spec_values::LIST) :: (record_affected::INTEGER) db.alterLabelModFields \u4fee\u6539label field db.alterLabelModFields(label_type::STRING,label_name::STRING,mod_field_specs::LIST) :: (record_affected::INTEGER) db.createEdgeLabel \u521b\u5efaEdge Label db.createEdgeLabel(type_name::STRING,field_specs::LIST) :: (::VOID) db.addIndex \u521b\u5efa\u7d22\u5f15 db.addIndex(label_name::STRING,field_name::STRING,is_unique::BOOLEAN) :: (::VOID) db.deleteIndex \u5220\u9664\u7d22\u5f15 db.deleteIndex(label_name::STRING,field_name::STRING) :: (::VOID) db.backup \u5907\u4efd\u6570\u636e db.backup(destination::STRING) :: () dbms.procedures \u5217\u51fa\u6240\u6709procedures dbms.procedures() :: (name::STRING,signature::STRING) dbms.security.changePassword \u66f4\u6539\u5f53\u524d\u7528\u6237\u7684\u5bc6\u7801 dbms.security.changePassword(current_password::STRING,new_password::STRING) :: (::VOID) dbms.security.changeUserPassword \u66f4\u6539\u6307\u5b9a\u7528\u6237\u7684\u5bc6\u7801 dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) :: (::VOID) dbms.security.createUser \u521b\u5efa\u7528\u6237 dbms.security.createUser(user_name::STRING,password::STRING) :: (::VOID) dbms.security.deleteUser \u5220\u9664\u7528\u6237 dbms.security.deleteUser(user_name::STRING) :: (::VOID) dbms.security.listUsers \u5217\u51fa\u6240\u6709\u7528\u6237 dbms.security.listUsers() :: (user_name::STRING,user_info::MAP) dbms.security.showCurrentUser \u5217\u51fa\u5f53\u524d\u7528\u6237\u4fe1\u606f dbms.security.showCurrentUser() :: (current_user::STRING) dbms.security.getUserPermissions \u5217\u51fa\u6307\u5b9a\u7528\u6237\u7684\u6743\u9650 dbms.security.getUserPermissions(user_name::STRING) :: (user_info::MAP) dbms.graph.createGraph \u521b\u5efa\u5b50\u56fe dbms.graph.createGraph(graph_name::STRING, description::STRING, max_size_GB::INTEGER) :: (::VOID) dbms.graph.modGraph \u4fee\u6539\u5b50\u56fe\u5c5e\u6027 dbms.graph.modGraph(graph_name::STRING,config::MAP) :: (::VOID) dbms.graph.deleteGraph \u5220\u9664\u5b50\u56fe dbms.graph.deleteGraph(graph_name::STRING) :: (::VOID) dbms.graph.listGraphs \u5217\u51fa\u6240\u6709\u5b50\u56fe dbms.graph.listGraphs() :: (graph_name::STRING,configuration::MAP) dbms.graph.getGraphInfo \u5217\u51fa\u6307\u5b9a\u5b50\u56fe\u7684\u4fe1\u606f dbms.graph.getGraphInfo(graph_name::STRING)::(graph_name::STRING,configuration::MAP) dbms.security.addAllowedHosts \u6dfb\u52a0ip\u5230\u4fe1\u4efb\u5217\u8868 dbms.security.addAllowedHosts(hosts::LIST) :: (num_new::INTEGER) dbms.security.deleteAllowedHosts \u4ece\u4fe1\u4efb\u5217\u8868\u5220\u9664ip dbms.security.deleteAllowedHosts(hosts::LIST) :: (record_affected::INTEGER) dbms.security.listAllowedHosts \u5217\u51fa\u4fe1\u4efb\u5217\u8868\u4e2d\u7684\u4e3b\u673aip dbms.security.listAllowedHosts() :: (host::STRING) dbms.config.update \u66f4\u65b0TuGraph\u914d\u7f6e dbms.config.update(updates::MAP) :: (message::STRING) dbms.config.list \u5217\u51faTuGraph\u914d\u7f6e dbms.config.list() :: (name::STRING,value::ANY) algo.shortestPath \u67e5\u8be2\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84 algo.shortestPath(startNode::NODE,endNode::NODE,config::MAP) :: (nodeCount::INTEGER,totalCost::FLOAT) algo.allShortestPaths \u67e5\u8be2\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84 algo.allShortestPaths(startNode::NODE,endNode::NODE,config::MAP) :: (nodeIds::LIST,relationshipIds::LIST,cost::LIST) algo.native.extract \u67e5\u8be2\u6307\u5b9aVertexId/EdgeUid\uff08\u5217\u8868\uff09\u6307\u5b9afield\u7684\u503c\uff08\u5217\u8868\uff09 algo.native.extract(id::ANY,config::MAP) :: (value::ANY) db.flushDB \u5237\u65b0db db.flushDB() :: (::VOID) dbms.security.listRoles \u5217\u51fa\u6240\u6709\u89d2\u8272 dbms.security.listRoles() :: (role_name::STRING,role_info::MAP) dbms.security.createRole \u521b\u5efa\u89d2\u8272 dbms.security.createRole(role_name::STRING,desc::STRING) :: (::VOID) dbms.security.deleteRole \u5220\u9664\u89d2\u8272 dbms.security.deleteRole(role_name::STRING) :: (::VOID) dbms.security.getRoleInfo \u83b7\u53d6\u89d2\u8272\u8be6\u7ec6\u4fe1\u606f dbms.security.getRoleInfo(role::STRING) :: (role_info::MAP) dbms.security.disableRole \u7981\u7528/\u542f\u7528\u89d2\u8272 dbms.security.disableRole(role::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.modRoleDesc \u4fee\u6539\u89d2\u8272\u63cf\u8ff0\u4fe1\u606f dbms.security.modRoleDesc(role::STRING,description::STRING) :: (::VOID) dbms.security.rebuildRoleAccessLevel \u5220\u9664\u89d2\u8272\u6743\u9650\u5e76\u91cd\u5efa dbms.security.rebuildRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleAccessLevel \u4fee\u6539\u89d2\u8272\u5bf9\u6307\u5b9a\u56fe\u7684\u8bbf\u95ee\u6743\u9650 dbms.security.modRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleFieldAccessLevel \u4fee\u6539\u89d2\u8272\u5bf9\u6307\u5b9a\u5c5e\u6027\u7684\u8bbf\u95ee\u6743\u9650 dbms.security.modRoleFieldAccessLevel(role::STRING,graph::STRING,label::STRING,field::STRING,label_type::STRING,field_access_level::STRING) :: (::VOID) dbms.security.getUserInfo \u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f dbms.security.getUserInfo(user::STRING) :: (user_info::MAP) dbms.security.disableUser \u7981\u7528/\u542f\u7528\u7528\u6237 dbms.security.disableUser(user::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.setCurrentDesc \u8bbe\u7f6e\u5f53\u524d\u7528\u6237\u63cf\u8ff0\u4fe1\u606f dbms.security.setCurrentDesc(description::STRING) :: (::VOID) dbms.security.setUserDesc \u8bbe\u7f6e\u7528\u6237\u63cf\u8ff0\u4fe1\u606f dbms.security.setUserDesc(user::STRING,description::STRING) :: (::VOID) dbms.security.getUserMemoryUsage \u83b7\u53d6\u7528\u6237\u5185\u5b58\u7528\u91cf dbms.security.getUserMemoryUsage(user::STRING) :: (memory_usage::INTEGER) dbms.security.setUserMemoryLimit \u8bbe\u7f6e\u7528\u6237\u5185\u5b58\u9650\u5236 dbms.security.setUserMemoryLimit(user::STRING,memorylimit::INTEGER) :: (::VOID) dbms.security.deleteUserRoles \u5220\u9664\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb dbms.security.deleteUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.rebuildUserRoles \u6e05\u7a7a\u7528\u6237\u89d2\u8272\u7684\u5173\u7cfb\u5e76\u91cd\u5efa dbms.security.rebuildUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.addUserRoles \u65b0\u589e\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb dbms.security.addUserRoles(user::STRING,roles::LIST) :: (::VOID) db.plugin.loadPlugin \u88c5\u8f7dplugin db.plugin.loadPlugin(plugin_type::STRING,plugin_name::STRING,plugin_content::STRING,code_type::STRING,plugin_description::STRING,read_only::BOOLEAN) :: (::VOID) db.plugin.deletePlugin \u5220\u9664plugin db.plugin.deletePlugin(plugin_type::STRING,plugin_name::STRING) :: (::VOID) db.plugin.listPlugin \u5217\u51fa\u5df2\u88c5\u8f7d\u7684plugin db.plugin.listPlugin(plugin_type::STRING) :: (plugin_description::LIST) db.plugin.getPluginInfo \u83b7\u53d6plugin\u7684\u8be6\u7ec6\u4fe1\u606f db.plugin.getPluginInfo(plugin_type::STRING,plugin_name::STRING,show_code::BOOLEAN)::(plugin_description::MAP) db.plugin.callPlugin \u6267\u884cplugin db.plugin.callPlugin(plugin_type::STRING,plugin_name::STRING,param::STRING,timeout::DOUBLE,in_process::BOOLEAN) :: (success::BOOLEAN,result::STRING) db.importor.dataImportor \u5bfc\u5165\u70b9\u6216\u8fb9\u6570\u636e db.importor.dataImportor(description::STRING,content::STRING,continue_on_error::BOOLEAN,thread_nums::INTEGER,delimiter::STRING) :: (::VOID) db.importor.schemaImportor \u5bfc\u5165\u70b9\u6216\u8fb9schema db.importor.schemaImportor(description::STRING) :: (::VOID) db.addFullTextIndex \u6dfb\u52a0\u5168\u6587\u7d22\u5f15 db.addFullTextIndex(is_vertex::BOOLEAN, label_name::STRING, field_name::STRING) :: (::VOID) db.deleteFullTextIndex \u5220\u9664\u5168\u6587\u7d22\u5f15 db.deleteFullTextIndex(is_vertex::BOOLEAN, label_name::STRING, field_name::STRING) :: (::VOID) db.rebuildFullTextIndex \u91cd\u5efa\u5168\u6587\u7d22\u5f15 db.rebuildFullTextIndex(vertex_labels::STRING, edge_labels::STRING) :: (::VOID) db.fullTextIndexes \u67e5\u770b\u5168\u6587\u7d22\u5f15 db.fullTextIndexes() :: (is_vertex::BOOLEAN, label::STRING, field::STRING) dbms.task.listTasks \u67e5\u8be2\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1 dbms.task.listTasks()::(tasks::LIST) dbms.task.terminateTask \u4e2d\u6b62\u4efb\u52a1 dbms.task.terminateTask(task_id::STRING)::(::VOID) db.dropDB \u6e05\u7a7a\u6570\u636e\u5e93 db.dropDB() :: (::VOID)","title":"Cypher"},{"location":"zh-CN/3.developer-document/2.cypher/#tugraph-cypher","text":"\u6b64\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86TuGraph-Cypher\u7684\u8be6\u7ec6\u4f7f\u7528\u8bf4\u660e","title":"TuGraph-Cypher"},{"location":"zh-CN/3.developer-document/2.cypher/#operators","text":"","title":"Operators"},{"location":"zh-CN/3.developer-document/2.cypher/#summary","text":"Operators\u652f\u6301\u8fdb\u5ea6\u4e00\u89c8\uff1a \u7c7b\u522b \u652f\u6301 \u5f85\u652f\u6301 General operators DISTINCT , . for property access [] for dynamic property access Mathematical operators + , - , * , / , % , ^ Comparison operators = , <> , < , > , <= , >= , IS NULL , IS NOT NULL String-specific comparison operators STARTS WITH , ENDS WITH , CONTAINS , REGEXP Boolean operators AND , OR , XOR , NOT String operators + for concatenation List operators + for concatenation, IN to check existence of an element in a list, [] for accessing element(s)","title":"Summary"},{"location":"zh-CN/3.developer-document/2.cypher/#general-operators","text":"\u2713 Using the DISTINCT operator MATCH (p:person) RETURN DISTINCT p.born \u274f Accessing properties of a nested literal map using the . operator WITH {person: {name: 'Anne', age: 25}} AS p RETURN p.person.name \u274f Filtering on a dynamically-computed property key using the [] operator CREATE (a:Restaurant {name: 'Hungry Jo', rating_hygiene: 10, rating_food: 7}), (b:Restaurant {name: 'Buttercup Tea Rooms', rating_hygiene: 5, rating_food:6}), (c1:Category {name: 'hygiene'}), (c2:Category {name: 'food'}) MATCH (restaurant:Restaurant), (category:Category) WHERE restaurant[\"rating_\" + category.name] > 6 RETURN DISTINCT restaurant.name","title":"General operators"},{"location":"zh-CN/3.developer-document/2.cypher/#mathematical-operators","text":"\u2713 Using the exponentiation operator ^ WITH 2 AS number, 3 AS exponent RETURN number ^ exponent AS result \u2713 Using the unary minus operator - WITH -3 AS a, 4 AS b RETURN b - a AS result","title":"Mathematical operators"},{"location":"zh-CN/3.developer-document/2.cypher/#comparison-operators","text":"\u2713 Comparing two numbers WITH 4 AS one, 3 AS two RETURN one > two AS result","title":"Comparison operators"},{"location":"zh-CN/3.developer-document/2.cypher/#string-specific-comparison-operators","text":"\u2713 Using STARTS WITH to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate STARTS WITH 'Jo' RETURN candidate \u2713 Using REGEXP to filter names WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate REGEXP 'Jo.*n' RETURN candidate","title":"String-specific comparison operators"},{"location":"zh-CN/3.developer-document/2.cypher/#boolean-operators","text":"\u2713 Using boolean operators to filter numbers WITH [2, 4, 7, 9, 12] AS numberlist UNWIND numberlist AS number WITH number WHERE number = 4 OR (number > 6 AND number < 10) RETURN number","title":"Boolean operators"},{"location":"zh-CN/3.developer-document/2.cypher/#string-operators","text":"String operators comprise: \u2713 concatenating strings: +","title":"String operators"},{"location":"zh-CN/3.developer-document/2.cypher/#list-operators","text":"\u2713 Concatenating two lists using + RETURN [1,2,3,4,5]+[6,7] AS myList \u2713 Using IN to check if a number is in a list WITH [2, 3, 4, 5] AS numberlist UNWIND numberlist AS number WITH number WHERE number IN [2, 3, 8] RETURN number \u2713 Accessing elements in a list using the [] operator WITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names RETURN names[1..3] AS result","title":"List operators"},{"location":"zh-CN/3.developer-document/2.cypher/#clauses","text":"","title":"Clauses"},{"location":"zh-CN/3.developer-document/2.cypher/#summary_1","text":"Clauses\u652f\u6301\u8fdb\u5ea6\u4e00\u89c8\uff1a \u7c7b\u522b \u8bed\u6cd5 \u5907\u6ce8 Reading clauses MATCH \u652f\u6301 OPTIONAL MATCH \u652f\u6301 MANDATORY MATCH \u5f85\u652f\u6301 Projecting clauses RETURN \u2026 [AS] \u652f\u6301 WITH \u2026 [AS] \u652f\u6301 UNWIND \u2026 [AS] \u652f\u6301 Reading sub-clauses WHERE \u652f\u6301 ORDER BY [ASC[ENDING] / DESC[ENDING]] \u652f\u6301 SKIP \u652f\u6301 LIMIT \u652f\u6301 Writing clauses CREATE \u652f\u6301 DELETE \u652f\u6301 DETACH DELETE \u652f\u6301 SET \u652f\u6301 REMOVE \u652f\u6301 Reading/Writing clauses MERGE \u652f\u6301 CALL [\u2026YIELD] \u652f\u6301 Set operations UNION \u5f85\u652f\u6301 UNION ALL \u652f\u6301","title":"Summary"},{"location":"zh-CN/3.developer-document/2.cypher/#match","text":"Basic node finding \u2713 Get all nodes MATCH (n) RETURN n \u2713 Get all nodes with a label MATCH (movie:movie) RETURN movie.title \u2713 Related nodes MATCH (person {name: 'Laurence Fishburne'})-[]-(movie) RETURN movie.title \u2713 Match with labels MATCH (:person {name: 'Laurence Fishburne'})-[]-(movie:movie) RETURN movie.title Relationship basics \u2713 Outgoing relationships MATCH (:person {name: 'Laurence Fishburne'})-[]->(movie) RETURN movie.title \u2713 Directed relationships and variable MATCH (:person {name: 'Laurence Fishburne'})-[r]->(movie) RETURN type(r) \u2713 Match on relationship type MATCH (matrix:movie {title: 'The Matrix'})<-[:acted_in]-(actor) RETURN actor.name \u2713 Match on multiple relationship types MATCH (matrix {title: 'The Matrix'})<-[:acted_in|:directed]-(person) RETURN person.name \u2713 Match on relationship type and use a variable MATCH (matrix {title: 'The Matrix'})<-[r:acted_in]-(actor) RETURN r.role - Relationships in depth \u274f Relationship types with uncommon characters MATCH (n {name: 'Rob Reiner'})-[r:`TYPE WITH SPACE`]->() RETURN type(r) \u2713 Multiple relationships MATCH (laurence {name: 'Laurence Fishburne'})-[:acted_in]->(movie)<-[:directed]-(director) RETURN movie.title, director.name \u2713 Variable-length relationships MATCH (laurence {name: 'Laurence Fishburne'})-[:acted_in*1..3]-(movie:movie) RETURN movie.title \u2713 Relationship variable in variable-length relationships MATCH p = (laurence {name: 'Laurence Fishburne'})-[:acted_in*2]-(co_actor) RETURN p \u274f Match with properties on a variable-length path MATCH p = (charlie:person)-[* {blocked:false}]-(martin:person) WHERE charlie.name = 'Charlie Sheen' AND martin.name = 'Martin Sheen' RETURN p \u2713 Zero-length paths MATCH (matrix:movie {title: 'The Matrix'})-[*0..1]-(x) RETURN x \u2713 Named paths MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p \u2713 Matching on a bound relationship MATCH (a)-[r]->(b) WHERE euid(r)=\"0_3937_0_0_0\" RETURN a,b Shortest path \u2713 Single shortest path MATCH (martin:person {name: 'Carrie-Anne Moss'}), (laurence:person {name: 'Laurence Fishburne'}) CALL algo.shortestPath(martin, laurence) YIELD nodeCount,totalCost,path RETURN nodeCount,totalCost,path \u2713 All shortest paths MATCH (martin:person {name: 'Carrie-Anne Moss'}), (laurence:person {name: 'Laurence Fishburne'}) WITH martin, laurence CALL algo.allShortestPaths(martin, laurence) YIELD nodeIds,relationshipIds,cost RETURN nodeIds,relationshipIds,cost - Get node or relationship by id \u2713 Node by id MATCH (n) WHERE id(n)= 0 RETURN n \u2713 Relationship by id MATCH ()-[r]->() WHERE euid(r) = \"0_3937_0_0_0\" RETURN r \u2713 Multiple nodes by id MATCH (n) WHERE id(n) IN [0, 3, 5] RETURN n","title":"MATCH"},{"location":"zh-CN/3.developer-document/2.cypher/#return","text":"\u2713 Return nodes MATCH (n {name: 'Carrie-Anne Moss'}) RETURN n \u2713 Return relationships MATCH (n {name: 'Carrie-Anne Moss'})-[r:acted_in]->(c) RETURN r \u2713 Return property MATCH (n {name: 'Carrie-Anne Moss'}) RETURN n.born \u274f Return all elements MATCH p = (a {name: 'A'})-[r]->(b) RETURN * \u274f Variable with uncommon characters MATCH (`This isn\\'t a common variable`) WHERE `This isn\\'t a common variable`.name = 'A' RETURN `This isn\\'t a common variable`.happy \u2713 Aliasing a field MATCH (a {name: 'Carrie-Anne Moss'}) RETURN a.born AS SomethingTotallyDifferent \u2713 Optional properties MATCH (n) RETURN n.age \u274f Other expressions MATCH (a {name: 'Carrie-Anne Moss'}) RETURN a.born > 1900, \"I'm a literal\", (a)-[]->() (a)-[]->() not supported. \u2713 Unique results MATCH (a {name: 'Carrie-Anne Moss'})-[]->(b) RETURN DISTINCT b","title":"RETURN"},{"location":"zh-CN/3.developer-document/2.cypher/#where","text":"Basic usage \u2713 Boolean operations MATCH (n) WHERE n.name = 'Laurence Fishburne' XOR (n.born > 1965 AND n.name = 'Carrie-Anne Moss') RETURN n.name, n.born \u2713 Filter on node label MATCH (n) WHERE n:person RETURN n.name, n.born \u2713 Filter on node property MATCH (n) WHERE n.born > 2000 RETURN n.name, n.born \u2713 Filter on relationship property MATCH (n)-[k:acted_in]->(f) WHERE k.role = \"Trinity\" RETURN f.title \u274f Filter on dynamically-computed property WITH 'AGE' AS propname MATCH (n) WHERE n[toLower(propname)]< 30 RETURN n.name, n.age \u2713 Property existence checking MATCH (n) WHERE exists(n.born) RETURN n.name, n.born String matching \u2713 Match the beginning of a string MATCH (n) WHERE n.name STARTS WITH 'Pet' RETURN n.name, n.born \u2713 Match the ending of a string MATCH (n) WHERE n.name ENDS WITH 'ter' RETURN n.name, n.born \u2713 Match anywhere within a string MATCH (n) WHERE n.name CONTAINS 'ete' RETURN n.name, n.born \u2713 String matching negation MATCH (n) WHERE NOT n.name ENDS WITH 's' RETURN n.name, n.born Using path patterns in WHERE \u274f Filter on patterns MATCH (tobias {name: 'Tobias'}), (others) WHERE others.name IN ['Andres', 'Peter'] AND (tobias)<-[]-(others) RETURN others.name, others.age \u274f Filter on patterns using NOT MATCH (persons), (peter {name: 'Peter'}) WHERE NOT (persons)-[]->(peter) RETURN persons.name, persons.age \u274f Filter on patterns with properties MATCH (n) WHERE (n)-[:KNOWS]-({name: 'Tobias'}) RETURN n.name, n.age \u2713 Filter on relationship type MATCH (n)-[r]->() WHERE n.name='Laurence Fishburne' AND type(r) STARTS WITH 'ac' RETURN type(r), r.role Lists \u2713 IN operator MATCH (a) WHERE a.name IN ['Laurence Fishburne', 'Tobias'] RETURN a.name, a.born Missing properties and values \u2713 Default to false if property is missing MATCH (n) WHERE n.belt = 'white' RETURN n.name, n.age, n.belt \u2713 Default to true if property is missing MATCH (n) WHERE n.belt = 'white' OR n.belt IS NULL RETURN n.name, n.age, n.belt ORDER BY n.name \u2713 Filter on null MATCH (person) WHERE person.name = 'Peter' AND person.belt IS NULL RETURN person.name, person.age, person.belt Using ranges \u2713 Simple range MATCH (a) WHERE a.name >= 'Peter' RETURN a.name, a.born \u2713 Composite range MATCH (a) WHERE a.name > 'Andres' AND a.name < 'Tobias' RETURN a.name, a.born","title":"WHERE"},{"location":"zh-CN/3.developer-document/2.cypher/#skip","text":"\u2713 Skip first three records MATCH (n:person) RETURN n.name ORDER BY n.name SKIP 3 \u2713 Return middle two records MATCH (n:person) RETURN n.name ORDER BY n.name SKIP 1 LIMIT 2 \u274f Using an expression with SKIP to return a subset of the records MATCH (n:person) RETURN n.name ORDER BY n.name SKIP toInteger(3*rand())+ 1","title":"SKIP"},{"location":"zh-CN/3.developer-document/2.cypher/#limit","text":"\u2713 Return a subset of the records MATCH (n:person) RETURN n.name LIMIT 3 \u274f Using an expression with LIMIT to return a subset of the records MATCH (n:person) RETURN n.name LIMIT toInteger(3 * rand())+ 1","title":"LIMIT"},{"location":"zh-CN/3.developer-document/2.cypher/#create","text":"Create nodes Note TuGraph\u4e0d\u652f\u6301\u521b\u5efa\u7a7a\u7684nodes\uff0c\u4e0d\u652f\u6301\u591alabels\u3002 \u2612 Create single node CREATE (n) \u2612 Create multiple nodes CREATE (n), (m) \u2612 Create a node with a label CREATE (n:person) \u2612 Create a node with multiple labels CREATE (n:Person:Swedish) \u2713 Create node and add labels and properties CREATE (n:person {id:2001, name: 'Andres'}) \u2713 Return created node CREATE (n:person {id:2002, name: 'Andres'}) RETURN n Create relationships \u2713 Create a relationship between two nodes MATCH (n:person), (m:movie) WHERE n.name = 'Jada Pinkett Smith' AND m.title = 'The Matrix' CREATE (n)-[r:write]->(m) \u2713 Create a relationship and set properties MATCH (n:person), (m:movie) WHERE n.name = 'Jada Pinkett Smith' AND m.title = 'The Matrix' CREATE (n)-[r:acted_in{role: 'Trinity'}]->(m) \u274f Create a full path CREATE p = (andres:person {id: 2005, name:'Andres'})-[:acted_in {role: 'Trinity'}]-> (m:movie {id: 2006})<-[:acted_in {role: 'Trinity'}]-(michael {id: 2006, name:'Michael'}) RETURN p Use parameters with CREATE \u274f Create node with a parameter for the properties CREATE (n:Person $props) RETURN n \u2612 Create multiple nodes with a parameter for their properties UNWIND $props AS map CREATE (n) SET n = map cannot create vertex without label.","title":"CREATE"},{"location":"zh-CN/3.developer-document/2.cypher/#callyield","text":"\u2713 Call a procedure using CALL CALL db.vertexLabels \u2713 View the signature for a procedure CALL dbms.procedures() YIELD name, signature RETURN signature \u274f Call a procedure using a quoted namespace and name CALL `db`.`vertexLabels` \u2713 Call a procedure with literal arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0, 'name') \u274f Call a procedure with parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex($indexName,$node,$propKey) \u274f Call a procedure with mixed literal and parameter arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', $node, 'name') \u2713 Call a procedure with literal and default arguments CALL org.opencypher.procedure.example.addNodeToIndex('users', 0) \u2713 Call a procedure within a complex query using CALL\u2026YIELD CALL db.vertexLabels() YIELD label RETURN count(label) AS numLabels \u274f Call a procedure and filter its results CALL db.vertexLabels() YIELD label WHERE label CONTAINS 'User' RETURN count(label) AS numLabels \u274f Call a procedure within a complex query and rename its outputs CALL db.propertyKeys() YIELD propertyKey AS prop MATCH (n) WHERE n[prop] IS NOT NULL RETURN prop, count(n) AS numNodes","title":"CALL[\u2026YIELD]"},{"location":"zh-CN/3.developer-document/2.cypher/#union","text":"\u2713 Combine two queries and retain duplicates MATCH (n:person) RETURN n.name AS name UNION ALL MATCH (n:movie) RETURN n.title AS name \u274f Combine two queries and remove duplicates MATCH (n:Actor) RETURN n.name AS name UNION MATCH (n:Movie) RETURN n.title AS name","title":"UNION"},{"location":"zh-CN/3.developer-document/2.cypher/#functions","text":"","title":"Functions"},{"location":"zh-CN/3.developer-document/2.cypher/#whole-list-of-functions","text":"\u79cd\u7c7b \u529f\u80fd \u5907\u6ce8 Predicate functions exists() all() \u4e0d\u652f\u6301 any() \u4e0d\u652f\u6301 single() \u4e0d\u652f\u6301 none() \u4e0d\u652f\u6301 Scalar functions id() euid() properties() head() last() toBoolean() toFloat() toInteger() toString() type() startnode() endnode() size() length() label() OpenCypher\u6269\u5c55\u65b9\u6cd5 Aggregating functions avg() collect() count() max() min() percentileCont() percentileDisc() stDev() stDevP() variance() varianceP() sum() List functions keys() labels() \u8fd4\u56de\u7ed3\u679c\u6709\u4e14\u53ea\u6709\u4e00\u4e2alabel range() subscript() \u4e0d\u652f\u6301 Mathematical functions abs() ceil() floor() rand() round() sign() String functions /","title":"Whole List Of Functions"},{"location":"zh-CN/3.developer-document/2.cypher/#predicate-functions","text":"exists() judge it whether a vertex or edge has the field . Scope: whole instance. Example input: MATCH (n) WHERE exists(n.born) RETURN n.name, n.born Example output: exists(name) true","title":"Predicate functions"},{"location":"zh-CN/3.developer-document/2.cypher/#scalar-functions","text":"id() get the id of vertex. Scope: whole instance. Example input: MATCH (a) RETURN id(a) Example output: vid 1 2 ... properties() get a map containing all the properties of a node or relationship. Scope: whole instance. Example input: MATCH (n:person {name: 'Laurence Fishburne'}) RETURN n head() get the first element of a list. Scope: whole instance. Example input: WITH ['one','two','three'] AS coll RETURN coll, head(coll) Example output: coll head(coll) [\"one\",\"two\",\"three\"] \"one\" last() get the last element of a list. Scope: whole instance. Example input: WITH ['one','two','three'] AS coll RETURN coll, last(coll) Example output: coll last(coll) [\"one\",\"two\",\"three\"] \"three\" toFloat() Converts an integer or string value to a floating point number. Scope: whole instance. Example input: RETURN toFloat('11.5') Example output: float 11.5 toInteger() Converts a floating point or string value to an integer value. Scope: whole instance. Example input: RETURN toInteger('2.3') AS integer Example output: integer 2 toString() Converts an integer, float, boolean value to a string. Scope: whole instance. Example input: RETURN toString(2.3) type() get the string representation of the relationship type. Scope: whole instance. Example input: MATCH (n)-[r]->() WHERE n.name = 'Laurence Fishburne' RETURN type(r) Example output: type acted_in acted_in","title":"Scalar functions"},{"location":"zh-CN/3.developer-document/2.cypher/#aggregating-functions","text":"avg() Returns the average of a set of numeric values. Scope: whole instance. Example input: MATCH (n:person) RETURN avg(n.born) Example output: avg(n.born) 1869.2661654135338 collect() Returns a list containing the values returned by an expression. Scope: whole instance. Example input: MATCH (n:person) RETURN collect(n.born) Example output: collect(n.born) [1967,...] count() Returns the number of values or records. Scope: whole instance. Example input: MATCH (n {name: 'Laurence Fishburne'})-[]->(x) RETURN labels(n), n.born, count(*) Example output: labels(n) n.born count(*) [\"person\"] 1961 3 max() Returns the maximum value in a set of values. Scope: whole instance. Example input: MATCH (n:person) RETURN max(n.born) Example output: max(n.born) 2003 min() Returns the minimum value in a set of values. Scope: whole instance. Example input: MATCH (n:person) RETURN min(n.born) Example output: min(n.born) 1000 percentileCont() Returns the percentile of a value over a group using linear interpolation. Scope: whole instance. Example input: MATCH (n:person) RETURN percentileCont(n.born, 0.4) Example output: percentileCont(n.born, 0.4) 1953 percentileDisc() Returns the nearest value to the given percentile over a group using a rounding method. Scope: whole instance. Output: the percentile of the given value over a group. Example input: MATCH (n:person) RETURN percentileDisc(n.born, 0.5) Example output: percentileDisc(n.age, 0.5) 1959 stDev() Returns the standard deviation for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) RETURN stDev(n.born) Example output: stDev(n.born) 279.53117993401725 stDevP() Returns the standard deviation for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) RETURN stDevP(n.born) Example output: stDevP(n.born) 279.3209270423399 variance() Returns the variance for the given value over a group for a sample of a population. Scope: whole instance. Example input: MATCH (n) RETURN variance(n.born) Example output: variance(n.age) 78137.68055530392 varianceP() Returns the variance for the given value over a group for an entire population. Scope: whole instance. Example input: MATCH (n) RETURN varianceP(n.born) Example output: varianceP(n.age) 78020.18028379219 sum() Returns the sum of a set of numeric values. Scope: whole instance. Example input: MATCH (n:person) RETURN sum(n.born) Example output: sum(n.born) 1243062","title":"Aggregating functions"},{"location":"zh-CN/3.developer-document/2.cypher/#list-funtions","text":"keys() get the field names of some vertex. Scope: whole instance. Example input: MATCH (a) RETURN keys(a) LIMIT 1 Example output: keys(a) [\"name\",\"age\",\"eyes\"] labels()/label() Returns a list containing the string representations for all the property names of a node, relationship, or map. Scope: whole instance. Example input: MATCH (a) RETURN labels(a) LIMIT 1 Example output: labels [\"Person\"]","title":"List Funtions:"},{"location":"zh-CN/3.developer-document/2.cypher/#mathematical-functions","text":"abs() get the absolute value of some data. Scope: whole instance. Example input: MATCH (a:person {name: 'Laurence Fishburne'}), (e:person {name: 'Carrie-Anne Moss'}) RETURN a.born, e.born, abs(a.born-e.born) Example output: a.born e.born abs(a.born - e.born) 38 41 1 ceil() Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN ceil(0.1) Example output: ceil(0.1) 1.0 floor() get the largest floating point number that is less than or equal to the given number and equal to a mathematical integer. Scope: whole instance. Example input: RETURN floor(0.9) Example output: floor(0.9) 0.0 round() Returns the value of a number rounded to the nearest integer. Scope: whole instance. Example input: RETURN round(3.141592) Example output: round 3 rand() Returns returns a random floating point number in the range from 0 (inclusive) to 1 exclusive). Scope: whole instance. Example input: RETURN rand() Example output: rand() 0.9797131960534085 sign() Get the signum of the given number: 0 if the number is 0, -1 for any negative number, and 1 for any positive number. Scope: whole instance. Example input: RETURN sign(-17), sign(0.1) Example output: sign(-17) sign(0.1) -1 1 TuGraph \u67e5\u8be2\u8bed\u8a00\u4e0e OpenCypher \u7684\u4e0d\u540c\u70b9\u5982\u4e0b\uff1a Label \u6570\u91cf TuGraph: Each node/relationship must have one and only one label. So error occurs when there is no label, and the 1st label will be picked as the label if there are more than one label. OpenCypher: One node/relationship may have 0 to many labels. Schema. TuGraph: TuGraph has strong schema OpenCypher: schema-less","title":"Mathematical functions"},{"location":"zh-CN/3.developer-document/2.cypher/#1","text":"TuGraph\u67e5\u8be2\u8bed\u8a00\u4e0eOpenCypher\u7684\u4e0d\u540c\u70b9\u5982\u4e0b\uff1a Label\u6570\u91cf TuGraph: Each node/relationship must have one and only one label. So error occurs when there is no label, and the 1st label will be picked as the label if there are more than one label. OpenCypher: One node/relationship may have 0 to many labels. Schema. TuGraph: TuGraph has strong schema OpenCypher: schema-less","title":"\u9644\u5f551. \u8bed\u6cd5\u6269\u5145\u53ca\u4e0d\u540c"},{"location":"zh-CN/3.developer-document/2.cypher/#2-procedures","text":"","title":"\u9644\u5f552. \u5185\u7f6eprocedures\u5217\u8868"},{"location":"zh-CN/3.developer-document/2.cypher/#procedures","text":"dbms.procedures() Lists all available procedures. Scope: whole instance. Output: a list of { signature , name }. Example input: CALL dbms.procedures() Example output: signature name db.vertexLabels() :: (label::STRING) db.vertexLabels db.edgeLabels() :: (edgeLabels::STRING) db.edgeLabels db.indexes() :: (index::LIST) db.indexes ... ... db.subgraph() Scope: whole instance. Parameters: parameter parameter type description vids list list of vertex id Output: Get a json containing all the properties of nodes and relationships. Example input: CALL db.subgraph([3937,4126,4066,4010]) Example output subgraph {\"nodes\":[{\"identity\":3937,\"label\":\"movie\",\"properties\":{\"duration\":136,\"id\":1,\"poster_image\":\"http://image.tmdb.org/t/p/w185/gynBNzwyaHKtXqlEKKLioNkjKgN.jpg\",\"rated\":\"R\",\"summary\":\"Thomas A. Anderson is a man living two lives. By day he is an average computer programmer and by night a malevolent hacker known as Neo who finds himself targeted by the police when he is contacted by Morpheus a legendary computer hacker who reveals the shocking truth about our reality.\",\"tagline\":\"Welcome to the Real World.\",\"title\":\"The Matrix\"}},{\"identity\":4010,\"label\":\"user\",\"properties\":{\"id\":44,\"login\":\"Howard\"}},{\"identity\":4066,\"label\":\"user\",\"properties\":{\"id\":202,\"login\":\"Enoch\"}},{\"identity\":4126,\"label\":\"user\",\"properties\":{\"id\":464,\"login\":\"Wilburn\"}}],\"relationships\":[{\"dst\":4126,\"forward\":true,\"identity\":0,\"label\":\"is_friend\",\"label_id\":3,\"src\":4010,\"temporal_id\":0},{\"dst\":4010,\"forward\":true,\"identity\":0,\"label\":\"is_friend\",\"label_id\":3,\"src\":4066,\"temporal_id\":0},{\"dst\":4066,\"forward\":true,\"identity\":0,\"label\":\"is_friend\",\"label_id\":3,\"src\":4126,\"temporal_id\":0}]} db.vertexLabels() Lists all available vertex labels of vertex. Scope: whole instance. Output: a list of { name }. Example input: CALL db.vertexLabels() Example output: | label | | ------- | | genre | | keyword | | movie | | ... | db.edgeLabels() Lists all available labels of edges. Scope: whole instance. Output: a list of {edge labels}. Example input: CALL db.edgeLabels() Example output: relationshipType acted_in directed ... db.createVertexLabel(label_name, primary_field, field_spec...) Create a vertex label. Scope: whole instance. Parameters: parameter parameter type description label_name string name of vertex label primary_field string primary field of vertex label field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, true] , where true is specified only for optional fields. **Output:** If successful, it returns a success message. **Example input:** ``` CALL db.createVertexLabel('Person', 'id', 'id', int64, false, 'name', string, true) ``` **Example output:** ``` Added label [Person] ``` db.getLabelSchema(label_type, label_name) Get the schema definition of the label in a subgraph. Scope: subgraph, as specified in the graph parameter in REST or RPC request. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: a list of label specifications, in which each element is a list of the following fields: field_name field_type description name string name of the field type string type of the field optional boolean whether the field is optional Example input: CALL db.getLabelSchema('vertex', 'Person') Example output: name type optional id INT32 false born INT32 true name STRING true poster_image STRING true db.createLabel(label_type, label_name, extra, field_spec...) Create a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label extra string for edge, it means constraints; for vertex, it means primary property field_spec list specification of a field in which each `field_spec` is a list of string in the form of `[field_name, field_type, optional]`. for edge, `extra` should be a json array string, like this `[[\"label1\",\"label2\"], [\"label3\",\"label4\"]]`, if edge has no constraints, give an empty json array, like this `[]` Output: If successful, it returns a success message. Example input: CALL db.createLabel('vertex', 'new_label', 'id', ['id',int32,false], ['name',string, true]); CALL db.createLabel('edge', 'new_edge', '[[\"id1\",\"id2\"]]', ['id',int32,false], ['name', string, true]); Example output: Vertex label [new_label] successfully added. db.deleteLabel(label_type, label_name) Delete a vertex or edge label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label Output: field_name field_type description affected integer number of vertexes/edges deleted Example input: CALL db.deleteLabel('vertex', 'Person') Example output: affected 1024 db.alterLabelDelFields(label_type, label_name, field_names) Delete specified fields from the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_names list of strings names of the fields to delete Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelDelFields('vertex', 'Person', ['name', 'image']) Example output: affected 1024 db.alterLabelAddFields(label_type, label_name, field_value_spec...) Adds specified fields to the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_value_spec list specification of a field in which each `field_value_spec` is a list of string in the form of `[field_name, field_type, field_value, optional]`, where: `field_value` is the default value of the field. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: CALL db.alterLabelAddFields( 'vertex', 'new_label', ['birth_date', DATE, '', true], ['img', BLOB, '', true]) Example output: affected 1024 db.alterLabelModFields(label_type, label_name, field_spec...) Modifies the specified fields in the label. Parameters: parameter parameter type description label_type string either 'vertex' or 'edge' label_name string name of the label field_spec list specification of a field in which each `field_spec` is a list of string in the form of `[field_name, field_type, optional]`.The target field should exist. Output: field_name field_type description affected integer number of vertexes/edges modified Example input: ``` CALL db.alterLabelModFields( 'vertex', 'new_label', ['birth_date', DATETIME, true], ['gender', BOOL, true]) ``` Example output: affected 1024 db.createEdgeLabel( label_name, field_spec...) Create an edge label. Parameters: parameter parameter type description label_name string name of the label edge_constraints string edge constraints field_spec list specification of a field in which each field_spec is a list of string in the form of [field_name, field_type, optional] , where optional is specified as true, only for optional fields. edge_constraints is a json array string, This parameter limits the combination of starting and ending vertex of the edge, for example: '[[\"vertex_label1\",\"vertex_label2\"],[\"vertex_label3\",\"vertex_label4\"]]' , which limits the edge direction can only be from vertex_label1 to vertex_label2 or from vertex_label3 to vertex_label4 . If you don't want to have any constraints, give an empty array string, like this '[]' Output: If successful, it returns a success message. Example input: CALL db.createEdgeLabel('KNOWS', '[]', 'name', int32, true) Example output: Added type [KNOWS] db.addIndex(label_name, field_name, is_unique) create an index on some field of one vertex label . Parameters: parameter parameter type description label_name string name of the label field_name string specification of a field is_unique boolean Specifies whether the index is unique Output: If successful, it returns a success message. Example input: CALL db.addIndex('Person', 'id', true) Example output: Added index [Perosn:id] dbms.security.changePassword(current_password ,new_password) Change the current user's password. Parameters: parameter parameter type description current_password string the current password new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changePassword('73@TuGraph','admin') Example output: true dbms.security.changeUserPassword(user_name, new_password) Change the current user's password. Parameters: parameter parameter type description user_name string the user's name new_password string new password Output: If successful, it returns a success message. Example input: CALL dbms.security.changeUserPassword('quest','73@TuGraph') Example output: true dbms.security.createUser(user_name, password) create new user on this graph database. Parameters: parameter parameter type description user_name string the new user name password string the password of new user Output: If successful, it returns a success message. Example input: CALL dbms.security.createUser('quest',\"admin\") Example output: true dbms.security.deleteUser(user_name) delete user on this graph database. Parameters: parameter parameter type description user_name string the user name to be deleted Output: If successful, it returns a success message. Example input: CALL dbms.security.deleteUser('quest') Example output: true dbms.security.listUsers() get all user's name of the graph database. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.name string the user name is.admin boolean the permission of this user Example input: CALL dbms.security.listUsers() Example output: user.name is.admin admin true ... ... dbms.security.showCurrentUser() get current user's name. Output: a list of user names, in which each element is a list of the following fields: parameter parameter type description user.user string the current user name Example input: CALL dbms.security.showCurrentUser() Example output: user.name admin dbms.security.listAllowedHosts() get the list of ips to be allowed . Output: a list of ips which are allowed. Example input: CALL dbms.security.listAllowedHosts() Example output: host 192.168.1.22 ... dbms.security.deleteAllowedHosts(hosts) delete some ips from the list of ips to be allowed . Output: the number of ip which been deleted. Example input: CALL dbms.security.deleteAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.security.addAllowedHosts(hosts) add some ips from the list of ips to be allowed . Output: the number of ip which been added. Example input: CALL dbms.security.addAllowedHosts('192.168.1.22','192.168.1.23') Example output: success 2 dbms.graph.createGraph(graph_name, description, max_size_GB) create a new subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of new subgraph description string description of new subgraph max_size_GB integer Upper limit of subgraph capacity Output: if successful , it will return true. Example input: CALL dbms.graph.createGraph('graph1', 'description', 2045) Example output: success true dbms.graph.deleteGraph(graph_name) delete a subgraph in this graph database . parameter parameter type description graph_name string the name of subgraph to been deleted Output: if successful , it will return true. Example input: CALL dbms.graph.deleteGraph('graph1') Example output: success true dbms.graph.modGraph(graph_name, config) delete a subgraph in this graph database . Parameters: parameter parameter type description graph_name string the name of subgraph to been deleted config map the configuration to be modified Output: if successful , it will return true. Example input: CALL dbms.graph.modGraph('graph1',{description:'this graph', max_size_GB:20}) Example output: success true dbms.graph.listGraphs() get all subgraphs in this graph database. Output: a list of {subgraph and configuration}. Example input: CALL dbms.graph.listGraphs() Example output: graph.name configuration default {\"description\":\"\",\"max_size_GB\":1024} graph1 {\"description\":\"this graph\",\"max_size_GB\":20} ... ... dbms.config.list() get config of this graph database. Output: a list of {configuration}. Example input: CALL dbms.config.list() Example output: name value bind_host 0.0.0.0 durable true ... ... dbms.config.update(updates) get some config of this graph database. Output: If successful, it returns a success message Example input: CALL dbms.config.update({ enable_ip_check:false, durable:true, optimistic_txn:true, enable_audit_log:true}) Example output: Update succeeded. dbms.takeSnapshot() take the snapshot on this current graph database. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.takeSnapshot() Example output: path log/db/snapshot/2020-07-20_17.20.03 dbms.listBackupFiles() get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: CALL dbms.listBackupFiles() Example output: path tugraph/db/binlog/binlog_0 algo.shortestPath(startNode, endNode, config) get one of the shortest paths between two vertexes. Parameters: parameter parameter type description startNode Node the source node of paths endNode Node the destination node paths config MAP the filter of shortest paths, the formate as {maxHops:3, relationshipQuery:'HAS_CHILD'} Output: If successful, it will returns one group result of the shortest path. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost Example output: nodeCount totalCost 2 1 algo.allShortestPaths(startNode, endNode, config)) get the path of backuped files. Output: If successful, it returns the path of snapshot. Example input: MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,cost RETURN nodeIds,cost Example output: nodeIds cost [2,665] 1 ... algo.algo.native.extract(id, config)) get the field values of a list of vertexes or edges. Parameters: parameter parameter type description id ANY the id of vertexes or edges , the id must be variable config MAP the configuration of this extraction of vertexes or edges in which each config is a map in the form of {isNode:true, filed:'HAS_CHILD'} , if isNode is specified true, the id is a vertex id, or it is an edge id. Output: If successful, it returns a list of the value of vertexes or edges specified field . Example input: with [2,3] as vids CALL algo.native.extract(vids,{isNode:true, field:'id'}) YIELD value RETURN value Example output: value [4,5]","title":"procedures\u6837\u4f8b"},{"location":"zh-CN/3.developer-document/2.cypher/#procedures_1","text":"Name Description Signature db.subgraph \u5217\u51fa\u70b9\u7684\u5b50\u56fe db.subgraph(vids::LIST) :: (subgraph::STRING) db.vertexLabels \u5217\u51fa\u6240\u6709Vertex Label db.vertexLabels() :: (label::STRING) db.edgeLabels \u5217\u51fa\u6240\u6709Edge Label db.edgeLabels() :: (edgeLabels::STRING) db.indexes \u5217\u51fa\u6240\u6709\u7d22\u5f15 db.indexes() :: (label::STRING,field::STRING,unique::BOOLEAN) db.listLabelIndexes(label_name) \u5217\u51fa\u6240\u6709\u4e0e\u67d0\u4e2aLabel\u76f8\u5173\u7684\u7d22\u5f15 db.listLabelIndexes(label_name:STRING) :: (label::STRING,field::STRING,unique::BOOLEAN) db.warmup \u9884\u70ed\u6570\u636e db.warmup() :: (time_used::STRING) db.createVertexLabel \u521b\u5efaVertex Label db.createVertexLabel(label_name::STRING,field_specs::LIST) :: (::VOID) db.createLabel \u521b\u5efaVertex/Edge Label db.createLabel(label_type::STRING,label_name::STRING,extra::STRING,field_specs::LIST) :: () db.getLabelSchema \u5217\u51falabel schema db.getLabelSchema(label_type::STRING,label_name::STRING) :: (name::STRING,type::STRING,optional::BOOLEAN) db.getVertexSchema \u5217\u51fa\u70b9\u7684 schema db.getVertexSchema(label::STRING) :: (schema::MAP) db.getEdgeSchema \u5217\u51fa\u8fb9\u7684 schema db.getEdgeSchema(label::STRING) :: (schema::MAP) db.deleteLabel \u5220\u9664Vertex/Edge Label db.deleteLabel(label_type::STRING,label_name::STRING) :: (::VOID) db.alterLabelDelFields \u4fee\u6539label\u5220\u9664\u5c5e\u6027 db.alterLabelDelFields(label_type::STRING,label_name::STRING,del_fields::LIST) :: (record_affected::INTEGER) db.alterLabelAddFields \u4fee\u6539label\u6dfb\u52a0field db.alterLabelAddFields(label_type::STRING,label_name::STRING,add_field_spec_values::LIST) :: (record_affected::INTEGER) db.alterLabelModFields \u4fee\u6539label field db.alterLabelModFields(label_type::STRING,label_name::STRING,mod_field_specs::LIST) :: (record_affected::INTEGER) db.createEdgeLabel \u521b\u5efaEdge Label db.createEdgeLabel(type_name::STRING,field_specs::LIST) :: (::VOID) db.addIndex \u521b\u5efa\u7d22\u5f15 db.addIndex(label_name::STRING,field_name::STRING,is_unique::BOOLEAN) :: (::VOID) db.deleteIndex \u5220\u9664\u7d22\u5f15 db.deleteIndex(label_name::STRING,field_name::STRING) :: (::VOID) db.backup \u5907\u4efd\u6570\u636e db.backup(destination::STRING) :: () dbms.procedures \u5217\u51fa\u6240\u6709procedures dbms.procedures() :: (name::STRING,signature::STRING) dbms.security.changePassword \u66f4\u6539\u5f53\u524d\u7528\u6237\u7684\u5bc6\u7801 dbms.security.changePassword(current_password::STRING,new_password::STRING) :: (::VOID) dbms.security.changeUserPassword \u66f4\u6539\u6307\u5b9a\u7528\u6237\u7684\u5bc6\u7801 dbms.security.changeUserPassword(user_name::STRING,new_password::STRING) :: (::VOID) dbms.security.createUser \u521b\u5efa\u7528\u6237 dbms.security.createUser(user_name::STRING,password::STRING) :: (::VOID) dbms.security.deleteUser \u5220\u9664\u7528\u6237 dbms.security.deleteUser(user_name::STRING) :: (::VOID) dbms.security.listUsers \u5217\u51fa\u6240\u6709\u7528\u6237 dbms.security.listUsers() :: (user_name::STRING,user_info::MAP) dbms.security.showCurrentUser \u5217\u51fa\u5f53\u524d\u7528\u6237\u4fe1\u606f dbms.security.showCurrentUser() :: (current_user::STRING) dbms.security.getUserPermissions \u5217\u51fa\u6307\u5b9a\u7528\u6237\u7684\u6743\u9650 dbms.security.getUserPermissions(user_name::STRING) :: (user_info::MAP) dbms.graph.createGraph \u521b\u5efa\u5b50\u56fe dbms.graph.createGraph(graph_name::STRING, description::STRING, max_size_GB::INTEGER) :: (::VOID) dbms.graph.modGraph \u4fee\u6539\u5b50\u56fe\u5c5e\u6027 dbms.graph.modGraph(graph_name::STRING,config::MAP) :: (::VOID) dbms.graph.deleteGraph \u5220\u9664\u5b50\u56fe dbms.graph.deleteGraph(graph_name::STRING) :: (::VOID) dbms.graph.listGraphs \u5217\u51fa\u6240\u6709\u5b50\u56fe dbms.graph.listGraphs() :: (graph_name::STRING,configuration::MAP) dbms.graph.getGraphInfo \u5217\u51fa\u6307\u5b9a\u5b50\u56fe\u7684\u4fe1\u606f dbms.graph.getGraphInfo(graph_name::STRING)::(graph_name::STRING,configuration::MAP) dbms.security.addAllowedHosts \u6dfb\u52a0ip\u5230\u4fe1\u4efb\u5217\u8868 dbms.security.addAllowedHosts(hosts::LIST) :: (num_new::INTEGER) dbms.security.deleteAllowedHosts \u4ece\u4fe1\u4efb\u5217\u8868\u5220\u9664ip dbms.security.deleteAllowedHosts(hosts::LIST) :: (record_affected::INTEGER) dbms.security.listAllowedHosts \u5217\u51fa\u4fe1\u4efb\u5217\u8868\u4e2d\u7684\u4e3b\u673aip dbms.security.listAllowedHosts() :: (host::STRING) dbms.config.update \u66f4\u65b0TuGraph\u914d\u7f6e dbms.config.update(updates::MAP) :: (message::STRING) dbms.config.list \u5217\u51faTuGraph\u914d\u7f6e dbms.config.list() :: (name::STRING,value::ANY) algo.shortestPath \u67e5\u8be2\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84 algo.shortestPath(startNode::NODE,endNode::NODE,config::MAP) :: (nodeCount::INTEGER,totalCost::FLOAT) algo.allShortestPaths \u67e5\u8be2\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84 algo.allShortestPaths(startNode::NODE,endNode::NODE,config::MAP) :: (nodeIds::LIST,relationshipIds::LIST,cost::LIST) algo.native.extract \u67e5\u8be2\u6307\u5b9aVertexId/EdgeUid\uff08\u5217\u8868\uff09\u6307\u5b9afield\u7684\u503c\uff08\u5217\u8868\uff09 algo.native.extract(id::ANY,config::MAP) :: (value::ANY) db.flushDB \u5237\u65b0db db.flushDB() :: (::VOID) dbms.security.listRoles \u5217\u51fa\u6240\u6709\u89d2\u8272 dbms.security.listRoles() :: (role_name::STRING,role_info::MAP) dbms.security.createRole \u521b\u5efa\u89d2\u8272 dbms.security.createRole(role_name::STRING,desc::STRING) :: (::VOID) dbms.security.deleteRole \u5220\u9664\u89d2\u8272 dbms.security.deleteRole(role_name::STRING) :: (::VOID) dbms.security.getRoleInfo \u83b7\u53d6\u89d2\u8272\u8be6\u7ec6\u4fe1\u606f dbms.security.getRoleInfo(role::STRING) :: (role_info::MAP) dbms.security.disableRole \u7981\u7528/\u542f\u7528\u89d2\u8272 dbms.security.disableRole(role::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.modRoleDesc \u4fee\u6539\u89d2\u8272\u63cf\u8ff0\u4fe1\u606f dbms.security.modRoleDesc(role::STRING,description::STRING) :: (::VOID) dbms.security.rebuildRoleAccessLevel \u5220\u9664\u89d2\u8272\u6743\u9650\u5e76\u91cd\u5efa dbms.security.rebuildRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleAccessLevel \u4fee\u6539\u89d2\u8272\u5bf9\u6307\u5b9a\u56fe\u7684\u8bbf\u95ee\u6743\u9650 dbms.security.modRoleAccessLevel(role::STRING,access_level::MAP) :: (::VOID) dbms.security.modRoleFieldAccessLevel \u4fee\u6539\u89d2\u8272\u5bf9\u6307\u5b9a\u5c5e\u6027\u7684\u8bbf\u95ee\u6743\u9650 dbms.security.modRoleFieldAccessLevel(role::STRING,graph::STRING,label::STRING,field::STRING,label_type::STRING,field_access_level::STRING) :: (::VOID) dbms.security.getUserInfo \u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f dbms.security.getUserInfo(user::STRING) :: (user_info::MAP) dbms.security.disableUser \u7981\u7528/\u542f\u7528\u7528\u6237 dbms.security.disableUser(user::STRING,disable::BOOLEAN) :: (::VOID) dbms.security.setCurrentDesc \u8bbe\u7f6e\u5f53\u524d\u7528\u6237\u63cf\u8ff0\u4fe1\u606f dbms.security.setCurrentDesc(description::STRING) :: (::VOID) dbms.security.setUserDesc \u8bbe\u7f6e\u7528\u6237\u63cf\u8ff0\u4fe1\u606f dbms.security.setUserDesc(user::STRING,description::STRING) :: (::VOID) dbms.security.getUserMemoryUsage \u83b7\u53d6\u7528\u6237\u5185\u5b58\u7528\u91cf dbms.security.getUserMemoryUsage(user::STRING) :: (memory_usage::INTEGER) dbms.security.setUserMemoryLimit \u8bbe\u7f6e\u7528\u6237\u5185\u5b58\u9650\u5236 dbms.security.setUserMemoryLimit(user::STRING,memorylimit::INTEGER) :: (::VOID) dbms.security.deleteUserRoles \u5220\u9664\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb dbms.security.deleteUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.rebuildUserRoles \u6e05\u7a7a\u7528\u6237\u89d2\u8272\u7684\u5173\u7cfb\u5e76\u91cd\u5efa dbms.security.rebuildUserRoles(user::STRING,roles::LIST) :: (::VOID) dbms.security.addUserRoles \u65b0\u589e\u7528\u6237\u4e0e\u89d2\u8272\u7684\u8054\u7cfb dbms.security.addUserRoles(user::STRING,roles::LIST) :: (::VOID) db.plugin.loadPlugin \u88c5\u8f7dplugin db.plugin.loadPlugin(plugin_type::STRING,plugin_name::STRING,plugin_content::STRING,code_type::STRING,plugin_description::STRING,read_only::BOOLEAN) :: (::VOID) db.plugin.deletePlugin \u5220\u9664plugin db.plugin.deletePlugin(plugin_type::STRING,plugin_name::STRING) :: (::VOID) db.plugin.listPlugin \u5217\u51fa\u5df2\u88c5\u8f7d\u7684plugin db.plugin.listPlugin(plugin_type::STRING) :: (plugin_description::LIST) db.plugin.getPluginInfo \u83b7\u53d6plugin\u7684\u8be6\u7ec6\u4fe1\u606f db.plugin.getPluginInfo(plugin_type::STRING,plugin_name::STRING,show_code::BOOLEAN)::(plugin_description::MAP) db.plugin.callPlugin \u6267\u884cplugin db.plugin.callPlugin(plugin_type::STRING,plugin_name::STRING,param::STRING,timeout::DOUBLE,in_process::BOOLEAN) :: (success::BOOLEAN,result::STRING) db.importor.dataImportor \u5bfc\u5165\u70b9\u6216\u8fb9\u6570\u636e db.importor.dataImportor(description::STRING,content::STRING,continue_on_error::BOOLEAN,thread_nums::INTEGER,delimiter::STRING) :: (::VOID) db.importor.schemaImportor \u5bfc\u5165\u70b9\u6216\u8fb9schema db.importor.schemaImportor(description::STRING) :: (::VOID) db.addFullTextIndex \u6dfb\u52a0\u5168\u6587\u7d22\u5f15 db.addFullTextIndex(is_vertex::BOOLEAN, label_name::STRING, field_name::STRING) :: (::VOID) db.deleteFullTextIndex \u5220\u9664\u5168\u6587\u7d22\u5f15 db.deleteFullTextIndex(is_vertex::BOOLEAN, label_name::STRING, field_name::STRING) :: (::VOID) db.rebuildFullTextIndex \u91cd\u5efa\u5168\u6587\u7d22\u5f15 db.rebuildFullTextIndex(vertex_labels::STRING, edge_labels::STRING) :: (::VOID) db.fullTextIndexes \u67e5\u770b\u5168\u6587\u7d22\u5f15 db.fullTextIndexes() :: (is_vertex::BOOLEAN, label::STRING, field::STRING) dbms.task.listTasks \u67e5\u8be2\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1 dbms.task.listTasks()::(tasks::LIST) dbms.task.terminateTask \u4e2d\u6b62\u4efb\u52a1 dbms.task.terminateTask(task_id::STRING)::(::VOID) db.dropDB \u6e05\u7a7a\u6570\u636e\u5e93 db.dropDB() :: (::VOID)","title":"\u5185\u7f6eprocedures\u5b8c\u6574\u5217\u8868"},{"location":"zh-CN/3.developer-document/3.procedure/","text":"\u5b58\u50a8\u8fc7\u7a0b\u4f7f\u7528\u8bf4\u660e \u6b64\u6587\u6863\u4e3b\u8981\u8bb2\u89e3 TuGraph \u7684\u5b58\u50a8\u8fc7\u7a0b\u4f7f\u7528\u8bf4\u660e \u7b80\u4ecb \u5f53\u7528\u6237\u9700\u8981\u8868\u8fbe\u7684\u67e5\u8be2/\u66f4\u65b0\u903b\u8f91\u8f83\u4e3a\u590d\u6742\uff08\u4f8b\u5982 Cypher \u65e0\u6cd5\u63cf\u8ff0\uff0c\u6216\u662f\u5bf9\u6027\u80fd\u8981\u6c42\u8f83\u9ad8\uff09\u65f6\uff0c\u76f8\u6bd4\u8c03\u7528\u591a\u4e2a REST \u8bf7\u6c42\u5e76\u5728\u5ba2\u6237\u7aef\u5b8c\u6210\u6574\u4e2a\u5904\u7406\u6d41\u7a0b\u7684\u65b9\u5f0f\uff0cTuGraph \u63d0\u4f9b\u7684\u5b58\u50a8\u8fc7\u7a0b\u662f\u66f4\u7b80\u6d01\u548c\u9ad8\u6548\u7684\u9009\u62e9\u3002 \u4e0e\u4f20\u7edf\u6570\u636e\u5e93\u7c7b\u4f3c\uff0cTuGraph \u7684\u5b58\u50a8\u8fc7\u7a0b\u8fd0\u884c\u5728\u670d\u52a1\u5668\u7aef\uff0c\u7528\u6237\u901a\u8fc7\u5c06\u5904\u7406\u903b\u8f91\uff08\u5373\u591a\u4e2a\u64cd\u4f5c\uff09\u5c01\u88c5\u5230\u4e00\u4e2a\u8fc7\u7a0b\u4e2d\u6765\u51cf\u5c11\u5ba2\u6237\u7aef\u4f7f\u7528\u65f6\u9700\u8981\u7684 REST \u63a5\u53e3\u8c03\u7528\u6b21\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5b9e\u73b0\u65f6\u901a\u8fc7\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\uff08\u4f8b\u5982\u4f7f\u7528\u76f8\u5173\u7684 C++ OLAP \u63a5\u53e3\u4ee5\u53ca\u57fa\u4e8e\u5176\u5b9e\u73b0\u7684\u5185\u7f6e\u7b97\u6cd5\uff09\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u52a0\u901f\u3002 \u4f7f\u7528\u8bf4\u660e \u5728 TuGraph \u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u52a8\u6001\u7684\u52a0\u8f7d\uff0c\u66f4\u65b0\u548c\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b\u3002TuGraph \u652f\u6301 C \u8bed\u8a00\u548c Python \u8bed\u8a00\u7f16\u5199\u7684\u5b58\u50a8\u8fc7\u7a0b\u3002C \u8bed\u8a00\u7f16\u5199\u7684\u5b58\u50a8\u8fc7\u7a0b\u6269\u5c55\u540d\u4e00\u822c\u4e3a.so(Linux/Unix \u7cfb\u7edf\u4e0b)\u6216\u8005.dll(Windows \u7cfb\u7edf\u4e0b)\u3002Python \u5b58\u50a8\u8fc7\u7a0b\u7684\u6269\u5c55\u540d\u4e3a.py\u3002 \u4e24\u79cd\u5b58\u50a8\u8fc7\u7a0b\u662f\u5206\u522b\u7ba1\u7406\u7684\uff0c\u4f46\u4f7f\u7528\u65b9\u5f0f\u662f\u76f8\u540c\u7684\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 REST API \u6216\u8005 RPC \u6765\u7ba1\u7406\u548c\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b\u3002\u4e0b\u9762\u7684\u8bf4\u660e\u4ee5 REST API \u4e3a\u4f8b\uff0c\u76f8\u5e94\u7684 RPC \u8c03\u7528\u65b9\u5f0f\u8be6\u89c1 RPC \u6587\u6863\u3002 \u7f16\u5199\u5b58\u50a8\u8fc7\u7a0b \u7f16\u5199 C++\u5b58\u50a8\u8fc7\u7a0b \u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 core API \u6216\u8005 Traversal API \u6765\u7f16\u5199 C \u5b58\u50a8\u8fc7\u7a0b\u3002\u4e00\u4e2a\u7b80\u5355\u7684 C \u5b58\u50a8\u8fc7\u7a0b\u4e3e\u4f8b\u5982\u4e0b\uff1a // age_10.cpp ##include <iostream> ##include \"lgraph.h\" using namespace lgraph_api; extern \"C\" LGAPI bool Process(GraphDB& db, const std::string& request, std::string& response) { auto txn = db.CreateReadTxn(); size_t n = 0; for (auto vit = txn.GetVertexIterator(); vit.IsValid(); vit.Next()) { if (vit.GetLabel() == \"student\") { auto age = vit.GetField(\"age\"); if (!age.is_null() && age.integer() == 10) n++; ## \u7edf\u8ba1\u6240\u6709\u5e74\u9f84\u4e3a10\u7684\u5b66\u751f\u6570\u91cf } } output = std::to_string(n); return true; } \u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u50a8\u8fc7\u7a0b\u7684\u5165\u53e3\u51fd\u6570\u662f Process \u51fd\u6570\uff0c\u5b83\u7684\u53c2\u6570\u6709\u4e09\u4e2a\uff0c\u5206\u522b\u4e3a\uff1a db : \u6570\u636e\u5e93\u5b9e\u4f8b request : \u8f93\u5165\u8bf7\u6c42\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u5b57\u8282\u6570\u7ec4\uff0c\u6216\u8005 JSON \u4e32\u7b49\u5176\u5b83\u4efb\u610f\u683c\u5f0f\u3002 response : \u8f93\u51fa\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e8c\u8fdb\u5236\u6570\u636e\u3002 Process \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5f53\u5b83\u8fd4\u56de true \u7684\u65f6\u5019\uff0c\u8868\u793a\u8be5\u8bf7\u6c42\u987a\u5229\u5b8c\u6210\uff0c\u53cd\u4e4b\u8868\u793a\u8fd9\u4e2a\u5b58\u50a8\u8fc7\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u9519\u8bef\uff0c\u6b64\u65f6\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 response \u6765\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u4ee5\u65b9\u4fbf\u8c03\u8bd5\u3002 C++\u5b58\u50a8\u8fc7\u7a0b\u7f16\u5199\u5b8c\u6bd5\u540e\u9700\u8981\u7f16\u8bd1\u6210\u52a8\u6001\u94fe\u63a5\u5e93\u3002TuGraph \u63d0\u4f9b\u4e86 compile.sh \u811a\u672c\u6765\u5e2e\u52a9\u7528\u6237\u81ea\u52a8\u7f16\u8bd1\u5b58\u50a8\u8fc7\u7a0b\u3002 compile.sh \u811a\u672c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u662f\u8be5\u5b58\u50a8\u8fc7\u7a0b\u7684\u540d\u79f0\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f age_10 \u3002\u7f16\u8bd1\u8c03\u7528\u547d\u4ee4\u884c\u5982\u4e0b\uff1a g++ -fno-gnu-unique -fPIC -g --std=c++14 -I/usr/local/include/lgraph -rdynamic -O3 -fopenmp -o age_10.so age_10.cpp /usr/local/lib64/liblgraph.so -shared \u5982\u679c\u7f16\u8bd1\u987a\u5229\uff0c\u4f1a\u751f\u6210 age_10.so\uff0c\u7136\u540e\u7528\u6237\u5c31\u53ef\u4ee5\u5c06\u5b83\u52a0\u8f7d\u5230\u670d\u52a1\u5668\u4e2d\u4e86\u3002 \u7f16\u5199 Python \u5b58\u50a8\u8fc7\u7a0b \u4e0e C++\u7c7b\u4f3c\uff0cPython \u5b58\u50a8\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u8c03\u7528 core API\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5982\u4e0b\uff1a def Process(db, input): txn = db.CreateReadTxn() it = txn.GetVertexIterator() n = 0 while it.IsValid(): if it.GetLabel() == 'student' and it['age'] and it['age'] == 10: n = n + 1 it.Next() return (True, str(nv)) Python \u5b58\u50a8\u8fc7\u7a0b\u8fd4\u56de\u7684\u662f\u4e00\u4e2a tuple\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u8be5\u5b58\u50a8\u8fc7\u7a0b\u662f\u5426\u6210\u529f\u6267\u884c\uff1b\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a str \uff0c\u91cc\u9762\u662f\u9700\u8981\u8fd4\u56de\u7684\u7ed3\u679c\u3002 Python \u5b58\u50a8\u8fc7\u7a0b\u4e0d\u9700\u8981\u7f16\u8bd1\uff0c\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d\u3002 \u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b \u7528\u6237\u53ef\u4ee5\u901a\u8fc7 REST API \u548c RPC \u6765\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b\u3002\u4ee5 REST API \u4e3a\u4f8b\uff0c\u52a0\u8f7d age_10.so \u7684 C++\u4ee3\u7801\u5982\u4e0b\uff1a import requests import json import base64 data = {'name':'age_10'} f = open('./age_10.so','rb') content = f.read() data['code_base64'] = base64.b64encode(content).decode() data['description'] = 'Calculate number of students in the age of 10' data['read_only'] = true data['code_type'] = 'so' js = json.dumps(data) r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin', data=js, headers={'Content-Type':'application/json'}) print(r.status_code) ## \u6b63\u5e38\u65f6\u8fd4\u56de200 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u65f6\u7684 data['code'] \u662f\u4e00\u4e2a\u7ecf\u8fc7 base64 \u5904\u7406\u7684\u5b57\u7b26\u4e32\uff0c age_10.so \u4e2d\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u662f\u65e0\u6cd5\u901a\u8fc7 JSON \u76f4\u63a5\u4f20\u8f93\u7684\u3002\u6b64\u5916\uff0c\u5b58\u50a8\u8fc7\u7a0b\u7684\u52a0\u8f7d\u548c\u5220\u9664\u90fd\u53ea\u80fd\u7531\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u6765\u64cd\u4f5c\u3002 \u5b58\u50a8\u8fc7\u7a0b\u52a0\u8f7d\u4e4b\u540e\u4f1a\u88ab\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u5728\u670d\u52a1\u5668\u91cd\u542f\u540e\u4e5f\u4f1a\u88ab\u81ea\u52a8\u52a0\u8f7d\u3002\u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\u5bf9\u5b58\u50a8\u8fc7\u7a0b\u8fdb\u884c\u66f4\u65b0\uff0c\u8c03\u7528\u7684 REST API \u4e5f\u662f\u540c\u6837\u7684\u3002\u5efa\u8bae\u7528\u6237\u5728\u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b\u65f6\u66f4\u65b0\u76f8\u5e94\u63cf\u8ff0\uff0c\u4ee5\u4fbf\u533a\u5206\u4e0d\u540c\u7248\u672c\u7684\u5b58\u50a8\u8fc7\u7a0b\u3002 \u52a0\u8f7d Python \u5b58\u50a8\u8fc7\u7a0b\u7684\u65b9\u6cd5\u4e0e C++\u7c7b\u4f3c\uff0c\u53ea\u662f url \u5730\u5740\u4e0d\u540c\u3002Python \u4ee3\u7801\u540c\u6837\u9700\u8981\u4f7f\u7528 base64 \u5904\u7406\u3002 \u5217\u51fa\u5df2\u52a0\u8f7d\u7684\u5b58\u50a8\u8fc7\u7a0b \u5728\u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u968f\u65f6\u83b7\u53d6\u5b58\u50a8\u8fc7\u7a0b\u5217\u8868\u3002\u5176\u8c03\u7528\u5982\u4e0b\uff1a >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin') >>> r.status_code 200 >>> r.text '{\"plugins\":[{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true}]}' \u83b7\u53d6\u5b58\u50a8\u8fc7\u7a0b\u8be6\u60c5 \u5728\u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u968f\u65f6\u83b7\u53d6\u5355\u4e2a\u5b58\u50a8\u8fc7\u7a0b\u7684\u8be6\u60c5\uff0c\u5305\u62ec\u4ee3\u7801\u3002\u5176\u8c03\u7528\u5982\u4e0b\uff1a >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 >>> r.text '{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true, \"code_base64\":<CODE>, \"code_type\":\"so\"}' \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b\u7684\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a >>> r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10', data='', headers={'Content-Type':'application/json'}) >>> r.status_code 200 >>> r.text 9 \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b\u53ea\u9700\u8981\u5982\u4e0b\u8c03\u7528\uff1a >>> r = requests.delete(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 \u4e0e\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u53ea\u6709\u7ba1\u7406\u5458\u7528\u6237\u624d\u80fd\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b\u3002 \u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b \u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b\u9700\u8981\u6267\u884c\u5982\u4e0b\u4e24\u4e2a\u6b65\u9aa4\uff1a \u5220\u9664\u5df2\u5b58\u5728\u7684\u5b58\u50a8\u8fc7\u7a0b \u5b89\u88c5\u65b0\u7684\u5b58\u50a8\u8fc7\u7a0b TuGraph \u8f83\u4e3a\u8c28\u614e\u5730\u7ba1\u7406\u5b58\u50a8\u8fc7\u7a0b\u64cd\u4f5c\u7684\u5e76\u53d1\u6027\uff0c\u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b\u4e0d\u4f1a\u5f71\u54cd\u73b0\u6709\u5b58\u50a8\u8fc7\u7a0b\u7684\u8fd0\u884c\u3002 C++ OLAP \u63a5\u53e3 TuGraph \u5f3a\u5927\u7684\u5728\u7ebf\u5206\u6790\u5904\u7406\uff08OLAP\uff09\u80fd\u529b\u662f\u5176\u533a\u522b\u4e8e\u5176\u5b83\u56fe\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u3002 \u501f\u52a9 C++ OLAP API\uff08olap_on_db.h\uff09\uff0c\u7528\u6237\u53ef\u4ee5\u5feb\u901f\u5730\u5bfc\u51fa\u4e00\u4e2a\u9700\u8981\u8fdb\u884c\u590d\u6742\u5206\u6790\u7684\u5b50\u56fe\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8fd0\u884c\u8bf8\u5982 PageRank\u3001\u8fde\u901a\u5206\u91cf\u3001\u793e\u533a\u53d1\u73b0\u7b49\u8fed\u4ee3\u5f0f\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u6700\u540e\u6839\u636e\u7ed3\u679c\u505a\u51fa\u76f8\u5e94\u51b3\u7b56\u3002 \u5bfc\u51fa\u548c\u8ba1\u7b97\u7684\u8fc7\u7a0b\u90fd\u53ef\u4ee5\u901a\u8fc7\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u4ece\u800c\u5b9e\u73b0\u51e0\u4e4e\u5b9e\u65f6\u7684\u5206\u6790\u5904\u7406\uff0c\u907f\u514d\u4e86\u4f20\u7edf\u89e3\u51b3\u65b9\u6848\u9700\u8981\u5c06\u6570\u636e\u5bfc\u51fa\u3001\u8f6c\u6362\u3001\u518d\u5bfc\u5165\uff08ETL\uff09\u5230\u4e13\u95e8\u7684\u5206\u6790\u7cfb\u7edf\u8fdb\u884c\u79bb\u7ebf\u5904\u7406\u7684\u5197\u957f\u6b65\u9aa4\u3002 TuGraph \u5185\u7f6e\u4e86\u5927\u91cf\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5\u548c\u4e30\u5bcc\u7684\u8f85\u52a9\u63a5\u53e3\uff0c\u56e0\u6b64\u7528\u6237\u51e0\u4e4e\u4e0d\u9700\u8981\u81ea\u5df1\u6765\u5b9e\u73b0\u5177\u4f53\u7684\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ea\u9700\u5728\u5b9e\u73b0\u81ea\u5df1\u7684\u5b58\u50a8\u8fc7\u7a0b\u65f6\u5c06\u76f8\u5e94\u7b97\u6cd5\u5e93\u7684\u5934\u6587\u4ef6\uff08.h \u6587\u4ef6\uff09\u5305\u542b\u5230\u81ea\u5df1\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u5728\u7f16\u8bd1\u65f6\u94fe\u63a5\u76f8\u5e94\u7684\u52a8\u6001\u5e93\u6587\u4ef6\uff08.so\uff09\u5373\u53ef\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u7684\u53ea\u6709\u5c06\u9700\u8981\u5206\u6790\u7684\u5b50\u56fe\u62bd\u53d6\u51fa\u6765\u7684\u8fc7\u7a0b\u3002 Snapshot C++ OLAP API \u4e2d\u7684 Snapshot \u6a21\u7248\u7c7b\u7528\u4e8e\u8868\u793a\u62bd\u53d6\u51fa\u6765\u7684\u9759\u6001\u5b50\u56fe\uff0c\u5176\u4e2d EdgeData \u7528\u6765\u8868\u793a\u8be5\u5b50\u56fe\u4e0a\u6bcf\u6761\u8fb9\u6240\u7528\u6743\u503c\u7684\u6570\u636e\u7c7b\u578b\uff08\u5982\u679c\u8fb9\u4e0d\u9700\u8981\u6743\u503c\uff0c\u4f7f\u7528 Empty \u4f5c\u4e3a EdgeData \u5373\u53ef\uff09\u3002 \u62bd\u53d6\u7684\u5b50\u56fe\u901a\u8fc7 Snapshot \u7c7b\u7684\u6784\u9020\u51fd\u6570\u6765\u63cf\u8ff0\uff1a Snapshot::Snapshot( GraphDB & db, Transaction & txn, size_t flags = 0, std::function<bool(VertexIterator &)> vertex_filter = nullptr, std::function<bool(OutEdgeIterator &, EdgeData &)> out_edge_filter = nullptr ); \u5176\u4e2d\uff0cdb \u4e3a\u6570\u636e\u5e93\u53e5\u67c4\uff0ctxn \u4e3a\u4e8b\u52a1\u53e5\u67c4\uff0cflags \u4e3a\u751f\u6210\u65f6\u4f7f\u7528\u7684\u9009\u9879\uff0c\u53ef\u9009\u503c\u5305\u62ec\u4ee5\u4e0b\u7684\u7ec4\u5408\uff1aSNAPSHOT_PARALLEL \u8868\u793a\u5bfc\u51fa\u65f6\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5e76\u884c\uff1bSNAPSHOT_UNDIRECTED \u8868\u793a\u9700\u8981\u5c06\u5bfc\u51fa\u7684\u56fe\u53d8\u4e3a\u65e0\u5411\u56fe\u3002 vertex_filter \u662f\u9762\u5411\u9876\u70b9\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4e3a true \u8868\u793a\u8be5\u9876\u70b9\u9700\u8981\u88ab\u5305\u542b\u5230\u5f85\u62bd\u53d6\u7684\u5b50\u56fe\u4e2d\uff0c\u53cd\u4e4b\u5219\u8868\u793a\u9700\u8981\u88ab\u6392\u9664\u3002 out_edge_filter \u662f\u9762\u5411\u8fb9\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4e3a true \u8868\u793a\u8be5\u8fb9\u9700\u8981\u88ab\u5305\u542b\u5230\u5f85\u62bd\u53d6\u7684\u5b50\u56fe\u4e2d\uff0c\u53cd\u4e4b\u5219\u8868\u793a\u9700\u8981\u88ab\u6392\u9664\u3002 \u5f53\u8fc7\u6ee4\u51fd\u6570\u4e3a\u7f3a\u7701\u503c\u65f6\uff0c\u5219\u8868\u793a\u9700\u8981\u5c06\u6240\u6709\u9876\u70b9/\u8fb9\u90fd\u5305\u542b\u8fdb\u6765\u3002 Snapshot \u7c7b\u63d0\u4f9b\u7684\u5176\u5b83\u65b9\u6cd5\u8bf7\u53c2\u8003\u8be6\u7ec6\u7684 C++ API \u6587\u6863\uff08olap_on_db.h\uff09\u3002 Traversal \u56fe\u6570\u636e\u5e93\u4e2d\u5341\u5206\u5e38\u89c1\u7684\u4e00\u5927\u7c7b\u5206\u6790\u662f\u57fa\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u9876\u70b9\u51fa\u53d1\uff0c\u9010\u5c42\u5730\u62d3\u5c55\u5e76\u8bbf\u95ee\u90bb\u5c45\u3002 \u5c3d\u7ba1\u8fd9\u7c7b\u5206\u6790\u4e5f\u53ef\u4ee5\u4f7f\u7528 Cypher \u5b8c\u6210\uff0c\u4f46\u662f\u5f53\u8bbf\u95ee\u7684\u5c42\u6570\u8f83\u6df1\u65f6\uff0c\u5176\u6027\u80fd\u4f1a\u53d7\u5230\u4e32\u884c\u89e3\u91ca\u6267\u884c\u7684\u9650\u5236\u3002 \u4f7f\u7528 C++ Core API \u7f16\u5199\u5b58\u50a8\u8fc7\u7a0b\u5c3d\u7ba1\u907f\u514d\u4e86\u89e3\u91ca\u6267\u884c\uff0c\u4f46\u4f9d\u7136\u53d7\u9650\u4e8e\u5355\u4e2a\u7ebf\u7a0b\u7684\u5904\u7406\u80fd\u529b\u3002 \u4e3a\u4e86\u8ba9\u7528\u6237\u80fd\u591f\u65b9\u4fbf\u5730\u901a\u8fc7\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u52a0\u901f\u8fd9\u4e00\u7c7b\u5e94\u7528\u573a\u666f\uff0c\u6211\u4eec\u57fa\u4e8e C++ OLAP API \u5c01\u88c5\u4e86\u4e00\u4e2a Traversal \u6846\u67b6\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5176\u4e2d\u7684 FrontierTraversal \u548c PathTraversal \u7c7b\u6765\u5b8c\u6210\u8fd9\u79cd\u9010\u5c42\u904d\u5386\u7684\u5206\u6790\u4efb\u52a1\uff0c\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u76f8\u5e94\u7684 C++ API \u6587\u6863\uff08lgraph_traversal.h\uff09\u3002 ParallelVector<size_t> FindVertices( GraphDB & db, Transaction & txn, std::function<bool(VertexIterator &)> filter, bool parallel = false ); \u8be5\u65b9\u6cd5\u53ef\u7528\u4e8e\u627e\u5230\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\uff08filter \u8fd4\u56de true\uff09\u7684\u9876\u70b9\uff0c\u5f53 parallel \u4e3a true \u65f6\u5219\u4f1a\u5e76\u884c\u8be5\u67e5\u627e\u8fc7\u7a0b\u3002 template <typename VertexData> ParallelVector<VertexData> ExtractVertexData( GraphDB & db, Transaction & txn, ParallelVector<size_t> & frontier, std::function<void(VertexIterator &, VertexData &)> extract, bool parallel = false ); \u8be5\u65b9\u6cd5\u53ef\u7528\u4e8e\u4ece\u6307\u5b9a\u9876\u70b9\u96c6\uff08frontier\uff09\u4e2d\uff08\u901a\u8fc7 extract \u65b9\u6cd5\uff09\u62bd\u53d6\uff08\u7c7b\u578b\u4e3a VertexData \u7684\uff09\u5c5e\u6027\uff0c\u5f53 parallel \u4e3a true \u65f6\u4f1a\u5e76\u884c\u8be5\u62bd\u53d6\u8fc7\u7a0b\u3002 FrontierTraversal \u9002\u7528\u4e8e\u53ea\u5173\u6ce8\u904d\u5386\u6269\u5c55\u5230\u7684\u9876\u70b9\u96c6\u7684\u60c5\u51b5\uff1b\u5f53\u7528\u6237\u5728\u904d\u5386\u8fc7\u7a0b\u6216\u662f\u7ed3\u679c\u4e2d\u9700\u8981\u8bbf\u95ee\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff08\u8def\u5f84\u4e0a\u7684\u9876\u70b9/\u8fb9\uff09\u65f6\uff0c\u5219\u9700\u8981\u4f7f\u7528 PathTraversal\u3002 \u4e24\u7c7b Traversal \u7684\u6784\u9020\u51fd\u6570\u5747\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u6570\u636e\u5e93\u53e5\u67c4 db\u3001\u4e8b\u52a1\u53e5\u67c4 txn \u548c\u9009\u9879 flags\u3002 \u9009\u9879\u7684\u53ef\u9009\u503c\u5305\u62ec\u4ee5\u4e0b\u7684\u7ec4\u5408\uff1aTRAVERSAL_PARALLEL \u8868\u793a\u904d\u5386\u65f6\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u5e76\u884c\uff1bTRAVERSAL_ALLOW_REVISITS \u8868\u793a\u904d\u5386\u65f6\u5141\u8bb8\u91cd\u590d\u5730\u8bbf\u95ee\u9876\u70b9\uff08PathTraversal \u9690\u542b\u4e86\u8be5\u9009\u9879\uff09\u3002 void SetFrontier(size_t root_vid); void SetFrontier(ParallelVector<size_t> & root_vids); void SetFrontier(std::function<bool(VertexIterator &)> root_vertex_filter); \u4e24\u7c7b Traversal \u8bbe\u7f6e\u904d\u5386\u7684\u8d77\u59cb\u9876\u70b9/\u9876\u70b9\u96c6\u6709\u4e0a\u8ff0\u4e09\u79cd\u65b9\u5f0f\uff0c\u524d\u4e24\u79cd\u901a\u8fc7\u9876\u70b9 ID \u76f4\u63a5\u6307\u5b9a\uff0c\u6700\u540e\u4e00\u79cd\u65b9\u5f0f\u5219\u7c7b\u4f3c\u4e8e FindVertices\u3002 \u4e24\u7c7b Traversal \u7684\u904d\u5386\u90fd\u662f\u4ece\u5f53\u524d\u5c42\u7684\u9876\u70b9\u96c6\u5408\u51fa\u53d1\uff0c\u6839\u636e\u4f7f\u7528\u7684\u6269\u5c55\u51fd\u6570\u8bbf\u95ee\u6bcf\u6761\u51fa\u8fb9/\u5165\u8fb9/\u51fa\u8fb9\u548c\u5165\u8fb9\uff0c\u901a\u8fc7\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u51fd\u6570\u51b3\u5b9a\u6269\u5c55\u662f\u5426\u6210\u529f\uff0c\u82e5\u6210\u529f\u5219\u5c06\u90bb\u5c45\u9876\u70b9/\u8ffd\u52a0\u4e86\u8be5\u6761\u8fb9\u7684\u8def\u5f84\u52a0\u5165\u4e0b\u4e00\u5c42\u7684\u9876\u70b9/\u8def\u5f84\u96c6\u5408\u3002 void ExpandOutEdges( std::function<bool(OutEdgeIterator &)> out_edge_filter = nullptr, std::function<bool(VertexIterator &)> out_neighbour_filter = nullptr ); void ExpandInEdges( std::function<bool(InEdgeIterator &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &)> in_neighbour_filter = nullptr ); void ExpandEdges( std::function<bool(OutEdgeIterator &)> out_edge_filter = nullptr, std::function<bool(InEdgeIterator &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &)> out_neighbour_filter = nullptr, std::function<bool(VertexIterator &)> in_neighbour_filter = nullptr ); \u4e0a\u8ff0\u4e3a FrontierTraversal \u7684\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u5373\u4ece\u5f53\u524d\u7684\u9876\u70b9\u96c6\u5408\u51fa\u53d1\uff0c\u5bf9\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\uff0c\u4f9d\u6b21\u8bbf\u95ee\u6bcf\u6761\u51fa\u8fb9/\u5165\u8fb9/\u51fa\u8fb9\u548c\u5165\u8fb9\uff0c\u82e5\u6ee1\u8db3\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u6761\u4ef6\uff08\u5176\u4e2d\uff0cedge_filter \u4e3a\u9762\u5411\u8fb9\u7684\u8fc7\u6ee4\u51fd\u6570\uff0cneighbour_filter \u5219\u4e3a\u9762\u5411\u90bb\u5c45\u9876\u70b9\u7684\u8fc7\u6ee4\u51fd\u6570\uff09\uff0c\u5219\u5c06\u90bb\u5c45\u9876\u70b9\u52a0\u5165\u65b0\u7684\u9876\u70b9\u96c6\u5408\u3002 ParallelVector<size_t> & GetFrontier(); \u5f53\u524d\u9876\u70b9\u96c6\u5408\u7684\u6269\u5c55\u7ed3\u675f\u540e\uff0c\u65b0\u7684\u9876\u70b9\u96c6\u5408\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u53d6\u5f97\u3002 void ExpandOutEdges( std::function<bool(OutEdgeIterator &, Path &, IteratorHelper &)> out_edge_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> out_neighbour_filter = nullptr ); void ExpandInEdges( std::function<bool(InEdgeIterator &, Path &, IteratorHelper &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> in_neighbour_filter = nullptr ); void ExpandEdges( std::function<bool(OutEdgeIterator &, Path &, IteratorHelper &)> out_edge_filter = nullptr, std::function<bool(InEdgeIterator &, Path &, IteratorHelper &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> out_neighbour_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> in_neighbour_filter = nullptr ); PathTraversal \u7684\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\u4e0e FrontierTraversal \u7c7b\u4f3c\uff0c\u53ea\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u51fd\u6570\u4e2d\u589e\u52a0\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d\uff1aPath \u5305\u542b\u4e86\u5230\u65b0\u6269\u5c55\u7684\u8fd9\u6761\u8fb9\u4e4b\u524d\u7684\u8def\u5f84\uff0cIteratorHelper \u53ef\u7528\u4e8e\u5c06\u8def\u5f84\u4e2d\u7684\u9876\u70b9/\u8fb9\u8f6c\u4e3a\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\uff0c\u76f8\u5173\u6587\u6863\u53ef\u53c2\u8003\u5bf9\u5e94\u7684 C++ API \u6587\u6863\u3002 Procedure-api \u6587\u6863 TuGraph-Python-Procedure-API [\u6587\u6863\u4e0b\u8f7d] TuGraph-CPP-Procedure-API [\u6587\u6863\u4e0b\u8f7d]","title":"Procedure"},{"location":"zh-CN/3.developer-document/3.procedure/#_1","text":"\u6b64\u6587\u6863\u4e3b\u8981\u8bb2\u89e3 TuGraph \u7684\u5b58\u50a8\u8fc7\u7a0b\u4f7f\u7528\u8bf4\u660e","title":"\u5b58\u50a8\u8fc7\u7a0b\u4f7f\u7528\u8bf4\u660e"},{"location":"zh-CN/3.developer-document/3.procedure/#_2","text":"\u5f53\u7528\u6237\u9700\u8981\u8868\u8fbe\u7684\u67e5\u8be2/\u66f4\u65b0\u903b\u8f91\u8f83\u4e3a\u590d\u6742\uff08\u4f8b\u5982 Cypher \u65e0\u6cd5\u63cf\u8ff0\uff0c\u6216\u662f\u5bf9\u6027\u80fd\u8981\u6c42\u8f83\u9ad8\uff09\u65f6\uff0c\u76f8\u6bd4\u8c03\u7528\u591a\u4e2a REST \u8bf7\u6c42\u5e76\u5728\u5ba2\u6237\u7aef\u5b8c\u6210\u6574\u4e2a\u5904\u7406\u6d41\u7a0b\u7684\u65b9\u5f0f\uff0cTuGraph \u63d0\u4f9b\u7684\u5b58\u50a8\u8fc7\u7a0b\u662f\u66f4\u7b80\u6d01\u548c\u9ad8\u6548\u7684\u9009\u62e9\u3002 \u4e0e\u4f20\u7edf\u6570\u636e\u5e93\u7c7b\u4f3c\uff0cTuGraph \u7684\u5b58\u50a8\u8fc7\u7a0b\u8fd0\u884c\u5728\u670d\u52a1\u5668\u7aef\uff0c\u7528\u6237\u901a\u8fc7\u5c06\u5904\u7406\u903b\u8f91\uff08\u5373\u591a\u4e2a\u64cd\u4f5c\uff09\u5c01\u88c5\u5230\u4e00\u4e2a\u8fc7\u7a0b\u4e2d\u6765\u51cf\u5c11\u5ba2\u6237\u7aef\u4f7f\u7528\u65f6\u9700\u8981\u7684 REST \u63a5\u53e3\u8c03\u7528\u6b21\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5b9e\u73b0\u65f6\u901a\u8fc7\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\uff08\u4f8b\u5982\u4f7f\u7528\u76f8\u5173\u7684 C++ OLAP \u63a5\u53e3\u4ee5\u53ca\u57fa\u4e8e\u5176\u5b9e\u73b0\u7684\u5185\u7f6e\u7b97\u6cd5\uff09\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u52a0\u901f\u3002","title":"\u7b80\u4ecb"},{"location":"zh-CN/3.developer-document/3.procedure/#_3","text":"\u5728 TuGraph \u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u52a8\u6001\u7684\u52a0\u8f7d\uff0c\u66f4\u65b0\u548c\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b\u3002TuGraph \u652f\u6301 C \u8bed\u8a00\u548c Python \u8bed\u8a00\u7f16\u5199\u7684\u5b58\u50a8\u8fc7\u7a0b\u3002C \u8bed\u8a00\u7f16\u5199\u7684\u5b58\u50a8\u8fc7\u7a0b\u6269\u5c55\u540d\u4e00\u822c\u4e3a.so(Linux/Unix \u7cfb\u7edf\u4e0b)\u6216\u8005.dll(Windows \u7cfb\u7edf\u4e0b)\u3002Python \u5b58\u50a8\u8fc7\u7a0b\u7684\u6269\u5c55\u540d\u4e3a.py\u3002 \u4e24\u79cd\u5b58\u50a8\u8fc7\u7a0b\u662f\u5206\u522b\u7ba1\u7406\u7684\uff0c\u4f46\u4f7f\u7528\u65b9\u5f0f\u662f\u76f8\u540c\u7684\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 REST API \u6216\u8005 RPC \u6765\u7ba1\u7406\u548c\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b\u3002\u4e0b\u9762\u7684\u8bf4\u660e\u4ee5 REST API \u4e3a\u4f8b\uff0c\u76f8\u5e94\u7684 RPC \u8c03\u7528\u65b9\u5f0f\u8be6\u89c1 RPC \u6587\u6863\u3002","title":"\u4f7f\u7528\u8bf4\u660e"},{"location":"zh-CN/3.developer-document/3.procedure/#_4","text":"","title":"\u7f16\u5199\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#c","text":"\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 core API \u6216\u8005 Traversal API \u6765\u7f16\u5199 C \u5b58\u50a8\u8fc7\u7a0b\u3002\u4e00\u4e2a\u7b80\u5355\u7684 C \u5b58\u50a8\u8fc7\u7a0b\u4e3e\u4f8b\u5982\u4e0b\uff1a // age_10.cpp ##include <iostream> ##include \"lgraph.h\" using namespace lgraph_api; extern \"C\" LGAPI bool Process(GraphDB& db, const std::string& request, std::string& response) { auto txn = db.CreateReadTxn(); size_t n = 0; for (auto vit = txn.GetVertexIterator(); vit.IsValid(); vit.Next()) { if (vit.GetLabel() == \"student\") { auto age = vit.GetField(\"age\"); if (!age.is_null() && age.integer() == 10) n++; ## \u7edf\u8ba1\u6240\u6709\u5e74\u9f84\u4e3a10\u7684\u5b66\u751f\u6570\u91cf } } output = std::to_string(n); return true; } \u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u50a8\u8fc7\u7a0b\u7684\u5165\u53e3\u51fd\u6570\u662f Process \u51fd\u6570\uff0c\u5b83\u7684\u53c2\u6570\u6709\u4e09\u4e2a\uff0c\u5206\u522b\u4e3a\uff1a db : \u6570\u636e\u5e93\u5b9e\u4f8b request : \u8f93\u5165\u8bf7\u6c42\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u5b57\u8282\u6570\u7ec4\uff0c\u6216\u8005 JSON \u4e32\u7b49\u5176\u5b83\u4efb\u610f\u683c\u5f0f\u3002 response : \u8f93\u51fa\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e8c\u8fdb\u5236\u6570\u636e\u3002 Process \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5f53\u5b83\u8fd4\u56de true \u7684\u65f6\u5019\uff0c\u8868\u793a\u8be5\u8bf7\u6c42\u987a\u5229\u5b8c\u6210\uff0c\u53cd\u4e4b\u8868\u793a\u8fd9\u4e2a\u5b58\u50a8\u8fc7\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u9519\u8bef\uff0c\u6b64\u65f6\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 response \u6765\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u4ee5\u65b9\u4fbf\u8c03\u8bd5\u3002 C++\u5b58\u50a8\u8fc7\u7a0b\u7f16\u5199\u5b8c\u6bd5\u540e\u9700\u8981\u7f16\u8bd1\u6210\u52a8\u6001\u94fe\u63a5\u5e93\u3002TuGraph \u63d0\u4f9b\u4e86 compile.sh \u811a\u672c\u6765\u5e2e\u52a9\u7528\u6237\u81ea\u52a8\u7f16\u8bd1\u5b58\u50a8\u8fc7\u7a0b\u3002 compile.sh \u811a\u672c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u662f\u8be5\u5b58\u50a8\u8fc7\u7a0b\u7684\u540d\u79f0\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f age_10 \u3002\u7f16\u8bd1\u8c03\u7528\u547d\u4ee4\u884c\u5982\u4e0b\uff1a g++ -fno-gnu-unique -fPIC -g --std=c++14 -I/usr/local/include/lgraph -rdynamic -O3 -fopenmp -o age_10.so age_10.cpp /usr/local/lib64/liblgraph.so -shared \u5982\u679c\u7f16\u8bd1\u987a\u5229\uff0c\u4f1a\u751f\u6210 age_10.so\uff0c\u7136\u540e\u7528\u6237\u5c31\u53ef\u4ee5\u5c06\u5b83\u52a0\u8f7d\u5230\u670d\u52a1\u5668\u4e2d\u4e86\u3002","title":"\u7f16\u5199 C++\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#python","text":"\u4e0e C++\u7c7b\u4f3c\uff0cPython \u5b58\u50a8\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u8c03\u7528 core API\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5982\u4e0b\uff1a def Process(db, input): txn = db.CreateReadTxn() it = txn.GetVertexIterator() n = 0 while it.IsValid(): if it.GetLabel() == 'student' and it['age'] and it['age'] == 10: n = n + 1 it.Next() return (True, str(nv)) Python \u5b58\u50a8\u8fc7\u7a0b\u8fd4\u56de\u7684\u662f\u4e00\u4e2a tuple\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u8be5\u5b58\u50a8\u8fc7\u7a0b\u662f\u5426\u6210\u529f\u6267\u884c\uff1b\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a str \uff0c\u91cc\u9762\u662f\u9700\u8981\u8fd4\u56de\u7684\u7ed3\u679c\u3002 Python \u5b58\u50a8\u8fc7\u7a0b\u4e0d\u9700\u8981\u7f16\u8bd1\uff0c\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d\u3002","title":"\u7f16\u5199 Python \u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#_5","text":"\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 REST API \u548c RPC \u6765\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b\u3002\u4ee5 REST API \u4e3a\u4f8b\uff0c\u52a0\u8f7d age_10.so \u7684 C++\u4ee3\u7801\u5982\u4e0b\uff1a import requests import json import base64 data = {'name':'age_10'} f = open('./age_10.so','rb') content = f.read() data['code_base64'] = base64.b64encode(content).decode() data['description'] = 'Calculate number of students in the age of 10' data['read_only'] = true data['code_type'] = 'so' js = json.dumps(data) r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin', data=js, headers={'Content-Type':'application/json'}) print(r.status_code) ## \u6b63\u5e38\u65f6\u8fd4\u56de200 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u65f6\u7684 data['code'] \u662f\u4e00\u4e2a\u7ecf\u8fc7 base64 \u5904\u7406\u7684\u5b57\u7b26\u4e32\uff0c age_10.so \u4e2d\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u662f\u65e0\u6cd5\u901a\u8fc7 JSON \u76f4\u63a5\u4f20\u8f93\u7684\u3002\u6b64\u5916\uff0c\u5b58\u50a8\u8fc7\u7a0b\u7684\u52a0\u8f7d\u548c\u5220\u9664\u90fd\u53ea\u80fd\u7531\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u6765\u64cd\u4f5c\u3002 \u5b58\u50a8\u8fc7\u7a0b\u52a0\u8f7d\u4e4b\u540e\u4f1a\u88ab\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u5728\u670d\u52a1\u5668\u91cd\u542f\u540e\u4e5f\u4f1a\u88ab\u81ea\u52a8\u52a0\u8f7d\u3002\u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\u5bf9\u5b58\u50a8\u8fc7\u7a0b\u8fdb\u884c\u66f4\u65b0\uff0c\u8c03\u7528\u7684 REST API \u4e5f\u662f\u540c\u6837\u7684\u3002\u5efa\u8bae\u7528\u6237\u5728\u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b\u65f6\u66f4\u65b0\u76f8\u5e94\u63cf\u8ff0\uff0c\u4ee5\u4fbf\u533a\u5206\u4e0d\u540c\u7248\u672c\u7684\u5b58\u50a8\u8fc7\u7a0b\u3002 \u52a0\u8f7d Python \u5b58\u50a8\u8fc7\u7a0b\u7684\u65b9\u6cd5\u4e0e C++\u7c7b\u4f3c\uff0c\u53ea\u662f url \u5730\u5740\u4e0d\u540c\u3002Python \u4ee3\u7801\u540c\u6837\u9700\u8981\u4f7f\u7528 base64 \u5904\u7406\u3002","title":"\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#_6","text":"\u5728\u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u968f\u65f6\u83b7\u53d6\u5b58\u50a8\u8fc7\u7a0b\u5217\u8868\u3002\u5176\u8c03\u7528\u5982\u4e0b\uff1a >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin') >>> r.status_code 200 >>> r.text '{\"plugins\":[{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true}]}'","title":"\u5217\u51fa\u5df2\u52a0\u8f7d\u7684\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#_7","text":"\u5728\u670d\u52a1\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u968f\u65f6\u83b7\u53d6\u5355\u4e2a\u5b58\u50a8\u8fc7\u7a0b\u7684\u8be6\u60c5\uff0c\u5305\u62ec\u4ee3\u7801\u3002\u5176\u8c03\u7528\u5982\u4e0b\uff1a >>> r = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 >>> r.text '{\"description\":\"Calculate number of students in the age of 10\", \"name\":\"age_10\", \"read_only\":true, \"code_base64\":<CODE>, \"code_type\":\"so\"}'","title":"\u83b7\u53d6\u5b58\u50a8\u8fc7\u7a0b\u8be6\u60c5"},{"location":"zh-CN/3.developer-document/3.procedure/#_8","text":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b\u7684\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a >>> r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10', data='', headers={'Content-Type':'application/json'}) >>> r.status_code 200 >>> r.text 9","title":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#_9","text":"\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b\u53ea\u9700\u8981\u5982\u4e0b\u8c03\u7528\uff1a >>> r = requests.delete(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10') >>> r.status_code 200 \u4e0e\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u53ea\u6709\u7ba1\u7406\u5458\u7528\u6237\u624d\u80fd\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b\u3002","title":"\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#_10","text":"\u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b\u9700\u8981\u6267\u884c\u5982\u4e0b\u4e24\u4e2a\u6b65\u9aa4\uff1a \u5220\u9664\u5df2\u5b58\u5728\u7684\u5b58\u50a8\u8fc7\u7a0b \u5b89\u88c5\u65b0\u7684\u5b58\u50a8\u8fc7\u7a0b TuGraph \u8f83\u4e3a\u8c28\u614e\u5730\u7ba1\u7406\u5b58\u50a8\u8fc7\u7a0b\u64cd\u4f5c\u7684\u5e76\u53d1\u6027\uff0c\u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b\u4e0d\u4f1a\u5f71\u54cd\u73b0\u6709\u5b58\u50a8\u8fc7\u7a0b\u7684\u8fd0\u884c\u3002","title":"\u66f4\u65b0\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/3.developer-document/3.procedure/#c-olap","text":"TuGraph \u5f3a\u5927\u7684\u5728\u7ebf\u5206\u6790\u5904\u7406\uff08OLAP\uff09\u80fd\u529b\u662f\u5176\u533a\u522b\u4e8e\u5176\u5b83\u56fe\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u3002 \u501f\u52a9 C++ OLAP API\uff08olap_on_db.h\uff09\uff0c\u7528\u6237\u53ef\u4ee5\u5feb\u901f\u5730\u5bfc\u51fa\u4e00\u4e2a\u9700\u8981\u8fdb\u884c\u590d\u6742\u5206\u6790\u7684\u5b50\u56fe\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8fd0\u884c\u8bf8\u5982 PageRank\u3001\u8fde\u901a\u5206\u91cf\u3001\u793e\u533a\u53d1\u73b0\u7b49\u8fed\u4ee3\u5f0f\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u6700\u540e\u6839\u636e\u7ed3\u679c\u505a\u51fa\u76f8\u5e94\u51b3\u7b56\u3002 \u5bfc\u51fa\u548c\u8ba1\u7b97\u7684\u8fc7\u7a0b\u90fd\u53ef\u4ee5\u901a\u8fc7\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u4ece\u800c\u5b9e\u73b0\u51e0\u4e4e\u5b9e\u65f6\u7684\u5206\u6790\u5904\u7406\uff0c\u907f\u514d\u4e86\u4f20\u7edf\u89e3\u51b3\u65b9\u6848\u9700\u8981\u5c06\u6570\u636e\u5bfc\u51fa\u3001\u8f6c\u6362\u3001\u518d\u5bfc\u5165\uff08ETL\uff09\u5230\u4e13\u95e8\u7684\u5206\u6790\u7cfb\u7edf\u8fdb\u884c\u79bb\u7ebf\u5904\u7406\u7684\u5197\u957f\u6b65\u9aa4\u3002 TuGraph \u5185\u7f6e\u4e86\u5927\u91cf\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5\u548c\u4e30\u5bcc\u7684\u8f85\u52a9\u63a5\u53e3\uff0c\u56e0\u6b64\u7528\u6237\u51e0\u4e4e\u4e0d\u9700\u8981\u81ea\u5df1\u6765\u5b9e\u73b0\u5177\u4f53\u7684\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ea\u9700\u5728\u5b9e\u73b0\u81ea\u5df1\u7684\u5b58\u50a8\u8fc7\u7a0b\u65f6\u5c06\u76f8\u5e94\u7b97\u6cd5\u5e93\u7684\u5934\u6587\u4ef6\uff08.h \u6587\u4ef6\uff09\u5305\u542b\u5230\u81ea\u5df1\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u5728\u7f16\u8bd1\u65f6\u94fe\u63a5\u76f8\u5e94\u7684\u52a8\u6001\u5e93\u6587\u4ef6\uff08.so\uff09\u5373\u53ef\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u7684\u53ea\u6709\u5c06\u9700\u8981\u5206\u6790\u7684\u5b50\u56fe\u62bd\u53d6\u51fa\u6765\u7684\u8fc7\u7a0b\u3002","title":"C++ OLAP \u63a5\u53e3"},{"location":"zh-CN/3.developer-document/3.procedure/#snapshot","text":"C++ OLAP API \u4e2d\u7684 Snapshot \u6a21\u7248\u7c7b\u7528\u4e8e\u8868\u793a\u62bd\u53d6\u51fa\u6765\u7684\u9759\u6001\u5b50\u56fe\uff0c\u5176\u4e2d EdgeData \u7528\u6765\u8868\u793a\u8be5\u5b50\u56fe\u4e0a\u6bcf\u6761\u8fb9\u6240\u7528\u6743\u503c\u7684\u6570\u636e\u7c7b\u578b\uff08\u5982\u679c\u8fb9\u4e0d\u9700\u8981\u6743\u503c\uff0c\u4f7f\u7528 Empty \u4f5c\u4e3a EdgeData \u5373\u53ef\uff09\u3002 \u62bd\u53d6\u7684\u5b50\u56fe\u901a\u8fc7 Snapshot \u7c7b\u7684\u6784\u9020\u51fd\u6570\u6765\u63cf\u8ff0\uff1a Snapshot::Snapshot( GraphDB & db, Transaction & txn, size_t flags = 0, std::function<bool(VertexIterator &)> vertex_filter = nullptr, std::function<bool(OutEdgeIterator &, EdgeData &)> out_edge_filter = nullptr ); \u5176\u4e2d\uff0cdb \u4e3a\u6570\u636e\u5e93\u53e5\u67c4\uff0ctxn \u4e3a\u4e8b\u52a1\u53e5\u67c4\uff0cflags \u4e3a\u751f\u6210\u65f6\u4f7f\u7528\u7684\u9009\u9879\uff0c\u53ef\u9009\u503c\u5305\u62ec\u4ee5\u4e0b\u7684\u7ec4\u5408\uff1aSNAPSHOT_PARALLEL \u8868\u793a\u5bfc\u51fa\u65f6\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5e76\u884c\uff1bSNAPSHOT_UNDIRECTED \u8868\u793a\u9700\u8981\u5c06\u5bfc\u51fa\u7684\u56fe\u53d8\u4e3a\u65e0\u5411\u56fe\u3002 vertex_filter \u662f\u9762\u5411\u9876\u70b9\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4e3a true \u8868\u793a\u8be5\u9876\u70b9\u9700\u8981\u88ab\u5305\u542b\u5230\u5f85\u62bd\u53d6\u7684\u5b50\u56fe\u4e2d\uff0c\u53cd\u4e4b\u5219\u8868\u793a\u9700\u8981\u88ab\u6392\u9664\u3002 out_edge_filter \u662f\u9762\u5411\u8fb9\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4e3a true \u8868\u793a\u8be5\u8fb9\u9700\u8981\u88ab\u5305\u542b\u5230\u5f85\u62bd\u53d6\u7684\u5b50\u56fe\u4e2d\uff0c\u53cd\u4e4b\u5219\u8868\u793a\u9700\u8981\u88ab\u6392\u9664\u3002 \u5f53\u8fc7\u6ee4\u51fd\u6570\u4e3a\u7f3a\u7701\u503c\u65f6\uff0c\u5219\u8868\u793a\u9700\u8981\u5c06\u6240\u6709\u9876\u70b9/\u8fb9\u90fd\u5305\u542b\u8fdb\u6765\u3002 Snapshot \u7c7b\u63d0\u4f9b\u7684\u5176\u5b83\u65b9\u6cd5\u8bf7\u53c2\u8003\u8be6\u7ec6\u7684 C++ API \u6587\u6863\uff08olap_on_db.h\uff09\u3002","title":"Snapshot"},{"location":"zh-CN/3.developer-document/3.procedure/#traversal","text":"\u56fe\u6570\u636e\u5e93\u4e2d\u5341\u5206\u5e38\u89c1\u7684\u4e00\u5927\u7c7b\u5206\u6790\u662f\u57fa\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u9876\u70b9\u51fa\u53d1\uff0c\u9010\u5c42\u5730\u62d3\u5c55\u5e76\u8bbf\u95ee\u90bb\u5c45\u3002 \u5c3d\u7ba1\u8fd9\u7c7b\u5206\u6790\u4e5f\u53ef\u4ee5\u4f7f\u7528 Cypher \u5b8c\u6210\uff0c\u4f46\u662f\u5f53\u8bbf\u95ee\u7684\u5c42\u6570\u8f83\u6df1\u65f6\uff0c\u5176\u6027\u80fd\u4f1a\u53d7\u5230\u4e32\u884c\u89e3\u91ca\u6267\u884c\u7684\u9650\u5236\u3002 \u4f7f\u7528 C++ Core API \u7f16\u5199\u5b58\u50a8\u8fc7\u7a0b\u5c3d\u7ba1\u907f\u514d\u4e86\u89e3\u91ca\u6267\u884c\uff0c\u4f46\u4f9d\u7136\u53d7\u9650\u4e8e\u5355\u4e2a\u7ebf\u7a0b\u7684\u5904\u7406\u80fd\u529b\u3002 \u4e3a\u4e86\u8ba9\u7528\u6237\u80fd\u591f\u65b9\u4fbf\u5730\u901a\u8fc7\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u52a0\u901f\u8fd9\u4e00\u7c7b\u5e94\u7528\u573a\u666f\uff0c\u6211\u4eec\u57fa\u4e8e C++ OLAP API \u5c01\u88c5\u4e86\u4e00\u4e2a Traversal \u6846\u67b6\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5176\u4e2d\u7684 FrontierTraversal \u548c PathTraversal \u7c7b\u6765\u5b8c\u6210\u8fd9\u79cd\u9010\u5c42\u904d\u5386\u7684\u5206\u6790\u4efb\u52a1\uff0c\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u76f8\u5e94\u7684 C++ API \u6587\u6863\uff08lgraph_traversal.h\uff09\u3002 ParallelVector<size_t> FindVertices( GraphDB & db, Transaction & txn, std::function<bool(VertexIterator &)> filter, bool parallel = false ); \u8be5\u65b9\u6cd5\u53ef\u7528\u4e8e\u627e\u5230\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\uff08filter \u8fd4\u56de true\uff09\u7684\u9876\u70b9\uff0c\u5f53 parallel \u4e3a true \u65f6\u5219\u4f1a\u5e76\u884c\u8be5\u67e5\u627e\u8fc7\u7a0b\u3002 template <typename VertexData> ParallelVector<VertexData> ExtractVertexData( GraphDB & db, Transaction & txn, ParallelVector<size_t> & frontier, std::function<void(VertexIterator &, VertexData &)> extract, bool parallel = false ); \u8be5\u65b9\u6cd5\u53ef\u7528\u4e8e\u4ece\u6307\u5b9a\u9876\u70b9\u96c6\uff08frontier\uff09\u4e2d\uff08\u901a\u8fc7 extract \u65b9\u6cd5\uff09\u62bd\u53d6\uff08\u7c7b\u578b\u4e3a VertexData \u7684\uff09\u5c5e\u6027\uff0c\u5f53 parallel \u4e3a true \u65f6\u4f1a\u5e76\u884c\u8be5\u62bd\u53d6\u8fc7\u7a0b\u3002 FrontierTraversal \u9002\u7528\u4e8e\u53ea\u5173\u6ce8\u904d\u5386\u6269\u5c55\u5230\u7684\u9876\u70b9\u96c6\u7684\u60c5\u51b5\uff1b\u5f53\u7528\u6237\u5728\u904d\u5386\u8fc7\u7a0b\u6216\u662f\u7ed3\u679c\u4e2d\u9700\u8981\u8bbf\u95ee\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff08\u8def\u5f84\u4e0a\u7684\u9876\u70b9/\u8fb9\uff09\u65f6\uff0c\u5219\u9700\u8981\u4f7f\u7528 PathTraversal\u3002 \u4e24\u7c7b Traversal \u7684\u6784\u9020\u51fd\u6570\u5747\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u6570\u636e\u5e93\u53e5\u67c4 db\u3001\u4e8b\u52a1\u53e5\u67c4 txn \u548c\u9009\u9879 flags\u3002 \u9009\u9879\u7684\u53ef\u9009\u503c\u5305\u62ec\u4ee5\u4e0b\u7684\u7ec4\u5408\uff1aTRAVERSAL_PARALLEL \u8868\u793a\u904d\u5386\u65f6\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u5e76\u884c\uff1bTRAVERSAL_ALLOW_REVISITS \u8868\u793a\u904d\u5386\u65f6\u5141\u8bb8\u91cd\u590d\u5730\u8bbf\u95ee\u9876\u70b9\uff08PathTraversal \u9690\u542b\u4e86\u8be5\u9009\u9879\uff09\u3002 void SetFrontier(size_t root_vid); void SetFrontier(ParallelVector<size_t> & root_vids); void SetFrontier(std::function<bool(VertexIterator &)> root_vertex_filter); \u4e24\u7c7b Traversal \u8bbe\u7f6e\u904d\u5386\u7684\u8d77\u59cb\u9876\u70b9/\u9876\u70b9\u96c6\u6709\u4e0a\u8ff0\u4e09\u79cd\u65b9\u5f0f\uff0c\u524d\u4e24\u79cd\u901a\u8fc7\u9876\u70b9 ID \u76f4\u63a5\u6307\u5b9a\uff0c\u6700\u540e\u4e00\u79cd\u65b9\u5f0f\u5219\u7c7b\u4f3c\u4e8e FindVertices\u3002 \u4e24\u7c7b Traversal \u7684\u904d\u5386\u90fd\u662f\u4ece\u5f53\u524d\u5c42\u7684\u9876\u70b9\u96c6\u5408\u51fa\u53d1\uff0c\u6839\u636e\u4f7f\u7528\u7684\u6269\u5c55\u51fd\u6570\u8bbf\u95ee\u6bcf\u6761\u51fa\u8fb9/\u5165\u8fb9/\u51fa\u8fb9\u548c\u5165\u8fb9\uff0c\u901a\u8fc7\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u51fd\u6570\u51b3\u5b9a\u6269\u5c55\u662f\u5426\u6210\u529f\uff0c\u82e5\u6210\u529f\u5219\u5c06\u90bb\u5c45\u9876\u70b9/\u8ffd\u52a0\u4e86\u8be5\u6761\u8fb9\u7684\u8def\u5f84\u52a0\u5165\u4e0b\u4e00\u5c42\u7684\u9876\u70b9/\u8def\u5f84\u96c6\u5408\u3002 void ExpandOutEdges( std::function<bool(OutEdgeIterator &)> out_edge_filter = nullptr, std::function<bool(VertexIterator &)> out_neighbour_filter = nullptr ); void ExpandInEdges( std::function<bool(InEdgeIterator &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &)> in_neighbour_filter = nullptr ); void ExpandEdges( std::function<bool(OutEdgeIterator &)> out_edge_filter = nullptr, std::function<bool(InEdgeIterator &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &)> out_neighbour_filter = nullptr, std::function<bool(VertexIterator &)> in_neighbour_filter = nullptr ); \u4e0a\u8ff0\u4e3a FrontierTraversal \u7684\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u5373\u4ece\u5f53\u524d\u7684\u9876\u70b9\u96c6\u5408\u51fa\u53d1\uff0c\u5bf9\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\uff0c\u4f9d\u6b21\u8bbf\u95ee\u6bcf\u6761\u51fa\u8fb9/\u5165\u8fb9/\u51fa\u8fb9\u548c\u5165\u8fb9\uff0c\u82e5\u6ee1\u8db3\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u6761\u4ef6\uff08\u5176\u4e2d\uff0cedge_filter \u4e3a\u9762\u5411\u8fb9\u7684\u8fc7\u6ee4\u51fd\u6570\uff0cneighbour_filter \u5219\u4e3a\u9762\u5411\u90bb\u5c45\u9876\u70b9\u7684\u8fc7\u6ee4\u51fd\u6570\uff09\uff0c\u5219\u5c06\u90bb\u5c45\u9876\u70b9\u52a0\u5165\u65b0\u7684\u9876\u70b9\u96c6\u5408\u3002 ParallelVector<size_t> & GetFrontier(); \u5f53\u524d\u9876\u70b9\u96c6\u5408\u7684\u6269\u5c55\u7ed3\u675f\u540e\uff0c\u65b0\u7684\u9876\u70b9\u96c6\u5408\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u53d6\u5f97\u3002 void ExpandOutEdges( std::function<bool(OutEdgeIterator &, Path &, IteratorHelper &)> out_edge_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> out_neighbour_filter = nullptr ); void ExpandInEdges( std::function<bool(InEdgeIterator &, Path &, IteratorHelper &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> in_neighbour_filter = nullptr ); void ExpandEdges( std::function<bool(OutEdgeIterator &, Path &, IteratorHelper &)> out_edge_filter = nullptr, std::function<bool(InEdgeIterator &, Path &, IteratorHelper &)> in_edge_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> out_neighbour_filter = nullptr, std::function<bool(VertexIterator &, Path &, IteratorHelper &)> in_neighbour_filter = nullptr ); PathTraversal \u7684\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\u4e0e FrontierTraversal \u7c7b\u4f3c\uff0c\u53ea\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u51fd\u6570\u4e2d\u589e\u52a0\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d\uff1aPath \u5305\u542b\u4e86\u5230\u65b0\u6269\u5c55\u7684\u8fd9\u6761\u8fb9\u4e4b\u524d\u7684\u8def\u5f84\uff0cIteratorHelper \u53ef\u7528\u4e8e\u5c06\u8def\u5f84\u4e2d\u7684\u9876\u70b9/\u8fb9\u8f6c\u4e3a\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\uff0c\u76f8\u5173\u6587\u6863\u53ef\u53c2\u8003\u5bf9\u5e94\u7684 C++ API \u6587\u6863\u3002","title":"Traversal"},{"location":"zh-CN/3.developer-document/3.procedure/#procedure-api","text":"TuGraph-Python-Procedure-API [\u6587\u6863\u4e0b\u8f7d] TuGraph-CPP-Procedure-API [\u6587\u6863\u4e0b\u8f7d]","title":"Procedure-api \u6587\u6863"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/","text":"\u5f15\u5bfc\u7a0b\u5e8f \u672c\u6587\u6863\u662f\u4e3a TuGraph \u7684\u7528\u6237\u8bbe\u8ba1\u7684\u5f15\u5bfc\u7a0b\u5e8f\uff0c\u7528\u6237\u5728\u9605\u8bfb\u8be6\u7ec6\u7684\u6587\u6863\u4e4b\u524d\uff0c\u5e94\u8be5\u9996\u5148\u9605\u8bfb\u8be5\u6587\u6863\uff0c\u5bf9 TuGraph \u7684\u56fe\u8ba1\u7b97\u8fd0\u884c\u6d41\u7a0b\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\uff0c\u4e4b\u540e\u518d\u9605\u8bfb\u8be6\u7ec6\u6587\u6863\u4f1a\u66f4\u52a0\u65b9\u4fbf\u3002\u5f15\u5bfc\u7a0b\u5e8f\u662f\u57fa\u4e8e Tugraph \u7684\u4e00\u4e2a\u7b80\u5355\u7684 bfs(\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22) \u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5176\u4f7f\u7528\u65b9\u5f0f\u3002 \u76ee\u5f55 1. TuGraph-\u56fe\u5206\u6790\u5f15\u64ce\u4ecb\u7ecd 2. Procedure \u7f16\u8bd1\u4e0e\u8fd0\u884c 3. Embed \u7f16\u8bd1\u53ca\u8fd0\u884c 4. Standalone \u7f16\u8bd1\u4e0e\u8fd0\u884c 1. TuGraph-\u56fe\u5206\u6790\u5f15\u64ce\u4ecb\u7ecd TuGraph\u7684\u56fe\u5206\u6790\u5f15\u64ce\uff0c\u9762\u5411\u7684\u573a\u666f\u4e3b\u8981\u662f\u5168\u56fe/\u5168\u91cf\u6570\u636e\u5206\u6790\u7c7b\u7684\u4efb\u52a1\u3002\u501f\u52a9TuGraph\u7684 C++ / Python \u56fe\u5206\u6790\u5f15\u64ce API \uff0c\u7528\u6237\u53ef\u4ee5\u5bf9\u4e0d\u540c\u6570\u636e\u6765\u6e90\u7684\u56fe\u6570\u636e\u5feb\u901f\u5bfc\u51fa\u4e00\u4e2a\u5f85\u5904\u7406\u7684\u590d\u6742\u5b50\u56fe\uff0c\u7136\u540e\u5728\u8be5\u5b50\u56fe\u4e0a\u8fd0\u884c\u8bf8\u5982PageRank\u3001LPA\u3001WCC\u7b49\u8fed\u4ee3\u5f0f\u56fe\u7b97\u6cd5\uff0c\u6700\u540e\u6839\u636e\u8fd0\u884c\u7ed3\u679c\u505a\u51fa\u76f8\u5e94\u7684\u5bf9\u7b56\u3002 \u5728TuGraph\u4e2d\uff0c\u5bfc\u51fa\u548c\u8ba1\u7b97\u8fc7\u7a0b\u5747\u53ef\u4ee5\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u4ece\u800c\u8fbe\u5230\u8fd1\u4e4e\u5b9e\u65f6\u7684\u5904\u7406\u5206\u6790\uff0c\u548c\u4f20\u7edf\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5373\u907f\u514d\u4e86\u6570\u636e\u5bfc\u51fa\u843d\u76d8\u7684\u5f00\u9500\uff0c\u53c8\u80fd\u4f7f\u7528\u7d27\u51d1\u7684\u56fe\u6570\u636e\u7ed3\u6784\u83b7\u5f97\u8ba1\u7b97\u7684\u7406\u60f3\u6027\u80fd\u3002 TuGraph\u56fe\u8ba1\u7b97\u7cfb\u7edf\u793e\u533a\u7248\u5185\u7f6e6\u4e2a\u7b97\u6cd5\uff0c\u5546\u4e1a\u7248\u5185\u7f6e\u4e8625\u79cd\u7b97\u6cd5\uff0c\u7528\u6237\u51e0\u4e4e\u4e0d\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u5177\u4f53\u7684\u56fe\u8ba1\u7b97\u8fc7\u7a0b\u3002\u5176\u8be6\u7ec6\u4ecb\u7ecd\u53ef\u53c2\u8003algorithms.md\u3002 \u6839\u636e\u6570\u636e\u6765\u6e90\u53ca\u5b9e\u73b0\u4e0d\u540c\uff0c\u53ef\u5206\u4e3aProcedure\u3001Embed\u548cStandalone\u4e09\u79cd\u8fd0\u884c\u65b9\u5f0f\uff0c\u5747\u7ee7\u627f\u4e8eOlapBase API\uff0cOlapBase API\u63a5\u53e3\u6587\u6863\u53ef\u53c2\u8003olapbase-api.md\u3002 \u5176\u4e2dProcedure\u548cEmbed\u7684\u6570\u636e\u6765\u6e90\u662f\u56fe\u6570\u636e\u5e93\u4e2d\u9884\u52a0\u8f7d\u7684db\u6570\u636e\uff0c\u53ef\u4ee5\u5206\u522b\u7f16\u8bd1\u751f\u6210TuGraph-Web\u52a0\u8f7d\u4f7f\u7528\u7684.so\u6587\u4ef6\u548c\u540e\u53f0\u7ec8\u7aef\u4f7f\u7528\u7684embed\u6587\u4ef6\uff0c\u8f93\u5165\u7684\u56fe\u6570\u636e\u5747\u901a\u8fc7db\u7684\u52a0\u8f7d\u5f62\u5f0f\uff0c\u5176\u63a5\u53e3\u6587\u6863\u53ef\u53c2\u8003olapondb-api.md\u3002 Standalone\u7528\u4e8e\u7f16\u8bd1\u751f\u6210standalone\u6587\u4ef6\uff0c\u533a\u522b\u4e8e\u524d\u8005\uff0c\u8be5\u6587\u4ef6\u7684\u8f93\u5165\u56fe\u6570\u636e\u901a\u8fc7txt\u3001\u4e8c\u8fdb\u5236\u3001ODPS\u6587\u4ef6\u7684\u5f62\u5f0f\u52a0\u8f7d\uff0c\u5176\u63a5\u53e3\u6587\u6863\u53ef\u53c2\u8003olapondisk-api.md\u3002 2. Procedure \u7f16\u8bd1\u4e0e\u8fd0\u884c \u8be5\u79cd\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8eTuGraph-web\u754c\u9762\u8fdb\u884c\u53ef\u89c6\u5316\u52a0\u8f7d\u53ca\u8fd0\u884c\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a C++: \u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u6267\u884c bash make_so.sh bfs \u5373\u53ef\u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u5f97\u5230bfs.so\u6587\u4ef6\uff0c\u5c06\u8be5\u6587\u4ef6\u4ee5\u63d2\u4ef6\u5f62\u5f0f\u4e0a\u4f20\u81f3TuGraph-web\uff0c\u8f93\u5165\u53c2\u6570\u540e\u5373\u53ef\u6267\u884c\u3002 Python: \u5728TuGraph-web\u7684\u524d\u7aef\u5c06python\u6587\u4ef6\u4ee5\u63d2\u4ef6\u5f62\u5f0f\u4e0a\u4f20\uff0c\u8f93\u5165\u53c2\u6570\u540e\u5373\u53ef\u6267\u884c\u3002 \u793a\u4f8b\uff1a \u5728TuGraph/plugins\u7f16\u8bd1.so\u7b97\u6cd5\u6587\u4ef6 bash make_so.sh bfs \u5c06bfs.so\uff08\u6216TuGraph/plugins/cython/bfs.py\uff09\u6587\u4ef6\u4ee5\u63d2\u4ef6\u5f62\u5f0f\u52a0\u8f7d\u81f3TuGraph-web\u540e\uff0c\u8f93\u5165\u5982\u4e0bjson\u53c2\u6570\uff1a { \"root_id\":\"0\", \"label\":\"node\", \"field\":\"id\" } \u5373\u53ef\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u5982\u4e0b\u3002 result:\"{\"core_cost\":0.013641119003295898, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":8.821487426757813e-06, \"prepare_cost\":0.03479194641113281, \"total_cost\":0.04844188690185547}\" \u8f93\u51fa\u5185\u5bb9\u89e3\u91ca\u5982\u4e0b\uff1a - num_edges: \u8868\u793a\u8be5\u56fe\u6570\u636e\u7684\u8fb9\u6570\u91cf - num_vertices: \u8868\u793a\u8be5\u56fe\u6570\u636e\u9876\u70b9\u7684\u6570\u91cf - prepare_cost: \u8868\u793a\u9884\u5904\u7406\u9636\u6bb5\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002\u9884\u5904\u7406\u9636\u6bb5\u7684\u5de5\u4f5c\uff1a\u52a0\u8f7d\u53c2\u6570\u3001\u56fe\u6570\u636e\u52a0\u8f7d\u3001\u7d22\u5f15\u521d\u59cb\u5316\u7b49\u3002 - core_cost: \u8868\u793a\u7b97\u6cd5\u8fd0\u884c\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002 - found_vertices: \u8868\u793a\u67e5\u627e\u5230\u9876\u70b9\u7684\u4e2a\u6570\u3002 - output_cost: \u8868\u793a\u7b97\u6cd5\u7ed3\u679c\u5199\u56dedb\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002 - total_cost: \u8868\u793a\u6267\u884c\u8be5\u7b97\u6cd5\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u3002 make_so.sh\u6587\u4ef6\u4ecb\u7ecd\uff1a\u8be5\u6587\u4ef6\u7528\u4e8e\u5c06TuGraph-OLAP\u6240\u6d89\u53ca\u5230\u7684\u56fe\u7b97\u6cd5\u6587\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u53ef\u4f9bTuGraph-web\u4f7f\u7528\u7684.so\u6587\u4ef6\u3002 3. Embed \u7f16\u8bd1\u53ca\u8fd0\u884c \u8be5\u79cd\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8eTuGraph\u5728\u540e\u53f0\u7a0b\u5e8f\u4e2d\u5bf9\u9884\u52a0\u8f7d\u7684db\u56fe\u6570\u636e\u8fdb\u884c\u7b97\u6cd5\u5206\u6790\u3002\u5176\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u5bf9embed_main.cpp\u6587\u4ef6\u5b8c\u5584\uff0c\u8865\u5145\u6570\u636e\u540d\u79f0\u3001\u8f93\u5165\u53c2\u6570\u3001\u6570\u636e\u8def\u5f84\u7b49\u4fe1\u606f\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a C++: #include <iostream> #include \"lgraph/lgraph.h\" #include \"lgraph/olap_base.h\" using namespace std; extern \"C\" bool Process(lgraph_api::GraphDB &db, const std::string &request, std::string &response); int main(int argc, char **argv) { // db_path\u8868\u793a\u9884\u52a0\u8f7d\u56fe\u6570\u636e\u5b58\u653e\u7684\u8def\u5f84 std::string db_path = \"../fb_db/\"; if (argc > 1) db_path = argv[1]; lgraph_api::Galaxy g(db_path); g.SetCurrentUser(\"admin\", \"73@TuGraph\"); // \u6307\u5b9a\u56fe\u6570\u636e\u7684\u540d\u79f0 lgraph_api::GraphDB db = g.OpenGraph(\"fb_db\"); std::string resp; // \u4ee5json\u5f62\u5f0f\u8f93\u5165\u7b97\u6cd5\u53c2\u6570 bool r = Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\", resp); cout << r << endl; cout << resp << endl; return 0; } \u4fdd\u5b58\u540e\u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u6267\u884c bash make_so.sh bfs \u5373\u53ef\u5728TuGraph/plugins/cpp\u76ee\u5f55\u4e0b\u7684\u5230bfs_procedure\u6587\u4ef6\uff0c bash make_embed.sh bfs \u5728TuGraph/plugins\u6587\u4ef6\u5939\u4e0b\u6267\u884c ./cpp/bfs_procedure \u5373\u53ef\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u3002 Input: {\"root_id\":\"0\", \"label\":\"node\",\"field\":\"id\"} found_vertices = 3829 {\"core_cost\":0.025603055953979492, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":9.059906005859375e-06, \"prepare_cost\":0.056738853454589844, \"total_cost\":0.0823509693145752} \u5176\u4e2dInput\u8868\u793a\u8f93\u5165\u7684\u53c2\u6570\uff0c\u5176\u4f59\u53c2\u6570\u89e3\u91ca\u540c\u4e0a\u3002 Python\uff1a \u5728TuGraph/plugins\u6587\u4ef6\u5939\u4e0b\u6267\u884c bash make_cython_so.sh bfs \u6216\u5728TuGraph/plugins/cython\u6587\u4ef6\u5939\u4e0b\u6267\u884c python3 setup.py build_ext -i \u5f97\u5230bfs.so\u540e\uff0c\u5728Python\u4e2dimport bfs\u53ef\u4f7f\u7528\uff0c\u5982TuGraph/plugins/embed_main.py\u6240\u793a # TuGraph/plugins/embed_main.py from lgraph_db_python import * import bfs as python_plugin if __name__ == \"__main__\": galaxy = PyGalaxy(\"../build/output/lgraph_db\") galaxy.SetCurrentUser(\"admin\", \"73@TuGraph\") db = galaxy.OpenGraph(\"default\", False) res = python_plugin.Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\".encode('utf-8')) print(res) del db del galaxy # shell python3 embed_main.py \u8f93\u51fa\u7ed3\u679c\u4e0eC++\u76f8\u540c\u3002 4. Standalone \u7f16\u8bd1\u4e0e\u8fd0\u884c \u8be5\u6587\u4ef6\u4e3b\u8981\u7528\u4e8e\u5728\u7ec8\u7aef\u5904\u76f4\u63a5\u52a0\u8f7d\u56fe\u6570\u636e\uff0c\u5e76\u8fd0\u884c\u6253\u5370\u8f93\u51fa\u7ed3\u679c\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u5728TuGraph/build\u76ee\u5f55\u4e0b\u6267\u884c make bfs_standalone (\u9700\u8981\u5728g++\u9ed8\u8ba4include\u8def\u5f84\u4e2d\u5305\u542bboost/sort/sort.hpp)\u5373\u53ef\u5f97\u5230bfs_standalone\u6587\u4ef6,\u8be5\u6587\u4ef6\u751f\u6210\u4e8eTuGraph/build/output/algo\u6587\u4ef6\u5939\u4e0b\u3002 \u8fd0\u884c\uff1a\u5728TuGraph/build\u76ee\u5f55\u4e0b\u6267\u884c./output/algo/bfs_standalone -\u2013type [type] \u2013-input_dir [input_dir] --id_mapping [id_mapping] -\u2013vertices [vertices] --root [root] \u2013-output_dir [output_dir] \u5373\u53ef\u8fd0\u884c\u3002 - [type] \uff1a\u8868\u793a\u8f93\u5165\u56fe\u6587\u4ef6\u7684\u7c7b\u578b\u6765\u6e90\uff0c\u5305\u542btext\u6587\u672c\u6587\u4ef6\u3001BINARY_FILE\u4e8c\u8fdb\u5236\u6587\u4ef6\u548cODPS\u6e90\u3002 - [input_dir] \uff1a\u8868\u793a\u8f93\u5165\u56fe\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u6587\u4ef6\u5939\u4e0b\u53ef\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u6587\u4ef6\u3002TuGraph\u5728\u8bfb\u53d6\u8f93\u5165\u6587\u4ef6\u65f6\u4f1a\u8bfb\u53d6[input_dir]\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u8981\u6c42[input_dir]\u4e0b\u53ea\u80fd\u5305\u542b\u8f93\u5165\u6587\u4ef6\uff0c\u4e0d\u80fd\u5305\u542b\u5176\u5b83\u6587\u4ef6\u3002\u53c2\u6570\u4e0d\u53ef\u7701\u7565\u3002 - [id_mapping] \uff1a\u5f53\u8bfb\u5165\u8fb9\u8868\u65f6\uff0c\u662f\u5426\u5bf9\u8f93\u5165\u6570\u636e\u505aid\u6620\u5c04\uff0c\u4f7f\u8fbe\u5230\u7b26\u5408\u7b97\u6cd5\u8fd0\u884c\u7684\u5f62\u5f0f\u30021\u4e3a\u9700\u8981\u505aid\u6620\u5c04\uff0c0\u4e3a\u4e0d\u9700\u8981\u505a\u3002\u8be5\u8fc7\u7a0b\u4f1a\u6d88\u8017\u4e00\u5b9a\u65f6\u95f4\u3002\u53c2\u6570\u53ef\u7701\u7565\uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002 - [vertices] \uff1a\u8868\u793a\u56fe\u7684\u9876\u70b9\u4e2a\u6570\uff0c\u4e3a0\u65f6\u8868\u793a\u7528\u6237\u5e0c\u671b\u7cfb\u7edf\u81ea\u52a8\u8bc6\u522b\u9876\u70b9\u6570\u91cf\uff1b\u4e3a\u975e\u96f6\u503c\u65f6\u8868\u793a\u7528\u6237\u5e0c\u671b\u81ea\u5b9a\u4e49\u9876\u70b9\u4e2a\u6570\uff0c\u8981\u6c42\u7528\u6237\u81ea\u5b9a\u4e49\u9876\u70b9\u4e2a\u6570\u9700\u5927\u4e8e\u6700\u5927\u7684\u9876\u70b9ID\u3002\u53c2\u6570\u53ef\u7701\u7565\uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002 - [root] \uff1a\u8868\u793a\u8fdb\u884cbfs\u7684\u8d77\u59cb\u9876\u70b9id\u3002\u53c2\u6570\u4e0d\u53ef\u7701\u7565\u3002 - [output_dir] \uff1a\u8868\u793a\u8f93\u51fa\u6570\u636e\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u5c06\u8f93\u51fa\u5185\u5bb9\u4fdd\u5b58\u81f3\u8be5\u6587\u4ef6\u4e2d\uff0c\u53c2\u6570\u4e0d\u53ef\u7701\u7565\u3002 \u793a\u4f8b\uff1a C++: \u5728TuGraph/build\u7f16\u8bd1standalone\u7b97\u6cd5\u7a0b\u5e8f make bfs_standalone \u5728TuGraph/build/output\u76ee\u5f55\u4e0b\u8fd0\u884ctext\u6e90\u6587\u4ef6 ./output/algo/bfs_standalone --type text --input_dir ../test/integration/data/algo/fb_unweighted --root 0 \u5f97\u5230\u8fd0\u884c\u7ed3\u679c\uff1a prepare_cost = 0.10(s) core_cost = 0.02(s) found_vertices = 3829 output_cost = 0.00(s) total_cost = 0.11(s) DONE. \u7ed3\u679c\u53c2\u6570\u89e3\u91ca\u540c\u4e0a\u3002 \u5bf9\u4e8e\u65b0\u7684\u7b97\u6cd5\uff0c\u8fd0\u884c\u65f6\u4e0d\u4e86\u89e3\u8be5\u7b97\u6cd5\u7684\u6240\u9700\u53c2\u6570\u65f6\uff0c\u53ef\u901a\u8fc7 ./output/algo/bfs_standalone -h \u8fdb\u884c\u67e5\u9605\u5bf9\u5e94\u53c2\u6570\u3002 Python: Python\u8bed\u8a00\u7684bfs\u62d3\u5c55\u7f16\u8bd1\u8fc7\u7a0b\u4e0eembed\u6a21\u5f0f\u65e0\u533a\u522b\uff0c\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 Standalone \u63a5\u53e3\u8c03\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a # TuGraph/plugins/standalone_main.py import bfs as python_plugin if __name__ == \"__main__\": python_plugin.Standalone(input_dir= \"../test/integration/data/algo/fb_unweighted\", root=0) # shell python3 standalone_main.py \u81f3\u6b64\uff0c\u901a\u8fc7TuGraph\u5bf9\u4e0a\u56fe\u8fdb\u884cbfs\u8fd0\u7b97\u7684\u8fc7\u7a0b\u5df2\u7ecf\u5b8c\u6210\u3002","title":"\u6559\u7a0b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#_1","text":"\u672c\u6587\u6863\u662f\u4e3a TuGraph \u7684\u7528\u6237\u8bbe\u8ba1\u7684\u5f15\u5bfc\u7a0b\u5e8f\uff0c\u7528\u6237\u5728\u9605\u8bfb\u8be6\u7ec6\u7684\u6587\u6863\u4e4b\u524d\uff0c\u5e94\u8be5\u9996\u5148\u9605\u8bfb\u8be5\u6587\u6863\uff0c\u5bf9 TuGraph \u7684\u56fe\u8ba1\u7b97\u8fd0\u884c\u6d41\u7a0b\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\uff0c\u4e4b\u540e\u518d\u9605\u8bfb\u8be6\u7ec6\u6587\u6863\u4f1a\u66f4\u52a0\u65b9\u4fbf\u3002\u5f15\u5bfc\u7a0b\u5e8f\u662f\u57fa\u4e8e Tugraph \u7684\u4e00\u4e2a\u7b80\u5355\u7684 bfs(\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22) \u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5176\u4f7f\u7528\u65b9\u5f0f\u3002","title":"\u5f15\u5bfc\u7a0b\u5e8f"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#_2","text":"1. TuGraph-\u56fe\u5206\u6790\u5f15\u64ce\u4ecb\u7ecd 2. Procedure \u7f16\u8bd1\u4e0e\u8fd0\u884c 3. Embed \u7f16\u8bd1\u53ca\u8fd0\u884c 4. Standalone \u7f16\u8bd1\u4e0e\u8fd0\u884c","title":"\u76ee\u5f55"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#1-tugraph-","text":"TuGraph\u7684\u56fe\u5206\u6790\u5f15\u64ce\uff0c\u9762\u5411\u7684\u573a\u666f\u4e3b\u8981\u662f\u5168\u56fe/\u5168\u91cf\u6570\u636e\u5206\u6790\u7c7b\u7684\u4efb\u52a1\u3002\u501f\u52a9TuGraph\u7684 C++ / Python \u56fe\u5206\u6790\u5f15\u64ce API \uff0c\u7528\u6237\u53ef\u4ee5\u5bf9\u4e0d\u540c\u6570\u636e\u6765\u6e90\u7684\u56fe\u6570\u636e\u5feb\u901f\u5bfc\u51fa\u4e00\u4e2a\u5f85\u5904\u7406\u7684\u590d\u6742\u5b50\u56fe\uff0c\u7136\u540e\u5728\u8be5\u5b50\u56fe\u4e0a\u8fd0\u884c\u8bf8\u5982PageRank\u3001LPA\u3001WCC\u7b49\u8fed\u4ee3\u5f0f\u56fe\u7b97\u6cd5\uff0c\u6700\u540e\u6839\u636e\u8fd0\u884c\u7ed3\u679c\u505a\u51fa\u76f8\u5e94\u7684\u5bf9\u7b56\u3002 \u5728TuGraph\u4e2d\uff0c\u5bfc\u51fa\u548c\u8ba1\u7b97\u8fc7\u7a0b\u5747\u53ef\u4ee5\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u4ece\u800c\u8fbe\u5230\u8fd1\u4e4e\u5b9e\u65f6\u7684\u5904\u7406\u5206\u6790\uff0c\u548c\u4f20\u7edf\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5373\u907f\u514d\u4e86\u6570\u636e\u5bfc\u51fa\u843d\u76d8\u7684\u5f00\u9500\uff0c\u53c8\u80fd\u4f7f\u7528\u7d27\u51d1\u7684\u56fe\u6570\u636e\u7ed3\u6784\u83b7\u5f97\u8ba1\u7b97\u7684\u7406\u60f3\u6027\u80fd\u3002 TuGraph\u56fe\u8ba1\u7b97\u7cfb\u7edf\u793e\u533a\u7248\u5185\u7f6e6\u4e2a\u7b97\u6cd5\uff0c\u5546\u4e1a\u7248\u5185\u7f6e\u4e8625\u79cd\u7b97\u6cd5\uff0c\u7528\u6237\u51e0\u4e4e\u4e0d\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u5177\u4f53\u7684\u56fe\u8ba1\u7b97\u8fc7\u7a0b\u3002\u5176\u8be6\u7ec6\u4ecb\u7ecd\u53ef\u53c2\u8003algorithms.md\u3002 \u6839\u636e\u6570\u636e\u6765\u6e90\u53ca\u5b9e\u73b0\u4e0d\u540c\uff0c\u53ef\u5206\u4e3aProcedure\u3001Embed\u548cStandalone\u4e09\u79cd\u8fd0\u884c\u65b9\u5f0f\uff0c\u5747\u7ee7\u627f\u4e8eOlapBase API\uff0cOlapBase API\u63a5\u53e3\u6587\u6863\u53ef\u53c2\u8003olapbase-api.md\u3002 \u5176\u4e2dProcedure\u548cEmbed\u7684\u6570\u636e\u6765\u6e90\u662f\u56fe\u6570\u636e\u5e93\u4e2d\u9884\u52a0\u8f7d\u7684db\u6570\u636e\uff0c\u53ef\u4ee5\u5206\u522b\u7f16\u8bd1\u751f\u6210TuGraph-Web\u52a0\u8f7d\u4f7f\u7528\u7684.so\u6587\u4ef6\u548c\u540e\u53f0\u7ec8\u7aef\u4f7f\u7528\u7684embed\u6587\u4ef6\uff0c\u8f93\u5165\u7684\u56fe\u6570\u636e\u5747\u901a\u8fc7db\u7684\u52a0\u8f7d\u5f62\u5f0f\uff0c\u5176\u63a5\u53e3\u6587\u6863\u53ef\u53c2\u8003olapondb-api.md\u3002 Standalone\u7528\u4e8e\u7f16\u8bd1\u751f\u6210standalone\u6587\u4ef6\uff0c\u533a\u522b\u4e8e\u524d\u8005\uff0c\u8be5\u6587\u4ef6\u7684\u8f93\u5165\u56fe\u6570\u636e\u901a\u8fc7txt\u3001\u4e8c\u8fdb\u5236\u3001ODPS\u6587\u4ef6\u7684\u5f62\u5f0f\u52a0\u8f7d\uff0c\u5176\u63a5\u53e3\u6587\u6863\u53ef\u53c2\u8003olapondisk-api.md\u3002","title":"1. TuGraph-\u56fe\u5206\u6790\u5f15\u64ce\u4ecb\u7ecd"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#2-procedure","text":"\u8be5\u79cd\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8eTuGraph-web\u754c\u9762\u8fdb\u884c\u53ef\u89c6\u5316\u52a0\u8f7d\u53ca\u8fd0\u884c\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a","title":"2. Procedure \u7f16\u8bd1\u4e0e\u8fd0\u884c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#c","text":"\u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u6267\u884c bash make_so.sh bfs \u5373\u53ef\u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u5f97\u5230bfs.so\u6587\u4ef6\uff0c\u5c06\u8be5\u6587\u4ef6\u4ee5\u63d2\u4ef6\u5f62\u5f0f\u4e0a\u4f20\u81f3TuGraph-web\uff0c\u8f93\u5165\u53c2\u6570\u540e\u5373\u53ef\u6267\u884c\u3002","title":"C++:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#python","text":"\u5728TuGraph-web\u7684\u524d\u7aef\u5c06python\u6587\u4ef6\u4ee5\u63d2\u4ef6\u5f62\u5f0f\u4e0a\u4f20\uff0c\u8f93\u5165\u53c2\u6570\u540e\u5373\u53ef\u6267\u884c\u3002 \u793a\u4f8b\uff1a \u5728TuGraph/plugins\u7f16\u8bd1.so\u7b97\u6cd5\u6587\u4ef6 bash make_so.sh bfs \u5c06bfs.so\uff08\u6216TuGraph/plugins/cython/bfs.py\uff09\u6587\u4ef6\u4ee5\u63d2\u4ef6\u5f62\u5f0f\u52a0\u8f7d\u81f3TuGraph-web\u540e\uff0c\u8f93\u5165\u5982\u4e0bjson\u53c2\u6570\uff1a { \"root_id\":\"0\", \"label\":\"node\", \"field\":\"id\" } \u5373\u53ef\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u5982\u4e0b\u3002 result:\"{\"core_cost\":0.013641119003295898, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":8.821487426757813e-06, \"prepare_cost\":0.03479194641113281, \"total_cost\":0.04844188690185547}\" \u8f93\u51fa\u5185\u5bb9\u89e3\u91ca\u5982\u4e0b\uff1a - num_edges: \u8868\u793a\u8be5\u56fe\u6570\u636e\u7684\u8fb9\u6570\u91cf - num_vertices: \u8868\u793a\u8be5\u56fe\u6570\u636e\u9876\u70b9\u7684\u6570\u91cf - prepare_cost: \u8868\u793a\u9884\u5904\u7406\u9636\u6bb5\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002\u9884\u5904\u7406\u9636\u6bb5\u7684\u5de5\u4f5c\uff1a\u52a0\u8f7d\u53c2\u6570\u3001\u56fe\u6570\u636e\u52a0\u8f7d\u3001\u7d22\u5f15\u521d\u59cb\u5316\u7b49\u3002 - core_cost: \u8868\u793a\u7b97\u6cd5\u8fd0\u884c\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002 - found_vertices: \u8868\u793a\u67e5\u627e\u5230\u9876\u70b9\u7684\u4e2a\u6570\u3002 - output_cost: \u8868\u793a\u7b97\u6cd5\u7ed3\u679c\u5199\u56dedb\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002 - total_cost: \u8868\u793a\u6267\u884c\u8be5\u7b97\u6cd5\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u3002 make_so.sh\u6587\u4ef6\u4ecb\u7ecd\uff1a\u8be5\u6587\u4ef6\u7528\u4e8e\u5c06TuGraph-OLAP\u6240\u6d89\u53ca\u5230\u7684\u56fe\u7b97\u6cd5\u6587\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u53ef\u4f9bTuGraph-web\u4f7f\u7528\u7684.so\u6587\u4ef6\u3002","title":"Python:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#3-embed","text":"\u8be5\u79cd\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8eTuGraph\u5728\u540e\u53f0\u7a0b\u5e8f\u4e2d\u5bf9\u9884\u52a0\u8f7d\u7684db\u56fe\u6570\u636e\u8fdb\u884c\u7b97\u6cd5\u5206\u6790\u3002\u5176\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u5bf9embed_main.cpp\u6587\u4ef6\u5b8c\u5584\uff0c\u8865\u5145\u6570\u636e\u540d\u79f0\u3001\u8f93\u5165\u53c2\u6570\u3001\u6570\u636e\u8def\u5f84\u7b49\u4fe1\u606f\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a","title":"3. Embed \u7f16\u8bd1\u53ca\u8fd0\u884c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#c_1","text":"#include <iostream> #include \"lgraph/lgraph.h\" #include \"lgraph/olap_base.h\" using namespace std; extern \"C\" bool Process(lgraph_api::GraphDB &db, const std::string &request, std::string &response); int main(int argc, char **argv) { // db_path\u8868\u793a\u9884\u52a0\u8f7d\u56fe\u6570\u636e\u5b58\u653e\u7684\u8def\u5f84 std::string db_path = \"../fb_db/\"; if (argc > 1) db_path = argv[1]; lgraph_api::Galaxy g(db_path); g.SetCurrentUser(\"admin\", \"73@TuGraph\"); // \u6307\u5b9a\u56fe\u6570\u636e\u7684\u540d\u79f0 lgraph_api::GraphDB db = g.OpenGraph(\"fb_db\"); std::string resp; // \u4ee5json\u5f62\u5f0f\u8f93\u5165\u7b97\u6cd5\u53c2\u6570 bool r = Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\", resp); cout << r << endl; cout << resp << endl; return 0; } \u4fdd\u5b58\u540e\u5728TuGraph/plugins\u76ee\u5f55\u4e0b\u6267\u884c bash make_so.sh bfs \u5373\u53ef\u5728TuGraph/plugins/cpp\u76ee\u5f55\u4e0b\u7684\u5230bfs_procedure\u6587\u4ef6\uff0c bash make_embed.sh bfs \u5728TuGraph/plugins\u6587\u4ef6\u5939\u4e0b\u6267\u884c ./cpp/bfs_procedure \u5373\u53ef\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u3002 Input: {\"root_id\":\"0\", \"label\":\"node\",\"field\":\"id\"} found_vertices = 3829 {\"core_cost\":0.025603055953979492, \"found_vertices\":3829, \"num_edges\":88234, \"num_vertices\":4039, \"output_cost\":9.059906005859375e-06, \"prepare_cost\":0.056738853454589844, \"total_cost\":0.0823509693145752} \u5176\u4e2dInput\u8868\u793a\u8f93\u5165\u7684\u53c2\u6570\uff0c\u5176\u4f59\u53c2\u6570\u89e3\u91ca\u540c\u4e0a\u3002","title":"C++:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#python_1","text":"\u5728TuGraph/plugins\u6587\u4ef6\u5939\u4e0b\u6267\u884c bash make_cython_so.sh bfs \u6216\u5728TuGraph/plugins/cython\u6587\u4ef6\u5939\u4e0b\u6267\u884c python3 setup.py build_ext -i \u5f97\u5230bfs.so\u540e\uff0c\u5728Python\u4e2dimport bfs\u53ef\u4f7f\u7528\uff0c\u5982TuGraph/plugins/embed_main.py\u6240\u793a # TuGraph/plugins/embed_main.py from lgraph_db_python import * import bfs as python_plugin if __name__ == \"__main__\": galaxy = PyGalaxy(\"../build/output/lgraph_db\") galaxy.SetCurrentUser(\"admin\", \"73@TuGraph\") db = galaxy.OpenGraph(\"default\", False) res = python_plugin.Process(db, \"{\\\"root_id\\\":\\\"0\\\", \\\"label\\\":\\\"node\\\",\\\"field\\\":\\\"id\\\"}\".encode('utf-8')) print(res) del db del galaxy # shell python3 embed_main.py \u8f93\u51fa\u7ed3\u679c\u4e0eC++\u76f8\u540c\u3002","title":"Python\uff1a"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#4-standalone","text":"\u8be5\u6587\u4ef6\u4e3b\u8981\u7528\u4e8e\u5728\u7ec8\u7aef\u5904\u76f4\u63a5\u52a0\u8f7d\u56fe\u6570\u636e\uff0c\u5e76\u8fd0\u884c\u6253\u5370\u8f93\u51fa\u7ed3\u679c\u3002\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u5728TuGraph/build\u76ee\u5f55\u4e0b\u6267\u884c make bfs_standalone (\u9700\u8981\u5728g++\u9ed8\u8ba4include\u8def\u5f84\u4e2d\u5305\u542bboost/sort/sort.hpp)\u5373\u53ef\u5f97\u5230bfs_standalone\u6587\u4ef6,\u8be5\u6587\u4ef6\u751f\u6210\u4e8eTuGraph/build/output/algo\u6587\u4ef6\u5939\u4e0b\u3002 \u8fd0\u884c\uff1a\u5728TuGraph/build\u76ee\u5f55\u4e0b\u6267\u884c./output/algo/bfs_standalone -\u2013type [type] \u2013-input_dir [input_dir] --id_mapping [id_mapping] -\u2013vertices [vertices] --root [root] \u2013-output_dir [output_dir] \u5373\u53ef\u8fd0\u884c\u3002 - [type] \uff1a\u8868\u793a\u8f93\u5165\u56fe\u6587\u4ef6\u7684\u7c7b\u578b\u6765\u6e90\uff0c\u5305\u542btext\u6587\u672c\u6587\u4ef6\u3001BINARY_FILE\u4e8c\u8fdb\u5236\u6587\u4ef6\u548cODPS\u6e90\u3002 - [input_dir] \uff1a\u8868\u793a\u8f93\u5165\u56fe\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u6587\u4ef6\u5939\u4e0b\u53ef\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u6587\u4ef6\u3002TuGraph\u5728\u8bfb\u53d6\u8f93\u5165\u6587\u4ef6\u65f6\u4f1a\u8bfb\u53d6[input_dir]\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u8981\u6c42[input_dir]\u4e0b\u53ea\u80fd\u5305\u542b\u8f93\u5165\u6587\u4ef6\uff0c\u4e0d\u80fd\u5305\u542b\u5176\u5b83\u6587\u4ef6\u3002\u53c2\u6570\u4e0d\u53ef\u7701\u7565\u3002 - [id_mapping] \uff1a\u5f53\u8bfb\u5165\u8fb9\u8868\u65f6\uff0c\u662f\u5426\u5bf9\u8f93\u5165\u6570\u636e\u505aid\u6620\u5c04\uff0c\u4f7f\u8fbe\u5230\u7b26\u5408\u7b97\u6cd5\u8fd0\u884c\u7684\u5f62\u5f0f\u30021\u4e3a\u9700\u8981\u505aid\u6620\u5c04\uff0c0\u4e3a\u4e0d\u9700\u8981\u505a\u3002\u8be5\u8fc7\u7a0b\u4f1a\u6d88\u8017\u4e00\u5b9a\u65f6\u95f4\u3002\u53c2\u6570\u53ef\u7701\u7565\uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002 - [vertices] \uff1a\u8868\u793a\u56fe\u7684\u9876\u70b9\u4e2a\u6570\uff0c\u4e3a0\u65f6\u8868\u793a\u7528\u6237\u5e0c\u671b\u7cfb\u7edf\u81ea\u52a8\u8bc6\u522b\u9876\u70b9\u6570\u91cf\uff1b\u4e3a\u975e\u96f6\u503c\u65f6\u8868\u793a\u7528\u6237\u5e0c\u671b\u81ea\u5b9a\u4e49\u9876\u70b9\u4e2a\u6570\uff0c\u8981\u6c42\u7528\u6237\u81ea\u5b9a\u4e49\u9876\u70b9\u4e2a\u6570\u9700\u5927\u4e8e\u6700\u5927\u7684\u9876\u70b9ID\u3002\u53c2\u6570\u53ef\u7701\u7565\uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002 - [root] \uff1a\u8868\u793a\u8fdb\u884cbfs\u7684\u8d77\u59cb\u9876\u70b9id\u3002\u53c2\u6570\u4e0d\u53ef\u7701\u7565\u3002 - [output_dir] \uff1a\u8868\u793a\u8f93\u51fa\u6570\u636e\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u5c06\u8f93\u51fa\u5185\u5bb9\u4fdd\u5b58\u81f3\u8be5\u6587\u4ef6\u4e2d\uff0c\u53c2\u6570\u4e0d\u53ef\u7701\u7565\u3002 \u793a\u4f8b\uff1a","title":"4. Standalone \u7f16\u8bd1\u4e0e\u8fd0\u884c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#c_2","text":"\u5728TuGraph/build\u7f16\u8bd1standalone\u7b97\u6cd5\u7a0b\u5e8f make bfs_standalone \u5728TuGraph/build/output\u76ee\u5f55\u4e0b\u8fd0\u884ctext\u6e90\u6587\u4ef6 ./output/algo/bfs_standalone --type text --input_dir ../test/integration/data/algo/fb_unweighted --root 0 \u5f97\u5230\u8fd0\u884c\u7ed3\u679c\uff1a prepare_cost = 0.10(s) core_cost = 0.02(s) found_vertices = 3829 output_cost = 0.00(s) total_cost = 0.11(s) DONE. \u7ed3\u679c\u53c2\u6570\u89e3\u91ca\u540c\u4e0a\u3002 \u5bf9\u4e8e\u65b0\u7684\u7b97\u6cd5\uff0c\u8fd0\u884c\u65f6\u4e0d\u4e86\u89e3\u8be5\u7b97\u6cd5\u7684\u6240\u9700\u53c2\u6570\u65f6\uff0c\u53ef\u901a\u8fc7 ./output/algo/bfs_standalone -h \u8fdb\u884c\u67e5\u9605\u5bf9\u5e94\u53c2\u6570\u3002","title":"C++:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/1.tutorial/#python_2","text":"Python\u8bed\u8a00\u7684bfs\u62d3\u5c55\u7f16\u8bd1\u8fc7\u7a0b\u4e0eembed\u6a21\u5f0f\u65e0\u533a\u522b\uff0c\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 Standalone \u63a5\u53e3\u8c03\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a # TuGraph/plugins/standalone_main.py import bfs as python_plugin if __name__ == \"__main__\": python_plugin.Standalone(input_dir= \"../test/integration/data/algo/fb_unweighted\", root=0) # shell python3 standalone_main.py \u81f3\u6b64\uff0c\u901a\u8fc7TuGraph\u5bf9\u4e0a\u56fe\u8fdb\u884cbfs\u8fd0\u7b97\u7684\u8fc7\u7a0b\u5df2\u7ecf\u5b8c\u6210\u3002","title":"Python:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/","text":"OlapBase API \u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86OlapBase API\u7684\u4f7f\u7528\u8bf4\u660e \u76ee\u5f55 1. \u6982\u8ff0 2. \u914d\u7f6e\u8981\u6c42 3. \u539f\u5b50\u64cd\u4f5c 4. \u9876\u70b9\u96c6\u5408\u7c7bParallelBitset 4.1 ParallelBitset\u7c7b\u6210\u5458 5. \u9876\u70b9\u6570\u7ec4\u7c7bParallelVector 5.1 ParallelVector\u7c7b\u6210\u5458 6. \u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784 6.1 \u57fa\u672c\u6570\u636e\u7c7b\u578b 6.2 \u7ec4\u5408\u6570\u636e\u7ed3\u6784 7. \u56fe\u7c7bOlapBase 7.1 \u57fa\u672c\u4fe1\u606f 7.2 \u70b9\u96c6\u548c\u8fb9\u96c6\u53ca\u5176\u76f8\u5173\u64cd\u4f5c 7.3 \u9501\u673a\u5236 7.4 \u6279\u5904\u7406\u64cd\u4f5c 1. \u6982\u8ff0 \u672c\u624b\u518c\u5c06\u4ecb\u7ecd\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7cfb\u7edf\u9700\u8981\u7684\u7b80\u5355\u914d\u7f6e\uff0c\u540c\u65f6\u7ed3\u5408\u4ee3\u7801\u5bf9TuGraph\u4e2d\u51e0\u4e2a\u5171\u540c\u7684\u91cd\u8981\u6587\u4ef6\u548c\u63a5\u53e3\u8fdb\u884c\u89e3\u91ca\u3002 2. \u914d\u7f6e\u8981\u6c42 \u5982\u679c\u8981\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7f16\u5199\u4ee5\u53ca\u7f16\u8bd1\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u7684\u914d\u7f6e\u8981\u6c42\u4e3a\uff1a linux\u64cd\u4f5c\u7cfb\u7edf\uff0c\u76ee\u524d\u5728Ubuntu16.04.2\u548cCentos7\u7cfb\u7edf\u4e0a\u53ef\u6210\u529f\u8fd0\u884c\u3002 \u652f\u6301C++14\u7684\u7f16\u8bd1\u5668\uff0c\u8981\u6c42GCC\u7248\u672c\u4e3a5.4.1\u6216\u66f4\u65b0\u7684\u7248\u672c\u3002 3. \u539f\u5b50\u64cd\u4f5c TuGraph\u4f7f\u7528\u4e86\u591a\u7ebf\u7a0b\u6280\u672f\u8fdb\u884c\u6279\u5904\u7406\u64cd\u4f5c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u8bbf\u5b58\u51b2\u7a81\u73b0\u8c61\u3002\u4e3a\u4e86\u4fdd\u8bc1\u5e76\u884c\u8ba1\u7b97\u65f6\u4fee\u6539\u64cd\u4f5c\u7684\u6b63\u786e\u6027\uff0cTuGraph\u5b9e\u73b0\u4e86\u539f\u5b50\u64cd\u4f5c\u3002\u4ee3\u7801\u90e8\u5206\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684lgraph_atomic.cpp\u6587\u4ef6\u3002 TuGraph\u8fd8\u81ea\u5b9a\u4e49\u4e864\u4e2a\u5e38\u7528\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u9700\u8981\u5728\u591a\u7ebf\u7a0b\u6a21\u5f0f\u4e0b\u4fee\u6539\u9876\u70b9\u7684\u6570\u636e\u65f6\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u786e\u4fdd\u5e76\u884c\u73af\u5883\u4e0b\u4fee\u6539\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u3002\u9664\u4e86\u8fd94\u4e2a\u539f\u5b50\u64cd\u4f5c\u5916\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u4f7f\u7528\u201ccas\u201d\u6765\u6784\u5efa\u81ea\u5df1\u7684\u539f\u5b50\u64cd\u4f5c\u51fd\u6570\u3002 bool cas(T * ptr, T oldv, T newv) \uff1a\u5982\u679cptr\u6307\u5411\u7684\u503c\u7b49\u4e8eoldv\uff0c\u5219\u5c06ptr\u6307\u5411\u7684\u503c\u8d4b\u4e3anewv\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse bool write_min(T *a, T b) \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5c0f\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 bool write_max(T *a, T b) \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5927\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 void write_add(T *a, T b) \uff1a\u5c06b\u7684\u503c\u52a0\u5230a\u6307\u5411\u7684\u503c\u4e0a\u3002 void write_sub(T *a, T b) \uff1a\u5c06a\u6307\u5411\u7684\u503c\u51cf\u53bbb\u7684\u503c\u3002 4. \u9876\u70b9\u96c6\u5408\u7c7bParallelBitset \u5728\u4f7f\u7528TuGraph\u8fdb\u884c\u6279\u5904\u7406\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u9876\u70b9\u96c6\u5408\u6765\u8868\u793a\u9700\u8981\u5904\u7406\u7684\u9876\u70b9\u3002ParallelBitset\u5b9e\u73b0\u4e86\u9876\u70b9\u96c6\u5408\u7c7b\uff0c\u4ee5bit\u4e3a\u5355\u4f4d\u8868\u793a\u9876\u70b9\uff0c\u56e0\u6b64\u80fd\u591f\u8282\u7701\u5927\u91cf\u5185\u5b58\u3002\u5bf9\u5e94\u7684\u4ee3\u7801\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_base.h\u6587\u4ef6\u3002 4.1 ParallelBitset\u7c7b\u6210\u5458 size_t Size() \uff1a\u8868\u793aBitmap\u4e2d\u7684\u9876\u70b9\u4e2a\u6570\u3002 ParallelBitset(size_t size) \uff1a\u521d\u59cb\u5316size\u548cdata\uff0cdata\u957f\u5ea6\u4e3a(size >> 6)+1 void Clear() \uff1a\u6e05\u7a7a\u96c6\u5408 void Fill() \uff1a\u5c06\u6240\u6709\u9876\u70b9\u52a0\u5165\u96c6\u5408 bool Has(size_t i) \uff1a\u68c0\u67e5\u9876\u70b9i\u662f\u5426\u5728\u96c6\u5408\u4e2d bool Add(size_t i) \uff1a\u5c06\u9876\u70b9i\u52a0\u5165\u96c6\u5408\u4e2d void Swap(ParallelBitset &other) \uff1a\u548c\u53e6\u4e00\u7ec4ParallelBitset\u96c6\u5408\u4ea4\u6362\u5143\u7d20 5. \u9876\u70b9\u6570\u7ec4\u7c7bParallelVector \u5728\u4f7f\u7528TuGraph\u8fdb\u884c\u6279\u5904\u7406\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u9876\u70b9\u6570\u7ec4\u6765\u8868\u793a\u5bf9\u9876\u70b9\u7684\u5904\u7406\u7ed3\u679c\u3002ParallelVector\u5b9e\u73b0\u4e86\u9876\u70b9\u6570\u7ec4\u7c7b\u3002\u5bf9\u5e94\u7684\u4ee3\u7801\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_base.h\u6587\u4ef6\u3002 5.1 ParallelVector\u7c7b\u6210\u5458 ParallelVector(size_t capacity) \u6784\u5efaParallelVector\uff0ccapacity\u4e3a\u9876\u70b9\u6570\u7ec4\u7684\u521d\u59cb\u5bb9\u91cf\u5927\u5c0f T &operator[](size_t i) \uff1a\u4e0b\u6807\u4e3ai\u7684\u6570\u636e T *begin() \uff1aParallelVector\u7684\u8d77\u59cb\u6307\u9488 T *end() \uff1aParallelVector\u7684\u7ed3\u675f\u6307\u9488\u3002begin\u548cend\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8evector\u5bb9\u5668\u7684begin\u548cend\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6307\u9488\u5bf9\u6570\u7ec4\u8fdb\u884c\u987a\u5e8f\u8bbf\u95ee T &Back() \uff1aParallelVector\u6700\u540e\u4e00\u4e2a\u6570\u636e T *Data() \uff1a\u8868\u793a\u6570\u7ec4\u672c\u8eab\u6570\u636e void Destroy() \uff1a\u6e05\u7a7aParallelVector\u6570\u7ec4\u5185\u6570\u636e\u5e76\u5220\u9664\u6570\u7ec4 size_t Size() \uff1a\u8868\u793aParallelVector\u4e2d\u7684\u6570\u636e\u4e2a\u6570 void Resize(size_t size) \uff1a\u66f4\u6539ParallelVector\u4e3asize\u5927\u5c0f\uff0c\u8be5size\u5e94\u5927\u4e8e\u7b49\u4e8e\u66f4\u6539\u524d\u7684\u5927\u5c0f\u4e14\u5c0f\u4e8ecapacity void Clear() \uff1a\u6e05\u7a7aParallelVector\u5185\u6570\u636e void ReAlloc(size_t capacity) \uff1a\u7ed9ParallelVector\u5206\u914d\u65b0\u7684\u5bb9\u91cf\u5927\u5c0f\uff0c\u82e5\u6570\u7ec4\u6709\u6570\u636e\u5219\u5c06\u6570\u636e\u8fc1\u79fb\u81f3\u65b0\u5185\u5b58 void Fill(T elem) \uff1a\u4e3aParallelVector\u7684\u5168\u90e8\u6570\u636e\u8d4b\u503c\u4e3aelem void Append(const T &elem, bool atomic = true) \uff1a\u5411ParallelVector\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u636e void Swap(ParallelVector<T> &other) \uff1a\u548c\u5176\u4ed6\u7684ParallelVector\u4ea4\u6362\u6570\u636e ParallelVector<T> Copy() \uff1a\u590d\u5236\u5f53\u524d\u7684ParallelVector\u6570\u636e\u5b58\u81f3Copy\u6570\u7ec4\u4e2d 6. \u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784 6.1 \u57fa\u672c\u6570\u636e\u7c7b\u578b \u6211\u4eec\u81ea\u5b9a\u4e49\u4e86\u70b9\u548c\u8fb9\u7684\u6570\u636e\u7ed3\u6784\u8868\u793a\uff0c\u7528\u4e8e\u5728\u8986\u76d6\u6240\u6709\u9876\u70b9\u7684\u540c\u65f6\u8282\u7701\u5185\u5b58\u7a7a\u95f4\uff1a Empty \uff1a\u5185\u5bb9\u4e3a\u7a7a\u7684\u7279\u6b8a\u6570\u636e\u7c7b\u578b\u3002 6.2 \u7ec4\u5408\u6570\u636e\u7ed3\u6784 \u4e3a\u4e86\u4fbf\u4e8e\u8ba1\u7b97\uff0c\u6211\u4eec\u6839\u636e\u8ba1\u7b97\u573a\u666f\u4e0d\u540c\uff0c\u5b9a\u4e49\u4e86\u51e0\u79cd\u70b9\u548c\u8fb9\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f\uff1a EdgeUnit<EdgeData> \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u89e3\u6790\u8f93\u5165\u6587\u4ef6\uff0c\u5305\u542b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\uff1a size_t src \uff1a\u8fb9\u7684\u8d77\u59cb\u9876\u70b9 size_t dst \uff1a\u8fb9\u7684\u7ec8\u70b9 EdgeData edge_data \uff1a\u8fb9\u7684\u6743\u503c AdjUnit<EdgeData> \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u6279\u5904\u7406\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a size_t neighbour \uff1a\u8fb9\u7684\u90bb\u5c45\u9876\u70b9 EdgeData edge_data \uff1a\u8fb9\u7684\u6743\u503c AdjList<EdgeData> \uff1a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u9876\u70b9\u7684\u90bb\u63a5\u8868\uff0c\u5e38\u7528\u4e8e\u8868\u793a\u9876\u70b9\u7684\u5165\u8fb9\u548c\u51fa\u8fb9\u96c6\u5408\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a AdjUnit<T> * begin \uff1a\u5217\u8868\u7684\u8d77\u59cb\u6307\u9488 AdjUnit<T> * end \uff1a\u5217\u8868\u7684\u7ed3\u675f\u6307\u9488\u3002begin\u548cend\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8evector\u5bb9\u5668\u7684begin\u548cend\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6307\u9488\u5bf9\u90bb\u63a5\u8868\u8fdb\u884c\u5faa\u73af\u8bbf\u95ee\u3002 7. \u56fe\u7c7bOlapBase \u56fe\u7c7bOlapBase\u662fTuGraph\u7528\u4e8e\u52a0\u8f7d\u56fe\u4ee5\u53ca\u8fdb\u884c\u56fe\u8ba1\u7b97\u64cd\u4f5c\u7684\u4e3b\u7c7b\uff0c\u5e38\u7528OlapBase \u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u56fe\uff0c\u4ee3\u7801\u90e8\u5206\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_base.hpp\u3002\u672c\u7ae0\u5c06\u4ecb\u7ecdGraph\u7c7b\u4e2d\u5e38\u7528\u7684\u7c7b\u578b\u548cAPI\u63a5\u53e3\u3002\u4e0a\u6587\u4ecb\u7ecdProcedure\u3001Embed\u53caStandalone\u529f\u80fd\u6240\u4f7f\u7528\u7684\u7c7b\u5747\u4e3a\u8be5\u7c7b\u7684\u5b50\u7c7b\u3002 7.1 \u57fa\u672c\u4fe1\u606f size_t NumVertices() \uff1a\u83b7\u53d6\u9876\u70b9\u6570 size_t NumEdges() \uff1a\u83b7\u53d6\u8fb9\u6570 size_t OutDegree(size_t vid) \uff1a\u9876\u70b9vid\u7684\u51fa\u5ea6 size_t InDegree(size_t vid) \uff1a\u9876\u70b9vid\u7684\u5165\u5ea6 7.2 \u70b9\u96c6\u548c\u8fb9\u96c6\u53ca\u5176\u76f8\u5173\u64cd\u4f5c ParallelVector<VertexData> AllocVertexArray<VertexData>() \uff1a\u5206\u914d\u4e00\u4e2a\u7c7b\u578b\u4e3aVertexData\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u9876\u70b9\u4e2a\u6570 void fill_vertex_array<V>(V * array, V value) \uff1a\u5c06\u6570\u7ec4array\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8d4b\u503c\u4e3avalue ParallelBitset AllocVertexSubset() \uff1a\u5206\u914d\u4e00\u4e2aParallelBitset\u96c6\u5408\uff0c\u7528\u4e8e\u8868\u793a\u6240\u6709\u9876\u70b9\u7684\u72b6\u6001\u662f\u5426\u6fc0\u6d3b AdjList<EdgeData> OutEdges(size_t vid) \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u51fa\u8fb9\u96c6\u5408 AdjList<EdgeData> InEdges(size_t vid) \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u5165\u8fb9\u96c6\u5408 void Transpose() \uff1a\u5bf9\u6709\u5411\u56fe\u8fdb\u884c\u56fe\u53cd\u8f6c LoadFromArray(char * edge_array, VertexId input_vertices, EdgeId input_edges, EdgeDirectionPolicy edge_direction_policy) \uff1a\u4ece\u6570\u7ec4\u4e2d\u52a0\u8f7d\u56fe\u6570\u636e\uff0c\u5305\u542b\u56db\u4e2a\u53c2\u6570\uff0c\u5176\u542b\u4e49\u5206\u522b\u8868\u793a\uff1a edge_array \uff1a\u5c06\u8be5\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u8bfb\u5165\u56fe\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8be5\u6570\u7ec4\u5305\u542b\u591a\u6761\u8fb9\u3002 input_vertices \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u9876\u70b9\u4e2a\u6570\u3002 input_edges \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u8fb9\u7684\u6761\u6570\u3002 edge_direction_policy \uff1a\u6307\u5b9a\u56fe\u4e3a\u6709\u5411\u6216\u65e0\u5411\uff0c\u5305\u542b\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3aDUAL_DIRECTION\u3001MAKE_SYMMETRIC\u4ee5\u53caINPUT_SYMMETRIC\u3002\u5bf9\u5e94\u7684\u8be6\u7ec6\u4ecb\u7ecd\u89c1include/lgraph/olap_base.h\u6587\u4ef6\u7684 enum EdgeDirectionPolicy \u3002 7.3 \u9501\u673a\u5236 TuGraph\u5b9e\u73b0\u4e86\u4e00\u5bf9\u9501\u673a\u5236\uff0c\u6765\u63a7\u5236\u7a0b\u5e8f\u5bf9\u4e8e\u9876\u70b9\u6570\u636e\u7684\u8bbf\u5b58\u6743\u9650\u3002\u5206\u522b\u662f\uff1a void AcquireVertexLock(size_t vid) \uff1a\u5bf9\u9876\u70b9vid\u52a0\u9501\uff0c\u7981\u6b62\u5176\u5b83\u7ebf\u7a0b\u5bf9\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e\u8fdb\u884c\u8bbf\u5b58 void ReleaseVertexLock(size_t vid) \uff1a\u5bf9\u9876\u70b9vid\u89e3\u9501\uff0c\u6240\u6709\u7ebf\u7a0b\u5747\u53ef\u8bbf\u5b58\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e VertexLockGuard GuardVertexLock(size_t vid) \uff1a\u5728\u5bf9vid\u64cd\u4f5c\u65f6\uff0c\u5bf9\u9876\u70b9vid\u52a0\u9501\uff0c\u9000\u51fa\u4f5c\u7528\u57df\u65f6\u65f6\u81ea\u52a8\u91ca\u653e\u9501 7.4 \u6279\u5904\u7406\u64cd\u4f5c TuGraph\u63d0\u4f9b\u4e86\u4e24\u4e2a\u6279\u5904\u7406\u64cd\u4f5c\u6765\u5e76\u884c\u5730\u8fdb\u884c\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684\u6279\u5904\u7406\u8fc7\u7a0b\u3002\u5206\u522b\u662f\uff1a /* \u51fd\u6570\u540d\u79f0:ReducedSum ProcessVertexInRange(std::function<ReducedSum(size_t)> work, size_t lower, size_t upper, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) \u51fd\u6570\u7528\u9014:\u5bf9Graph\u4e2d\u8282\u70b9\u7f16\u53f7\u4ecb\u4e8elower\u548cupper\u4e4b\u95f4\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b \u7b2c\u4e94\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 \u4f7f\u7528\u793a\u4f8b:\u7edf\u8ba1\u6570\u7ec4parent\u6570\u7ec4\u4e2d\u6709\u51fa\u8fb9\u7684\u9876\u70b9\u4e2a\u6570 */ auto vertex_num = graph.ProcessVertexInRange<size_t>( [&](size_t i) { if (graph.OutDegree(parent[i]) > 0) { return 1; } }, 0, parent.Size() ); printf(\"the number is %lu\\n\",vertex_num); \u5176\u4e2dgraph\u4e3a\u56fe\u7c7bOlapBase\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 /* \u51fd\u6570\u540d\u79f0:ReducedSum ProcessVertexActive(std::function<ReducedSum(size_t)> work, ParallelBitset &active_vertices, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) \u51fd\u6570\u7528\u9014:\u5bf9active_vertices\u4e2d\u5bf9\u5e94\u4e3a1\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b \u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003/include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 \u4f7f\u7528\u793a\u4f8b:\u8f93\u51faGraph\u4e2d\u8282\u70b91\uff0c2\uff0c3\u7684\u6240\u6709\u51fa\u5ea6\u90bb\u5c45\uff0c\u5e76\u7edf\u8ba1\u8fd9\u4e09\u4e2a\u8282\u70b9\u7684\u603b\u51fa\u5ea6 */ auto active_in = graph.AllocVertexSubset(); active_in.Add(1); active_in.Add(2); active_in.Add(3); auto total_outdegree = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t local_outdegree = 0; for (auto & edge : graph.OutEdges(vi)) { size_t dst = edge.neighbour; printf(\"node %lu has neighbour %lu\\n\",vi,dst); local_outdegree += 1; } return local_outdegree; }, active_in ); printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree);","title":"OLAP \u57fa\u672c API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#olapbase-api","text":"\u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86OlapBase API\u7684\u4f7f\u7528\u8bf4\u660e","title":"OlapBase API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#_1","text":"1. \u6982\u8ff0 2. \u914d\u7f6e\u8981\u6c42 3. \u539f\u5b50\u64cd\u4f5c 4. \u9876\u70b9\u96c6\u5408\u7c7bParallelBitset 4.1 ParallelBitset\u7c7b\u6210\u5458 5. \u9876\u70b9\u6570\u7ec4\u7c7bParallelVector 5.1 ParallelVector\u7c7b\u6210\u5458 6. \u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784 6.1 \u57fa\u672c\u6570\u636e\u7c7b\u578b 6.2 \u7ec4\u5408\u6570\u636e\u7ed3\u6784 7. \u56fe\u7c7bOlapBase 7.1 \u57fa\u672c\u4fe1\u606f 7.2 \u70b9\u96c6\u548c\u8fb9\u96c6\u53ca\u5176\u76f8\u5173\u64cd\u4f5c 7.3 \u9501\u673a\u5236 7.4 \u6279\u5904\u7406\u64cd\u4f5c","title":"\u76ee\u5f55"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#1","text":"\u672c\u624b\u518c\u5c06\u4ecb\u7ecd\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7cfb\u7edf\u9700\u8981\u7684\u7b80\u5355\u914d\u7f6e\uff0c\u540c\u65f6\u7ed3\u5408\u4ee3\u7801\u5bf9TuGraph\u4e2d\u51e0\u4e2a\u5171\u540c\u7684\u91cd\u8981\u6587\u4ef6\u548c\u63a5\u53e3\u8fdb\u884c\u89e3\u91ca\u3002","title":"1. \u6982\u8ff0"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#2","text":"\u5982\u679c\u8981\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7f16\u5199\u4ee5\u53ca\u7f16\u8bd1\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u7684\u914d\u7f6e\u8981\u6c42\u4e3a\uff1a linux\u64cd\u4f5c\u7cfb\u7edf\uff0c\u76ee\u524d\u5728Ubuntu16.04.2\u548cCentos7\u7cfb\u7edf\u4e0a\u53ef\u6210\u529f\u8fd0\u884c\u3002 \u652f\u6301C++14\u7684\u7f16\u8bd1\u5668\uff0c\u8981\u6c42GCC\u7248\u672c\u4e3a5.4.1\u6216\u66f4\u65b0\u7684\u7248\u672c\u3002","title":"2. \u914d\u7f6e\u8981\u6c42"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#3","text":"TuGraph\u4f7f\u7528\u4e86\u591a\u7ebf\u7a0b\u6280\u672f\u8fdb\u884c\u6279\u5904\u7406\u64cd\u4f5c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u8bbf\u5b58\u51b2\u7a81\u73b0\u8c61\u3002\u4e3a\u4e86\u4fdd\u8bc1\u5e76\u884c\u8ba1\u7b97\u65f6\u4fee\u6539\u64cd\u4f5c\u7684\u6b63\u786e\u6027\uff0cTuGraph\u5b9e\u73b0\u4e86\u539f\u5b50\u64cd\u4f5c\u3002\u4ee3\u7801\u90e8\u5206\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684lgraph_atomic.cpp\u6587\u4ef6\u3002 TuGraph\u8fd8\u81ea\u5b9a\u4e49\u4e864\u4e2a\u5e38\u7528\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u9700\u8981\u5728\u591a\u7ebf\u7a0b\u6a21\u5f0f\u4e0b\u4fee\u6539\u9876\u70b9\u7684\u6570\u636e\u65f6\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u786e\u4fdd\u5e76\u884c\u73af\u5883\u4e0b\u4fee\u6539\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u3002\u9664\u4e86\u8fd94\u4e2a\u539f\u5b50\u64cd\u4f5c\u5916\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u4f7f\u7528\u201ccas\u201d\u6765\u6784\u5efa\u81ea\u5df1\u7684\u539f\u5b50\u64cd\u4f5c\u51fd\u6570\u3002 bool cas(T * ptr, T oldv, T newv) \uff1a\u5982\u679cptr\u6307\u5411\u7684\u503c\u7b49\u4e8eoldv\uff0c\u5219\u5c06ptr\u6307\u5411\u7684\u503c\u8d4b\u4e3anewv\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse bool write_min(T *a, T b) \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5c0f\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 bool write_max(T *a, T b) \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5927\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 void write_add(T *a, T b) \uff1a\u5c06b\u7684\u503c\u52a0\u5230a\u6307\u5411\u7684\u503c\u4e0a\u3002 void write_sub(T *a, T b) \uff1a\u5c06a\u6307\u5411\u7684\u503c\u51cf\u53bbb\u7684\u503c\u3002","title":"3. \u539f\u5b50\u64cd\u4f5c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#4-parallelbitset","text":"\u5728\u4f7f\u7528TuGraph\u8fdb\u884c\u6279\u5904\u7406\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u9876\u70b9\u96c6\u5408\u6765\u8868\u793a\u9700\u8981\u5904\u7406\u7684\u9876\u70b9\u3002ParallelBitset\u5b9e\u73b0\u4e86\u9876\u70b9\u96c6\u5408\u7c7b\uff0c\u4ee5bit\u4e3a\u5355\u4f4d\u8868\u793a\u9876\u70b9\uff0c\u56e0\u6b64\u80fd\u591f\u8282\u7701\u5927\u91cf\u5185\u5b58\u3002\u5bf9\u5e94\u7684\u4ee3\u7801\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_base.h\u6587\u4ef6\u3002","title":"4. \u9876\u70b9\u96c6\u5408\u7c7bParallelBitset"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#41-parallelbitset","text":"size_t Size() \uff1a\u8868\u793aBitmap\u4e2d\u7684\u9876\u70b9\u4e2a\u6570\u3002 ParallelBitset(size_t size) \uff1a\u521d\u59cb\u5316size\u548cdata\uff0cdata\u957f\u5ea6\u4e3a(size >> 6)+1 void Clear() \uff1a\u6e05\u7a7a\u96c6\u5408 void Fill() \uff1a\u5c06\u6240\u6709\u9876\u70b9\u52a0\u5165\u96c6\u5408 bool Has(size_t i) \uff1a\u68c0\u67e5\u9876\u70b9i\u662f\u5426\u5728\u96c6\u5408\u4e2d bool Add(size_t i) \uff1a\u5c06\u9876\u70b9i\u52a0\u5165\u96c6\u5408\u4e2d void Swap(ParallelBitset &other) \uff1a\u548c\u53e6\u4e00\u7ec4ParallelBitset\u96c6\u5408\u4ea4\u6362\u5143\u7d20","title":"4.1 ParallelBitset\u7c7b\u6210\u5458"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#5-parallelvector","text":"\u5728\u4f7f\u7528TuGraph\u8fdb\u884c\u6279\u5904\u7406\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u9876\u70b9\u6570\u7ec4\u6765\u8868\u793a\u5bf9\u9876\u70b9\u7684\u5904\u7406\u7ed3\u679c\u3002ParallelVector\u5b9e\u73b0\u4e86\u9876\u70b9\u6570\u7ec4\u7c7b\u3002\u5bf9\u5e94\u7684\u4ee3\u7801\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_base.h\u6587\u4ef6\u3002","title":"5. \u9876\u70b9\u6570\u7ec4\u7c7bParallelVector"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#51-parallelvector","text":"ParallelVector(size_t capacity) \u6784\u5efaParallelVector\uff0ccapacity\u4e3a\u9876\u70b9\u6570\u7ec4\u7684\u521d\u59cb\u5bb9\u91cf\u5927\u5c0f T &operator[](size_t i) \uff1a\u4e0b\u6807\u4e3ai\u7684\u6570\u636e T *begin() \uff1aParallelVector\u7684\u8d77\u59cb\u6307\u9488 T *end() \uff1aParallelVector\u7684\u7ed3\u675f\u6307\u9488\u3002begin\u548cend\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8evector\u5bb9\u5668\u7684begin\u548cend\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6307\u9488\u5bf9\u6570\u7ec4\u8fdb\u884c\u987a\u5e8f\u8bbf\u95ee T &Back() \uff1aParallelVector\u6700\u540e\u4e00\u4e2a\u6570\u636e T *Data() \uff1a\u8868\u793a\u6570\u7ec4\u672c\u8eab\u6570\u636e void Destroy() \uff1a\u6e05\u7a7aParallelVector\u6570\u7ec4\u5185\u6570\u636e\u5e76\u5220\u9664\u6570\u7ec4 size_t Size() \uff1a\u8868\u793aParallelVector\u4e2d\u7684\u6570\u636e\u4e2a\u6570 void Resize(size_t size) \uff1a\u66f4\u6539ParallelVector\u4e3asize\u5927\u5c0f\uff0c\u8be5size\u5e94\u5927\u4e8e\u7b49\u4e8e\u66f4\u6539\u524d\u7684\u5927\u5c0f\u4e14\u5c0f\u4e8ecapacity void Clear() \uff1a\u6e05\u7a7aParallelVector\u5185\u6570\u636e void ReAlloc(size_t capacity) \uff1a\u7ed9ParallelVector\u5206\u914d\u65b0\u7684\u5bb9\u91cf\u5927\u5c0f\uff0c\u82e5\u6570\u7ec4\u6709\u6570\u636e\u5219\u5c06\u6570\u636e\u8fc1\u79fb\u81f3\u65b0\u5185\u5b58 void Fill(T elem) \uff1a\u4e3aParallelVector\u7684\u5168\u90e8\u6570\u636e\u8d4b\u503c\u4e3aelem void Append(const T &elem, bool atomic = true) \uff1a\u5411ParallelVector\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u636e void Swap(ParallelVector<T> &other) \uff1a\u548c\u5176\u4ed6\u7684ParallelVector\u4ea4\u6362\u6570\u636e ParallelVector<T> Copy() \uff1a\u590d\u5236\u5f53\u524d\u7684ParallelVector\u6570\u636e\u5b58\u81f3Copy\u6570\u7ec4\u4e2d","title":"5.1 ParallelVector\u7c7b\u6210\u5458"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#6","text":"","title":"6. \u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#61","text":"\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86\u70b9\u548c\u8fb9\u7684\u6570\u636e\u7ed3\u6784\u8868\u793a\uff0c\u7528\u4e8e\u5728\u8986\u76d6\u6240\u6709\u9876\u70b9\u7684\u540c\u65f6\u8282\u7701\u5185\u5b58\u7a7a\u95f4\uff1a Empty \uff1a\u5185\u5bb9\u4e3a\u7a7a\u7684\u7279\u6b8a\u6570\u636e\u7c7b\u578b\u3002","title":"6.1 \u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#62","text":"\u4e3a\u4e86\u4fbf\u4e8e\u8ba1\u7b97\uff0c\u6211\u4eec\u6839\u636e\u8ba1\u7b97\u573a\u666f\u4e0d\u540c\uff0c\u5b9a\u4e49\u4e86\u51e0\u79cd\u70b9\u548c\u8fb9\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f\uff1a EdgeUnit<EdgeData> \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u89e3\u6790\u8f93\u5165\u6587\u4ef6\uff0c\u5305\u542b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\uff1a size_t src \uff1a\u8fb9\u7684\u8d77\u59cb\u9876\u70b9 size_t dst \uff1a\u8fb9\u7684\u7ec8\u70b9 EdgeData edge_data \uff1a\u8fb9\u7684\u6743\u503c AdjUnit<EdgeData> \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u6279\u5904\u7406\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a size_t neighbour \uff1a\u8fb9\u7684\u90bb\u5c45\u9876\u70b9 EdgeData edge_data \uff1a\u8fb9\u7684\u6743\u503c AdjList<EdgeData> \uff1a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u9876\u70b9\u7684\u90bb\u63a5\u8868\uff0c\u5e38\u7528\u4e8e\u8868\u793a\u9876\u70b9\u7684\u5165\u8fb9\u548c\u51fa\u8fb9\u96c6\u5408\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a AdjUnit<T> * begin \uff1a\u5217\u8868\u7684\u8d77\u59cb\u6307\u9488 AdjUnit<T> * end \uff1a\u5217\u8868\u7684\u7ed3\u675f\u6307\u9488\u3002begin\u548cend\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8evector\u5bb9\u5668\u7684begin\u548cend\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6307\u9488\u5bf9\u90bb\u63a5\u8868\u8fdb\u884c\u5faa\u73af\u8bbf\u95ee\u3002","title":"6.2 \u7ec4\u5408\u6570\u636e\u7ed3\u6784"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#7-olapbase","text":"\u56fe\u7c7bOlapBase\u662fTuGraph\u7528\u4e8e\u52a0\u8f7d\u56fe\u4ee5\u53ca\u8fdb\u884c\u56fe\u8ba1\u7b97\u64cd\u4f5c\u7684\u4e3b\u7c7b\uff0c\u5e38\u7528OlapBase \u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u56fe\uff0c\u4ee3\u7801\u90e8\u5206\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_base.hpp\u3002\u672c\u7ae0\u5c06\u4ecb\u7ecdGraph\u7c7b\u4e2d\u5e38\u7528\u7684\u7c7b\u578b\u548cAPI\u63a5\u53e3\u3002\u4e0a\u6587\u4ecb\u7ecdProcedure\u3001Embed\u53caStandalone\u529f\u80fd\u6240\u4f7f\u7528\u7684\u7c7b\u5747\u4e3a\u8be5\u7c7b\u7684\u5b50\u7c7b\u3002","title":"7. \u56fe\u7c7bOlapBase"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#71","text":"size_t NumVertices() \uff1a\u83b7\u53d6\u9876\u70b9\u6570 size_t NumEdges() \uff1a\u83b7\u53d6\u8fb9\u6570 size_t OutDegree(size_t vid) \uff1a\u9876\u70b9vid\u7684\u51fa\u5ea6 size_t InDegree(size_t vid) \uff1a\u9876\u70b9vid\u7684\u5165\u5ea6","title":"7.1 \u57fa\u672c\u4fe1\u606f"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#72","text":"ParallelVector<VertexData> AllocVertexArray<VertexData>() \uff1a\u5206\u914d\u4e00\u4e2a\u7c7b\u578b\u4e3aVertexData\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u9876\u70b9\u4e2a\u6570 void fill_vertex_array<V>(V * array, V value) \uff1a\u5c06\u6570\u7ec4array\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8d4b\u503c\u4e3avalue ParallelBitset AllocVertexSubset() \uff1a\u5206\u914d\u4e00\u4e2aParallelBitset\u96c6\u5408\uff0c\u7528\u4e8e\u8868\u793a\u6240\u6709\u9876\u70b9\u7684\u72b6\u6001\u662f\u5426\u6fc0\u6d3b AdjList<EdgeData> OutEdges(size_t vid) \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u51fa\u8fb9\u96c6\u5408 AdjList<EdgeData> InEdges(size_t vid) \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u5165\u8fb9\u96c6\u5408 void Transpose() \uff1a\u5bf9\u6709\u5411\u56fe\u8fdb\u884c\u56fe\u53cd\u8f6c LoadFromArray(char * edge_array, VertexId input_vertices, EdgeId input_edges, EdgeDirectionPolicy edge_direction_policy) \uff1a\u4ece\u6570\u7ec4\u4e2d\u52a0\u8f7d\u56fe\u6570\u636e\uff0c\u5305\u542b\u56db\u4e2a\u53c2\u6570\uff0c\u5176\u542b\u4e49\u5206\u522b\u8868\u793a\uff1a edge_array \uff1a\u5c06\u8be5\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u8bfb\u5165\u56fe\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8be5\u6570\u7ec4\u5305\u542b\u591a\u6761\u8fb9\u3002 input_vertices \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u9876\u70b9\u4e2a\u6570\u3002 input_edges \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u8fb9\u7684\u6761\u6570\u3002 edge_direction_policy \uff1a\u6307\u5b9a\u56fe\u4e3a\u6709\u5411\u6216\u65e0\u5411\uff0c\u5305\u542b\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3aDUAL_DIRECTION\u3001MAKE_SYMMETRIC\u4ee5\u53caINPUT_SYMMETRIC\u3002\u5bf9\u5e94\u7684\u8be6\u7ec6\u4ecb\u7ecd\u89c1include/lgraph/olap_base.h\u6587\u4ef6\u7684 enum EdgeDirectionPolicy \u3002","title":"7.2 \u70b9\u96c6\u548c\u8fb9\u96c6\u53ca\u5176\u76f8\u5173\u64cd\u4f5c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#73","text":"TuGraph\u5b9e\u73b0\u4e86\u4e00\u5bf9\u9501\u673a\u5236\uff0c\u6765\u63a7\u5236\u7a0b\u5e8f\u5bf9\u4e8e\u9876\u70b9\u6570\u636e\u7684\u8bbf\u5b58\u6743\u9650\u3002\u5206\u522b\u662f\uff1a void AcquireVertexLock(size_t vid) \uff1a\u5bf9\u9876\u70b9vid\u52a0\u9501\uff0c\u7981\u6b62\u5176\u5b83\u7ebf\u7a0b\u5bf9\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e\u8fdb\u884c\u8bbf\u5b58 void ReleaseVertexLock(size_t vid) \uff1a\u5bf9\u9876\u70b9vid\u89e3\u9501\uff0c\u6240\u6709\u7ebf\u7a0b\u5747\u53ef\u8bbf\u5b58\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e VertexLockGuard GuardVertexLock(size_t vid) \uff1a\u5728\u5bf9vid\u64cd\u4f5c\u65f6\uff0c\u5bf9\u9876\u70b9vid\u52a0\u9501\uff0c\u9000\u51fa\u4f5c\u7528\u57df\u65f6\u65f6\u81ea\u52a8\u91ca\u653e\u9501","title":"7.3 \u9501\u673a\u5236"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/2.olap-base-api/#74","text":"TuGraph\u63d0\u4f9b\u4e86\u4e24\u4e2a\u6279\u5904\u7406\u64cd\u4f5c\u6765\u5e76\u884c\u5730\u8fdb\u884c\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684\u6279\u5904\u7406\u8fc7\u7a0b\u3002\u5206\u522b\u662f\uff1a /* \u51fd\u6570\u540d\u79f0:ReducedSum ProcessVertexInRange(std::function<ReducedSum(size_t)> work, size_t lower, size_t upper, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) \u51fd\u6570\u7528\u9014:\u5bf9Graph\u4e2d\u8282\u70b9\u7f16\u53f7\u4ecb\u4e8elower\u548cupper\u4e4b\u95f4\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b \u7b2c\u4e94\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 \u4f7f\u7528\u793a\u4f8b:\u7edf\u8ba1\u6570\u7ec4parent\u6570\u7ec4\u4e2d\u6709\u51fa\u8fb9\u7684\u9876\u70b9\u4e2a\u6570 */ auto vertex_num = graph.ProcessVertexInRange<size_t>( [&](size_t i) { if (graph.OutDegree(parent[i]) > 0) { return 1; } }, 0, parent.Size() ); printf(\"the number is %lu\\n\",vertex_num); \u5176\u4e2dgraph\u4e3a\u56fe\u7c7bOlapBase\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 /* \u51fd\u6570\u540d\u79f0:ReducedSum ProcessVertexActive(std::function<ReducedSum(size_t)> work, ParallelBitset &active_vertices, ReducedSum zero = 0,std::function<ReducedSum(ReducedSum, ReducedSum)> reduce =reduce_plus<ReducedSum>) \u51fd\u6570\u7528\u9014:\u5bf9active_vertices\u4e2d\u5bf9\u5e94\u4e3a1\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b \u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003/include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 \u4f7f\u7528\u793a\u4f8b:\u8f93\u51faGraph\u4e2d\u8282\u70b91\uff0c2\uff0c3\u7684\u6240\u6709\u51fa\u5ea6\u90bb\u5c45\uff0c\u5e76\u7edf\u8ba1\u8fd9\u4e09\u4e2a\u8282\u70b9\u7684\u603b\u51fa\u5ea6 */ auto active_in = graph.AllocVertexSubset(); active_in.Add(1); active_in.Add(2); active_in.Add(3); auto total_outdegree = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t local_outdegree = 0; for (auto & edge : graph.OutEdges(vi)) { size_t dst = edge.neighbour; printf(\"node %lu has neighbour %lu\\n\",vi,dst); local_outdegree += 1; } return local_outdegree; }, active_in ); printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree);","title":"7.4 \u6279\u5904\u7406\u64cd\u4f5c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/","text":"OlapOnDB API \u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86OlapOnDB API\u7684\u4f7f\u7528\u8bf4\u660e \u76ee\u5f55 1. \u7b80\u4ecb 2. \u6a21\u578b 2.1 \u57fa\u4e8e\u5feb\u7167\u7684\u5b58\u50a8\u7ed3\u6784 2.2 BSP\u8ba1\u7b97\u6a21\u578b 3. \u7b97\u6cd5\u4e3e\u4f8b 3.1 \u4e3b\u51fd\u6570 3.2 PageRank\u7b97\u6cd5\u6d41\u7a0b 4. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0 4.1 \u4e8b\u52a1\u7684\u521b\u5efa 4.2 \u5e76\u884c\u5316\u521b\u5efa\u6709\u5411\u56fe 4.3 \u5e76\u884c\u5316\u521b\u5efa\u65e0\u5411\u56fe 4.4 \u83b7\u53d6\u51fa\u5ea6 4.5 \u83b7\u53d6\u5165\u5ea6 4.6 \u83b7\u53d6\u51fa\u8fb9\u96c6\u5408 4.7 \u83b7\u53d6\u5165\u8fb9\u96c6\u5408 4.8 \u83b7\u53d6TuGraph\u4e2d\u8282\u70b9\u5bf9\u5e94OlapOnDB\u7684\u8282\u70b9\u7f16\u53f7 4.9 \u83b7\u53d6OlapOnDB\u4e2d\u8282\u70b9\u5bf9\u5e94TuGraph\u7684\u8282\u70b9\u7f16\u53f7 4.10 \u6d3b\u8dc3\u9876\u70b9\u7684\u63cf\u8ff0 1. \u7b80\u4ecb \u4e00\u822c\u7528\u6237\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u7684\u53ea\u662f\u5c06\u9700\u8981\u5206\u6790\u7684\u5b50\u56fe\u62bd\u53d6\u51fa\u6765\u7684\u8fc7\u7a0b\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528TuGraph\u4e2d\u4e30\u5bcc\u7684\u8f85\u52a9\u63a5\u53e3\u5b9e\u73b0\u81ea\u5df1\u7684\u56fe\u5206\u6790\u7b97\u6cd5\u3002 \u8be5\u6587\u6863\u4e3b\u8981\u4ecb\u7ecdProcedure\u53caEmbed\u7684\u63a5\u53e3\u8bbe\u8ba1\uff0c\u5e76\u4ecb\u7ecd\u90e8\u5206\u5e38\u7528\u63a5\u53e3\uff0c\u5177\u4f53\u7684\u63a5\u53e3\u4fe1\u606f\u53c2\u89c1include/lgraph/olap_on_db.h\u6587\u4ef6\u3002 2. \u6a21\u578b Procedure\u53caEmbed\u4f7f\u7528\u5230\u7684\u8f85\u52a9\u51fd\u6570\u4e3b\u8981\u5305\u542b\u5728OlapOnDB\u7c7b\uff0c\u8fd8\u6709\u4e00\u4e9b\u4f7f\u7528\u9891\u7387\u8f83\u9ad8\u7684\u51fd\u6570\u90fd\u4f1a\u9010\u4e00\u4ecb\u7ecd \u5728TuGraph\u4e2dOLAP\u76f8\u5173\u7684\u6709\u4ee5\u4e0b\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\uff1a DB\u56fe\u5206\u6790\u7c7b OlapOnDB<EdgeData> \u9876\u70b9\u6570\u7ec4 ParallelVector<VertexData> \u9876\u70b9\u96c6\u5408 ParallelBitset \u8fb9\u6570\u636e\u7ed3\u6784 AdjUnit/AdjUnit<Empty> \u8fb9\u96c6\u5408\u6570\u636e\u7ed3\u6784 AdjList<EdgeData> 2.1 \u57fa\u4e8e\u5feb\u7167\u7684\u5b58\u50a8\u7ed3\u6784 TuGraph\u4e2d\u7684OlapOnDB\u7c7b\u80fd\u591f\u63d0\u4f9b\u6570\u636e\u201c\u5feb\u7167\u201d\uff0c\u5373\u5efa\u7acb\u4e00\u4e2a\u5bf9\u6307\u5b9a\u6570\u636e\u96c6\u7684\u5b8c\u5168\u53ef\u7528\u62f7\u8d1d\uff0c\u8be5\u62f7\u8d1d\u5305\u62ec\u76f8\u5e94\u6570\u636e\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\uff08\u62f7\u8d1d\u5f00\u59cb\u7684\u65f6\u95f4\u70b9\uff09\u7684\u955c\u50cf\u3002\u7531\u4e8eOLAP\u7684\u64cd\u4f5c\u4ec5\u6d89\u53ca\u8bfb\u64cd\u4f5c\u800c\u4e0d\u6d89\u53ca\u5199\u64cd\u4f5c\uff0cOlapOnDB\u4f1a\u4ee5\u4e00\u79cd\u66f4\u7d27\u51d1\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e03\uff0c\u5728\u8282\u7701\u7a7a\u95f4\u7684\u540c\u65f6\uff0c\u63d0\u9ad8\u6570\u636e\u8bbf\u95ee\u7684\u5c40\u90e8\u6027\u3002 2.2 BSP\u8ba1\u7b97\u6a21\u578b TuGraph\u5728\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86BSP\uff08Bulk Synchronous Parallel\uff09\u6a21\u578b\uff0c\u4f7f\u5f97\u8be5\u8fc7\u7a0b\u80fd\u591f\u5e76\u884c\u6267\u884c\uff0c\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387\u3002 BSP\u8ba1\u7b97\u6a21\u578b\u7684\u6838\u5fc3\u601d\u8def\u4e3a\u8d85\u6b65\uff08Super Step\uff09\u7684\u63d0\u51fa\u548c\u4f7f\u7528\u3002\u5728OlapOnDB\u521b\u5efa\u540e\uff0c\u5728\u8be5\u6570\u636e\u4e0a\u7684\u8ba1\u7b97\u5206\u4e3a\u591a\u4e2a\u8d85\u6b65\uff0c\u6bd4\u5982PageRank\uff0c\u5206\u4e3a\u591a\u8f6e\u8fed\u4ee3\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u5c31\u662f\u4e00\u4e2a\u8d85\u6b65\u3002\u4e0d\u540c\u8d85\u6b65\u4e4b\u95f4\u7528\u5b58\u5728\u663e\u5f0f\u540c\u6b65\uff0c\u4ece\u800c\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u5728\u5b8c\u6210\u540c\u4e00\u8d85\u6b65\u540e\u540c\u65f6\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8d85\u6b65\u3002\u5728\u4e00\u4e2a\u8d85\u6b65\u5185\u90e8\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5f02\u6b65\u6267\u884c\uff0c\u5229\u7528\u5e76\u884c\u63d0\u5347\u8ba1\u7b97\u6548\u7387\u3002 \u5229\u7528BSP\u8ba1\u7b97\u6a21\u578b\u80fd\u591f\u6709\u6548\u907f\u514d\u6b7b\u9501\uff0c\u901a\u8fc7\u969c\u788d\u540c\u6b65\u7684\u65b9\u5f0f\u80fd\u591f\u4ee5\u786c\u4ef6\u65b9\u5f0f\u5b9e\u73b0\u7c97\u7c92\u5ea6\u7684\u5168\u5c40\u540c\u6b65\uff0c\u4f7f\u5f97\u56fe\u8ba1\u7b97\u80fd\u591f\u5e76\u884c\u5316\u6267\u884c\uff0c\u800c\u7a0b\u5e8f\u5458\u65e0\u9700\u5728\u540c\u6b65\u4e92\u65a5\u4e0a\u5927\u8d39\u5468\u7ae0\u3002 3. \u7b97\u6cd5\u4e3e\u4f8b \u5728\u8fd9\u91cc\u5bf9PageRank\u7b97\u6cd5\u5206\u5757\u505a\u89e3\u91ca\uff0c\u5927\u4f53\u4e0a\u5206\u4e3a\u4e3b\u51fd\u6570 Process \u548cPageRank\u7b97\u6cd5\u6d41\u7a0b PageRank \u51fd\u6570 3.1 \u4e3b\u51fd\u6570 \u4e3b\u51fd\u6570\u8f93\u5165\u6709\u4e09\u4e2a\u53c2\u6570\uff0c TuGraph \u6570\u636e\u5e93\u53c2\u6570 db \uff0c\u4ece\u7f51\u9875\u7aef\u83b7\u53d6\u7684\u8bf7\u6c42 request \uff0c\u7ed9\u7f51\u9875\u7aef\u7684\u8fd4\u56de\u503c response \uff0c\u6574\u4f53\u6d41\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e00\u4e0b\u51e0\u6b65\uff1a \u76f8\u5173\u53c2\u6570\u7684\u83b7\u53d6 \u5feb\u7167\u7c7b\u7684\u521b\u5efa PageRank\u7b97\u6cd5\u4e3b\u6d41\u7a0b \u7f51\u9875\u7aef\u8fd4\u56de\u503c\u7684\u83b7\u53d6\u548c\u53d1\u9001 extern \"C\" bool Process(GraphDB & db, const std::string & request, std::string & response) { // \u4ece\u7f51\u9875\u7aef\u8bf7\u6c42\u4e2d\u83b7\u53d6\u8fed\u4ee3\u6b21\u6570\uff08num_iterations\uff09\uff0c int num_iterations = 20; try { json input = json::parse(request); num_iterations = input[\"num_iterations\"].get<int>(); } catch (std::exception & e) { throw std::runtime_error(\"json parse error\"); return false; } // \u8bfb\u4e8b\u52a1\u7684\u521b\u5efa\u4ee5\u53ca\u5feb\u7167\u7c7b\u7684\u521b\u5efa auto txn = db.CreateReadTxn(); OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL ); // \u521b\u5efapr\u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684pr\u503c ParallelVector<double> pr = olapondb.AllocVertexArray<double>(); // pagerank\u7b97\u6cd5\u4e3b\u6d41\u7a0b\uff0c\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684pagerank\u503c PageRankCore(olapondb, num_iterations, pr); auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); /* \u51fd\u6570\u7528\u9014\uff1a\u4ece\u6240\u6709\u8282\u70b9\u4e2d\u83b7\u53d6pagerank\u503c\u6700\u5927\u7684\u8282\u70b9\u7f16\u53f7 \u51fd\u6570\u6d41\u7a0b\u63cf\u8ff0\uff1a\u8be5\u51fd\u6570\u5bf9\u9876\u70b9\u96c6\u5408all_vertices\u4e2d\u6240\u6709\u4e3a1\u7684\u4f4d\u5bf9\u5e94\u7684\u8282\u70b9vi\uff08\u53c8\u79f0\u4e3a\u6d3b\u8dc3\u9876\u70b9\uff09\u6267\u884cFunc A\uff0c\u518d\u5c06Func A\u7684\u8fd4\u56de\u503c\u4f5c\u4e3aFunc B\u7684\u7b2c\u4e8c\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5f97\u5230\u5c40\u90e8\u6700\u5927\u503c\uff08\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u4e3a0\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u8fd4\u56de\u503c\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u7684pagerank\u503c\uff09\uff0c\u6700\u540e\u518d\u5c06\u6240\u6709\u7ebf\u7a0b\u7684\u8fd4\u56de\u503c\u6c47\u603b\uff0c\u518d\u6b21 \u6267\u884cFunc B\u5f97\u5230\u5168\u5c40\u8fd4\u56de\u503c\uff0c\u5e76\u5b58\u5165max_pr_vi\u53d8\u91cf\u4e2d */ size_t max_pr_vi = olapondb.ProcessVertexActive<size_t>( //Func A [&](size_t vi) { return vi; }, all_vertices, 0, //Func B [&](size_t a, size_t b) { return pr[a] > pr[b] ? a : b; } ); // \u7f51\u9875\u7aef\u8fd4\u56de\u503c\u7684\u83b7\u53d6\u548c\u53d1\u9001 json output; output[\"max_pr_vid\"] = olapondb.OriginalVid(max_pr_vi); output[\"max_pr_val\"] = pr[max_pr_vi]; response = output.dump(); return true; } 3.2 PageRank\u7b97\u6cd5\u6d41\u7a0b pagerank \u4e3b\u6d41\u7a0b\u6709\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5feb\u7167\u7c7b\uff08\u5b50\u56fe\uff09\u8fd8\u6709\u8fed\u4ee3\u6b21\u6570\uff0c\u6574\u4f53\u6d41\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a \u76f8\u5173\u6570\u636e\u7ed3\u6784\u7684\u521d\u59cb\u5316 \u6bcf\u4e2a\u8282\u70b9pagerank\u503c\u7684\u521d\u59cb\u5316 \u6bcf\u4e2a\u8282\u70b9pagerank\u503c\u7684\u8ba1\u7b97\uff0c\u6d3b\u8dc3\u9876\u70b9\u4e3a\u6240\u6709\u9876\u70b9\uff08\u610f\u5473\u7740\u6240\u6709\u9876\u70b9\u90fd\u9700\u8981\u8ba1\u7b97pagerank\u503c\uff09 \u5f97\u5230\u6bcf\u4e2a\u8282\u70b9\u7ecf\u8fc7 num_iterations \u6b21\u8fed\u4ee3\u540e\u7684pagerank\u503c void PageRankCore(OlapBase<Empty>& graph, int num_iterations, ParallelVector<double>& curr) { // \u76f8\u5173\u6570\u636e\u7ed3\u6784\u7684\u521d\u59cb\u5316 auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); auto curr = olapondb.AllocVertexArray<double>(); auto next = olapondb.AllocVertexArray<double>(); size_t num_vertices = olapondb.NumVertices(); double one_over_n = (double)1 / num_vertices; // \u6bcf\u4e2a\u8282\u70b9pagerank\u503c\u7684\u521d\u59cb\u5316\uff0c\u548c\u8be5\u8282\u70b9\u7684\u51fa\u5ea6\u6210\u53cd\u6bd4 double delta = graph.ProcessVertexActive<double>( [&](size_t vi) { curr[vi] = one_over_n; if (olapondb.OutDegree(vi) > 0) { curr[vi] /= olapondb.OutDegree(vi); } return one_over_n; }, all_vertices); // \u603b\u8fed\u4ee3\u8fc7\u7a0b double d = (double)0.85; for (int ii = 0;ii < num_iterations;ii ++) { printf(\"delta(%d)=%lf\\n\", ii, delta); next.Fill((double)0); /* \u51fd\u6570\u7528\u9014\uff1a\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u7684pagerank\u503c \u51fd\u6570\u6d41\u7a0b\u63cf\u8ff0\uff1a\u8be5\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u7684pagerank\u503c\uff0c\u5bf9all_vertices\u4e2d\u6240\u6709\u4e3a1\u7684\u4f4d\u5bf9\u5e94\u7684\u8282\u70b9vi\u6267\u884cFunc C\uff0c\u5f97\u5230\u672c\u8f6e\u8fed\u4ee3\u4e2dvi\u7684pagerank\u503c\uff0c\u5e76\u8fd4\u56devi\u8282\u70b9\u7684pagerank\u53d8\u5316\u503c\uff0c\u6700\u7ec8\u7ecf\u8fc7\u51fd\u6570\u5185\u90e8\u5904\u7406\u6c47\u603b\u6240\u6709\u6d3b\u8dc3\u8282\u70b9\u7684\u603b\u53d8\u5316\u503c\u5e76\u8fd4\u56de\uff0c\u8be5\u503c\u88ab\u5b58\u50a8\u5728delta\u53d8\u91cf\u4e2d */ delta = graph.ProcessVertexActive<double>( // Func C [&](size_t vi) { double sum = 0; // \u4ece\u90bb\u5c45\u4e2d\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u7684pagerank\u503c for (auto & edge : olapondb.InEdges(vi)) { size_t src = edge.neighbour; sum += curr[src]; } next[vi] = sum; // pagerank\u503c\u8ba1\u7b97\u6838\u5fc3\u516c\u5f0f next[vi] = (1 - d) * one_over_n + d * next[vi]; if (ii == num_iterations - 1) { return (double)0; } else { // \u76f8\u5173\u4e2d\u95f4\u53d8\u91cf\u7edf\u8ba1 if (olapondb.OutDegree(vi) > 0) { next[vi] /= olapondb.OutDegree(vi); return fabs(next[vi] - curr[vi]) * olapondb.OutDegree(vi); } else { return fabs(next[vi] - curr[vi]); } } }, all_vertices ); // \u5c06\u672c\u8f6e\u8fed\u4ee3\u5f97\u5230\u7684pagerank\u503c\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u8f93\u5165 curr.Swap(next); } } 4. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0 4.1 \u4e8b\u52a1\u7684\u521b\u5efa //\u8bfb\u4e8b\u52a1\u7684\u521b\u5efa auto txn = db.CreateReadTxn(); //\u5199\u4e8b\u52a1\u7684\u521b\u5efa auto txn = db.CreateWriteTxn(); 4.2 \u5e76\u884c\u5316\u521b\u5efa\u6709\u5411\u56fe OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL ) 4.3 \u5e76\u884c\u5316\u521b\u5efa\u65e0\u5411\u56fe OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED ) 4.4 \u83b7\u53d6\u51fa\u5ea6 size_t OutDegree(size_t vid) 4.5 \u83b7\u53d6\u5165\u5ea6 size_t InDegree(size_t vid) 4.6 \u83b7\u53d6\u51fa\u8fb9\u96c6\u5408 /* \u51fd\u6570\u540d\u79f0\uff1aAdjList<EdgeData> OutEdges(size_t vid) \u6570\u636e\u7ed3\u6784: AdjList \u53ef\u4ee5\u7406\u89e3\u4e3a\u7c7b\u578b\u4e3aAdjUnit\u7ed3\u6784\u4f53\u7684\u6570\u7ec4 AdjUnit \u6709\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a 1. size_t neighbour 2. edge_data\uff0c\u5176\u4e2dneighbour\u8868\u793a\u8be5\u51fa\u8fb9\u6307\u5411\u7684\u76ee\u6807\u8282\u70b9\u7f16\u53f7\uff0c\u5982\u679c\u4e3a\u6709\u6743\u56fe\uff0c\u5219edge_data\u6570\u636e\u7c7b\u578b\u548c\u8f93\u5165\u6587\u4ef6\u4e2d\u8fb9\u7684\u6743\u91cd\u503c\u76f8\u540c\uff0c\u5426\u5219\u6570\u636e\u7c7b\u578b\u4e3aEmpty \u4f7f\u7528\u793a\u4f8b\uff1a\u8f93\u51fa\u8282\u70b9vid\u7684\u6240\u6709\u51fa\u5ea6\u90bb\u5c45 */ for (auto & edge : olapondb.OutEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); } 4.7 \u83b7\u53d6\u5165\u8fb9\u96c6\u5408 AdjList<EdgeData> InEdges(size_t vid) // \u4f7f\u7528\u793a\u4f8b\uff1a\u8f93\u51fa\u8282\u70b9vid\u7684\u6240\u6709\u5165\u5ea6\u90bb\u5c45 for (auto & edge : olapondb.InEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); } 4.8 \u83b7\u53d6TuGraph\u4e2d\u8282\u70b9\u5bf9\u5e94OlapOnDB\u7684\u8282\u70b9\u7f16\u53f7 size_t OriginalVid(size_t vid) // \u5907\u6ce8\uff1a TuGraph\u4e2d\u8f93\u5165\u7684\u8282\u70b9\u7f16\u53f7\u53ef\u4ee5\u662f\u975e\u6570\u5b57\uff0c\u6bd4\u5982\u4eba\u540d\u7b49\uff0c\u5728\u751f\u6210OlapOnDB\u5b50\u56fe\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4eba\u540d\u7b49\u8f6c\u5316\u4e3a\u6570\u5b57\u8fdb\u884c\u540e\u7eed\u5904\u7406\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u67d0\u4e9b\u7279\u5b9a\u573a\u666f 4.9 \u83b7\u53d6OlapOnDB\u4e2d\u8282\u70b9\u5bf9\u5e94TuGraph\u7684\u8282\u70b9\u7f16\u53f7 size_t MappedVid(size_t original_vid) 4.10 \u6d3b\u8dc3\u9876\u70b9\u7684\u63cf\u8ff0 \u6d3b\u8dc3\u9876\u70b9\u6307\u7684\u662f\u5728\u6279\u5904\u7406\u51fd\u6570\u4e2d\u9700\u8981\u5904\u7406\u7684\u9876\u70b9\uff0c\u5728\u672c\u4f8b\u5b50\u4e2d\u53ea\u662f\u8f93\u51fa\u4e86\u6d3b\u8dc3\u9876\u70b9\u7684\u7f16\u53f7\uff0c\u5e76\u4e14\u6c47\u603b\u6d3b\u8dc3\u9876\u70b9\u7684\u6570\u91cf\uff1a ParallelBitset temp = 000111\uff1b //\u5f53\u524d\u6d3b\u8dc3\u9876\u70b9\u4e3a3\uff0c4\uff0c5\u53f7\u9876\u70b9 size_t delta = ForEachActiveVertex<double>( //void c [&](size_t vi) { printf(\"active_vertexId = %lu\\n\",vi); return 1; }, all_vertices ); \u51fd\u6570\u7684\u8fd0\u884c\u7ed3\u679c\u663e\u800c\u6613\u89c1\uff0c\u56e0\u4e3a\u591a\u7ebf\u7a0b\u7684\u5173\u7cfb\uff0c\u4e00\u4e0b\u8f93\u51fa\u987a\u5e8f\u53ef\u80fd\u6709\u6240\u53d8\u5316\uff1a active_vertexId = 3 active_vertexId = 4 active_vertexId = 5 \u5c40\u90e8\u8fd4\u56de\u503c\u5747\u4e3a1\uff0c\u8be5\u51fd\u6570\u4f1a\u5728\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\u5c06\u6240\u6709\u7684\u5c40\u90e8\u8fd4\u56de\u503c\u7d2f\u52a0\u5f97\u5230\u6700\u7ec8\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u5b58\u50a8\u5728 delta \u53d8\u91cf\u4e2d\uff0c\u8be5\u503c\u6700\u7ec8\u4e3a3","title":"OLAP \u5728\u6570\u636e\u5e93\u4e0a\u7684 API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#olapondb-api","text":"\u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86OlapOnDB API\u7684\u4f7f\u7528\u8bf4\u660e","title":"OlapOnDB API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#_1","text":"1. \u7b80\u4ecb 2. \u6a21\u578b 2.1 \u57fa\u4e8e\u5feb\u7167\u7684\u5b58\u50a8\u7ed3\u6784 2.2 BSP\u8ba1\u7b97\u6a21\u578b 3. \u7b97\u6cd5\u4e3e\u4f8b 3.1 \u4e3b\u51fd\u6570 3.2 PageRank\u7b97\u6cd5\u6d41\u7a0b 4. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0 4.1 \u4e8b\u52a1\u7684\u521b\u5efa 4.2 \u5e76\u884c\u5316\u521b\u5efa\u6709\u5411\u56fe 4.3 \u5e76\u884c\u5316\u521b\u5efa\u65e0\u5411\u56fe 4.4 \u83b7\u53d6\u51fa\u5ea6 4.5 \u83b7\u53d6\u5165\u5ea6 4.6 \u83b7\u53d6\u51fa\u8fb9\u96c6\u5408 4.7 \u83b7\u53d6\u5165\u8fb9\u96c6\u5408 4.8 \u83b7\u53d6TuGraph\u4e2d\u8282\u70b9\u5bf9\u5e94OlapOnDB\u7684\u8282\u70b9\u7f16\u53f7 4.9 \u83b7\u53d6OlapOnDB\u4e2d\u8282\u70b9\u5bf9\u5e94TuGraph\u7684\u8282\u70b9\u7f16\u53f7 4.10 \u6d3b\u8dc3\u9876\u70b9\u7684\u63cf\u8ff0","title":"\u76ee\u5f55"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#1","text":"\u4e00\u822c\u7528\u6237\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u7684\u53ea\u662f\u5c06\u9700\u8981\u5206\u6790\u7684\u5b50\u56fe\u62bd\u53d6\u51fa\u6765\u7684\u8fc7\u7a0b\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528TuGraph\u4e2d\u4e30\u5bcc\u7684\u8f85\u52a9\u63a5\u53e3\u5b9e\u73b0\u81ea\u5df1\u7684\u56fe\u5206\u6790\u7b97\u6cd5\u3002 \u8be5\u6587\u6863\u4e3b\u8981\u4ecb\u7ecdProcedure\u53caEmbed\u7684\u63a5\u53e3\u8bbe\u8ba1\uff0c\u5e76\u4ecb\u7ecd\u90e8\u5206\u5e38\u7528\u63a5\u53e3\uff0c\u5177\u4f53\u7684\u63a5\u53e3\u4fe1\u606f\u53c2\u89c1include/lgraph/olap_on_db.h\u6587\u4ef6\u3002","title":"1. \u7b80\u4ecb"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#2","text":"Procedure\u53caEmbed\u4f7f\u7528\u5230\u7684\u8f85\u52a9\u51fd\u6570\u4e3b\u8981\u5305\u542b\u5728OlapOnDB\u7c7b\uff0c\u8fd8\u6709\u4e00\u4e9b\u4f7f\u7528\u9891\u7387\u8f83\u9ad8\u7684\u51fd\u6570\u90fd\u4f1a\u9010\u4e00\u4ecb\u7ecd \u5728TuGraph\u4e2dOLAP\u76f8\u5173\u7684\u6709\u4ee5\u4e0b\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\uff1a DB\u56fe\u5206\u6790\u7c7b OlapOnDB<EdgeData> \u9876\u70b9\u6570\u7ec4 ParallelVector<VertexData> \u9876\u70b9\u96c6\u5408 ParallelBitset \u8fb9\u6570\u636e\u7ed3\u6784 AdjUnit/AdjUnit<Empty> \u8fb9\u96c6\u5408\u6570\u636e\u7ed3\u6784 AdjList<EdgeData>","title":"2. \u6a21\u578b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#21","text":"TuGraph\u4e2d\u7684OlapOnDB\u7c7b\u80fd\u591f\u63d0\u4f9b\u6570\u636e\u201c\u5feb\u7167\u201d\uff0c\u5373\u5efa\u7acb\u4e00\u4e2a\u5bf9\u6307\u5b9a\u6570\u636e\u96c6\u7684\u5b8c\u5168\u53ef\u7528\u62f7\u8d1d\uff0c\u8be5\u62f7\u8d1d\u5305\u62ec\u76f8\u5e94\u6570\u636e\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\uff08\u62f7\u8d1d\u5f00\u59cb\u7684\u65f6\u95f4\u70b9\uff09\u7684\u955c\u50cf\u3002\u7531\u4e8eOLAP\u7684\u64cd\u4f5c\u4ec5\u6d89\u53ca\u8bfb\u64cd\u4f5c\u800c\u4e0d\u6d89\u53ca\u5199\u64cd\u4f5c\uff0cOlapOnDB\u4f1a\u4ee5\u4e00\u79cd\u66f4\u7d27\u51d1\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e03\uff0c\u5728\u8282\u7701\u7a7a\u95f4\u7684\u540c\u65f6\uff0c\u63d0\u9ad8\u6570\u636e\u8bbf\u95ee\u7684\u5c40\u90e8\u6027\u3002","title":"2.1 \u57fa\u4e8e\u5feb\u7167\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#22-bsp","text":"TuGraph\u5728\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86BSP\uff08Bulk Synchronous Parallel\uff09\u6a21\u578b\uff0c\u4f7f\u5f97\u8be5\u8fc7\u7a0b\u80fd\u591f\u5e76\u884c\u6267\u884c\uff0c\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387\u3002 BSP\u8ba1\u7b97\u6a21\u578b\u7684\u6838\u5fc3\u601d\u8def\u4e3a\u8d85\u6b65\uff08Super Step\uff09\u7684\u63d0\u51fa\u548c\u4f7f\u7528\u3002\u5728OlapOnDB\u521b\u5efa\u540e\uff0c\u5728\u8be5\u6570\u636e\u4e0a\u7684\u8ba1\u7b97\u5206\u4e3a\u591a\u4e2a\u8d85\u6b65\uff0c\u6bd4\u5982PageRank\uff0c\u5206\u4e3a\u591a\u8f6e\u8fed\u4ee3\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u5c31\u662f\u4e00\u4e2a\u8d85\u6b65\u3002\u4e0d\u540c\u8d85\u6b65\u4e4b\u95f4\u7528\u5b58\u5728\u663e\u5f0f\u540c\u6b65\uff0c\u4ece\u800c\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u5728\u5b8c\u6210\u540c\u4e00\u8d85\u6b65\u540e\u540c\u65f6\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8d85\u6b65\u3002\u5728\u4e00\u4e2a\u8d85\u6b65\u5185\u90e8\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5f02\u6b65\u6267\u884c\uff0c\u5229\u7528\u5e76\u884c\u63d0\u5347\u8ba1\u7b97\u6548\u7387\u3002 \u5229\u7528BSP\u8ba1\u7b97\u6a21\u578b\u80fd\u591f\u6709\u6548\u907f\u514d\u6b7b\u9501\uff0c\u901a\u8fc7\u969c\u788d\u540c\u6b65\u7684\u65b9\u5f0f\u80fd\u591f\u4ee5\u786c\u4ef6\u65b9\u5f0f\u5b9e\u73b0\u7c97\u7c92\u5ea6\u7684\u5168\u5c40\u540c\u6b65\uff0c\u4f7f\u5f97\u56fe\u8ba1\u7b97\u80fd\u591f\u5e76\u884c\u5316\u6267\u884c\uff0c\u800c\u7a0b\u5e8f\u5458\u65e0\u9700\u5728\u540c\u6b65\u4e92\u65a5\u4e0a\u5927\u8d39\u5468\u7ae0\u3002","title":"2.2 BSP\u8ba1\u7b97\u6a21\u578b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#3","text":"\u5728\u8fd9\u91cc\u5bf9PageRank\u7b97\u6cd5\u5206\u5757\u505a\u89e3\u91ca\uff0c\u5927\u4f53\u4e0a\u5206\u4e3a\u4e3b\u51fd\u6570 Process \u548cPageRank\u7b97\u6cd5\u6d41\u7a0b PageRank \u51fd\u6570","title":"3. \u7b97\u6cd5\u4e3e\u4f8b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#31","text":"\u4e3b\u51fd\u6570\u8f93\u5165\u6709\u4e09\u4e2a\u53c2\u6570\uff0c TuGraph \u6570\u636e\u5e93\u53c2\u6570 db \uff0c\u4ece\u7f51\u9875\u7aef\u83b7\u53d6\u7684\u8bf7\u6c42 request \uff0c\u7ed9\u7f51\u9875\u7aef\u7684\u8fd4\u56de\u503c response \uff0c\u6574\u4f53\u6d41\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e00\u4e0b\u51e0\u6b65\uff1a \u76f8\u5173\u53c2\u6570\u7684\u83b7\u53d6 \u5feb\u7167\u7c7b\u7684\u521b\u5efa PageRank\u7b97\u6cd5\u4e3b\u6d41\u7a0b \u7f51\u9875\u7aef\u8fd4\u56de\u503c\u7684\u83b7\u53d6\u548c\u53d1\u9001 extern \"C\" bool Process(GraphDB & db, const std::string & request, std::string & response) { // \u4ece\u7f51\u9875\u7aef\u8bf7\u6c42\u4e2d\u83b7\u53d6\u8fed\u4ee3\u6b21\u6570\uff08num_iterations\uff09\uff0c int num_iterations = 20; try { json input = json::parse(request); num_iterations = input[\"num_iterations\"].get<int>(); } catch (std::exception & e) { throw std::runtime_error(\"json parse error\"); return false; } // \u8bfb\u4e8b\u52a1\u7684\u521b\u5efa\u4ee5\u53ca\u5feb\u7167\u7c7b\u7684\u521b\u5efa auto txn = db.CreateReadTxn(); OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL ); // \u521b\u5efapr\u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684pr\u503c ParallelVector<double> pr = olapondb.AllocVertexArray<double>(); // pagerank\u7b97\u6cd5\u4e3b\u6d41\u7a0b\uff0c\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684pagerank\u503c PageRankCore(olapondb, num_iterations, pr); auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); /* \u51fd\u6570\u7528\u9014\uff1a\u4ece\u6240\u6709\u8282\u70b9\u4e2d\u83b7\u53d6pagerank\u503c\u6700\u5927\u7684\u8282\u70b9\u7f16\u53f7 \u51fd\u6570\u6d41\u7a0b\u63cf\u8ff0\uff1a\u8be5\u51fd\u6570\u5bf9\u9876\u70b9\u96c6\u5408all_vertices\u4e2d\u6240\u6709\u4e3a1\u7684\u4f4d\u5bf9\u5e94\u7684\u8282\u70b9vi\uff08\u53c8\u79f0\u4e3a\u6d3b\u8dc3\u9876\u70b9\uff09\u6267\u884cFunc A\uff0c\u518d\u5c06Func A\u7684\u8fd4\u56de\u503c\u4f5c\u4e3aFunc B\u7684\u7b2c\u4e8c\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5f97\u5230\u5c40\u90e8\u6700\u5927\u503c\uff08\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u4e3a0\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u8fd4\u56de\u503c\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u7684pagerank\u503c\uff09\uff0c\u6700\u540e\u518d\u5c06\u6240\u6709\u7ebf\u7a0b\u7684\u8fd4\u56de\u503c\u6c47\u603b\uff0c\u518d\u6b21 \u6267\u884cFunc B\u5f97\u5230\u5168\u5c40\u8fd4\u56de\u503c\uff0c\u5e76\u5b58\u5165max_pr_vi\u53d8\u91cf\u4e2d */ size_t max_pr_vi = olapondb.ProcessVertexActive<size_t>( //Func A [&](size_t vi) { return vi; }, all_vertices, 0, //Func B [&](size_t a, size_t b) { return pr[a] > pr[b] ? a : b; } ); // \u7f51\u9875\u7aef\u8fd4\u56de\u503c\u7684\u83b7\u53d6\u548c\u53d1\u9001 json output; output[\"max_pr_vid\"] = olapondb.OriginalVid(max_pr_vi); output[\"max_pr_val\"] = pr[max_pr_vi]; response = output.dump(); return true; }","title":"3.1 \u4e3b\u51fd\u6570"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#32-pagerank","text":"pagerank \u4e3b\u6d41\u7a0b\u6709\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5feb\u7167\u7c7b\uff08\u5b50\u56fe\uff09\u8fd8\u6709\u8fed\u4ee3\u6b21\u6570\uff0c\u6574\u4f53\u6d41\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a \u76f8\u5173\u6570\u636e\u7ed3\u6784\u7684\u521d\u59cb\u5316 \u6bcf\u4e2a\u8282\u70b9pagerank\u503c\u7684\u521d\u59cb\u5316 \u6bcf\u4e2a\u8282\u70b9pagerank\u503c\u7684\u8ba1\u7b97\uff0c\u6d3b\u8dc3\u9876\u70b9\u4e3a\u6240\u6709\u9876\u70b9\uff08\u610f\u5473\u7740\u6240\u6709\u9876\u70b9\u90fd\u9700\u8981\u8ba1\u7b97pagerank\u503c\uff09 \u5f97\u5230\u6bcf\u4e2a\u8282\u70b9\u7ecf\u8fc7 num_iterations \u6b21\u8fed\u4ee3\u540e\u7684pagerank\u503c void PageRankCore(OlapBase<Empty>& graph, int num_iterations, ParallelVector<double>& curr) { // \u76f8\u5173\u6570\u636e\u7ed3\u6784\u7684\u521d\u59cb\u5316 auto all_vertices = olapondb.AllocVertexSubset(); all_vertices.Fill(); auto curr = olapondb.AllocVertexArray<double>(); auto next = olapondb.AllocVertexArray<double>(); size_t num_vertices = olapondb.NumVertices(); double one_over_n = (double)1 / num_vertices; // \u6bcf\u4e2a\u8282\u70b9pagerank\u503c\u7684\u521d\u59cb\u5316\uff0c\u548c\u8be5\u8282\u70b9\u7684\u51fa\u5ea6\u6210\u53cd\u6bd4 double delta = graph.ProcessVertexActive<double>( [&](size_t vi) { curr[vi] = one_over_n; if (olapondb.OutDegree(vi) > 0) { curr[vi] /= olapondb.OutDegree(vi); } return one_over_n; }, all_vertices); // \u603b\u8fed\u4ee3\u8fc7\u7a0b double d = (double)0.85; for (int ii = 0;ii < num_iterations;ii ++) { printf(\"delta(%d)=%lf\\n\", ii, delta); next.Fill((double)0); /* \u51fd\u6570\u7528\u9014\uff1a\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u7684pagerank\u503c \u51fd\u6570\u6d41\u7a0b\u63cf\u8ff0\uff1a\u8be5\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u7684pagerank\u503c\uff0c\u5bf9all_vertices\u4e2d\u6240\u6709\u4e3a1\u7684\u4f4d\u5bf9\u5e94\u7684\u8282\u70b9vi\u6267\u884cFunc C\uff0c\u5f97\u5230\u672c\u8f6e\u8fed\u4ee3\u4e2dvi\u7684pagerank\u503c\uff0c\u5e76\u8fd4\u56devi\u8282\u70b9\u7684pagerank\u53d8\u5316\u503c\uff0c\u6700\u7ec8\u7ecf\u8fc7\u51fd\u6570\u5185\u90e8\u5904\u7406\u6c47\u603b\u6240\u6709\u6d3b\u8dc3\u8282\u70b9\u7684\u603b\u53d8\u5316\u503c\u5e76\u8fd4\u56de\uff0c\u8be5\u503c\u88ab\u5b58\u50a8\u5728delta\u53d8\u91cf\u4e2d */ delta = graph.ProcessVertexActive<double>( // Func C [&](size_t vi) { double sum = 0; // \u4ece\u90bb\u5c45\u4e2d\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u7684pagerank\u503c for (auto & edge : olapondb.InEdges(vi)) { size_t src = edge.neighbour; sum += curr[src]; } next[vi] = sum; // pagerank\u503c\u8ba1\u7b97\u6838\u5fc3\u516c\u5f0f next[vi] = (1 - d) * one_over_n + d * next[vi]; if (ii == num_iterations - 1) { return (double)0; } else { // \u76f8\u5173\u4e2d\u95f4\u53d8\u91cf\u7edf\u8ba1 if (olapondb.OutDegree(vi) > 0) { next[vi] /= olapondb.OutDegree(vi); return fabs(next[vi] - curr[vi]) * olapondb.OutDegree(vi); } else { return fabs(next[vi] - curr[vi]); } } }, all_vertices ); // \u5c06\u672c\u8f6e\u8fed\u4ee3\u5f97\u5230\u7684pagerank\u503c\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u8f93\u5165 curr.Swap(next); } }","title":"3.2 PageRank\u7b97\u6cd5\u6d41\u7a0b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#4","text":"","title":"4. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#41","text":"//\u8bfb\u4e8b\u52a1\u7684\u521b\u5efa auto txn = db.CreateReadTxn(); //\u5199\u4e8b\u52a1\u7684\u521b\u5efa auto txn = db.CreateWriteTxn();","title":"4.1 \u4e8b\u52a1\u7684\u521b\u5efa"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#42","text":"OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL )","title":"4.2 \u5e76\u884c\u5316\u521b\u5efa\u6709\u5411\u56fe"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#43","text":"OlapOnDB<Empty> olapondb( db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED )","title":"4.3 \u5e76\u884c\u5316\u521b\u5efa\u65e0\u5411\u56fe"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#44","text":"size_t OutDegree(size_t vid)","title":"4.4 \u83b7\u53d6\u51fa\u5ea6"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#45","text":"size_t InDegree(size_t vid)","title":"4.5 \u83b7\u53d6\u5165\u5ea6"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#46","text":"/* \u51fd\u6570\u540d\u79f0\uff1aAdjList<EdgeData> OutEdges(size_t vid) \u6570\u636e\u7ed3\u6784: AdjList \u53ef\u4ee5\u7406\u89e3\u4e3a\u7c7b\u578b\u4e3aAdjUnit\u7ed3\u6784\u4f53\u7684\u6570\u7ec4 AdjUnit \u6709\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a 1. size_t neighbour 2. edge_data\uff0c\u5176\u4e2dneighbour\u8868\u793a\u8be5\u51fa\u8fb9\u6307\u5411\u7684\u76ee\u6807\u8282\u70b9\u7f16\u53f7\uff0c\u5982\u679c\u4e3a\u6709\u6743\u56fe\uff0c\u5219edge_data\u6570\u636e\u7c7b\u578b\u548c\u8f93\u5165\u6587\u4ef6\u4e2d\u8fb9\u7684\u6743\u91cd\u503c\u76f8\u540c\uff0c\u5426\u5219\u6570\u636e\u7c7b\u578b\u4e3aEmpty \u4f7f\u7528\u793a\u4f8b\uff1a\u8f93\u51fa\u8282\u70b9vid\u7684\u6240\u6709\u51fa\u5ea6\u90bb\u5c45 */ for (auto & edge : olapondb.OutEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); }","title":"4.6 \u83b7\u53d6\u51fa\u8fb9\u96c6\u5408"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#47","text":"AdjList<EdgeData> InEdges(size_t vid) // \u4f7f\u7528\u793a\u4f8b\uff1a\u8f93\u51fa\u8282\u70b9vid\u7684\u6240\u6709\u5165\u5ea6\u90bb\u5c45 for (auto & edge : olapondb.InEdges(vid)) { size_t dst = edge.neighbour; printf(\"src = %lu,dst = %lu\\n\",vid,dst); }","title":"4.7 \u83b7\u53d6\u5165\u8fb9\u96c6\u5408"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#48-tugrapholapondb","text":"size_t OriginalVid(size_t vid) // \u5907\u6ce8\uff1a TuGraph\u4e2d\u8f93\u5165\u7684\u8282\u70b9\u7f16\u53f7\u53ef\u4ee5\u662f\u975e\u6570\u5b57\uff0c\u6bd4\u5982\u4eba\u540d\u7b49\uff0c\u5728\u751f\u6210OlapOnDB\u5b50\u56fe\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4eba\u540d\u7b49\u8f6c\u5316\u4e3a\u6570\u5b57\u8fdb\u884c\u540e\u7eed\u5904\u7406\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u67d0\u4e9b\u7279\u5b9a\u573a\u666f","title":"4.8 \u83b7\u53d6TuGraph\u4e2d\u8282\u70b9\u5bf9\u5e94OlapOnDB\u7684\u8282\u70b9\u7f16\u53f7"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#49-olapondbtugraph","text":"size_t MappedVid(size_t original_vid)","title":"4.9 \u83b7\u53d6OlapOnDB\u4e2d\u8282\u70b9\u5bf9\u5e94TuGraph\u7684\u8282\u70b9\u7f16\u53f7"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/3.olap-on-db-api/#410","text":"\u6d3b\u8dc3\u9876\u70b9\u6307\u7684\u662f\u5728\u6279\u5904\u7406\u51fd\u6570\u4e2d\u9700\u8981\u5904\u7406\u7684\u9876\u70b9\uff0c\u5728\u672c\u4f8b\u5b50\u4e2d\u53ea\u662f\u8f93\u51fa\u4e86\u6d3b\u8dc3\u9876\u70b9\u7684\u7f16\u53f7\uff0c\u5e76\u4e14\u6c47\u603b\u6d3b\u8dc3\u9876\u70b9\u7684\u6570\u91cf\uff1a ParallelBitset temp = 000111\uff1b //\u5f53\u524d\u6d3b\u8dc3\u9876\u70b9\u4e3a3\uff0c4\uff0c5\u53f7\u9876\u70b9 size_t delta = ForEachActiveVertex<double>( //void c [&](size_t vi) { printf(\"active_vertexId = %lu\\n\",vi); return 1; }, all_vertices ); \u51fd\u6570\u7684\u8fd0\u884c\u7ed3\u679c\u663e\u800c\u6613\u89c1\uff0c\u56e0\u4e3a\u591a\u7ebf\u7a0b\u7684\u5173\u7cfb\uff0c\u4e00\u4e0b\u8f93\u51fa\u987a\u5e8f\u53ef\u80fd\u6709\u6240\u53d8\u5316\uff1a active_vertexId = 3 active_vertexId = 4 active_vertexId = 5 \u5c40\u90e8\u8fd4\u56de\u503c\u5747\u4e3a1\uff0c\u8be5\u51fd\u6570\u4f1a\u5728\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\u5c06\u6240\u6709\u7684\u5c40\u90e8\u8fd4\u56de\u503c\u7d2f\u52a0\u5f97\u5230\u6700\u7ec8\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u5b58\u50a8\u5728 delta \u53d8\u91cf\u4e2d\uff0c\u8be5\u503c\u6700\u7ec8\u4e3a3","title":"4.10 \u6d3b\u8dc3\u9876\u70b9\u7684\u63cf\u8ff0"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/","text":"OlapOnDisk API \u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86OlapOnDisk API\u7684\u4f7f\u7528\u8bf4\u660e \u76ee\u5f55 1. \u7b80\u4ecb 2. \u7b97\u6cd5\u4e3e\u4f8b 2.1 \u5934\u6587\u4ef6 2.2 \u914d\u7f6e\u7c7bMyConfig 2.3 \u4e3b\u51fd\u6570 2.4 bfs\u7b97\u6cd5\u6d41\u7a0b 3. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0 3.1 \u56fe\u52a0\u8f7d 3.2 \u56fe\u5199\u5165 3.3 \u56fe\u89e3\u6790\u51fd\u6570 1. \u7b80\u4ecb TuGraph\u7684Standalone\u6a21\u5f0f\u53ef\u7528\u4e8e\u52a0\u8f7d\u56fe\u6570\u636e\u6587\u4ef6\uff0c\u5176\u4e2d\u56fe\u6570\u636e\u6587\u4ef6\u6765\u6e90\u53ef\u5305\u542btext\u6587\u672c\u6587\u4ef6\u3001BINARY_FILE\u4e8c\u8fdb\u5236\u6587\u4ef6\u548cODPS\u6e90\u3002\u5728\u8be5\u6a21\u5f0f\u4e0b\uff0cTuGraph\u53ef\u5b9e\u73b0\u591a\u6570\u636e\u6765\u6e90\u5feb\u901f\u52a0\u8f7d\u6210\u56fe\uff0c\u7136\u540e\u5728\u8be5\u56fe\u4e0a\u8fd0\u884c\u5982BFS\u3001WCC\u3001SSSP\u7b49\u8fed\u4ee3\u5f0f\u7b97\u6cd5\uff0c\u5e76\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c\u81f3\u7ec8\u7aef\u3002 \u5728TuGraph\u4e2d\uff0c\u5bfc\u51fa\u548c\u8ba1\u7b97\u8fc7\u7a0b\u5747\u53ef\u4ee5\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u4ece\u800c\u8fbe\u5230\u8fd1\u4e4e\u5b9e\u65f6\u7684\u5904\u7406\u5206\u6790\uff0c\u548c\u4f20\u7edf\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5373\u907f\u514d\u4e86\u6570\u636e\u5bfc\u51fa\u843d\u76d8\u7684\u5f00\u9500\uff0c\u53c8\u80fd\u4f7f\u7528\u7d27\u51d1\u7684\u56fe\u6570\u636e\u7ed3\u6784\u83b7\u5f97\u8ba1\u7b97\u7684\u7406\u60f3\u6027\u80fd\u3002 TuGraph\u5185\u7f6e\u4e86\u5927\u91cf\u7684\u5e38\u89c1\u56fe\u5206\u6790\u7b97\u6cd5\u548c\u4e30\u5bcc\u7684\u8f85\u52a9\u63a5\u53e3\uff0c\u56e0\u6b64\u7528\u6237\u51e0\u4e4e\u4e0d\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u5177\u4f53\u7684\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u5728\u5b9e\u73b0\u81ea\u5df1\u7684\u5b58\u50a8\u8fc7\u7a0b\u7684\u65f6\u5019\u5c06\u76f8\u5e94\u7b97\u6cd5\u5e93\u7684\u5934\u6587\u4ef6(.h)\u5305\u542b\u5230\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u5728\u7f16\u8bd1\u9636\u6bb5\u94fe\u63a5\u81ea\u5df1\u7684\u52a8\u6001\u5e93\u6587\u4ef6\u5373\u53ef\u3002 \u8be5\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86Standalone\u7684\u5e38\u7528\u63a5\u53e3\uff0c\u4f7f\u7528\u5230\u7684\u8f85\u52a9\u51fd\u6570\u4e3b\u8981\u5305\u542b\u5728OlapOnDB\u7c7b\u3002\u540c\u65f6\u4e3a\u5e2e\u52a9\u7528\u6237\u7406\u89e3\u65b9\u4fbf\uff0c\u5bf9BFS\u7b97\u6cd5\u8fdb\u884c\u4e3e\u4f8b\u8bf4\u660e\u3002 2. \u7b97\u6cd5\u4e3e\u4f8b \u5728\u8fd9\u91cc\u5bf9BFS\u7b97\u6cd5\u5206\u5757\u505a\u89e3\u91ca\uff0c\u5927\u4f53\u4e0a\u5206\u4e3a\u4e3b\u51fd\u6570 main \u3001BFS\u7b97\u6cd5\u6d41\u7a0b BFSCore \u51fd\u6570\u548c\u914d\u7f6e\u7c7bMyConfig\u3002 2.1 \u5934\u6587\u4ef6 #include \"olap/olap_on_disk.h\" #include \"tools/json.hpp\" //\u4f7f\u7528 TuGraph \u65f6\u9700\u8981\u5305\u542b\u7684\u5934\u6587\u4ef6 #include \"./algo.h\" //\u5305\u542b\u5404\u79cd\u7b97\u6cd5\u903b\u8f91\u51fd\u6570\u7684\u5934\u6587\u4ef6 \u5728\u4f7f\u7528 TuGraph \u5b9e\u73b0\u56fe\u6570\u636e\u6587\u4ef6\u8ba1\u7b97\u5e94\u7528\u65f6\uff0c\u4e00\u822c\u9996\u5148\u5efa\u7acbStandaloneGraph\u7c7b\u5bf9\u8c61graph\uff0c\u5c06\u56fe\u6587\u4ef6\u6570\u636e\u52a0\u8f7d\u8fdbgraph\u4e2d\uff0c\u4e4b\u540e\u901a\u8fc7\u8c03\u7528\u56fe\u903b\u8f91\u51fd\u6570\u5b9e\u73b0\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u6700\u540e\u5bf9\u56fe\u8ba1\u7b97\u7684\u7ed3\u679c\u8fdb\u884c\u6253\u5370\u8f93\u51fa\u3002 2.2 \u914d\u7f6e\u7c7bMyConfig MyConfig\u914d\u7f6e\u7c7b\u51fd\u6570\u7528\u4e8e\u63d0\u4f9b\u7b97\u6cd5\u903b\u8f91\u8ba1\u7b97\u65f6\u6240\u9700\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u7ee7\u627f\u4e8eConfigBase ,\u5176\u4e2dEdgeDate\u53ef\u6839\u636e\u52a0\u8f7d\u56fe\u7c7b\u578b\u4e0d\u540c\u9009\u62e9Empty\uff08\u65e0\u6743\u56fe\uff09\u3001int\uff08\u5e26\u6743\u56fe\u6743\u91cd\u4e3a\u6574\u6570\uff09\u6216\u8005double\uff08\u5e26\u6743\u56fe\u6743\u91cd\u4e3adouble\uff09\u7c7b\u578b\u3002 MyConfig\u914d\u7f6e\u7c7b\u4e00\u822c\u6839\u636e\u7b97\u6cd5\u4e0d\u540c\uff0c\u9700\u8981\u989d\u5916\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a 1.\u7b97\u6cd5\u6240\u9700\u53c2\u6570 2.\u7b97\u6cd5\u540d\u79f0 3.\u914d\u7f6e\u7c7b\u5185Print\u51fd\u6570 \u5176\u4f59\u516c\u7528\u6210\u5458\u7ee7\u627f\u4e0eConfigBase\uff0c\u53ef\u53c2\u8003src/olap/olap_config.h\u67e5\u9605\u3002 class MyConfig : public ConfigBase<Empty> { public: // \u7b97\u6cd5\u6240\u9700\u53c2\u6570\u521d\u59cb\u5316 size_t root = 0; std::string name = std::string(\"bfs\"); void AddParameter(fma_common::Configuration & config) { ConfigBase<Empty>::AddParameter(config); config.Add(root, \"root\", true) .Comment(\"the root of bfs\"); } void Print() { ConfigBase<Empty>::Print(); std::cout << \" name: \" << name << std::endl; if (root != size_t(-1)) { std::cout << \" root: \" << root << std::endl; } else { std::cout << \" root: UNSET\" << std::endl; } } // \u914d\u7f6e\u6587\u4ef6\u63a5\u53d7\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u8be5\u7528\u4f8b\u4f1a\u987a\u6b21\u8bfb\u53d6\u547d\u4ee4\u884c\u8c03\u7528\u7b97\u6cd5\u65f6\u7684\u53c2\u6570\uff0c\u4f18\u5148\u4f7f\u7528\u7528\u6237\u6307\u5b9a\u6570\u503c\uff0c\u82e5\u7528\u6237\u5e76\u672a\u6307\u5b9a\u5219\u9009\u62e9\u9ed8\u8ba4\u53c2\u6570\u3002 MyConfig(int &argc, char** &argv): ConfigBase<Empty>(argc, argv) { fma_common::Configuration config; AddParameter(config); config.ExitAfterHelp(true); config.ParseAndFinalize(argc, argv); Print(); } }; 2.3 \u4e3b\u51fd\u6570 int main(int argc, char** argv) { double start_time; // \u7edf\u8ba1\u5185\u5b58\u6d88\u8017\u7c7bMemUsage\u5b9e\u4f8b\u5316 MemUsage memUsage; memUsage.startMemRecord(); // prepare start_time = get_time(); // \u914d\u7f6e\u7c7bMyConfig\u5b9e\u4f8b\u5316 MyConfig config(argc, argv); size_t root_vid = config.root; // OlapOnDisk\u7c7b\u5b9e\u4f8b\u5316 OlapOnDisk<Empty> graph; graph.Load(config, DUAL_DIRECTION); memUsage.print(); memUsage.reset(); // \u7edf\u8ba1\u56fe\u52a0\u8f7d\u6d88\u8017\u65f6\u95f4 auto prepare_cost = get_time() - start_time; printf(\"prepare_cost = %.2lf(s)\\n\", prepare_cost); // core start_time = get_time(); // \u521b\u5efa\u6570\u7ec4\u7528\u4e8e\u7edf\u8ba1\u67d0\u8282\u70b9\u662f\u5426\u904d\u5386\u8fc7 auto parent = graph.AllocVertexArray<size_t>(); // \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff0c\u8fd4\u56de\u56fe\u5185root_vid\u6839\u7ed3\u70b9\u8fde\u63a5\u7684\u8282\u70b9\u4e2a\u6570 size_t count = BFSCore(graph, root_vid, parent); memUsage.print(); memUsage.reset(); auto core_cost = get_time() - start_time; printf(\"core_cost = %.2lf(s)\\n\", core_cost); // output start_time = get_time(); // \u6253\u5370\u76f8\u5173\u4fe1\u606f\u81f3\u7ec8\u7aef printf(\"found_vertices = %ld\\n\", count); auto output_cost = get_time() - start_time; printf(\"output_cost = %.2lf(s)\\n\", output_cost); printf(\"total_cost = %.2lf(s)\\n\", prepare_cost + core_cost + output_cost); printf(\"DONE.\"); return 0; } 2.4 bfs\u7b97\u6cd5\u6d41\u7a0b bfs \u4e3b\u6d41\u7a0b\u6709\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5feb\u7167\u7c7b\uff08\u5b50\u56fe\uff09\u8fd8\u6709\u8fed\u4ee3\u6b21\u6570\uff0c\u6574\u4f53\u6d41\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a \u76f8\u5173\u5b9a\u4e49\u3001\u6570\u636e\u7ed3\u6784\u7684\u521d\u59cb\u5316 \u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u5faa\u73af\u8ba1\u7b97\uff0c\u6bcf\u4e00\u8f6e\u627e\u5230\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u90bb\u7684\u5168\u90e8\u8282\u70b9\uff0c\u5e76\u5728\u8be5\u8f6e\u6b21\u7ec8\u6b62\u65f6\u8fdb\u884c\u4ea4\u6362\u3002 \u76f4\u5230\u627e\u5230\u5168\u90e8\u8282\u70b9\uff0c\u8fd4\u56de\u8282\u70b9\u4e2a\u6570discovered_vertices\u3002 size_t BFSCore(Graph<Empty>& graph, size_t root_vid, ParallelVector<size_t>& parent){ size_t root = root_vid; auto active_in = graph.AllocVertexSubset(); //\u5206\u914d\u6570\u7ec4\uff0cactive_in\u7528\u4e8e\u5b58\u653e\u4e0a\u4e00\u5faa\u73af\u9636\u6bb5\u5df2\u627e\u5230\u7684\u8282\u70b9 active_in.Add(root); //\u628a\u8ddf\u8282\u70b9\u52a0\u5165\u6570\u7ec4\u4e2d auto active_out = graph.AllocVertexSubset(); //\u5206\u914d\u6570\u7ec4active_out\u7528\u4e8e\u5b58\u653e\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9 parent.Fill((size_t)-1); //\u5c06parent\u6570\u7ec4\u4e2d\u7684\u8282\u70b9\u8d4b\u503c\u4e3a-1\uff0c-1\u8868\u793a\u672a\u88ab\u627e\u5230 parent[root] = root; size_t num_activations = 1; //\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9\u4e2a\u6570 size_t discovered_vertices = 0; //\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u8282\u70b9\u7684\u603b\u4e2a\u6570 for (int ii = 0; num_activations != 0; ii++) { //num_activations\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9\u4e2a\u6570 printf(\"activates(%d) <= %lu\\n\", ii, num_activations); discovered_vertices += num_activations; //discovered_vertices\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u8282\u70b9\u7684\u603b\u4e2a\u6570 active_out.Clear(); num_activations = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t num_activations = 0; for (auto& edge : graph.OutEdges(vi)) { //\u6bcf\u4e00\u6b21\u5faa\u73af\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u67e5\u627e\u90bb\u8fd1\u7684\u76f8\u90bb\u8282\u70b9\uff0c\u5bf9\u5176parent\u503c\u6539\u53d8\uff0c\u5e76num_activations+1\u64cd\u4f5c size_t dst = edge.neighbour; if (parent[dst] == (size_t)-1) { auto lock = graph.GuardVertexLock(dst); if (parent[dst] == (size_t)-1) { parent[dst] = vi; num_activations += 1; active_out.Add(dst); //\u5b58\u653e\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9 } } } return num_activations; }, active_in); active_in.Swap(active_out); } // \u8fd4\u56de\u5168\u90e8\u8282\u70b9\u6570 return discovered_vertices; } 3. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0 3.1 \u56fe\u52a0\u8f7d TuGraph-Standalone\u5bf9\u4e8e\u56fe\u6570\u636e\u6587\u4ef6\u7684\u52a0\u8f7d\u6765\u6e90\u4e3b\u8981\u5206\u4e3a\u4e09\u5927\u7c7b\uff1a\u6587\u672c\u6587\u4ef6\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u548cODPS\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e3a\u5c06\u8fb9\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6309\u987a\u5e8f\u6392\u5217\u7684\u6587\u4ef6\uff0c\u80fd\u591f\u8282\u7701\u5927\u91cf\u5b58\u50a8\u7a7a\u95f4\u3002\u5176\u52a0\u8f7d\u51fd\u6570\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\uff1a void Load(ConfigBase<EdgeData> config,EdgeDirectionPolicy edge_direction_policy = DUAL_DIRECTION) \uff1a\u56fe\u6570\u636e\u6587\u4ef6\u7684\u52a0\u8f7d\u65b9\u5f0f\uff0c\u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff0c\u5176\u542b\u4e49\u5206\u522b\u8868\u793a\uff1a config \uff1a\u9700\u8981\u52a0\u8f7d\u7684\u914d\u7f6e\u53c2\u6570\u3002\u8be5\u53c2\u6570\u5185\u4fdd\u5b58\u4e86\u8be5\u56fe\u7684\u4e00\u822c\u4fe1\u606f\uff08\u5982\u6570\u636e\u6765\u6e90\uff0c\u7b97\u6cd5\u540d\u79f0\uff0c\u6570\u636e\u8f93\u5165\u3001\u8f93\u51fa\u8def\u5f84\uff0c\u9876\u70b9\u4e2a\u6570\u7b49\uff09\u4ee5\u53ca\u6839\u636e\u4e0d\u540c\u6570\u636e\u6765\u6e90\u3001\u4e0d\u540c\u7b97\u6cd5\u6240\u914d\u7f6e\u7684\u4e0d\u540c\u4fe1\u606f\u53c2\u6570\u3002 edge_direction_policy \uff1a\u6307\u5b9a\u56fe\u4e3a\u6709\u5411\u6216\u65e0\u5411\uff0c\u5305\u542b\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3aDUAL_DIRECTION\u3001MAKE_SYMMETRIC\u4ee5\u53caINPUT_SYMMETRIC\u3002\u5176\u4e2dDUAL_DIRECTION\u4e3a\u9ed8\u8ba4\u7684\u56fe\u52a0\u8f7d\u65b9\u5f0f\u3002 DUAL_DIRECTION : \u8f93\u5165\u6587\u4ef6\u4e3a\u975e\u5bf9\u79f0\u56fe\uff0c\u52a0\u8f7d\u56fe\u4e3a\u975e\u5bf9\u79f0\u56fe\u3002 MAKE_SYMMETRIC : \u8f93\u5165\u6587\u4ef6\u4e3a\u975e\u5bf9\u79f0\u56fe\uff0c\u52a0\u8f7d\u56fe\u4e3a\u5bf9\u79f0\u56fe\u3002 INPUT_SYMMETRIC : \u8f93\u5165\u6587\u4ef6\u4e3a\u5bf9\u79f0\u56fe\uff0c\u52a0\u8f7d\u56fe\u4e3a\u5bf9\u79f0\u56fe\u3002 \u5bf9\u5e94\u7684\u8be6\u7ec6\u4ecb\u7ecd\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_config.h\u6587\u4ef6\u7684 enum EdgeDirectionPolicy \u3002 void LoadVertexArrayTxt<V>(V * array, std::string path, std::function<size_t(const char *, const char *, VertexUnit<V> &)> parse_line) \uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u9876\u70b9-\u6570\u636e\u5bf9\u6309\u7167\u9876\u70b9id\u7684\u987a\u5e8f\u52a0\u8f7d\u5230\u6570\u7ec4\u4e2d\u3002\u5404\u53c2\u6570\u8868\u793a\u610f\u4e49\u5206\u522b\u4e3a\uff1a array \uff1a\u5f85\u8bfb\u5165\u6570\u636e\u7684\u6570\u7ec4 path \uff1a\u8bfb\u53d6\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6587\u4ef6\u4e2d\u6bcf\u884c\u8868\u793a\u4e00\u5bf9\u9876\u70b9-\u6570\u636e\u5bf9 parse_line \uff1a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u544a\u8bc9\u7cfb\u7edf\u5982\u4f55\u5c06\u4e00\u884c\u6587\u672c\u6570\u636e\u89e3\u6790\u4e3a\u4e00\u4e2a\u9876\u70b9-\u6570\u636e\u5bf9\u3002 3.2 \u56fe\u5199\u5165 void Write(ConfigBase<EdgeData> & config, ParallelVector<VertexData>& array, size_t array_size, std::string name, std::function<bool(VertexData &)> filter_output = filter_output_default<VertexData&>) \uff1a\u628aarray\u4e2d\u6570\u636e\u5199\u56de\u6587\u4ef6\u4e2d\uff0c\u5404\u53c2\u6570\u8868\u793a\u610f\u4e49\u5206\u522b\u662f\uff1a config \uff1a\u9700\u8981\u52a0\u8f7d\u7684\u914d\u7f6e\u53c2\u6570\u3002\u8be5\u53c2\u6570\u5185\u4fdd\u5b58\u4e86\u8be5\u56fe\u7684\u4e00\u822c\u4fe1\u606f\uff08\u5982\u6570\u636e\u6765\u6e90\uff0c\u7b97\u6cd5\u540d\u79f0\uff0c\u6570\u636e\u8f93\u5165\u3001\u8f93\u51fa\u8def\u5f84\uff0c\u9876\u70b9\u4e2a\u6570\u7b49\uff09\u4ee5\u53ca\u6839\u636e\u4e0d\u540c\u6570\u636e\u6765\u6e90\u3001\u4e0d\u540c\u7b97\u6cd5\u6240\u914d\u7f6e\u7684\u4e0d\u540c\u4fe1\u606f\u53c2\u6570\u3002 array \uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u6570\u7ec4 array_size \uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u6570\u5b57\u957f\u5ea6 name \uff1a\u7b97\u6cd5\u540d\u79f0 filter_output \uff1a\u5199\u5165\u6570\u636e\u89c4\u5219\u51fd\u6570\uff0c\u5f85\u5199\u5165\u6570\u636e\u9700\u8981\u6ee1\u8db3\u8be5\u51fd\u6570\u7684\u8981\u6c42\u3002 3.3 \u56fe\u89e3\u6790\u51fd\u6570 std::tuple<size_t, bool> parse_line_unweighted(const char *p, const char *end, EdgeUnit<EdgeData> &e) \uff1a\u5bf9\u56fe\u6570\u636e\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff0c\u52a0\u8f7d\u56fe\u4e3a\u65e0\u6743\u56fe\u3002 std::tuple<size_t, bool> parse_line_weighted(const char* p, const char* end, EdgeUnit<EdgeData>& e) \uff1a\u5bf9\u56fe\u6570\u636e\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff0c\u52a0\u8f7d\u56fe\u4e3a\u6709\u6743\u56fe\uff0c\u6743\u91cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 \u6307\u5b9a\u3002 \u8be5\u51fd\u6570\u53ef\u901a\u8fc7MyConfig\u7c7b\u5b9a\u4e49\u65f6\u7684\u6784\u9020\u51fd\u6570parse_line\u8fdb\u884c\u6307\u5b9a\u3002","title":"OLAP \u5728\u78c1\u76d8\u4e0a\u7684 API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#olapondisk-api","text":"\u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86OlapOnDisk API\u7684\u4f7f\u7528\u8bf4\u660e","title":"OlapOnDisk API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#_1","text":"1. \u7b80\u4ecb 2. \u7b97\u6cd5\u4e3e\u4f8b 2.1 \u5934\u6587\u4ef6 2.2 \u914d\u7f6e\u7c7bMyConfig 2.3 \u4e3b\u51fd\u6570 2.4 bfs\u7b97\u6cd5\u6d41\u7a0b 3. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0 3.1 \u56fe\u52a0\u8f7d 3.2 \u56fe\u5199\u5165 3.3 \u56fe\u89e3\u6790\u51fd\u6570","title":"\u76ee\u5f55"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#1","text":"TuGraph\u7684Standalone\u6a21\u5f0f\u53ef\u7528\u4e8e\u52a0\u8f7d\u56fe\u6570\u636e\u6587\u4ef6\uff0c\u5176\u4e2d\u56fe\u6570\u636e\u6587\u4ef6\u6765\u6e90\u53ef\u5305\u542btext\u6587\u672c\u6587\u4ef6\u3001BINARY_FILE\u4e8c\u8fdb\u5236\u6587\u4ef6\u548cODPS\u6e90\u3002\u5728\u8be5\u6a21\u5f0f\u4e0b\uff0cTuGraph\u53ef\u5b9e\u73b0\u591a\u6570\u636e\u6765\u6e90\u5feb\u901f\u52a0\u8f7d\u6210\u56fe\uff0c\u7136\u540e\u5728\u8be5\u56fe\u4e0a\u8fd0\u884c\u5982BFS\u3001WCC\u3001SSSP\u7b49\u8fed\u4ee3\u5f0f\u7b97\u6cd5\uff0c\u5e76\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c\u81f3\u7ec8\u7aef\u3002 \u5728TuGraph\u4e2d\uff0c\u5bfc\u51fa\u548c\u8ba1\u7b97\u8fc7\u7a0b\u5747\u53ef\u4ee5\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u5e76\u884c\u5904\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u901f\uff0c\u4ece\u800c\u8fbe\u5230\u8fd1\u4e4e\u5b9e\u65f6\u7684\u5904\u7406\u5206\u6790\uff0c\u548c\u4f20\u7edf\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5373\u907f\u514d\u4e86\u6570\u636e\u5bfc\u51fa\u843d\u76d8\u7684\u5f00\u9500\uff0c\u53c8\u80fd\u4f7f\u7528\u7d27\u51d1\u7684\u56fe\u6570\u636e\u7ed3\u6784\u83b7\u5f97\u8ba1\u7b97\u7684\u7406\u60f3\u6027\u80fd\u3002 TuGraph\u5185\u7f6e\u4e86\u5927\u91cf\u7684\u5e38\u89c1\u56fe\u5206\u6790\u7b97\u6cd5\u548c\u4e30\u5bcc\u7684\u8f85\u52a9\u63a5\u53e3\uff0c\u56e0\u6b64\u7528\u6237\u51e0\u4e4e\u4e0d\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u5177\u4f53\u7684\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u5728\u5b9e\u73b0\u81ea\u5df1\u7684\u5b58\u50a8\u8fc7\u7a0b\u7684\u65f6\u5019\u5c06\u76f8\u5e94\u7b97\u6cd5\u5e93\u7684\u5934\u6587\u4ef6(.h)\u5305\u542b\u5230\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u5728\u7f16\u8bd1\u9636\u6bb5\u94fe\u63a5\u81ea\u5df1\u7684\u52a8\u6001\u5e93\u6587\u4ef6\u5373\u53ef\u3002 \u8be5\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e86Standalone\u7684\u5e38\u7528\u63a5\u53e3\uff0c\u4f7f\u7528\u5230\u7684\u8f85\u52a9\u51fd\u6570\u4e3b\u8981\u5305\u542b\u5728OlapOnDB\u7c7b\u3002\u540c\u65f6\u4e3a\u5e2e\u52a9\u7528\u6237\u7406\u89e3\u65b9\u4fbf\uff0c\u5bf9BFS\u7b97\u6cd5\u8fdb\u884c\u4e3e\u4f8b\u8bf4\u660e\u3002","title":"1. \u7b80\u4ecb"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#2","text":"\u5728\u8fd9\u91cc\u5bf9BFS\u7b97\u6cd5\u5206\u5757\u505a\u89e3\u91ca\uff0c\u5927\u4f53\u4e0a\u5206\u4e3a\u4e3b\u51fd\u6570 main \u3001BFS\u7b97\u6cd5\u6d41\u7a0b BFSCore \u51fd\u6570\u548c\u914d\u7f6e\u7c7bMyConfig\u3002","title":"2. \u7b97\u6cd5\u4e3e\u4f8b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#21","text":"#include \"olap/olap_on_disk.h\" #include \"tools/json.hpp\" //\u4f7f\u7528 TuGraph \u65f6\u9700\u8981\u5305\u542b\u7684\u5934\u6587\u4ef6 #include \"./algo.h\" //\u5305\u542b\u5404\u79cd\u7b97\u6cd5\u903b\u8f91\u51fd\u6570\u7684\u5934\u6587\u4ef6 \u5728\u4f7f\u7528 TuGraph \u5b9e\u73b0\u56fe\u6570\u636e\u6587\u4ef6\u8ba1\u7b97\u5e94\u7528\u65f6\uff0c\u4e00\u822c\u9996\u5148\u5efa\u7acbStandaloneGraph\u7c7b\u5bf9\u8c61graph\uff0c\u5c06\u56fe\u6587\u4ef6\u6570\u636e\u52a0\u8f7d\u8fdbgraph\u4e2d\uff0c\u4e4b\u540e\u901a\u8fc7\u8c03\u7528\u56fe\u903b\u8f91\u51fd\u6570\u5b9e\u73b0\u56fe\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u6700\u540e\u5bf9\u56fe\u8ba1\u7b97\u7684\u7ed3\u679c\u8fdb\u884c\u6253\u5370\u8f93\u51fa\u3002","title":"2.1 \u5934\u6587\u4ef6"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#22-myconfig","text":"MyConfig\u914d\u7f6e\u7c7b\u51fd\u6570\u7528\u4e8e\u63d0\u4f9b\u7b97\u6cd5\u903b\u8f91\u8ba1\u7b97\u65f6\u6240\u9700\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u7ee7\u627f\u4e8eConfigBase ,\u5176\u4e2dEdgeDate\u53ef\u6839\u636e\u52a0\u8f7d\u56fe\u7c7b\u578b\u4e0d\u540c\u9009\u62e9Empty\uff08\u65e0\u6743\u56fe\uff09\u3001int\uff08\u5e26\u6743\u56fe\u6743\u91cd\u4e3a\u6574\u6570\uff09\u6216\u8005double\uff08\u5e26\u6743\u56fe\u6743\u91cd\u4e3adouble\uff09\u7c7b\u578b\u3002 MyConfig\u914d\u7f6e\u7c7b\u4e00\u822c\u6839\u636e\u7b97\u6cd5\u4e0d\u540c\uff0c\u9700\u8981\u989d\u5916\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a 1.\u7b97\u6cd5\u6240\u9700\u53c2\u6570 2.\u7b97\u6cd5\u540d\u79f0 3.\u914d\u7f6e\u7c7b\u5185Print\u51fd\u6570 \u5176\u4f59\u516c\u7528\u6210\u5458\u7ee7\u627f\u4e0eConfigBase\uff0c\u53ef\u53c2\u8003src/olap/olap_config.h\u67e5\u9605\u3002 class MyConfig : public ConfigBase<Empty> { public: // \u7b97\u6cd5\u6240\u9700\u53c2\u6570\u521d\u59cb\u5316 size_t root = 0; std::string name = std::string(\"bfs\"); void AddParameter(fma_common::Configuration & config) { ConfigBase<Empty>::AddParameter(config); config.Add(root, \"root\", true) .Comment(\"the root of bfs\"); } void Print() { ConfigBase<Empty>::Print(); std::cout << \" name: \" << name << std::endl; if (root != size_t(-1)) { std::cout << \" root: \" << root << std::endl; } else { std::cout << \" root: UNSET\" << std::endl; } } // \u914d\u7f6e\u6587\u4ef6\u63a5\u53d7\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u8be5\u7528\u4f8b\u4f1a\u987a\u6b21\u8bfb\u53d6\u547d\u4ee4\u884c\u8c03\u7528\u7b97\u6cd5\u65f6\u7684\u53c2\u6570\uff0c\u4f18\u5148\u4f7f\u7528\u7528\u6237\u6307\u5b9a\u6570\u503c\uff0c\u82e5\u7528\u6237\u5e76\u672a\u6307\u5b9a\u5219\u9009\u62e9\u9ed8\u8ba4\u53c2\u6570\u3002 MyConfig(int &argc, char** &argv): ConfigBase<Empty>(argc, argv) { fma_common::Configuration config; AddParameter(config); config.ExitAfterHelp(true); config.ParseAndFinalize(argc, argv); Print(); } };","title":"2.2 \u914d\u7f6e\u7c7bMyConfig"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#23","text":"int main(int argc, char** argv) { double start_time; // \u7edf\u8ba1\u5185\u5b58\u6d88\u8017\u7c7bMemUsage\u5b9e\u4f8b\u5316 MemUsage memUsage; memUsage.startMemRecord(); // prepare start_time = get_time(); // \u914d\u7f6e\u7c7bMyConfig\u5b9e\u4f8b\u5316 MyConfig config(argc, argv); size_t root_vid = config.root; // OlapOnDisk\u7c7b\u5b9e\u4f8b\u5316 OlapOnDisk<Empty> graph; graph.Load(config, DUAL_DIRECTION); memUsage.print(); memUsage.reset(); // \u7edf\u8ba1\u56fe\u52a0\u8f7d\u6d88\u8017\u65f6\u95f4 auto prepare_cost = get_time() - start_time; printf(\"prepare_cost = %.2lf(s)\\n\", prepare_cost); // core start_time = get_time(); // \u521b\u5efa\u6570\u7ec4\u7528\u4e8e\u7edf\u8ba1\u67d0\u8282\u70b9\u662f\u5426\u904d\u5386\u8fc7 auto parent = graph.AllocVertexArray<size_t>(); // \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff0c\u8fd4\u56de\u56fe\u5185root_vid\u6839\u7ed3\u70b9\u8fde\u63a5\u7684\u8282\u70b9\u4e2a\u6570 size_t count = BFSCore(graph, root_vid, parent); memUsage.print(); memUsage.reset(); auto core_cost = get_time() - start_time; printf(\"core_cost = %.2lf(s)\\n\", core_cost); // output start_time = get_time(); // \u6253\u5370\u76f8\u5173\u4fe1\u606f\u81f3\u7ec8\u7aef printf(\"found_vertices = %ld\\n\", count); auto output_cost = get_time() - start_time; printf(\"output_cost = %.2lf(s)\\n\", output_cost); printf(\"total_cost = %.2lf(s)\\n\", prepare_cost + core_cost + output_cost); printf(\"DONE.\"); return 0; }","title":"2.3 \u4e3b\u51fd\u6570"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#24-bfs","text":"bfs \u4e3b\u6d41\u7a0b\u6709\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5feb\u7167\u7c7b\uff08\u5b50\u56fe\uff09\u8fd8\u6709\u8fed\u4ee3\u6b21\u6570\uff0c\u6574\u4f53\u6d41\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a \u76f8\u5173\u5b9a\u4e49\u3001\u6570\u636e\u7ed3\u6784\u7684\u521d\u59cb\u5316 \u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u5faa\u73af\u8ba1\u7b97\uff0c\u6bcf\u4e00\u8f6e\u627e\u5230\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u90bb\u7684\u5168\u90e8\u8282\u70b9\uff0c\u5e76\u5728\u8be5\u8f6e\u6b21\u7ec8\u6b62\u65f6\u8fdb\u884c\u4ea4\u6362\u3002 \u76f4\u5230\u627e\u5230\u5168\u90e8\u8282\u70b9\uff0c\u8fd4\u56de\u8282\u70b9\u4e2a\u6570discovered_vertices\u3002 size_t BFSCore(Graph<Empty>& graph, size_t root_vid, ParallelVector<size_t>& parent){ size_t root = root_vid; auto active_in = graph.AllocVertexSubset(); //\u5206\u914d\u6570\u7ec4\uff0cactive_in\u7528\u4e8e\u5b58\u653e\u4e0a\u4e00\u5faa\u73af\u9636\u6bb5\u5df2\u627e\u5230\u7684\u8282\u70b9 active_in.Add(root); //\u628a\u8ddf\u8282\u70b9\u52a0\u5165\u6570\u7ec4\u4e2d auto active_out = graph.AllocVertexSubset(); //\u5206\u914d\u6570\u7ec4active_out\u7528\u4e8e\u5b58\u653e\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9 parent.Fill((size_t)-1); //\u5c06parent\u6570\u7ec4\u4e2d\u7684\u8282\u70b9\u8d4b\u503c\u4e3a-1\uff0c-1\u8868\u793a\u672a\u88ab\u627e\u5230 parent[root] = root; size_t num_activations = 1; //\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9\u4e2a\u6570 size_t discovered_vertices = 0; //\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u8282\u70b9\u7684\u603b\u4e2a\u6570 for (int ii = 0; num_activations != 0; ii++) { //num_activations\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9\u4e2a\u6570 printf(\"activates(%d) <= %lu\\n\", ii, num_activations); discovered_vertices += num_activations; //discovered_vertices\u8868\u793a\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u8282\u70b9\u7684\u603b\u4e2a\u6570 active_out.Clear(); num_activations = graph.ProcessVertexActive<size_t>( [&](size_t vi) { size_t num_activations = 0; for (auto& edge : graph.OutEdges(vi)) { //\u6bcf\u4e00\u6b21\u5faa\u73af\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u67e5\u627e\u90bb\u8fd1\u7684\u76f8\u90bb\u8282\u70b9\uff0c\u5bf9\u5176parent\u503c\u6539\u53d8\uff0c\u5e76num_activations+1\u64cd\u4f5c size_t dst = edge.neighbour; if (parent[dst] == (size_t)-1) { auto lock = graph.GuardVertexLock(dst); if (parent[dst] == (size_t)-1) { parent[dst] = vi; num_activations += 1; active_out.Add(dst); //\u5b58\u653e\u5f53\u524d\u5faa\u73af\u9636\u6bb5\u627e\u5230\u7684\u8282\u70b9 } } } return num_activations; }, active_in); active_in.Swap(active_out); } // \u8fd4\u56de\u5168\u90e8\u8282\u70b9\u6570 return discovered_vertices; }","title":"2.4 bfs\u7b97\u6cd5\u6d41\u7a0b"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#3","text":"","title":"3. \u5176\u4ed6\u5e38\u7528\u51fd\u6570\u529f\u80fd\u63cf\u8ff0"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#31","text":"TuGraph-Standalone\u5bf9\u4e8e\u56fe\u6570\u636e\u6587\u4ef6\u7684\u52a0\u8f7d\u6765\u6e90\u4e3b\u8981\u5206\u4e3a\u4e09\u5927\u7c7b\uff1a\u6587\u672c\u6587\u4ef6\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u548cODPS\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e3a\u5c06\u8fb9\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6309\u987a\u5e8f\u6392\u5217\u7684\u6587\u4ef6\uff0c\u80fd\u591f\u8282\u7701\u5927\u91cf\u5b58\u50a8\u7a7a\u95f4\u3002\u5176\u52a0\u8f7d\u51fd\u6570\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\uff1a void Load(ConfigBase<EdgeData> config,EdgeDirectionPolicy edge_direction_policy = DUAL_DIRECTION) \uff1a\u56fe\u6570\u636e\u6587\u4ef6\u7684\u52a0\u8f7d\u65b9\u5f0f\uff0c\u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff0c\u5176\u542b\u4e49\u5206\u522b\u8868\u793a\uff1a config \uff1a\u9700\u8981\u52a0\u8f7d\u7684\u914d\u7f6e\u53c2\u6570\u3002\u8be5\u53c2\u6570\u5185\u4fdd\u5b58\u4e86\u8be5\u56fe\u7684\u4e00\u822c\u4fe1\u606f\uff08\u5982\u6570\u636e\u6765\u6e90\uff0c\u7b97\u6cd5\u540d\u79f0\uff0c\u6570\u636e\u8f93\u5165\u3001\u8f93\u51fa\u8def\u5f84\uff0c\u9876\u70b9\u4e2a\u6570\u7b49\uff09\u4ee5\u53ca\u6839\u636e\u4e0d\u540c\u6570\u636e\u6765\u6e90\u3001\u4e0d\u540c\u7b97\u6cd5\u6240\u914d\u7f6e\u7684\u4e0d\u540c\u4fe1\u606f\u53c2\u6570\u3002 edge_direction_policy \uff1a\u6307\u5b9a\u56fe\u4e3a\u6709\u5411\u6216\u65e0\u5411\uff0c\u5305\u542b\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3aDUAL_DIRECTION\u3001MAKE_SYMMETRIC\u4ee5\u53caINPUT_SYMMETRIC\u3002\u5176\u4e2dDUAL_DIRECTION\u4e3a\u9ed8\u8ba4\u7684\u56fe\u52a0\u8f7d\u65b9\u5f0f\u3002 DUAL_DIRECTION : \u8f93\u5165\u6587\u4ef6\u4e3a\u975e\u5bf9\u79f0\u56fe\uff0c\u52a0\u8f7d\u56fe\u4e3a\u975e\u5bf9\u79f0\u56fe\u3002 MAKE_SYMMETRIC : \u8f93\u5165\u6587\u4ef6\u4e3a\u975e\u5bf9\u79f0\u56fe\uff0c\u52a0\u8f7d\u56fe\u4e3a\u5bf9\u79f0\u56fe\u3002 INPUT_SYMMETRIC : \u8f93\u5165\u6587\u4ef6\u4e3a\u5bf9\u79f0\u56fe\uff0c\u52a0\u8f7d\u56fe\u4e3a\u5bf9\u79f0\u56fe\u3002 \u5bf9\u5e94\u7684\u8be6\u7ec6\u4ecb\u7ecd\u89c1lgraph\u6587\u4ef6\u5939\u4e0b\u7684olap_config.h\u6587\u4ef6\u7684 enum EdgeDirectionPolicy \u3002 void LoadVertexArrayTxt<V>(V * array, std::string path, std::function<size_t(const char *, const char *, VertexUnit<V> &)> parse_line) \uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u9876\u70b9-\u6570\u636e\u5bf9\u6309\u7167\u9876\u70b9id\u7684\u987a\u5e8f\u52a0\u8f7d\u5230\u6570\u7ec4\u4e2d\u3002\u5404\u53c2\u6570\u8868\u793a\u610f\u4e49\u5206\u522b\u4e3a\uff1a array \uff1a\u5f85\u8bfb\u5165\u6570\u636e\u7684\u6570\u7ec4 path \uff1a\u8bfb\u53d6\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6587\u4ef6\u4e2d\u6bcf\u884c\u8868\u793a\u4e00\u5bf9\u9876\u70b9-\u6570\u636e\u5bf9 parse_line \uff1a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u544a\u8bc9\u7cfb\u7edf\u5982\u4f55\u5c06\u4e00\u884c\u6587\u672c\u6570\u636e\u89e3\u6790\u4e3a\u4e00\u4e2a\u9876\u70b9-\u6570\u636e\u5bf9\u3002","title":"3.1 \u56fe\u52a0\u8f7d"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#32","text":"void Write(ConfigBase<EdgeData> & config, ParallelVector<VertexData>& array, size_t array_size, std::string name, std::function<bool(VertexData &)> filter_output = filter_output_default<VertexData&>) \uff1a\u628aarray\u4e2d\u6570\u636e\u5199\u56de\u6587\u4ef6\u4e2d\uff0c\u5404\u53c2\u6570\u8868\u793a\u610f\u4e49\u5206\u522b\u662f\uff1a config \uff1a\u9700\u8981\u52a0\u8f7d\u7684\u914d\u7f6e\u53c2\u6570\u3002\u8be5\u53c2\u6570\u5185\u4fdd\u5b58\u4e86\u8be5\u56fe\u7684\u4e00\u822c\u4fe1\u606f\uff08\u5982\u6570\u636e\u6765\u6e90\uff0c\u7b97\u6cd5\u540d\u79f0\uff0c\u6570\u636e\u8f93\u5165\u3001\u8f93\u51fa\u8def\u5f84\uff0c\u9876\u70b9\u4e2a\u6570\u7b49\uff09\u4ee5\u53ca\u6839\u636e\u4e0d\u540c\u6570\u636e\u6765\u6e90\u3001\u4e0d\u540c\u7b97\u6cd5\u6240\u914d\u7f6e\u7684\u4e0d\u540c\u4fe1\u606f\u53c2\u6570\u3002 array \uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u6570\u7ec4 array_size \uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u6570\u5b57\u957f\u5ea6 name \uff1a\u7b97\u6cd5\u540d\u79f0 filter_output \uff1a\u5199\u5165\u6570\u636e\u89c4\u5219\u51fd\u6570\uff0c\u5f85\u5199\u5165\u6570\u636e\u9700\u8981\u6ee1\u8db3\u8be5\u51fd\u6570\u7684\u8981\u6c42\u3002","title":"3.2 \u56fe\u5199\u5165"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/4.olap-on-disk-api/#33","text":"std::tuple<size_t, bool> parse_line_unweighted(const char *p, const char *end, EdgeUnit<EdgeData> &e) \uff1a\u5bf9\u56fe\u6570\u636e\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff0c\u52a0\u8f7d\u56fe\u4e3a\u65e0\u6743\u56fe\u3002 std::tuple<size_t, bool> parse_line_weighted(const char* p, const char* end, EdgeUnit<EdgeData>& e) \uff1a\u5bf9\u56fe\u6570\u636e\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff0c\u52a0\u8f7d\u56fe\u4e3a\u6709\u6743\u56fe\uff0c\u6743\u91cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 \u6307\u5b9a\u3002 \u8be5\u51fd\u6570\u53ef\u901a\u8fc7MyConfig\u7c7b\u5b9a\u4e49\u65f6\u7684\u6784\u9020\u51fd\u6570parse_line\u8fdb\u884c\u6307\u5b9a\u3002","title":"3.3 \u56fe\u89e3\u6790\u51fd\u6570"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/","text":"TuGraph \u5185\u7f6e\u7b97\u6cd5\u8bf4\u660e \u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86TuGraph\u5185\u7f6e\u7684\u7b97\u6cd5\u7a0b\u5e8f\uff0c\u793e\u533a\u72486\u79cd\u7b97\u6cd5\u53ef\u53c2\u8003\u57fa\u7840\u7b97\u6cd5\u62a5 \u76ee\u5f55 TuGraph \u5185\u7f6e\u7b97\u6cd5\u8bf4\u660e \u57fa\u7840\u7b97\u6cd5\u5305 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(bfs) \u7f51\u9875\u6392\u5e8f(pagerank) \u5355\u6e90\u6700\u77ed\u8def\u5f84(sssp) \u5f31\u8fde\u901a\u5206\u91cf(wcc) \u5e73\u5747\u96c6\u805a\u7cfb\u6570(lcc) \u6807\u7b7e\u4f20\u64ad(lpa) \u6269\u5c55\u7b97\u6cd5\u5305 \u5168\u5bf9\u6700\u77ed\u8def\u5f84(apsp) \u4ecb\u6570\u4e2d\u5fc3\u5ea6(bc) \u7f6e\u4fe1\u5ea6\u4f20\u64ad(bp) \u8ddd\u79bb\u4e2d\u5fc3\u5ea6(cc) \u5171\u540c\u90bb\u5c45(cn) \u5ea6\u6570\u5173\u8054\u5ea6(dc) \u76f4\u5f84\u4f30\u8ba1(de) EgoNet\u7b97\u6cd5(en) \u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22(hits) \u6770\u5361\u5fb7\u7cfb\u6570(ji) k\u6838\u7b97\u6cd5(kcore) \u9c81\u6c76\u793e\u533a\u53d1\u73b0(louvain) \u591a\u6e90\u6700\u77ed\u8def\u5f84(mssp) \u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f\u7b97\u6cd5(ppr) \u5f3a\u8fde\u901a\u5206\u91cf(scc) \u76d1\u542c\u6807\u7b7e\u4f20\u64ad(slpa) \u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84(spsp) \u4e09\u89d2\u8ba1\u6570(triangle) \u4fe1\u4efb\u6307\u6570\u6392\u540d(trustrank) \u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad(wlpa) \u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f(wpagerank) \u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5(mis) Sybil\u68c0\u6d4b\u7b97\u6cd5(sybilrank) \u5b50\u56fe\u5339\u914d\u7b97\u6cd5(subgraph_isomorphism) \u6a21\u5f0f\u5339\u914d\u7b97\u6cd5(motif) \u83b1\u987f\u7b97\u6cd5(Leiden) k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5 k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5 \u7b80\u4ecb TuGraph\u76ee\u524d\u5305\u542b\u4ee5\u4e0b6\u4e2a\u57fa\u7840\u7b97\u6cd528\u79cd\u6269\u5c55\u7b97\u6cd5\uff0c\u517134\u4e2a\u56fe\u7b97\u6cd5\uff1a \u57fa\u7840\u7b97\u6cd5\u5305\uff1a \u4e2d\u6587\u7b97\u6cd5\u540d \u82f1\u6587\u7b97\u6cd5\u540d \u7a0b\u5e8f\u540d \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 Breadth-First Search bfs \u7f51\u9875\u6392\u5e8f Pagerank pagerank \u5355\u6e90\u6700\u77ed\u8def\u5f84 Single-Source Shortest Path sssp \u5f31\u8fde\u901a\u5206\u91cf Weakly Connected Components wcc \u5e73\u5747\u96c6\u805a\u7cfb\u6570 Local Clustering Coefficient lcc \u6807\u7b7e\u4f20\u64ad Label Propagation Algorithm lpa \u6269\u5c55\u7b97\u6cd5\u5305\uff1a \u4e2d\u6587\u7b97\u6cd5\u540d \u82f1\u6587\u7b97\u6cd5\u540d \u7a0b\u5e8f\u540d \u5168\u5bf9\u6700\u77ed\u8def\u5f84 All-Pair Shortest Path apsp \u4ecb\u6570\u4e2d\u5fc3\u5ea6 Betweenness Centrality bc \u7f6e\u4fe1\u5ea6\u4f20\u64ad Belief Propagation bp \u8ddd\u79bb\u4e2d\u5fc3\u5ea6 Closeness Centrality cc \u5171\u540c\u90bb\u5c45 Common Neighborhood cn \u5ea6\u6570\u5173\u8054\u5ea6 Degree Correlation dc \u76f4\u5f84\u4f30\u8ba1 Dimension Estimation de EgoNet\u7b97\u6cd5 EgoNet en \u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22 Hyperlink-Induced Topic Search hits \u6770\u5361\u5fb7\u7cfb\u6570 Jaccard Index ji K\u6838\u7b97\u6cd5 K-core kcore \u9c81\u6c76\u793e\u533a\u53d1\u73b0 Louvain louvain \u591a\u6e90\u6700\u77ed\u8def\u5f84 Multiple-source Shortest Paths mssp \u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f Personalized PageRank ppr \u5f3a\u8fde\u901a\u5206\u91cf Strongly Connected Components scc \u76d1\u542c\u6807\u7b7e\u4f20\u64ad Speaker-listener Label Propagation Algorithm slpa \u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84 Single-Pair Shortest Path spsp \u4e09\u89d2\u8ba1\u6570 Triangle Counting triangle \u4fe1\u4efb\u6307\u6570\u6392\u540d Trustrank trustrank \u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad Weighted Label Propagation Algorithm wlpa \u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f Weighted Pagerank Algorithm wpagerank \u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5 Maximal independent set mis sybil\u68c0\u6d4b\u7b97\u6cd5 Sybil Rank sybilrank \u5b50\u56fe\u5339\u914d\u7b97\u6cd5 Subgraph Isomorphism subgraph_isomorphism \u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 Motif motif k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5 Kcliques kcliques k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5 Ktruss ktruss \u83b1\u987f\u7b97\u6cd5 Leiden leiden \u57fa\u7840\u7b97\u6cd5\u5305 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5b9e\u73b0\u4e86Breadth-first Search\u7b97\u6cd5\uff0c\u4ece\u6839\u9876\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u56fe\u7684\u5bbd\u5ea6\u904d\u5386\u6240\u6709\u53ef\u8bbf\u95ee\u9876\u70b9\u3002\u8fd4\u56de\u7ed3\u679c\u4e3a\u904d\u5386\u9876\u70b9\u4e2a\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Breadth-first_search \u3002 \u7f51\u9875\u6392\u5e8f \u7f51\u9875\u6392\u5e8f\u7a0b\u5e8f\u5b9e\u73b0\u4e86\u5e38\u7528\u7684Pagerank\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u6839\u636e\u56fe\u4e2d\u8fb9\u548c\u8fb9\u6743\u503c\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u7684\u91cd\u8981\u6027\u6392\u540d\uff0cPageRank\u503c\u8d8a\u9ad8\uff0c\u8868\u793a\u8be5\u9876\u70b9\u5728\u56fe\u4e2d\u7684\u91cd\u8981\u6027\u8d8a\u9ad8\u3002\u8ba1\u7b97\u65f6\u4ee5\u9876\u70b9\u6570\u91cf\u7684\u5012\u6570\u4e3a\u5404\u9876\u70b9\u521d\u59cbRank\u503c\uff0c\u7136\u540e\u5c06\u9876\u70b9\u7684Rank\u503c\u6309\u7167\u51fa\u8fb9\u5e73\u5747\u4f20\u9012\u5230\u76f8\u90bb\u9876\u70b9\uff0c\u91cd\u590d\u8be5\u4f20\u9012\u8fc7\u7a0b\u76f4\u5230\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6536\u655b\u9608\u503c\u6216\u8fbe\u5230\u7ed9\u5b9a\u8fed\u4ee3\u8f6e\u6570\u3002\u6bcf\u8f6e\u4f20\u9012\u7ed3\u675f\u540e\uff0c\u6240\u6709\u9876\u70b9\u7684Rank\u503c\u4f1a\u6709\u4e00\u5b9a\u7684\u7684\u6bd4\u4f8b\u968f\u673a\u4f20\u9012\u5230\u4efb\u610f\u9876\u70b9\u4e0a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/PageRank \u3002 \u5355\u6e90\u6700\u77ed\u8def\u5f84 \u5355\u6e90\u6700\u77ed\u8def\u5f84\u5b9e\u73b0\u4e86Single Source Shortest Path\u7b97\u6cd5\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u6e90\u9876\u70b9\uff0c\u8ba1\u7b97\u4ece\u8be5\u6e90\u9876\u70b9\u51fa\u53d1\u5230\u5176\u4ed6\u4efb\u610f\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Shortest_path_problem \u3002 \u5f31\u8fde\u901a\u5206\u91cf \u5f31\u8fde\u901a\u5206\u91cf\u7a0b\u5e8f\u5b9e\u73b0\u4e86Weakly Connected Components\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u4f1a\u8ba1\u7b97\u56fe\u4e2d\u6240\u6709\u7684\u5f31\u8fde\u901a\u5206\u91cf\u3002\u5f31\u8fde\u901a\u5206\u91cf\u662f\u56fe\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u5747\u5b58\u5728\u53ef\u8fbe\u8def\u5f84\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Connected_component_(graph_theory) \u3002 \u5e73\u5747\u96c6\u805a\u7cfb\u6570 \u5e73\u5747\u96c6\u805a\u7cfb\u6570\u7a0b\u5e8f\u5b9e\u73b0\u4e86Local Clustering Coefficient\u7b97\u6cd5\uff0c\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u4e4b\u95f4\u805a\u96c6\u7a0b\u5ea6\u7684\u7cfb\u6570\u3002\u8fd4\u56de\u7ed3\u679c\u5305\u62ec\u6574\u4f53\u96c6\u805a\u7cfb\u6570\u548c\u9876\u70b9\u96c6\u805a\u7cfb\u6570\u3002\u6574\u4f53\u96c6\u805a\u7cfb\u6570\u53cd\u6620\u4e86\u56fe\u4e2d\u6574\u4f53\u7684\u96c6\u805a\u7a0b\u5ea6\u7684\u8bc4\u4f30\uff0c\u9876\u70b9\u96c6\u805a\u7cfb\u6570\u5305\u62ec\u4efb\u610f\u9876\u70b9\u7684\u96c6\u805a\u7cfb\u6570\uff0c\u53cd\u6620\u4e86\u8be5\u9876\u70b9\u9644\u8fd1\u7684\u96c6\u805a\u7a0b\u5ea6\u3002\u96c6\u805a\u7cfb\u6570\u8d8a\u9ad8\uff0c\u8868\u793a\u96c6\u805a\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Clustering_coefficient \u3002 \u6807\u7b7e\u4f20\u64ad \u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Label Propagation Algorithm\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u57fa\u4e8e\u6807\u7b7e\u4f20\u64ad\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u8ba1\u7b97\u5bf9\u8c61\u4e3a\u65e0\u6743\u56fe\u3002\u5728\u6807\u7b7e\u4f20\u9012\u65f6\uff0c\u6bcf\u4e2a\u9876\u70b9\u5bf9\u6536\u5230\u7684\u6240\u6709\u6807\u7b7e\u8fdb\u884c\u6b21\u6570\u7d2f\u52a0\uff0c\u5728\u7d2f\u52a0\u548c\u6700\u9ad8\u7684\u6807\u7b7e\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u3002\u8fed\u4ee3\u6536\u655b\u6216\u6267\u884c\u5230\u7ed9\u5b9a\u8f6e\u6570\u540e\u7b97\u6cd5\u7ec8\u6b62\u3002\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u4e3a\u6bcf\u4e2a\u9876\u70b9\u7684\u6807\u7b7e\uff0c\u6807\u7b7e\u503c\u76f8\u540c\u7684\u9876\u70b9\u89c6\u4e3a\u5728\u540c\u4e00\u793e\u533a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002 \u6269\u5c55\u7b97\u6cd5\u5305 \u5168\u5bf9\u6700\u77ed\u8def\u5f84 \u5168\u5bf9\u6700\u77ed\u8def\u5f84\u7a0b\u5e8f\u5b9e\u73b0\u4e86All-Pair Shortest Path\u7b97\u6cd5\uff0c\u8ba1\u7b97\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u8fd4\u56de\u7ed3\u679c\u4e3a\u4efb\u610f\u5b58\u5728\u8def\u5f84\u7684\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm \u4ecb\u6570\u4e2d\u5fc3\u5ea6 \u4ecb\u6570\u4e2d\u5fc3\u5ea6\u7a0b\u5e8f\u5b9e\u73b0\u4e86Betweenness Centrality\u7b97\u6cd5\uff0c\u4f30\u7b97\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u4ecb\u6570\u4e2d\u5fc3\u5ea6\u503c\u3002\u4ecb\u6570\u4e2d\u5fc3\u5ea6\u503c\u53cd\u6620\u4e86\u56fe\u4e2d\u4efb\u4e00\u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u8be5\u9876\u70b9\u7684\u53ef\u80fd\u6027\uff0c\u503c\u8d8a\u9ad8\u8868\u793a\u6709\u8d8a\u591a\u7684\u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u4e86\u8be5\u9876\u70b9\u3002\u8ba1\u7b97\u65f6\u9700\u7ed9\u5b9a\u62bd\u6837\u70b9\u4e2a\u6570\uff0c\u5206\u522b\u4ee5\u8fd9\u4e9b\u62bd\u6837\u70b9\u4e3a\u4e2d\u5fc3\u8fdb\u884c\u8ba1\u7b97\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Betweenness_centrality \u3002 \u7f6e\u4fe1\u5ea6\u4f20\u64ad \u7f6e\u4fe1\u5ea6\u4f20\u64ad\u7a0b\u5e8f\u5b9e\u73b0\u4e86Belief Propagation\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u7ed9\u5b9a\u5df2\u89c2\u6d4b\u9876\u70b9\u7684\u8fb9\u7f18\u5206\u5e03\uff0c\u5229\u7528\u9876\u70b9\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u6d88\u606f\u7684\u673a\u5236\u6765\u4f30\u7b97\u672a\u89c2\u6d4b\u9876\u70b9\u7684\u8fb9\u7f18\u5206\u5e03\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Belief_propagation \u3002 \u8ddd\u79bb\u4e2d\u5fc3\u5ea6 \u8ddd\u79bb\u4e2d\u5fc3\u5ea6\u7a0b\u5e8f\u5b9e\u73b0\u4e86Closeness Centrality\u7b97\u6cd5\uff0c\u4f30\u7b97\u4efb\u610f\u9876\u70b9\u5230\u56fe\u4e2d\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u5e73\u5747\u957f\u5ea6\u3002\u8ddd\u79bb\u4e2d\u5fc3\u5ea6\u8d8a\u5c0f\uff0c\u8868\u793a\u8be5\u9876\u70b9\u5230\u5176\u4ed6\u9876\u70b9\u7684\u5e73\u5747\u6700\u77ed\u8ddd\u79bb\u6700\u5c0f\uff0c\u610f\u5473\u7740\u8be5\u9876\u70b9\u4ece\u51e0\u4f55\u89d2\u5ea6\u770b\u66f4\u4f4d\u4e8e\u56fe\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u3002\u8ba1\u7b97\u65f6\u9700\u8981\u7ed9\u5b9a\u62bd\u6837\u70b9\u4e2a\u6570\uff0c\u5206\u522b\u4ee5\u8fd9\u4e9b\u62bd\u6837\u70b9\u4e3a\u4e2d\u5fc3\u8fdb\u884c\u8ba1\u7b97\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Closeness_centrality \u3002 \u5171\u540c\u90bb\u5c45 \u5171\u540c\u90bb\u5c45\u7a0b\u5e8f\u5b9e\u73b0\u4e86Common Neighborhood\u7b97\u6cd5\uff0c\u8ba1\u7b97\u4efb\u610f\u7ed9\u5b9a\u76f8\u90bb\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u5171\u540c\u90bb\u5c45\u6570\u91cf\u3002\u8ba1\u7b97\u65f6\u7ed9\u5b9a\u5f85\u67e5\u8be2\u7684\u82e5\u5e72\u4e2a\u9876\u70b9\u5bf9\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u5f85\u67e5\u8be2\u7684\u4efb\u610f\u9876\u70b9\u5bf9\u7684\u5171\u540c\u90bb\u5c45\u6570\u91cf\u3002 \u5ea6\u6570\u5173\u8054\u5ea6 \u5ea6\u6570\u5173\u8054\u5ea6\u7a0b\u5e8f\u5b9e\u73b0\u4e86Degree Correlation\u7b97\u6cd5\uff0c\u901a\u8fc7\u8ba1\u7b97\u4efb\u610f\u76f8\u90bb\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684Pearson\u5173\u8054\u7cfb\u6570\u6765\u8ba1\u7b97\u56fe\u7684\u5ea6\u6570\u5173\u8054\u5ea6\uff0c\u53ef\u7528\u6765\u8868\u5f81\u56fe\u4e2d\u9ad8\u5ea6\u6570\u9876\u70b9\u4e4b\u95f4\u5173\u8054\u7a0b\u5ea6\u3002\u5ea6\u6570\u5173\u8054\u5ea6\u8d8a\u9ad8\uff0c\u8868\u793a\u56fe\u4e2d\u9ad8\u5ea6\u6570\u9876\u70b9\u4e4b\u95f4\u7684\u5173\u8054\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Pearson_correlation_coefficient \u76f4\u5f84\u4f30\u8ba1 \u76f4\u5f84\u4f30\u8ba1\u7a0b\u5e8f\u5b9e\u73b0\u4e86Dimension Estimation\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u4f1a\u8ba1\u7b97\u56fe\u4e2d\u6700\u957f\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u7528\u6765\u8868\u5f81\u56fe\u7684\u76f4\u5f84\u5927\u5c0f\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 http://mathworld.wolfram.com/GraphDiameter.html \u3002 EgoNet\u7b97\u6cd5 EgoNet\u7b97\u6cd5\u9700\u8981\u7ed9\u5b9a\u6839\u9876\u70b9\u548cK\u503c\uff0c\u4ee5\u6839\u9876\u70b9\u4e3a\u6e90\u9876\u70b9\u8fdb\u884c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u51fa\u6240\u6709K\u5ea6\u4ee5\u5185\u7684\u90bb\u5c45\u7ec4\u6210\u7684\u5b50\u56fe\u3002\u627e\u5230\u7684\u5b50\u56fe\u79f0\u4e3a\u6839\u9876\u70b9\u7684EgoNet\u3002 \u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22 \u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22\u7b97\u6cd5\u5b9e\u73b0\u4e86Hyperlink-Induced Topic Search\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u5047\u5b9a\u6bcf\u4e2a\u9876\u70b9\u5177\u6709\u6743\u5a01\u6027Authority\u548c\u67a2\u7ebd\u6027Hub\u4e24\u4e2a\u5c5e\u6027\uff0c\u4e00\u4e2a\u597d\u7684\u67a2\u7ebd\u9876\u70b9\u5e94\u8be5\u6307\u5411\u8bb8\u591a\u9ad8\u6743\u5a01\u6027\u7684\u9876\u70b9\uff0c\u800c\u4e00\u4e2a\u826f\u597d\u7684\u6743\u5a01\u9876\u70b9\u5e94\u8be5\u88ab\u8bb8\u591a\u9ad8\u67a2\u7ebd\u578b\u7684\u9876\u70b9\u6307\u5411\u3002\u7b97\u6cd5\u5c06\u8fd4\u56de\u6bcf\u4e2a\u9876\u70b9\u7684\u6743\u5a01\u6027\u503c\u548c\u67a2\u7ebd\u6027\u503c\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/HITS_algorithm \u3002 \u6770\u5361\u5fb7\u7cfb\u6570 \u6770\u5361\u5fb7\u7cfb\u6570\u7a0b\u5e8f\u5b9e\u73b0\u4e86Jaccard Index\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u8ba1\u7b97\u4e86\u7ed9\u5b9a\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684Jaccard\u7cfb\u6570\uff0c\u53ef\u7528\u6765\u8868\u793a\u8fd9\u4e24\u4e2a\u9876\u70b9\u7684\u76f8\u4f3c\u5ea6\u3002Jaccard\u7cfb\u6570\u8d8a\u9ad8\uff0c\u8868\u793a\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u76f8\u4f3c\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u8ba1\u7b97\u65f6\u7ed9\u5b9a\u5e26\u67e5\u8be2\u7684\u82e5\u5e72\u9876\u70b9\u5bf9\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u8fd9\u4e9b\u9876\u70b9\u5bf9\u7684Jaccard\u7cfb\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Jaccard_index \u3002 k\u6838\u7b97\u6cd5 k\u6838\u7b97\u6cd5\u5b9e\u73b0\u4e86k-core\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u7684\u6838\u6570\uff0c\u6216\u627e\u51fa\u56fe\u4e2d\u6240\u6709\u7684K\u6838\u5b50\u56fe\u3002K\u6838\u5b50\u56fe\u662f\u4e00\u79cd\u7279\u6b8a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e2d\u4efb\u610f\u9876\u70b9\u5ea6\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7ed9\u5b9aK\u503c\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Degeneracy_(graph_theory) \u3002 \u9c81\u6c76\u793e\u533a\u53d1\u73b0 \u9c81\u6c76\u793e\u533a\u53d1\u73b0\u7a0b\u5e8f\u5b9e\u73b0\u4e86Fast-unfolding\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u57fa\u4e8e\u6a21\u5757\u5ea6\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u901a\u8fc7\u4e0d\u65ad\u5408\u5e76\u9876\u70b9\u793e\u533a\u6765\u6700\u5927\u5316\u56fe\u7684\u6a21\u5757\u5ea6\uff0c\u80fd\u591f\u53d1\u73b0\u5c42\u6b21\u6027\u7684\u793e\u533a\u7ed3\u6784\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Louvain_Modularity \u3002 \u591a\u6e90\u6700\u77ed\u8def\u5f84 \u591a\u6e90\u6700\u77ed\u8def\u5f84\u7a0b\u5e8f\u5b9e\u73b0\u4e86Multiple-source Shortest Paths\u7b97\u6cd5\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u591a\u4e2a\u6e90\u9876\u70b9\uff0c\u4ece\u8fd9\u4e9b\u6e90\u9876\u70b9\u51fa\u53d1\uff0c\u8ba1\u7b97\u5230\u8fbe\u4efb\u610f\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u503c\u3002\u5176\u4e2d\uff0c\u591a\u4e2a\u6e90\u9876\u70b9\u5230\u67d0\u4e00\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u503c\u4e3a\u5206\u522b\u4ece\u6bcf\u4e2a\u6e90\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u8be5\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Shortest_path_problem \u3002 \u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f \u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f\u7a0b\u5e8f\u5b9e\u73b0\u4e86Personalized PageRank\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u6839\u636e\u7ed9\u5b9a\u7684\u6e90\u9876\u70b9\uff0c\u57fa\u4e8e\u8be5\u6e90\u9876\u70b9\u4e2a\u6027\u5316\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u5bf9\u4e8e\u6e90\u9876\u70b9\u7684\u91cd\u8981\u6027\u6392\u540d\u3002Rank\u503c\u8d8a\u9ad8\uff0c\u8868\u793a\u8be5\u9876\u70b9\u5bf9\u4e8e\u6e90\u9876\u70b9\u8d8a\u91cd\u8981\u3002\u4e0ePageRank\u4e0d\u540c\u7684\u662f\uff0c\u521d\u59cb\u5316\u65f6\u6e90\u9876\u70b9Rank\u503c\u4e3a1\uff0c\u5176\u4f59\u9876\u70b9Rank\u503c\u4e3a0\uff1b\u5e76\u4e14\u6bcf\u8f6e\u4f20\u9012\u7ed3\u675f\u540e\uff0cRank\u503c\u4f1a\u6709\u4e00\u5b9a\u7684\u6bd4\u4f8b\u968f\u5373\u4f20\u9012\u56de\u6e90\u9876\u70b9\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://cs.stanford.edu/people/plofgren/Fast-PPR_KDD_Talk.pdf \u3002 \u5f3a\u8fde\u901a\u5206\u91cf \u5f3a\u8fde\u901a\u5206\u91cf\u7a0b\u5e8f\u5b9e\u73b0\u4e86Strongly Connected Components\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u8ba1\u7b97\u4e86\u56fe\u4e2d\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u56fe\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e2d\u53ef\u4ece\u4efb\u610f\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u5176\u4ed6\u4efb\u610f\u9876\u70b9\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Strongly_connected_component \u3002 \u76d1\u542c\u6807\u7b7e\u4f20\u64ad \u76d1\u542c\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Speaker-listener Label Propagation Algorithm\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u57fa\u4e8e\u6807\u7b7e\u4f20\u64ad\u548c\u5386\u53f2\u6807\u7b7e\u8bb0\u5f55\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u662f\u5bf9\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7684\u6269\u5c55\u3002\u4e0e\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u672c\u7b97\u6cd5\u4f1a\u5bf9\u6240\u6709\u9876\u70b9\u8bb0\u5f55\u5176\u5386\u53f2\u6807\u7b7e\uff0c\u5728\u8fed\u4ee3\u4e2d\u5bf9\u6807\u7b7e\u8fdb\u884c\u7d2f\u52a0\u65f6\uff0c\u4f1a\u5c06\u5386\u53f2\u6807\u7b7e\u4e5f\u8ba1\u7b97\u5728\u5185\u3002\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u4e3a\u6bcf\u4e2a\u9876\u70b9\u7684\u6240\u6709\u5386\u53f2\u6807\u7b7e\u8bb0\u5f55\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003\u8bba\u6587\uff1a\u201cSLPA: Uncovering Overlapping Communities in Social Networks via a Speaker-Listener Interaction Dynamic Process\u201d\u3002 \u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84 \u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7a0b\u5e8f\u5b9e\u73b0\u4e86Bidirectional Breadth-First Search\u7b97\u6cd5\uff0c\u5728\u6709\u5411\u65e0\u6743\u56fe\u4e0a\u4ece\u8d77\u70b9\u6cbf\u7740\u51fa\u8fb9\u505a\u6b63\u5411\u5bbd\u5ea6\u4f18\u5148\u641c\u641c\uff0c\u4ece\u7ec8\u70b9\u6cbf\u7740\u5165\u8fb9\u505a\u53cd\u5411\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u901a\u8fc7\u8d77\u70b9\u548c\u7ec8\u70b9\u5171\u540c\u904d\u5386\u5230\u7684\u9876\u70b9\u6765\u786e\u5b9a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Bidirectional_search \u3002 \u4e09\u89d2\u8ba1\u6570 \u4e09\u89d2\u8ba1\u6570\u5b9e\u73b0\u4e86Triangle-counting\u7b97\u6cd5\uff0c\u8ba1\u7b97\u65e0\u5411\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\u4e2a\u6570\uff0c\u53ef\u7528\u6765\u8868\u5f81\u56fe\u4e2d\u9876\u70b9\u7684\u5173\u8054\u7a0b\u5ea6\u3002\u4e09\u89d2\u5f62\u6570\u8d8a\u591a\uff0c\u8868\u793a\u56fe\u4e2d\u9876\u70b9\u7684\u5173\u8054\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003\u8bba\u6587\uff1a\u201cFinding, Counting and Listing All Triangles in Large Graphs, an Experimental Study\u201d \u3002 \u4fe1\u4efb\u6307\u6570\u6392\u540d \u4fe1\u4efb\u6307\u6570\u6392\u540d\u7b97\u6cd5\u5b9e\u73b0\u4e86Trustrank\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684\u767d\u540d\u5355\uff0c\u8ba1\u7b97\u4efb\u610f\u9876\u70b9\u7684\u4fe1\u4efb\u6307\u6570\u3002\u4fe1\u4efb\u6307\u6570\u8d8a\u9ad8\uff0c\u8868\u793a\u8be5\u9876\u70b9\u4e3a\u975e\u6cd5\u9876\u70b9\u7684\u53ef\u80fd\u6027\u8d8a\u5c0f\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/TrustRank \u3002 \u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad \u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Weighted Label Propagation Algorithm\u7b97\u6cd5\u3002=\u4e0e\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6807\u7b7e\u7684\u4f20\u9012\u8ddf\u8fb9\u7684\u6743\u91cd\u76f8\u5173\uff0c\u5728\u6807\u7b7e\u4f20\u9012\u65f6\uff0c\u6bcf\u4e2a\u9876\u70b9\u4f1a\u6839\u636e\u6807\u7b7e\u7684\u5165\u8fb9\u8fdb\u884c\u6743\u91cd\u7d2f\u52a0\uff0c\u5728\u7d2f\u52a0\u548c\u6700\u9ad8\u7684\u6807\u7b7e\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002 \u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f \u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Weighted Pagerank\u7b97\u6cd5\u3002\u4e0ePageRank\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0cRank\u503c\u7684\u4f20\u9012\u8ddf\u8fb9\u7684\u6743\u91cd\u6709\u5173\uff0c\u9876\u70b9\u7684Rank\u503c\u5c06\u6309\u7167\u8fb9\u6743\u91cd\u52a0\u6743\u4f20\u9012\u5230\u76f8\u90bb\u9876\u70b9\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/PageRank \u3002 \u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5 \u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5\u5b9e\u73b0\u4e86Maximal independent set\u7b97\u6cd5\u3002\u6700\u5927\u72ec\u7acb\u96c6\u662f\u6307\u5728\u8fd9\u4e2a\u72ec\u7acb\u96c6\u4e4b\u5916\u6ca1\u6709\u53ef\u4ee5\u52a0\u5165\u5b83\u7684\u9876\u70b9\u3002\u4e00\u4e2a\u56fe\u53ef\u80fd\u6709\u8bb8\u591a\u5927\u5c0f\u5dee\u5f02\u5f88\u5927\u7684 MIS\uff0c\u7b97\u6cd5\u627e\u51fa\u5176\u4e2d\u4e00\u4e2a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Maximal_independent_set#Sequential_algorithm \u3002 Sybil\u68c0\u6d4b\u7b97\u6cd5 Sybil\u68c0\u6d4b\u7b97\u6cd5\u5b9e\u73b0\u4e86Sybil Rank\u7b97\u6cd5\u3002SybilRank\u7b97\u6cd5\u4ece\u975eSybil\u8282\u70b9\u5f00\u59cb\u8fdb\u884c\u63d0\u524d\u7ec8\u6b62\u7684\u968f\u673a\u6e38\u8d70\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003\u8bba\u6587\uff1a\u201cAiding the Detection of Fake Accounts in Large Scale Social Online Services\u201d\u3002 \u5b50\u56fe\u5339\u914d\u7b97\u6cd5 \u5b50\u56fe\u5339\u914d\u7b97\u6cd5\u5b9e\u73b0\u4e86subgraph_isomorphism\u7b97\u6cd5\u3002subgraph_isomorphism\u7b97\u6cd5\u5bf9\u5168\u56fe\u6240\u6709\u8282\u70b9\u5339\u914d\u5b50\u56fe\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u88ab\u5339\u914d\u7684\u6b21\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://www.jsjkx.com/CN/article/openArticlePDF.jsp?id=18105 \u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 \u6a21\u5f0f\u5339\u914d\u7b97\u6cd5\u5b9e\u73b0\u4e86motif\u7b97\u6cd5\u3002motif\u7b97\u6cd5\u5bf9\u6307\u5b9a\u7684\u8282\u70b9\u5339\u914dk\u9636\u5b50\u56fe\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u6307\u5b9a\u8282\u70b9\u6bcf\u79cdk\u9636\u5b50\u56fe\u4e2a\u6570\uff0c\u6bcf\u4e2ak\u9636\u5b50\u56fe\u7528\u4e00\u4e2a64\u4f4d\u6574\u6570\u8868\u793a\uff0c\u6574\u6570\u7684\u7b2c$i \\times k + j$\u4f4d\u4e3a1\u8868\u793a\u5b50\u56fe\u4e2d\u6709\u8fb9i->j\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://en.wikipedia.org/wiki/Network_motif#mfinder k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5 k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5\u5b9e\u73b0\u4e86k-cliques\u7b97\u6cd5\u3002k-cliques\u7b97\u6cd5\u5bf9\u8ba1\u7b97\u56fe\u4e2d\u6240\u6709\u7684k\u9636\u5b8c\u5168\u5b50\u56fe\u7684\u4e2a\u6570\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u7684k\u9636\u5b8c\u5168\u5b50\u56fe\u4e2a\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://en.wikipedia.org/wiki/Clique_problem#Cliques_of_fixed_size k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5 k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5\u5b9e\u73b0\u4e86k-truss\u7b97\u6cd5\u3002k-truss\u6307\u6bcf\u6761\u8fb9\u90fd\u81f3\u5c11\u662fk-2\u4e2a\u4e09\u89d2\u5f62\u7684\u8fb9\u7684\u5b50\u56fe\u3002k-truss\u7b97\u6cd5\u627e\u51fa\u56fe\u7684k-truss\u5b50\u56fe\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u5728\u5b50\u56fe\u4e2d\u7684\u90bb\u5c45\u8282\u70b9\u5217\u8868\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://louridas.github.io/rwa/assignments/finding-trusses/ \u83b1\u987f\u7b97\u6cd5 \u83b1\u987f\u7b97\u6cd5\u5b9e\u73b0\u4e86\u4e86leiden\u7b97\u6cd5\u3002leiden\u7b97\u6cd5\u662f\u57fa\u4e8e\u6a21\u5757\u5ea6\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u4e0elouvain\u7b97\u6cd5\u4f18\u52bf\u5728\u4e8eleiden\u7b97\u6cd5\u68c0\u6d4b\u51fa\u793e\u533a\u4e2d\u7684\u65ad\u94fe\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u793e\u533a\u5177\u6709\u826f\u597d\u7684\u8fde\u901a\u6027\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://www.nature.com/articles/s41598-019-41695-z#Sec4","title":"\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#tugraph","text":"\u6b64\u6587\u6863\u4e3b\u8981\u8be6\u7ec6\u4ecb\u7ecd\u4e86TuGraph\u5185\u7f6e\u7684\u7b97\u6cd5\u7a0b\u5e8f\uff0c\u793e\u533a\u72486\u79cd\u7b97\u6cd5\u53ef\u53c2\u8003\u57fa\u7840\u7b97\u6cd5\u62a5","title":"TuGraph \u5185\u7f6e\u7b97\u6cd5\u8bf4\u660e"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_1","text":"TuGraph \u5185\u7f6e\u7b97\u6cd5\u8bf4\u660e \u57fa\u7840\u7b97\u6cd5\u5305 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(bfs) \u7f51\u9875\u6392\u5e8f(pagerank) \u5355\u6e90\u6700\u77ed\u8def\u5f84(sssp) \u5f31\u8fde\u901a\u5206\u91cf(wcc) \u5e73\u5747\u96c6\u805a\u7cfb\u6570(lcc) \u6807\u7b7e\u4f20\u64ad(lpa) \u6269\u5c55\u7b97\u6cd5\u5305 \u5168\u5bf9\u6700\u77ed\u8def\u5f84(apsp) \u4ecb\u6570\u4e2d\u5fc3\u5ea6(bc) \u7f6e\u4fe1\u5ea6\u4f20\u64ad(bp) \u8ddd\u79bb\u4e2d\u5fc3\u5ea6(cc) \u5171\u540c\u90bb\u5c45(cn) \u5ea6\u6570\u5173\u8054\u5ea6(dc) \u76f4\u5f84\u4f30\u8ba1(de) EgoNet\u7b97\u6cd5(en) \u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22(hits) \u6770\u5361\u5fb7\u7cfb\u6570(ji) k\u6838\u7b97\u6cd5(kcore) \u9c81\u6c76\u793e\u533a\u53d1\u73b0(louvain) \u591a\u6e90\u6700\u77ed\u8def\u5f84(mssp) \u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f\u7b97\u6cd5(ppr) \u5f3a\u8fde\u901a\u5206\u91cf(scc) \u76d1\u542c\u6807\u7b7e\u4f20\u64ad(slpa) \u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84(spsp) \u4e09\u89d2\u8ba1\u6570(triangle) \u4fe1\u4efb\u6307\u6570\u6392\u540d(trustrank) \u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad(wlpa) \u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f(wpagerank) \u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5(mis) Sybil\u68c0\u6d4b\u7b97\u6cd5(sybilrank) \u5b50\u56fe\u5339\u914d\u7b97\u6cd5(subgraph_isomorphism) \u6a21\u5f0f\u5339\u914d\u7b97\u6cd5(motif) \u83b1\u987f\u7b97\u6cd5(Leiden) k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5 k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5","title":"\u76ee\u5f55"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_2","text":"TuGraph\u76ee\u524d\u5305\u542b\u4ee5\u4e0b6\u4e2a\u57fa\u7840\u7b97\u6cd528\u79cd\u6269\u5c55\u7b97\u6cd5\uff0c\u517134\u4e2a\u56fe\u7b97\u6cd5\uff1a","title":"\u7b80\u4ecb"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_3","text":"\u4e2d\u6587\u7b97\u6cd5\u540d \u82f1\u6587\u7b97\u6cd5\u540d \u7a0b\u5e8f\u540d \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 Breadth-First Search bfs \u7f51\u9875\u6392\u5e8f Pagerank pagerank \u5355\u6e90\u6700\u77ed\u8def\u5f84 Single-Source Shortest Path sssp \u5f31\u8fde\u901a\u5206\u91cf Weakly Connected Components wcc \u5e73\u5747\u96c6\u805a\u7cfb\u6570 Local Clustering Coefficient lcc \u6807\u7b7e\u4f20\u64ad Label Propagation Algorithm lpa","title":"\u57fa\u7840\u7b97\u6cd5\u5305\uff1a"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_4","text":"\u4e2d\u6587\u7b97\u6cd5\u540d \u82f1\u6587\u7b97\u6cd5\u540d \u7a0b\u5e8f\u540d \u5168\u5bf9\u6700\u77ed\u8def\u5f84 All-Pair Shortest Path apsp \u4ecb\u6570\u4e2d\u5fc3\u5ea6 Betweenness Centrality bc \u7f6e\u4fe1\u5ea6\u4f20\u64ad Belief Propagation bp \u8ddd\u79bb\u4e2d\u5fc3\u5ea6 Closeness Centrality cc \u5171\u540c\u90bb\u5c45 Common Neighborhood cn \u5ea6\u6570\u5173\u8054\u5ea6 Degree Correlation dc \u76f4\u5f84\u4f30\u8ba1 Dimension Estimation de EgoNet\u7b97\u6cd5 EgoNet en \u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22 Hyperlink-Induced Topic Search hits \u6770\u5361\u5fb7\u7cfb\u6570 Jaccard Index ji K\u6838\u7b97\u6cd5 K-core kcore \u9c81\u6c76\u793e\u533a\u53d1\u73b0 Louvain louvain \u591a\u6e90\u6700\u77ed\u8def\u5f84 Multiple-source Shortest Paths mssp \u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f Personalized PageRank ppr \u5f3a\u8fde\u901a\u5206\u91cf Strongly Connected Components scc \u76d1\u542c\u6807\u7b7e\u4f20\u64ad Speaker-listener Label Propagation Algorithm slpa \u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84 Single-Pair Shortest Path spsp \u4e09\u89d2\u8ba1\u6570 Triangle Counting triangle \u4fe1\u4efb\u6307\u6570\u6392\u540d Trustrank trustrank \u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad Weighted Label Propagation Algorithm wlpa \u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f Weighted Pagerank Algorithm wpagerank \u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5 Maximal independent set mis sybil\u68c0\u6d4b\u7b97\u6cd5 Sybil Rank sybilrank \u5b50\u56fe\u5339\u914d\u7b97\u6cd5 Subgraph Isomorphism subgraph_isomorphism \u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 Motif motif k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5 Kcliques kcliques k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5 Ktruss ktruss \u83b1\u987f\u7b97\u6cd5 Leiden leiden","title":"\u6269\u5c55\u7b97\u6cd5\u5305\uff1a"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_5","text":"","title":"\u57fa\u7840\u7b97\u6cd5\u5305"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_6","text":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5b9e\u73b0\u4e86Breadth-first Search\u7b97\u6cd5\uff0c\u4ece\u6839\u9876\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u56fe\u7684\u5bbd\u5ea6\u904d\u5386\u6240\u6709\u53ef\u8bbf\u95ee\u9876\u70b9\u3002\u8fd4\u56de\u7ed3\u679c\u4e3a\u904d\u5386\u9876\u70b9\u4e2a\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Breadth-first_search \u3002","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_7","text":"\u7f51\u9875\u6392\u5e8f\u7a0b\u5e8f\u5b9e\u73b0\u4e86\u5e38\u7528\u7684Pagerank\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u6839\u636e\u56fe\u4e2d\u8fb9\u548c\u8fb9\u6743\u503c\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u7684\u91cd\u8981\u6027\u6392\u540d\uff0cPageRank\u503c\u8d8a\u9ad8\uff0c\u8868\u793a\u8be5\u9876\u70b9\u5728\u56fe\u4e2d\u7684\u91cd\u8981\u6027\u8d8a\u9ad8\u3002\u8ba1\u7b97\u65f6\u4ee5\u9876\u70b9\u6570\u91cf\u7684\u5012\u6570\u4e3a\u5404\u9876\u70b9\u521d\u59cbRank\u503c\uff0c\u7136\u540e\u5c06\u9876\u70b9\u7684Rank\u503c\u6309\u7167\u51fa\u8fb9\u5e73\u5747\u4f20\u9012\u5230\u76f8\u90bb\u9876\u70b9\uff0c\u91cd\u590d\u8be5\u4f20\u9012\u8fc7\u7a0b\u76f4\u5230\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6536\u655b\u9608\u503c\u6216\u8fbe\u5230\u7ed9\u5b9a\u8fed\u4ee3\u8f6e\u6570\u3002\u6bcf\u8f6e\u4f20\u9012\u7ed3\u675f\u540e\uff0c\u6240\u6709\u9876\u70b9\u7684Rank\u503c\u4f1a\u6709\u4e00\u5b9a\u7684\u7684\u6bd4\u4f8b\u968f\u673a\u4f20\u9012\u5230\u4efb\u610f\u9876\u70b9\u4e0a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/PageRank \u3002","title":"\u7f51\u9875\u6392\u5e8f"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_8","text":"\u5355\u6e90\u6700\u77ed\u8def\u5f84\u5b9e\u73b0\u4e86Single Source Shortest Path\u7b97\u6cd5\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u6e90\u9876\u70b9\uff0c\u8ba1\u7b97\u4ece\u8be5\u6e90\u9876\u70b9\u51fa\u53d1\u5230\u5176\u4ed6\u4efb\u610f\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Shortest_path_problem \u3002","title":"\u5355\u6e90\u6700\u77ed\u8def\u5f84"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_9","text":"\u5f31\u8fde\u901a\u5206\u91cf\u7a0b\u5e8f\u5b9e\u73b0\u4e86Weakly Connected Components\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u4f1a\u8ba1\u7b97\u56fe\u4e2d\u6240\u6709\u7684\u5f31\u8fde\u901a\u5206\u91cf\u3002\u5f31\u8fde\u901a\u5206\u91cf\u662f\u56fe\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u5747\u5b58\u5728\u53ef\u8fbe\u8def\u5f84\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Connected_component_(graph_theory) \u3002","title":"\u5f31\u8fde\u901a\u5206\u91cf"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_10","text":"\u5e73\u5747\u96c6\u805a\u7cfb\u6570\u7a0b\u5e8f\u5b9e\u73b0\u4e86Local Clustering Coefficient\u7b97\u6cd5\uff0c\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u4e4b\u95f4\u805a\u96c6\u7a0b\u5ea6\u7684\u7cfb\u6570\u3002\u8fd4\u56de\u7ed3\u679c\u5305\u62ec\u6574\u4f53\u96c6\u805a\u7cfb\u6570\u548c\u9876\u70b9\u96c6\u805a\u7cfb\u6570\u3002\u6574\u4f53\u96c6\u805a\u7cfb\u6570\u53cd\u6620\u4e86\u56fe\u4e2d\u6574\u4f53\u7684\u96c6\u805a\u7a0b\u5ea6\u7684\u8bc4\u4f30\uff0c\u9876\u70b9\u96c6\u805a\u7cfb\u6570\u5305\u62ec\u4efb\u610f\u9876\u70b9\u7684\u96c6\u805a\u7cfb\u6570\uff0c\u53cd\u6620\u4e86\u8be5\u9876\u70b9\u9644\u8fd1\u7684\u96c6\u805a\u7a0b\u5ea6\u3002\u96c6\u805a\u7cfb\u6570\u8d8a\u9ad8\uff0c\u8868\u793a\u96c6\u805a\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Clustering_coefficient \u3002","title":"\u5e73\u5747\u96c6\u805a\u7cfb\u6570"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_11","text":"\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Label Propagation Algorithm\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u57fa\u4e8e\u6807\u7b7e\u4f20\u64ad\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u8ba1\u7b97\u5bf9\u8c61\u4e3a\u65e0\u6743\u56fe\u3002\u5728\u6807\u7b7e\u4f20\u9012\u65f6\uff0c\u6bcf\u4e2a\u9876\u70b9\u5bf9\u6536\u5230\u7684\u6240\u6709\u6807\u7b7e\u8fdb\u884c\u6b21\u6570\u7d2f\u52a0\uff0c\u5728\u7d2f\u52a0\u548c\u6700\u9ad8\u7684\u6807\u7b7e\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u3002\u8fed\u4ee3\u6536\u655b\u6216\u6267\u884c\u5230\u7ed9\u5b9a\u8f6e\u6570\u540e\u7b97\u6cd5\u7ec8\u6b62\u3002\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u4e3a\u6bcf\u4e2a\u9876\u70b9\u7684\u6807\u7b7e\uff0c\u6807\u7b7e\u503c\u76f8\u540c\u7684\u9876\u70b9\u89c6\u4e3a\u5728\u540c\u4e00\u793e\u533a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002","title":"\u6807\u7b7e\u4f20\u64ad"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_12","text":"","title":"\u6269\u5c55\u7b97\u6cd5\u5305"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_13","text":"\u5168\u5bf9\u6700\u77ed\u8def\u5f84\u7a0b\u5e8f\u5b9e\u73b0\u4e86All-Pair Shortest Path\u7b97\u6cd5\uff0c\u8ba1\u7b97\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u8fd4\u56de\u7ed3\u679c\u4e3a\u4efb\u610f\u5b58\u5728\u8def\u5f84\u7684\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm","title":"\u5168\u5bf9\u6700\u77ed\u8def\u5f84"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_14","text":"\u4ecb\u6570\u4e2d\u5fc3\u5ea6\u7a0b\u5e8f\u5b9e\u73b0\u4e86Betweenness Centrality\u7b97\u6cd5\uff0c\u4f30\u7b97\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u4ecb\u6570\u4e2d\u5fc3\u5ea6\u503c\u3002\u4ecb\u6570\u4e2d\u5fc3\u5ea6\u503c\u53cd\u6620\u4e86\u56fe\u4e2d\u4efb\u4e00\u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u8be5\u9876\u70b9\u7684\u53ef\u80fd\u6027\uff0c\u503c\u8d8a\u9ad8\u8868\u793a\u6709\u8d8a\u591a\u7684\u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u4e86\u8be5\u9876\u70b9\u3002\u8ba1\u7b97\u65f6\u9700\u7ed9\u5b9a\u62bd\u6837\u70b9\u4e2a\u6570\uff0c\u5206\u522b\u4ee5\u8fd9\u4e9b\u62bd\u6837\u70b9\u4e3a\u4e2d\u5fc3\u8fdb\u884c\u8ba1\u7b97\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Betweenness_centrality \u3002","title":"\u4ecb\u6570\u4e2d\u5fc3\u5ea6"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_15","text":"\u7f6e\u4fe1\u5ea6\u4f20\u64ad\u7a0b\u5e8f\u5b9e\u73b0\u4e86Belief Propagation\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u7ed9\u5b9a\u5df2\u89c2\u6d4b\u9876\u70b9\u7684\u8fb9\u7f18\u5206\u5e03\uff0c\u5229\u7528\u9876\u70b9\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u6d88\u606f\u7684\u673a\u5236\u6765\u4f30\u7b97\u672a\u89c2\u6d4b\u9876\u70b9\u7684\u8fb9\u7f18\u5206\u5e03\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Belief_propagation \u3002","title":"\u7f6e\u4fe1\u5ea6\u4f20\u64ad"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_16","text":"\u8ddd\u79bb\u4e2d\u5fc3\u5ea6\u7a0b\u5e8f\u5b9e\u73b0\u4e86Closeness Centrality\u7b97\u6cd5\uff0c\u4f30\u7b97\u4efb\u610f\u9876\u70b9\u5230\u56fe\u4e2d\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u5e73\u5747\u957f\u5ea6\u3002\u8ddd\u79bb\u4e2d\u5fc3\u5ea6\u8d8a\u5c0f\uff0c\u8868\u793a\u8be5\u9876\u70b9\u5230\u5176\u4ed6\u9876\u70b9\u7684\u5e73\u5747\u6700\u77ed\u8ddd\u79bb\u6700\u5c0f\uff0c\u610f\u5473\u7740\u8be5\u9876\u70b9\u4ece\u51e0\u4f55\u89d2\u5ea6\u770b\u66f4\u4f4d\u4e8e\u56fe\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u3002\u8ba1\u7b97\u65f6\u9700\u8981\u7ed9\u5b9a\u62bd\u6837\u70b9\u4e2a\u6570\uff0c\u5206\u522b\u4ee5\u8fd9\u4e9b\u62bd\u6837\u70b9\u4e3a\u4e2d\u5fc3\u8fdb\u884c\u8ba1\u7b97\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Closeness_centrality \u3002","title":"\u8ddd\u79bb\u4e2d\u5fc3\u5ea6"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_17","text":"\u5171\u540c\u90bb\u5c45\u7a0b\u5e8f\u5b9e\u73b0\u4e86Common Neighborhood\u7b97\u6cd5\uff0c\u8ba1\u7b97\u4efb\u610f\u7ed9\u5b9a\u76f8\u90bb\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u5171\u540c\u90bb\u5c45\u6570\u91cf\u3002\u8ba1\u7b97\u65f6\u7ed9\u5b9a\u5f85\u67e5\u8be2\u7684\u82e5\u5e72\u4e2a\u9876\u70b9\u5bf9\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u5f85\u67e5\u8be2\u7684\u4efb\u610f\u9876\u70b9\u5bf9\u7684\u5171\u540c\u90bb\u5c45\u6570\u91cf\u3002","title":"\u5171\u540c\u90bb\u5c45"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_18","text":"\u5ea6\u6570\u5173\u8054\u5ea6\u7a0b\u5e8f\u5b9e\u73b0\u4e86Degree Correlation\u7b97\u6cd5\uff0c\u901a\u8fc7\u8ba1\u7b97\u4efb\u610f\u76f8\u90bb\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684Pearson\u5173\u8054\u7cfb\u6570\u6765\u8ba1\u7b97\u56fe\u7684\u5ea6\u6570\u5173\u8054\u5ea6\uff0c\u53ef\u7528\u6765\u8868\u5f81\u56fe\u4e2d\u9ad8\u5ea6\u6570\u9876\u70b9\u4e4b\u95f4\u5173\u8054\u7a0b\u5ea6\u3002\u5ea6\u6570\u5173\u8054\u5ea6\u8d8a\u9ad8\uff0c\u8868\u793a\u56fe\u4e2d\u9ad8\u5ea6\u6570\u9876\u70b9\u4e4b\u95f4\u7684\u5173\u8054\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Pearson_correlation_coefficient","title":"\u5ea6\u6570\u5173\u8054\u5ea6"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_19","text":"\u76f4\u5f84\u4f30\u8ba1\u7a0b\u5e8f\u5b9e\u73b0\u4e86Dimension Estimation\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u4f1a\u8ba1\u7b97\u56fe\u4e2d\u6700\u957f\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u7528\u6765\u8868\u5f81\u56fe\u7684\u76f4\u5f84\u5927\u5c0f\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 http://mathworld.wolfram.com/GraphDiameter.html \u3002","title":"\u76f4\u5f84\u4f30\u8ba1"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#egonet","text":"EgoNet\u7b97\u6cd5\u9700\u8981\u7ed9\u5b9a\u6839\u9876\u70b9\u548cK\u503c\uff0c\u4ee5\u6839\u9876\u70b9\u4e3a\u6e90\u9876\u70b9\u8fdb\u884c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u51fa\u6240\u6709K\u5ea6\u4ee5\u5185\u7684\u90bb\u5c45\u7ec4\u6210\u7684\u5b50\u56fe\u3002\u627e\u5230\u7684\u5b50\u56fe\u79f0\u4e3a\u6839\u9876\u70b9\u7684EgoNet\u3002","title":"EgoNet\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_20","text":"\u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22\u7b97\u6cd5\u5b9e\u73b0\u4e86Hyperlink-Induced Topic Search\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u5047\u5b9a\u6bcf\u4e2a\u9876\u70b9\u5177\u6709\u6743\u5a01\u6027Authority\u548c\u67a2\u7ebd\u6027Hub\u4e24\u4e2a\u5c5e\u6027\uff0c\u4e00\u4e2a\u597d\u7684\u67a2\u7ebd\u9876\u70b9\u5e94\u8be5\u6307\u5411\u8bb8\u591a\u9ad8\u6743\u5a01\u6027\u7684\u9876\u70b9\uff0c\u800c\u4e00\u4e2a\u826f\u597d\u7684\u6743\u5a01\u9876\u70b9\u5e94\u8be5\u88ab\u8bb8\u591a\u9ad8\u67a2\u7ebd\u578b\u7684\u9876\u70b9\u6307\u5411\u3002\u7b97\u6cd5\u5c06\u8fd4\u56de\u6bcf\u4e2a\u9876\u70b9\u7684\u6743\u5a01\u6027\u503c\u548c\u67a2\u7ebd\u6027\u503c\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/HITS_algorithm \u3002","title":"\u8d85\u94fe\u63a5\u4e3b\u9898\u641c\u7d22"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_21","text":"\u6770\u5361\u5fb7\u7cfb\u6570\u7a0b\u5e8f\u5b9e\u73b0\u4e86Jaccard Index\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u8ba1\u7b97\u4e86\u7ed9\u5b9a\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684Jaccard\u7cfb\u6570\uff0c\u53ef\u7528\u6765\u8868\u793a\u8fd9\u4e24\u4e2a\u9876\u70b9\u7684\u76f8\u4f3c\u5ea6\u3002Jaccard\u7cfb\u6570\u8d8a\u9ad8\uff0c\u8868\u793a\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u76f8\u4f3c\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u8ba1\u7b97\u65f6\u7ed9\u5b9a\u5e26\u67e5\u8be2\u7684\u82e5\u5e72\u9876\u70b9\u5bf9\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u8fd9\u4e9b\u9876\u70b9\u5bf9\u7684Jaccard\u7cfb\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Jaccard_index \u3002","title":"\u6770\u5361\u5fb7\u7cfb\u6570"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#k","text":"k\u6838\u7b97\u6cd5\u5b9e\u73b0\u4e86k-core\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u7684\u6838\u6570\uff0c\u6216\u627e\u51fa\u56fe\u4e2d\u6240\u6709\u7684K\u6838\u5b50\u56fe\u3002K\u6838\u5b50\u56fe\u662f\u4e00\u79cd\u7279\u6b8a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e2d\u4efb\u610f\u9876\u70b9\u5ea6\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7ed9\u5b9aK\u503c\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Degeneracy_(graph_theory) \u3002","title":"k\u6838\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_22","text":"\u9c81\u6c76\u793e\u533a\u53d1\u73b0\u7a0b\u5e8f\u5b9e\u73b0\u4e86Fast-unfolding\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u57fa\u4e8e\u6a21\u5757\u5ea6\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u901a\u8fc7\u4e0d\u65ad\u5408\u5e76\u9876\u70b9\u793e\u533a\u6765\u6700\u5927\u5316\u56fe\u7684\u6a21\u5757\u5ea6\uff0c\u80fd\u591f\u53d1\u73b0\u5c42\u6b21\u6027\u7684\u793e\u533a\u7ed3\u6784\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Louvain_Modularity \u3002","title":"\u9c81\u6c76\u793e\u533a\u53d1\u73b0"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_23","text":"\u591a\u6e90\u6700\u77ed\u8def\u5f84\u7a0b\u5e8f\u5b9e\u73b0\u4e86Multiple-source Shortest Paths\u7b97\u6cd5\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u591a\u4e2a\u6e90\u9876\u70b9\uff0c\u4ece\u8fd9\u4e9b\u6e90\u9876\u70b9\u51fa\u53d1\uff0c\u8ba1\u7b97\u5230\u8fbe\u4efb\u610f\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u503c\u3002\u5176\u4e2d\uff0c\u591a\u4e2a\u6e90\u9876\u70b9\u5230\u67d0\u4e00\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u503c\u4e3a\u5206\u522b\u4ece\u6bcf\u4e2a\u6e90\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u8be5\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Shortest_path_problem \u3002","title":"\u591a\u6e90\u6700\u77ed\u8def\u5f84"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_24","text":"\u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f\u7a0b\u5e8f\u5b9e\u73b0\u4e86Personalized PageRank\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u6839\u636e\u7ed9\u5b9a\u7684\u6e90\u9876\u70b9\uff0c\u57fa\u4e8e\u8be5\u6e90\u9876\u70b9\u4e2a\u6027\u5316\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u5bf9\u4e8e\u6e90\u9876\u70b9\u7684\u91cd\u8981\u6027\u6392\u540d\u3002Rank\u503c\u8d8a\u9ad8\uff0c\u8868\u793a\u8be5\u9876\u70b9\u5bf9\u4e8e\u6e90\u9876\u70b9\u8d8a\u91cd\u8981\u3002\u4e0ePageRank\u4e0d\u540c\u7684\u662f\uff0c\u521d\u59cb\u5316\u65f6\u6e90\u9876\u70b9Rank\u503c\u4e3a1\uff0c\u5176\u4f59\u9876\u70b9Rank\u503c\u4e3a0\uff1b\u5e76\u4e14\u6bcf\u8f6e\u4f20\u9012\u7ed3\u675f\u540e\uff0cRank\u503c\u4f1a\u6709\u4e00\u5b9a\u7684\u6bd4\u4f8b\u968f\u5373\u4f20\u9012\u56de\u6e90\u9876\u70b9\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://cs.stanford.edu/people/plofgren/Fast-PPR_KDD_Talk.pdf \u3002","title":"\u4e2a\u6027\u5316\u7f51\u9875\u6392\u5e8f"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_25","text":"\u5f3a\u8fde\u901a\u5206\u91cf\u7a0b\u5e8f\u5b9e\u73b0\u4e86Strongly Connected Components\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u8ba1\u7b97\u4e86\u56fe\u4e2d\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u56fe\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u5b50\u56fe\u4e2d\u53ef\u4ece\u4efb\u610f\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u5176\u4ed6\u4efb\u610f\u9876\u70b9\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Strongly_connected_component \u3002","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_26","text":"\u76d1\u542c\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Speaker-listener Label Propagation Algorithm\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u662f\u57fa\u4e8e\u6807\u7b7e\u4f20\u64ad\u548c\u5386\u53f2\u6807\u7b7e\u8bb0\u5f55\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u662f\u5bf9\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7684\u6269\u5c55\u3002\u4e0e\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u672c\u7b97\u6cd5\u4f1a\u5bf9\u6240\u6709\u9876\u70b9\u8bb0\u5f55\u5176\u5386\u53f2\u6807\u7b7e\uff0c\u5728\u8fed\u4ee3\u4e2d\u5bf9\u6807\u7b7e\u8fdb\u884c\u7d2f\u52a0\u65f6\uff0c\u4f1a\u5c06\u5386\u53f2\u6807\u7b7e\u4e5f\u8ba1\u7b97\u5728\u5185\u3002\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u4e3a\u6bcf\u4e2a\u9876\u70b9\u7684\u6240\u6709\u5386\u53f2\u6807\u7b7e\u8bb0\u5f55\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003\u8bba\u6587\uff1a\u201cSLPA: Uncovering Overlapping Communities in Social Networks via a Speaker-Listener Interaction Dynamic Process\u201d\u3002","title":"\u76d1\u542c\u6807\u7b7e\u4f20\u64ad"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_27","text":"\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7a0b\u5e8f\u5b9e\u73b0\u4e86Bidirectional Breadth-First Search\u7b97\u6cd5\uff0c\u5728\u6709\u5411\u65e0\u6743\u56fe\u4e0a\u4ece\u8d77\u70b9\u6cbf\u7740\u51fa\u8fb9\u505a\u6b63\u5411\u5bbd\u5ea6\u4f18\u5148\u641c\u641c\uff0c\u4ece\u7ec8\u70b9\u6cbf\u7740\u5165\u8fb9\u505a\u53cd\u5411\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u901a\u8fc7\u8d77\u70b9\u548c\u7ec8\u70b9\u5171\u540c\u904d\u5386\u5230\u7684\u9876\u70b9\u6765\u786e\u5b9a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Bidirectional_search \u3002","title":"\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_28","text":"\u4e09\u89d2\u8ba1\u6570\u5b9e\u73b0\u4e86Triangle-counting\u7b97\u6cd5\uff0c\u8ba1\u7b97\u65e0\u5411\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\u4e2a\u6570\uff0c\u53ef\u7528\u6765\u8868\u5f81\u56fe\u4e2d\u9876\u70b9\u7684\u5173\u8054\u7a0b\u5ea6\u3002\u4e09\u89d2\u5f62\u6570\u8d8a\u591a\uff0c\u8868\u793a\u56fe\u4e2d\u9876\u70b9\u7684\u5173\u8054\u7a0b\u5ea6\u8d8a\u9ad8\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003\u8bba\u6587\uff1a\u201cFinding, Counting and Listing All Triangles in Large Graphs, an Experimental Study\u201d \u3002","title":"\u4e09\u89d2\u8ba1\u6570"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_29","text":"\u4fe1\u4efb\u6307\u6570\u6392\u540d\u7b97\u6cd5\u5b9e\u73b0\u4e86Trustrank\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684\u767d\u540d\u5355\uff0c\u8ba1\u7b97\u4efb\u610f\u9876\u70b9\u7684\u4fe1\u4efb\u6307\u6570\u3002\u4fe1\u4efb\u6307\u6570\u8d8a\u9ad8\uff0c\u8868\u793a\u8be5\u9876\u70b9\u4e3a\u975e\u6cd5\u9876\u70b9\u7684\u53ef\u80fd\u6027\u8d8a\u5c0f\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/TrustRank \u3002","title":"\u4fe1\u4efb\u6307\u6570\u6392\u540d"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_30","text":"\u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Weighted Label Propagation Algorithm\u7b97\u6cd5\u3002=\u4e0e\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6807\u7b7e\u7684\u4f20\u9012\u8ddf\u8fb9\u7684\u6743\u91cd\u76f8\u5173\uff0c\u5728\u6807\u7b7e\u4f20\u9012\u65f6\uff0c\u6bcf\u4e2a\u9876\u70b9\u4f1a\u6839\u636e\u6807\u7b7e\u7684\u5165\u8fb9\u8fdb\u884c\u6743\u91cd\u7d2f\u52a0\uff0c\u5728\u7d2f\u52a0\u548c\u6700\u9ad8\u7684\u6807\u7b7e\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Label_Propagation_Algorithm \u3002","title":"\u5e26\u6743\u91cd\u7684\u6807\u7b7e\u4f20\u64ad"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_31","text":"\u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f\u7b97\u6cd5\u7a0b\u5e8f\u5b9e\u73b0\u4e86Weighted Pagerank\u7b97\u6cd5\u3002\u4e0ePageRank\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0cRank\u503c\u7684\u4f20\u9012\u8ddf\u8fb9\u7684\u6743\u91cd\u6709\u5173\uff0c\u9876\u70b9\u7684Rank\u503c\u5c06\u6309\u7167\u8fb9\u6743\u91cd\u52a0\u6743\u4f20\u9012\u5230\u76f8\u90bb\u9876\u70b9\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/PageRank \u3002","title":"\u5e26\u6743\u91cd\u7684\u7f51\u9875\u6392\u5e8f"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_32","text":"\u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5\u5b9e\u73b0\u4e86Maximal independent set\u7b97\u6cd5\u3002\u6700\u5927\u72ec\u7acb\u96c6\u662f\u6307\u5728\u8fd9\u4e2a\u72ec\u7acb\u96c6\u4e4b\u5916\u6ca1\u6709\u53ef\u4ee5\u52a0\u5165\u5b83\u7684\u9876\u70b9\u3002\u4e00\u4e2a\u56fe\u53ef\u80fd\u6709\u8bb8\u591a\u5927\u5c0f\u5dee\u5f02\u5f88\u5927\u7684 MIS\uff0c\u7b97\u6cd5\u627e\u51fa\u5176\u4e2d\u4e00\u4e2a\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003 https://en.wikipedia.org/wiki/Maximal_independent_set#Sequential_algorithm \u3002","title":"\u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#sybil","text":"Sybil\u68c0\u6d4b\u7b97\u6cd5\u5b9e\u73b0\u4e86Sybil Rank\u7b97\u6cd5\u3002SybilRank\u7b97\u6cd5\u4ece\u975eSybil\u8282\u70b9\u5f00\u59cb\u8fdb\u884c\u63d0\u524d\u7ec8\u6b62\u7684\u968f\u673a\u6e38\u8d70\u3002\u7b97\u6cd5\u5185\u5bb9\u8bf7\u53c2\u8003\u8bba\u6587\uff1a\u201cAiding the Detection of Fake Accounts in Large Scale Social Online Services\u201d\u3002","title":"Sybil\u68c0\u6d4b\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_33","text":"\u5b50\u56fe\u5339\u914d\u7b97\u6cd5\u5b9e\u73b0\u4e86subgraph_isomorphism\u7b97\u6cd5\u3002subgraph_isomorphism\u7b97\u6cd5\u5bf9\u5168\u56fe\u6240\u6709\u8282\u70b9\u5339\u914d\u5b50\u56fe\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u88ab\u5339\u914d\u7684\u6b21\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://www.jsjkx.com/CN/article/openArticlePDF.jsp?id=18105","title":"\u5b50\u56fe\u5339\u914d\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_34","text":"\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5\u5b9e\u73b0\u4e86motif\u7b97\u6cd5\u3002motif\u7b97\u6cd5\u5bf9\u6307\u5b9a\u7684\u8282\u70b9\u5339\u914dk\u9636\u5b50\u56fe\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u6307\u5b9a\u8282\u70b9\u6bcf\u79cdk\u9636\u5b50\u56fe\u4e2a\u6570\uff0c\u6bcf\u4e2ak\u9636\u5b50\u56fe\u7528\u4e00\u4e2a64\u4f4d\u6574\u6570\u8868\u793a\uff0c\u6574\u6570\u7684\u7b2c$i \\times k + j$\u4f4d\u4e3a1\u8868\u793a\u5b50\u56fe\u4e2d\u6709\u8fb9i->j\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://en.wikipedia.org/wiki/Network_motif#mfinder","title":"\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#k_1","text":"k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5\u5b9e\u73b0\u4e86k-cliques\u7b97\u6cd5\u3002k-cliques\u7b97\u6cd5\u5bf9\u8ba1\u7b97\u56fe\u4e2d\u6240\u6709\u7684k\u9636\u5b8c\u5168\u5b50\u56fe\u7684\u4e2a\u6570\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u7684k\u9636\u5b8c\u5168\u5b50\u56fe\u4e2a\u6570\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://en.wikipedia.org/wiki/Clique_problem#Cliques_of_fixed_size","title":"k\u9636\u56e2\u8ba1\u6570\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#k_2","text":"k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5\u5b9e\u73b0\u4e86k-truss\u7b97\u6cd5\u3002k-truss\u6307\u6bcf\u6761\u8fb9\u90fd\u81f3\u5c11\u662fk-2\u4e2a\u4e09\u89d2\u5f62\u7684\u8fb9\u7684\u5b50\u56fe\u3002k-truss\u7b97\u6cd5\u627e\u51fa\u56fe\u7684k-truss\u5b50\u56fe\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u5728\u5b50\u56fe\u4e2d\u7684\u90bb\u5c45\u8282\u70b9\u5217\u8868\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://louridas.github.io/rwa/assignments/finding-trusses/","title":"k\u9636\u6841\u67b6\u8ba1\u6570\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/5.algorithms/#_35","text":"\u83b1\u987f\u7b97\u6cd5\u5b9e\u73b0\u4e86\u4e86leiden\u7b97\u6cd5\u3002leiden\u7b97\u6cd5\u662f\u57fa\u4e8e\u6a21\u5757\u5ea6\u7684\u793e\u533a\u53d1\u73b0\u7b97\u6cd5\uff0c\u4e0elouvain\u7b97\u6cd5\u4f18\u52bf\u5728\u4e8eleiden\u7b97\u6cd5\u68c0\u6d4b\u51fa\u793e\u533a\u4e2d\u7684\u65ad\u94fe\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u793e\u533a\u5177\u6709\u826f\u597d\u7684\u8fde\u901a\u6027\u3002\u7b97\u6cd5\u5185\u5bb9\u53c2\u8003 https://www.nature.com/articles/s41598-019-41695-z#Sec4","title":"\u83b1\u987f\u7b97\u6cd5"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/","text":"Python Olap API \u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd OlapBase OlapOnDB \u548c OlapOnDisk \u5728Python\u4e2d\u7684API\u7528\u6cd5 \u76ee\u5f55 1.\u6982\u8ff0 2.\u914d\u7f6e\u8981\u6c42 3.Cython 4.Olap API 4.1.\u539f\u5b50\u64cd\u4f5c 4.2.\u9876\u70b9\u96c6\u5408\u7c7bParallelBitset 4.3.\u9876\u70b9\u6570\u7ec4\u7c7bParallelVector 4.4.\u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784 4.5.\u56fe\u7c7bOlapBase 4.6.\u56fe\u7c7bOlapOnDB 4.7.\u56fe\u7c7bOlapOnDisk 5.lgraph DB API 6.\u7b97\u6cd5\u63d2\u4ef6\u793a\u4f8b 1. \u6982\u8ff0 \u672c\u624b\u518c\u5c06\u4ecb\u7ecd\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7cfb\u7edfPython\u63a5\u53e3\u9700\u8981\u7684\u7b80\u5355\u914d\u7f6e\uff0c\u540c\u65f6\u7ed3\u5408\u4ee3\u7801\u5bf9TuGraph Python API\u8fdb\u884c\u89e3\u91ca\u3002\u5173\u4e8eParallelBitset\u3001OlapBase\u5404\u7c7b\u7684\u4f5c\u7528\uff0c\u8be6\u89c1olap-base-api.md\uff0colap-on-db-api.md\u548colap-on-disk-api.md 2. \u914d\u7f6e\u8981\u6c42 \u5982\u679c\u8981\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7f16\u5199\u4ee5\u53ca\u7f16\u8bd1\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u7684\u914d\u7f6e\u8981\u6c42\u4e3a\uff1a linux\u64cd\u4f5c\u7cfb\u7edf\uff0c\u76ee\u524d\u5728Ubuntu16.04.2\u548cCentos7\u7cfb\u7edf\u4e0a\u53ef\u6210\u529f\u8fd0\u884c\u3002 \u652f\u6301C++17\u7684\u7f16\u8bd1\u5668\uff0c\u8981\u6c42GCC\u7248\u672c\u4e3a5.4.1\u6216\u66f4\u65b0\u7684\u7248\u672c\u3002 Cython\uff0c\u7248\u672c\u8981\u6c423.0.0\u4ee5\u4e0a\uff0c\u5df2\u6d4b\u8bd5\u53ef\u8fd0\u884c\u7248\u672c\u4e3a3.0.0a11 3. Cython Cython\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u662fPython\u7684\u8d85\u96c6\u3002Cython\u80fd\u5c06py\u6587\u4ef6\u7ffb\u8bd1\u4e3aC/C++\u4ee3\u7801\u540e\u7f16\u8bd1\u4e3aPython\u62d3\u5c55\u7c7b\uff0c\u5728Python\u4e2d\u901a\u8fc7import\u8c03\u7528\u3002\u5728TuGraph\u4e2d\uff0c\u6240\u6709\u7684Python plugin\u90fd\u7531Cython\u7f16\u8bd1\u4e3aPython\u62d3\u5c55\u7c7b\u540e\u4f7f\u7528\u3002 Cython\u7684Pure Python\u6a21\u5f0f\u5728\u4fdd\u8bc1Python\u8bed\u6cd5\u7684\u540c\u65f6\u5177\u6709C/C++\u7684\u6027\u80fd\uff0cTuGraph Python\u63a5\u53e3\u5747\u4f7f\u7528Cython\u5b9e\u73b0\u3002 Cython \u6587\u6863 4. Olap API \u89c1plugins/cython/olap_base.pxd\u6587\u4ef6\uff0c\u7528\u6cd5\u4e0e\u529f\u80fd\u57fa\u672c\u4e0eC++\u63a5\u53e3\u76f8\u540c\uff0colap_base.pxd\u4e2d\u58f0\u660e\u7684\u63a5\u53e3\u90fd\u7531C++\u5b9e\u73b0\uff0c\u5728py\u6587\u4ef6\u4e2d\u5fc5\u987b\u901a\u8fc7 from cython.cimports.olap_base import * \u7684\u65b9\u5f0f\u5bfc\u5165\uff0c\u7531Cython\u7f16\u8bd1py\u6587\u4ef6\u540e\u624d\u80fd\u8fd0\u884c\u3002 \u539f\u5b50\u64cd\u4f5c cas[T](ptr: cython.pointer(T), oldv: T, newv: T)-> cython.bint \uff1a\u5982\u679cptr\u6307\u5411\u7684\u503c\u7b49\u4e8eoldv\uff0c\u5219\u5c06ptr\u6307\u5411\u7684\u503c\u8d4b\u4e3anewv\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse write_min[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5c0f\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 write_max[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5927\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 write_add[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5c06b\u7684\u503c\u52a0\u5230a\u6307\u5411\u7684\u503c\u4e0a\u3002 write_sub[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5c06a\u6307\u5411\u7684\u503c\u51cf\u53bbb\u7684\u503c\u3002 \u9876\u70b9\u96c6\u5408\u7c7bParallelBitset Size()-> size_t \uff1a\u8868\u793aBitmap\u4e2d\u7684\u9876\u70b9\u4e2a\u6570\u3002 ParallelBitset(size: size_t) \uff1a\u521d\u59cb\u5316size\u548cdata\uff0cdata\u957f\u5ea6\u4e3a(size >> 6)+1 Clear()-> cython.void \uff1a\u6e05\u7a7a\u96c6\u5408 Fill()-> cython.void \uff1a\u5c06\u6240\u6709\u9876\u70b9\u52a0\u5165\u96c6\u5408 Has(size_t i)-> cython.bint \uff1a\u68c0\u67e5\u9876\u70b9i\u662f\u5426\u5728\u96c6\u5408\u4e2d Add(size_t i)-> cython.bint \uff1a\u5c06\u9876\u70b9i\u52a0\u5165\u96c6\u5408\u4e2d Swap(ParallelBitset &other)-> cython.void \uff1a\u548c\u53e6\u4e00\u7ec4ParallelBitset\u96c6\u5408\u4ea4\u6362\u5143\u7d20 \u9876\u70b9\u6570\u7ec4\u7c7bParallelVector ParallelVector[T](size_t capacity) \u6784\u5efaParallelVector\uff0ccapacity\u4e3a\u9876\u70b9\u6570\u7ec4\u7684\u521d\u59cb\u5bb9\u91cf\u5927\u5c0f operator[](i: size_t)-> T \uff1a\u4e0b\u6807\u4e3ai\u7684\u6570\u636e begin()-> cython.pointer(T) \uff1aParallelVector\u7684\u8d77\u59cb\u6307\u9488 end()-> cython.pointer(T) \uff1aParallelVector\u7684\u7ed3\u675f\u6307\u9488\u3002begin\u548cend\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8evector\u5bb9\u5668\u7684begin\u548cend\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6307\u9488\u5bf9\u6570\u7ec4\u8fdb\u884c\u987a\u5e8f\u8bbf\u95ee Back()-> T \uff1aParallelVector\u6700\u540e\u4e00\u4e2a\u6570\u636e Data()-> cython.pointer(T) \uff1a\u8868\u793a\u6570\u7ec4\u672c\u8eab\u6570\u636e Destroy()-> cython.void \uff1a\u6e05\u7a7aParallelVector\u6570\u7ec4\u5185\u6570\u636e\u5e76\u5220\u9664\u6570\u7ec4 Size()-> size_t \uff1a\u8868\u793aParallelVector\u4e2d\u7684\u6570\u636e\u4e2a\u6570 Resize(size: size_t)-> cython.void \uff1a\u66f4\u6539ParallelVector\u4e3asize\u5927\u5c0f\uff0c\u8be5size\u5e94\u5927\u4e8e\u7b49\u4e8e\u66f4\u6539\u524d\u7684\u5927\u5c0f\u4e14\u5c0f\u4e8ecapacity Clear()-> cython.void \uff1a\u6e05\u7a7aParallelVector\u5185\u6570\u636e ReAlloc(capacity: size_t)-> cython.void \uff1a\u7ed9ParallelVector\u5206\u914d\u65b0\u7684\u5bb9\u91cf\u5927\u5c0f\uff0c\u82e5\u6570\u7ec4\u6709\u6570\u636e\u5219\u5c06\u6570\u636e\u8fc1\u79fb\u81f3\u65b0\u5185\u5b58 Fill(elem: T)-> cython.void \uff1a\u4e3aParallelVector\u7684\u5168\u90e8\u6570\u636e\u8d4b\u503c\u4e3aelem Append(elem: T, atomic: cython.bint = true)-> cython.void \uff1a\u5411ParallelVector\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u636e Swap(other: ParallelVector[T])-> cython.void \uff1a\u548c\u5176\u4ed6\u7684ParallelVector\u4ea4\u6362\u6570\u636e Copy()-> ParallelVector[T] \uff1a\u590d\u5236\u5f53\u524d\u7684ParallelVector\u6570\u636e\u5b58\u81f3Copy\u6570\u7ec4\u4e2d \u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784 Empty \uff1a\u5185\u5bb9\u4e3a\u7a7a\u7684\u7279\u6b8a\u6570\u636e\u7c7b\u578b\u3002 EdgeUnit[EdgeData] \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u89e3\u6790\u8f93\u5165\u6587\u4ef6\uff0c\u5305\u542b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\uff1a src: size_t \uff1a\u8fb9\u7684\u8d77\u59cb\u9876\u70b9 dst: size_t \uff1a\u8fb9\u7684\u7ec8\u70b9 edge_data: EdgeData \uff1a\u8fb9\u7684\u6743\u503c AdjUnit[EdgeData] \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u6279\u5904\u7406\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a neighbour: size_t \uff1a\u8fb9\u7684\u90bb\u5c45\u9876\u70b9 edge_data: EdgeData \uff1a\u8fb9\u7684\u6743\u503c AdjList[EdgeData] \uff1a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u9876\u70b9\u7684\u90bb\u63a5\u8868\uff0c\u5e38\u7528\u4e8e\u8868\u793a\u9876\u70b9\u7684\u5165\u8fb9\u548c\u51fa\u8fb9\u96c6\u5408\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a begin()-> cython.pointer(AdjUnit[T]) \uff1a\u5217\u8868\u7684\u8d77\u59cb\u6307\u9488 end()-> cython.pointer(AdjUnit[T]) \uff1a\u5217\u8868\u7684\u7ed3\u675f\u6307\u9488\u3002 operator[](i: size_t)-> AdjUnit[EdgeData] : \u4e0b\u6807\u4e3ai\u7684\u6570\u636e \u56fe\u7c7bOlapBase NumVertices()-> size_t \uff1a\u83b7\u53d6\u9876\u70b9\u6570 NumEdges()-> size_t \uff1a\u83b7\u53d6\u8fb9\u6570 OutDegree(size_t vid)-> size_t \uff1a\u9876\u70b9vid\u7684\u51fa\u5ea6 InDegree(size_t vid)-> size_t \uff1a\u9876\u70b9vid\u7684\u5165\u5ea6 AllocVertexArray[VertexData]() ->ParallelVector[VertexData] \uff1a\u5206\u914d\u4e00\u4e2a\u7c7b\u578b\u4e3aVertexData\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u9876\u70b9\u4e2a\u6570 AllocVertexSubset()-> ParallelBitset \uff1a\u5206\u914d\u4e00\u4e2aParallelBitset\u96c6\u5408\uff0c\u7528\u4e8e\u8868\u793a\u6240\u6709\u9876\u70b9\u7684\u72b6\u6001\u662f\u5426\u6fc0\u6d3b OutEdges(vid: size_t)-> AdjList[EdgeData] \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u51fa\u8fb9\u96c6\u5408 InEdges(vid: size_t)-> AdjList[EdgeData] \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u5165\u8fb9\u96c6\u5408 Transpose()-> cython.void \uff1a\u5bf9\u6709\u5411\u56fe\u8fdb\u884c\u56fe\u53cd\u8f6c LoadFromArray(edge_array: cython.p_char, input_vertices: size_t, input_edges: size_t, edge_direction_policy: EdgeDirectionPolicy) \uff1a\u4ece\u6570\u7ec4\u4e2d\u52a0\u8f7d\u56fe\u6570\u636e\uff0c\u5305\u542b\u56db\u4e2a\u53c2\u6570\uff0c\u5176\u542b\u4e49\u5206\u522b\u8868\u793a\uff1a edge_array \uff1a\u5c06\u8be5\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u8bfb\u5165\u56fe\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8be5\u6570\u7ec4\u5305\u542b\u591a\u6761\u8fb9\u3002 input_vertices \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u9876\u70b9\u4e2a\u6570\u3002 input_edges \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u8fb9\u7684\u6761\u6570\u3002 edge_direction_policy \uff1a\u6307\u5b9a\u56fe\u4e3a\u6709\u5411\u6216\u65e0\u5411\uff0c\u5305\u542b\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3aDUAL_DIRECTION\u3001MAKE_SYMMETRIC\u4ee5\u53caINPUT_SYMMETRIC\u3002\u5bf9\u5e94\u7684\u8be6\u7ec6\u4ecb\u7ecd\u89c1include/lgraph/olap_base.h\u6587\u4ef6\u7684 enum EdgeDirectionPolicy \u3002 AcquireVertexLock(vid: size_t)-> cython.void \uff1a\u5bf9\u9876\u70b9vid\u52a0\u9501\uff0c\u7981\u6b62\u5176\u5b83\u7ebf\u7a0b\u5bf9\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e\u8fdb\u884c\u8bbf\u5b58 void ReleaseVertexLock(vid: size_t)-> cython.void \uff1a\u5bf9\u9876\u70b9vid\u89e3\u9501\uff0c\u6240\u6709\u7ebf\u7a0b\u5747\u53ef\u8bbf\u5b58\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e TuGraph\u63d0\u4f9b\u4e86\u4e24\u4e2a\u6279\u5904\u7406\u64cd\u4f5c\u6765\u5e76\u884c\u5730\u8fdb\u884c\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684\u6279\u5904\u7406\u8fc7\u7a0b\uff0c\u5728Python\u4e2d\u4e0eC++\u4f7f\u7528\u65b9\u6cd5\u7a0d\u6709\u4e0d\u540c\u3002 # \u51fd\u6570\u540d\u79f0:ProcessVertexInRange[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # lower: size_t, upper: size_t, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # \u51fd\u6570\u7528\u9014:\u5bf9Graph\u4e2d\u8282\u70b9\u7f16\u53f7\u4ecb\u4e8elower\u548cupper\u4e4b\u95f4\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b # \u7b2c\u4e94\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 # \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 # # \u4f7f\u7528\u793a\u4f8b:\u7edf\u8ba1\u6570\u7ec4parent\u6570\u7ec4\u4e2d\u6709\u51fa\u8fb9\u7684\u9876\u70b9\u4e2a\u6570 import cython from cython.cimports.olap_base import * @cython.cclass class CountCore: graph: cython. pointer(OlapBase[Empty]) parent: ParallelVector[size_t] @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: if self.graph.OutDegree(self.parent[vi]) > 0: return 1 return 0 def run(self, pointer_g: cython. pointer(OlapBase[Empty])): self.graph = pointer_g self.parent = self.graph.AllocVertexArray[size_t]() vertex_num: size_t vertex_num = self.graph.ProcessVertexInRange[size_t, CountCore](self.Work, 0, self.parent.Size(), self) print(\"the number is\", vertex_num) if __name__ == \"__main__\": count_core = CountCore() count_core.run(cython.address(g)) \u5176\u4e2dg\u4e3a\u56fe\u7c7bOlapBase\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 # \u51fd\u6570\u540d\u79f0:ProcessVertexActive[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # active: ParallelBitset, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # \u51fd\u6570\u7528\u9014:\u5bf9active_vertices\u4e2d\u5bf9\u5e94\u4e3a1\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b # \u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 # \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003/include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 # # \u4f7f\u7528\u793a\u4f8b:\u8f93\u51faGraph\u4e2d\u8282\u70b91\uff0c2\uff0c3\u7684\u6240\u6709\u51fa\u5ea6\u90bb\u5c45\uff0c\u5e76\u7edf\u8ba1\u8fd9\u4e09\u4e2a\u8282\u70b9\u7684\u603b\u51fa\u5ea6 import cython from cython.cimports.olap_base import * from cython.cimports.libc.stdio import printf @cython.cclass class NeighborCore: graph: cython.pointer(OlapBase[Empty]) active_in: ParallelBitset @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: degree = self.graph.OutDegree(vi) dst: size_t edges = self.graph.OutEdges(vi) local_out_degree: size_t for i in range(degree): dst = edges[i].neighbour printf(\"node %lu has neighbour %lu\\n\", vi, dst) local_out_degree += 1 return local_out_degree def run(self, pointer_g: cython.pointer(OlapBase[Empty])): self.graph = pointer_g self.active_in = self.graph.AllocVertexSubset() self. active_in. Add(1) self. active_in. Add(2) self. active_in. Add(3) total_outdegree = cython.declare( size_t, self.graph.ProcessVertexActive[size_t, CountCore](self.Work, self.active_in, self)) printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree) if __name__ == \"__main__\": neighbor_core = NeighborCore() neighbor_core.run(cython.address(g)) \u5982\u4e0a\u9762\u4e24\u4e2a\u4f8b\u5b50\u6240\u5c55\u793a\uff0c\u5728Python\u4e2dProcessVertexActive\u4e0eProcessVertexInRange\u6bd4\u5728C++\u4e2d\u989d\u5916\u9700\u8981\u4e00\u4e2a\u7b97\u6cd5\u7c7b\u6307\u9488\u53c2\u6570\uff0cWork\u51fd\u6570\u4e00\u822c\u4e5f\u4f5c\u4e3a\u8be5\u7b97\u6cd5\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6ee1\u8db3Work\u51fd\u6570\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u7684\u9700\u6c42\uff08\u5982\u56fegraph\uff0c\u9876\u70b9\u6570\u7ec4parent\uff09\uff0c\u5728\u8c03\u7528\u6279\u5904\u7406\u51fd\u6570\u65f6\u5c06Work\u51fd\u6570\u548c\u7b97\u6cd5\u7c7b\u7684self\u6307\u9488\u4f20\u5165\u6279\u5904\u7406\u51fd\u6570\u3002 \u5176\u4e2dWork\u51fd\u6570\u4f1a\u5728\u591a\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u56e0\u6b64\u52a0\u4e0a\u4fee\u9970\u5668 @cython.nogil \u91ca\u653ePython\u5168\u5c40\u89e3\u91ca\u9501\uff0c\u5728\u591a\u7ebf\u7a0b\u6267\u884c\u7684\u4ee3\u7801\u4e2d\uff08\u4f8b\u5982\u6279\u5904\u7406\u51fd\u6570\u4e2d\u7684Work\u51fd\u6570\uff0c cython.parallel.prange \u4e2d\uff09\uff0c\u4e0d\u80fd\u5305\u542bPython\u5bf9\u8c61\uff0c\u6700\u597d\u901a\u8fc7 dst: type \u6216\u8005 dst = cython.declare(type) \u7684\u65b9\u5f0f\u58f0\u660e\u53d8\u91cf\u4e3aC/C++\u7c7b\u578b\u3002 \u56fe\u7c7bOlapOnDB: \u5e76\u884c\u5316\u521b\u5efa\u6709\u5411\u56fe\uff1a olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL) \u5e76\u884c\u5316\u521b\u5efa\u65e0\u5411\u56fe olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED) ID_MAPPING\u521b\u5efa\u6709\u5411\u56fe olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_IDMAPPING) \u56fe\u7c7bOlapOnDisk ConfigBase\uff1a ConfigBase() : \u6784\u9020\u51fd\u6570 std::string input_dir : \u56fe\u8fb9\u8868\u6570\u636e\u8def\u5f84 std::string output_dir : \u8f93\u51fa\u7ed3\u679c\u8def\u5f84 Load(config: ConfigBase[EdgeData], edge_direction_policy: EdgeDirectionPolicy)-> void : \u8bfb\u5165\u56fe\u6570\u636e 5. lgraph_db API \u89c1plugins/cython/lgraph_db.pxd\u4e0elgraph_db_python.py\u6587\u4ef6\u3002 lgraph_db.pxd\u4e2d\u63a5\u53e3\u7528\u6cd5\u4e0e\u529f\u80fd\u57fa\u672c\u4e0eC++\u63a5\u53e3\u76f8\u540c\uff0clgraph_db.pxd\u4e2d\u58f0\u660e\u7684\u63a5\u53e3\u90fd\u7531C++\u5b9e\u73b0\uff0c\u5728py\u6587\u4ef6\u4e2d\u5fc5\u987b\u901a\u8fc7 from cython.cimports.olap_base import * \u7684\u65b9\u5f0f\u5bfc\u5165\uff0c\u7531Cython\u7f16\u8bd1py\u6587\u4ef6\u540e\u624d\u80fd\u8fd0\u884c\u3002 VertexIndexIterator GetVid()-> int64_t : \u83b7\u53d6\u9876\u70b9\u7684vid Galaxy Galaxy(dir_path: std::string) : \u6784\u9020\u51fd\u6570\uff0cdir_path\u4e3adb\u8def\u5f84 SetCurrentUser(user: std::string, password: std::string)-> cython.void : \u8bbe\u7f6e\u7528\u6237 SetUser(user: std::string)-> cython.void : \u8bbe\u7f6e\u7528\u6237 OpenGraph(graph: std::string, read_only: bint)-> GraphDB : \u521b\u5efaGraphDB GraphDB\uff1a CreateReadTxn()-> Transaction : \u521b\u5efa\u53ea\u8bfb\u4e8b\u52a1 CreateWriteTxn()-> Transaction : \u521b\u5efa\u5199\u4e8b\u52a1 ForkTxn(txn: Transaction)-> Transaction : \u590d\u5236\u4e8b\u52a1\uff0c\u53ea\u80fd\u590d\u5236\u8bfb\u4e8b\u52a1 Transaction\uff1a GetVertexIndexIterator( label: std::string, field: std::string, key_start: std::string, key_end: std::string)-> VertexIndexIterator \u83b7\u53d6\u7d22\u5f15\u8fed\u4ee3\u5668\u3002\u8fed\u4ee3\u5668\u7684field\u503c\u4e3a [key_start, key_end]\u3002\u6240\u4ee5\u5728key_start=key_end=v\u65f6\uff0c\u8fd4\u56de\u6307\u5411field\u503c\u4e3av\u7684\u9876\u70b9\u7684\u8fed\u4ee3\u5668 lgraph_db_python.py\u662flgraph_db.pxd\u4e2dC++\u7c7b Galaxy\u4e0eGraphDB\u7684\u5305\u88c5\uff0c\u5c06C++\u7c7b\u5305\u88c5\u4e3aPython\u7c7b\uff0c\u5c06lgraph_db_python.py\u7f16\u8bd1\u4e3aPython\u62d3\u5c55\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728Python\u6587\u4ef6\u6216Python\u547d\u4ee4\u884c\u4e2d import lgraph_db_python \u8bbf\u95eelgraph_db_python.PyGraphDB\u4e0ePyGraphDB.PyGalaxy\u3002 PyGalaxy: PyGalaxy(self, dir_path: str) : \u6784\u9020\u51fd\u6570\uff0cdir_path\u4e3adb\u8def\u5f84 SetCurrentUser(self, user: str password: str)-> void : \u8bbe\u7f6e\u7528\u6237 SetUser(self, user: std::string)-> void : \u8bbe\u7f6e\u7528\u6237 OpenGraph(self, graph: str, read_only: bool)-> PyGraphDB : \u521b\u5efaPyGraphDB PyGraphDB: get_pointer(self)-> cython.Py_ssize_t : C++ \u7c7bGraphDB\u7684\u5730\u5740 6. \u7b97\u6cd5\u63d2\u4ef6\u793a\u4f8b \u4e0b\u9762\u4e3aPython\u5b9e\u73b0\u7684BFS\u7b97\u6cd5\u7684\u4ee3\u7801\u793a\u4f8b\uff1a # cython: language_level=3, cpp_locals=True, boundscheck=False, wraparound=False, initializedcheck=False # distutils: language = c++ # \u6ce8\u91ca\u4f5c\u7528\u5982\u4e0b\uff1a # language_level=3: \u4f7f\u7528Python3 # cpp_locals=True: \u9700\u8981c++17\uff0c\u4f7f\u7528std::optional\u7ba1\u7406Python\u4ee3\u7801\u4e2d\u7684C++\u5bf9\u8c61\uff0c\u53ef\u4ee5\u907f\u514dC++\u5bf9\u8c61\u7684\u62f7\u8d1d\u6784\u9020 # boundscheck=False: \u5173\u95ed\u7d22\u5f15\u7684\u8fb9\u754c\u68c0\u67e5 # wraparound=False: \u5173\u95ed\u8d1f\u6570\u4e0b\u6807\u7684\u5904\u7406\uff08\u7c7b\u4f3cPython List\uff09 # initializedcheck=False: \u5173\u95ed\u68c0\u67e5\u5185\u5b58\u662f\u5426\u521d\u59cb\u5316\uff0c\u5173\u95ed\u68c0\u67e5\u540e\u8fd0\u884c\u6027\u80fd\u66f4\u5feb # language = c++: \u5c06\u6b64py\u6587\u4ef6\u7ffb\u8bd1\u4e3aC++\u800c\u4e0d\u662fC\u6587\u4ef6\uff0cTuGraph\u4f7f\u7528\u5927\u91cf\u6a21\u677f\u51fd\u6570\uff0c\u6240\u4ee5\u90fd\u5e94\u8be5\u4f7f\u7528C++ import json import cython from cython.cimports.olap_base import * from cython.cimports.lgraph_db import * # \u4eceplugins/cython/ \u4e2dcimportolap_base.pxd\u4e0elgraph_db.pxd, \u7c7b\u4f3cC++\u4e2d#include \"xxx.h\" from cython.cimports.libc.stdio import printf # \u7c7b\u4f3cC++\u4e2d#include <stdio.h> # \u5176\u4ed6\u5e38\u89c1\u7684\u8fd8\u6709cython.cimports.libcpp.unordered_map\u7b49 import time import lgraph_db_python @cython.cclass # cython.cclass \u8868\u793aBFSCore\u4e3aC\u7c7b\u578b\u7684Class class BFSCore: graph: cython.pointer(OlapBase[Empty]) # cython.pointer(OlapBase[Empty])\u8868\u793aOlapBase[Empty]\u7684\u6307\u9488\uff0c\u7c7b\u4f3cC++\u4e2dOlapBase[Empty]* # cython\u63d0\u4f9b\u4e86\u5e38\u89c1\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5982cython.p_int, cython.p_char\u7b49\uff0c\u8868\u793aint*, char*, ... parent: ParallelVector[size_t] active_in: ParallelBitset active_out: ParallelBitset root: size_t # root: size_t \u58f0\u660eroot\u4e3aC++ size_t\u7c7b\u578b\u53d8\u91cf\uff0c\u7b49\u6548\u4e8eroot = cython.declare(size_t) # \u4e0d\u58f0\u660e\u7c7b\u578b\u7684\u53d8\u91cf\u4e3aPython object\u7c7b\u578b # \u58f0\u660e\u53d8\u91cf\u7c7b\u578b\u4f1a\u5927\u5e45\u63d0\u9ad8\u6027\u80fd\uff0c\u540c\u65f6\u5728\u591a\u7ebf\u7a0b\u90e8\u5206\uff0c\u53ea\u6709C/C++\u7c7b\u578b\u7684\u53d8\u91cf\u53ef\u4ee5\u8bbf\u95ee @cython.cfunc # cython.cfunc \u8868\u793aWork\u4e3aC\u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u5e94\u58f0\u660e # cfunc\u6027\u80fd\u597d\uff0c\u80fd\u63a5\u53d7C/C++\u5bf9\u8c61\u4e3a\u53c2\u6570\u3001\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u4e0d\u80fd\u5728\u5176\u4ed6python\u6587\u4ef6\u4e2d\u8c03\u7528 # \u7c7b\u4f3c\u7684\u6709cython.ccall\uff0c\u5982Standalone\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6python\u6587\u4ef6\u4e2d\u8c03\u7528 @cython.nogil # cython.nogil \u8868\u793a\u91ca\u653ePython\u5168\u5c40\u89e3\u91ca\u9501\uff0c\u5728nogil\u4fee\u9970\u7684\u90e8\u5206\uff0c\u4e0d\u80fd\u8bbf\u95eePython\u5bf9\u8c61 # \u5728\u591a\u7ebf\u7a0b\u90e8\u5206\uff0c\u90fd\u5e94\u6709nogil\u4fee\u9970\u5668 @cython.exceptval(check=False) # cython.exceptval(check=False) \u8868\u793a\u7981\u7528\u5f02\u5e38\u4f20\u64ad\uff0c\u5c06\u5ffd\u7565\u51fd\u6570\u5185\u90e8\u5f15\u53d1\u7684Python\u5f02\u5e38 def Work(self, vi: size_t) -> size_t: degree = cython.declare(size_t, self.graph.OutDegree(vi)) out_edges = cython.declare(AdjList[Empty], self.graph.OutEdges(vi)) i = cython.declare(size_t, 0) local_num_activations = cython.declare(size_t, 0) dst: size_t for i in range(degree): dst = out_edges[i].neighbour if self.parent[dst] == cython.cast(size_t, -1): # parent[dst] == -1 \u8868\u793adst\u6ca1\u6709\u88abbfs\u8bbf\u95ee\u8fc7 if self.active_out.Add(dst): # \u5c06dst\u8bbe\u7f6e\u4e3a\u4e3a\u6d3b\u8dc3\u8282\u70b9\uff1bParallelBitmap.Add\u4e3a\u539f\u5b50\u64cd\u4f5c\uff0c\u9632\u6b62\u91cd\u590d\u8ba1\u7b97 self.parent[dst] = vi local_num_activations += 1 return local_num_activations @cython.cfunc @cython.nogil @cython.exceptval(check=False) def run(self, g: cython.pointer(OlapBase[Empty]), r: size_t) -> cython.size_t: self.graph = g self.root = r self.active_in = g.AllocVertexSubset() self.active_out = g.AllocVertexSubset() self.parent = g.AllocVertexArray[size_t]() self.parent.Fill(-1) num_vertices = cython.declare(size_t, self.graph.NumVertices()) printf(\"num_vertices = %lu\\n\", num_vertices) self.parent[self.root] = self.root num_activations = cython.declare(size_t, 1) discovered_vertices = cython.declare(size_t, num_activations) self.active_in.Add(self.root) while num_activations > 0: self.active_out.Clear() num_activations = g.ProcessVertexActive[size_t, BFSCore](self.Work, self.active_in, self) discovered_vertices += num_activations self.active_out.Swap(self.active_in) printf(\"num_activations = %lu\\n\", num_activations) return discovered_vertices @cython.cfunc def procedure_process(db: cython.pointer(GraphDB), request: dict, response: dict) -> cython.bint: cost = time.time() root_id = \"0\" label = \"node\" field = \"id\" if \"root\" in request: root_id = request[\"root\"] if \"label\" in request: label = request[\"label\"] if \"field\" in request: field = request[\"field\"] txn = db.CreateReadTxn() olapondb = OlapOnDB[Empty](db[0], txn, SNAPSHOT_PARALLEL) # \u5e76\u884c\u521b\u5efaOlapOnDB # Cython\u4e0d\u652f\u6301\u5982 *db \u7684\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u901a\u8fc7db[0]\u6765\u89e3\u5f15\u7528 root_vid = txn.GetVertexIndexIterator( label.encode('utf-8'), field.encode('utf-8'), root_id.encode('utf-8'), root_id.encode('utf-8') ).GetVid() # \u901a\u8fc7 GetVertexIndexIterator \u6839\u636eroot\u8282\u70b9label\u540d\u548cfiled\u540d\u4e0efiled\u503c\uff08root_id\uff09 # \u83b7\u53d6root\u8282\u70b9\u7684\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u83b7\u53d6vid\uff0c\u5728\u65e0ID_MAPPING\u65f6\uff0c\u8be5vid\u4e0eOlapOnDB\u4e2d\u7684id\u76f8\u540c cost = time.time() - cost printf(\"prepare_cost = %lf s\\n\", cython.cast(cython.double, cost)) a = BFSCore() cost = time.time() count = a.run(cython.address(olapondb), root_vid) cost = time.time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) response[\"found_vertices\"] = count response[\"num_vertices\"] = olapondb.NumVertices() response[\"num_edges\"] = olapondb.NumEdges() return True @cython.ccall def Standalone(input_dir: str, root: size_t): # Standalone\u4e3aStandalone\u6a21\u5f0f\u4e0b\u63d2\u4ef6\u5165\u53e3\uff0c\u7528cython.ccall\u4fee\u9970 # \u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u53c2\u6570\uff0c\u76f8\u5e94\u4fee\u6539plugins/cython/standalone_main.py\u5373\u53ef cost = time.time() graph = OlapOnDisk[Empty]() config = ConfigBase[Empty]() config.input_dir = input_dir.encode(\"utf-8\") # config\u4e3aC++\u7c7b\uff0cconfig.input_dir\u4e3astd::string\uff0cPython str\u9700\u8981encode\u624d\u80fd\u4f20\u7ed9std::string graph.Load(config, DUAL_DIRECTION) # \u8bfb\u5165\u56fe cost = time.time() - cost printf(\"load_cost = %lf s\\n\", cython.cast(cython.double, cost)) cost = time.time() a = BFSCore() count = a.run(cython.address(graph), root) # cython.address(graph)\uff0c\u53d6\u5740\uff0c\u7c7b\u4f3cC++\u4e2d&graph cost = time.time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) print(\"find {} vertices\".format(count)) @cython.ccall def Process(db: lgraph_db_python.PyGraphDB, inp: bytes): # Process\u4e3aembed\u6a21\u5f0f\u548cprocedure\u6a21\u5f0f\u4e0b\u63d2\u4ef6\u5165\u53e3\uff0c\u7528cython.ccall\u4fee\u9970 # Process\u51fd\u6570\u5fc5\u987b\u540d\u4e3aProcess\uff0c\u53c2\u6570\u4e3algraph_db_python.PyGraphDB\u4e0ebytes # \u8fd4\u56de\u503c\u5fc5\u987b\u4e3a(bool, str) _inp = inp.decode(\"utf-8\") request = json.loads(_inp) response = {} addr = cython.declare(cython.Py_ssize_t, db.get_pointer()) # \u83b7\u53d6PyGraphDB\u4e2dGraphDB\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u8f6c\u6362\u4e3a\u6307\u9488\u540e\u4f20\u9012 procedure_process(cython.cast(cython.pointer(GraphDB), addr), request, response) return (True, json.dumps(response))","title":"Python API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#python-olap-api","text":"\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd OlapBase OlapOnDB \u548c OlapOnDisk \u5728Python\u4e2d\u7684API\u7528\u6cd5","title":"Python Olap API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#_1","text":"1.\u6982\u8ff0 2.\u914d\u7f6e\u8981\u6c42 3.Cython 4.Olap API 4.1.\u539f\u5b50\u64cd\u4f5c 4.2.\u9876\u70b9\u96c6\u5408\u7c7bParallelBitset 4.3.\u9876\u70b9\u6570\u7ec4\u7c7bParallelVector 4.4.\u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784 4.5.\u56fe\u7c7bOlapBase 4.6.\u56fe\u7c7bOlapOnDB 4.7.\u56fe\u7c7bOlapOnDisk 5.lgraph DB API 6.\u7b97\u6cd5\u63d2\u4ef6\u793a\u4f8b","title":"\u76ee\u5f55"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#1","text":"\u672c\u624b\u518c\u5c06\u4ecb\u7ecd\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7cfb\u7edfPython\u63a5\u53e3\u9700\u8981\u7684\u7b80\u5355\u914d\u7f6e\uff0c\u540c\u65f6\u7ed3\u5408\u4ee3\u7801\u5bf9TuGraph Python API\u8fdb\u884c\u89e3\u91ca\u3002\u5173\u4e8eParallelBitset\u3001OlapBase\u5404\u7c7b\u7684\u4f5c\u7528\uff0c\u8be6\u89c1olap-base-api.md\uff0colap-on-db-api.md\u548colap-on-disk-api.md","title":"1. \u6982\u8ff0"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#2","text":"\u5982\u679c\u8981\u4f7f\u7528TuGraph\u56fe\u8ba1\u7b97\u7f16\u5199\u4ee5\u53ca\u7f16\u8bd1\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u7684\u914d\u7f6e\u8981\u6c42\u4e3a\uff1a linux\u64cd\u4f5c\u7cfb\u7edf\uff0c\u76ee\u524d\u5728Ubuntu16.04.2\u548cCentos7\u7cfb\u7edf\u4e0a\u53ef\u6210\u529f\u8fd0\u884c\u3002 \u652f\u6301C++17\u7684\u7f16\u8bd1\u5668\uff0c\u8981\u6c42GCC\u7248\u672c\u4e3a5.4.1\u6216\u66f4\u65b0\u7684\u7248\u672c\u3002 Cython\uff0c\u7248\u672c\u8981\u6c423.0.0\u4ee5\u4e0a\uff0c\u5df2\u6d4b\u8bd5\u53ef\u8fd0\u884c\u7248\u672c\u4e3a3.0.0a11","title":"2. \u914d\u7f6e\u8981\u6c42"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#3-cython","text":"Cython\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u662fPython\u7684\u8d85\u96c6\u3002Cython\u80fd\u5c06py\u6587\u4ef6\u7ffb\u8bd1\u4e3aC/C++\u4ee3\u7801\u540e\u7f16\u8bd1\u4e3aPython\u62d3\u5c55\u7c7b\uff0c\u5728Python\u4e2d\u901a\u8fc7import\u8c03\u7528\u3002\u5728TuGraph\u4e2d\uff0c\u6240\u6709\u7684Python plugin\u90fd\u7531Cython\u7f16\u8bd1\u4e3aPython\u62d3\u5c55\u7c7b\u540e\u4f7f\u7528\u3002 Cython\u7684Pure Python\u6a21\u5f0f\u5728\u4fdd\u8bc1Python\u8bed\u6cd5\u7684\u540c\u65f6\u5177\u6709C/C++\u7684\u6027\u80fd\uff0cTuGraph Python\u63a5\u53e3\u5747\u4f7f\u7528Cython\u5b9e\u73b0\u3002 Cython \u6587\u6863","title":"3. Cython"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#4-olap-api","text":"\u89c1plugins/cython/olap_base.pxd\u6587\u4ef6\uff0c\u7528\u6cd5\u4e0e\u529f\u80fd\u57fa\u672c\u4e0eC++\u63a5\u53e3\u76f8\u540c\uff0colap_base.pxd\u4e2d\u58f0\u660e\u7684\u63a5\u53e3\u90fd\u7531C++\u5b9e\u73b0\uff0c\u5728py\u6587\u4ef6\u4e2d\u5fc5\u987b\u901a\u8fc7 from cython.cimports.olap_base import * \u7684\u65b9\u5f0f\u5bfc\u5165\uff0c\u7531Cython\u7f16\u8bd1py\u6587\u4ef6\u540e\u624d\u80fd\u8fd0\u884c\u3002","title":"4. Olap API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#_2","text":"cas[T](ptr: cython.pointer(T), oldv: T, newv: T)-> cython.bint \uff1a\u5982\u679cptr\u6307\u5411\u7684\u503c\u7b49\u4e8eoldv\uff0c\u5219\u5c06ptr\u6307\u5411\u7684\u503c\u8d4b\u4e3anewv\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse write_min[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5c0f\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 write_max[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5982\u679cb\u6bd4a\u6307\u5411\u7684\u503c\u66f4\u5927\uff0c\u90a3\u4e48\u5c06a\u6307\u5411\u7684\u503c\u8d4b\u4e3ab\u5e76\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 write_add[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5c06b\u7684\u503c\u52a0\u5230a\u6307\u5411\u7684\u503c\u4e0a\u3002 write_sub[T](a: cython.pointer(T), b: T)-> cython.bint \uff1a\u5c06a\u6307\u5411\u7684\u503c\u51cf\u53bbb\u7684\u503c\u3002","title":"\u539f\u5b50\u64cd\u4f5c"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#parallelbitset","text":"Size()-> size_t \uff1a\u8868\u793aBitmap\u4e2d\u7684\u9876\u70b9\u4e2a\u6570\u3002 ParallelBitset(size: size_t) \uff1a\u521d\u59cb\u5316size\u548cdata\uff0cdata\u957f\u5ea6\u4e3a(size >> 6)+1 Clear()-> cython.void \uff1a\u6e05\u7a7a\u96c6\u5408 Fill()-> cython.void \uff1a\u5c06\u6240\u6709\u9876\u70b9\u52a0\u5165\u96c6\u5408 Has(size_t i)-> cython.bint \uff1a\u68c0\u67e5\u9876\u70b9i\u662f\u5426\u5728\u96c6\u5408\u4e2d Add(size_t i)-> cython.bint \uff1a\u5c06\u9876\u70b9i\u52a0\u5165\u96c6\u5408\u4e2d Swap(ParallelBitset &other)-> cython.void \uff1a\u548c\u53e6\u4e00\u7ec4ParallelBitset\u96c6\u5408\u4ea4\u6362\u5143\u7d20","title":"\u9876\u70b9\u96c6\u5408\u7c7bParallelBitset"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#parallelvector","text":"ParallelVector[T](size_t capacity) \u6784\u5efaParallelVector\uff0ccapacity\u4e3a\u9876\u70b9\u6570\u7ec4\u7684\u521d\u59cb\u5bb9\u91cf\u5927\u5c0f operator[](i: size_t)-> T \uff1a\u4e0b\u6807\u4e3ai\u7684\u6570\u636e begin()-> cython.pointer(T) \uff1aParallelVector\u7684\u8d77\u59cb\u6307\u9488 end()-> cython.pointer(T) \uff1aParallelVector\u7684\u7ed3\u675f\u6307\u9488\u3002begin\u548cend\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8evector\u5bb9\u5668\u7684begin\u548cend\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6307\u9488\u5bf9\u6570\u7ec4\u8fdb\u884c\u987a\u5e8f\u8bbf\u95ee Back()-> T \uff1aParallelVector\u6700\u540e\u4e00\u4e2a\u6570\u636e Data()-> cython.pointer(T) \uff1a\u8868\u793a\u6570\u7ec4\u672c\u8eab\u6570\u636e Destroy()-> cython.void \uff1a\u6e05\u7a7aParallelVector\u6570\u7ec4\u5185\u6570\u636e\u5e76\u5220\u9664\u6570\u7ec4 Size()-> size_t \uff1a\u8868\u793aParallelVector\u4e2d\u7684\u6570\u636e\u4e2a\u6570 Resize(size: size_t)-> cython.void \uff1a\u66f4\u6539ParallelVector\u4e3asize\u5927\u5c0f\uff0c\u8be5size\u5e94\u5927\u4e8e\u7b49\u4e8e\u66f4\u6539\u524d\u7684\u5927\u5c0f\u4e14\u5c0f\u4e8ecapacity Clear()-> cython.void \uff1a\u6e05\u7a7aParallelVector\u5185\u6570\u636e ReAlloc(capacity: size_t)-> cython.void \uff1a\u7ed9ParallelVector\u5206\u914d\u65b0\u7684\u5bb9\u91cf\u5927\u5c0f\uff0c\u82e5\u6570\u7ec4\u6709\u6570\u636e\u5219\u5c06\u6570\u636e\u8fc1\u79fb\u81f3\u65b0\u5185\u5b58 Fill(elem: T)-> cython.void \uff1a\u4e3aParallelVector\u7684\u5168\u90e8\u6570\u636e\u8d4b\u503c\u4e3aelem Append(elem: T, atomic: cython.bint = true)-> cython.void \uff1a\u5411ParallelVector\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u636e Swap(other: ParallelVector[T])-> cython.void \uff1a\u548c\u5176\u4ed6\u7684ParallelVector\u4ea4\u6362\u6570\u636e Copy()-> ParallelVector[T] \uff1a\u590d\u5236\u5f53\u524d\u7684ParallelVector\u6570\u636e\u5b58\u81f3Copy\u6570\u7ec4\u4e2d","title":"\u9876\u70b9\u6570\u7ec4\u7c7bParallelVector"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#_3","text":"Empty \uff1a\u5185\u5bb9\u4e3a\u7a7a\u7684\u7279\u6b8a\u6570\u636e\u7c7b\u578b\u3002 EdgeUnit[EdgeData] \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u89e3\u6790\u8f93\u5165\u6587\u4ef6\uff0c\u5305\u542b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\uff1a src: size_t \uff1a\u8fb9\u7684\u8d77\u59cb\u9876\u70b9 dst: size_t \uff1a\u8fb9\u7684\u7ec8\u70b9 edge_data: EdgeData \uff1a\u8fb9\u7684\u6743\u503c AdjUnit[EdgeData] \uff1a\u8868\u793a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u8fb9\uff0c\u7528\u4e8e\u6279\u5904\u7406\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a neighbour: size_t \uff1a\u8fb9\u7684\u90bb\u5c45\u9876\u70b9 edge_data: EdgeData \uff1a\u8fb9\u7684\u6743\u503c AdjList[EdgeData] \uff1a\u6743\u503c\u7c7b\u578b\u4e3aEdgeData\u7684\u9876\u70b9\u7684\u90bb\u63a5\u8868\uff0c\u5e38\u7528\u4e8e\u8868\u793a\u9876\u70b9\u7684\u5165\u8fb9\u548c\u51fa\u8fb9\u96c6\u5408\uff0c\u5305\u542b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff1a begin()-> cython.pointer(AdjUnit[T]) \uff1a\u5217\u8868\u7684\u8d77\u59cb\u6307\u9488 end()-> cython.pointer(AdjUnit[T]) \uff1a\u5217\u8868\u7684\u7ed3\u675f\u6307\u9488\u3002 operator[](i: size_t)-> AdjUnit[EdgeData] : \u4e0b\u6807\u4e3ai\u7684\u6570\u636e","title":"\u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#olapbase","text":"NumVertices()-> size_t \uff1a\u83b7\u53d6\u9876\u70b9\u6570 NumEdges()-> size_t \uff1a\u83b7\u53d6\u8fb9\u6570 OutDegree(size_t vid)-> size_t \uff1a\u9876\u70b9vid\u7684\u51fa\u5ea6 InDegree(size_t vid)-> size_t \uff1a\u9876\u70b9vid\u7684\u5165\u5ea6 AllocVertexArray[VertexData]() ->ParallelVector[VertexData] \uff1a\u5206\u914d\u4e00\u4e2a\u7c7b\u578b\u4e3aVertexData\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u9876\u70b9\u4e2a\u6570 AllocVertexSubset()-> ParallelBitset \uff1a\u5206\u914d\u4e00\u4e2aParallelBitset\u96c6\u5408\uff0c\u7528\u4e8e\u8868\u793a\u6240\u6709\u9876\u70b9\u7684\u72b6\u6001\u662f\u5426\u6fc0\u6d3b OutEdges(vid: size_t)-> AdjList[EdgeData] \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u51fa\u8fb9\u96c6\u5408 InEdges(vid: size_t)-> AdjList[EdgeData] \uff1a\u83b7\u53d6\u9876\u70b9v\u7684\u6240\u6709\u5165\u8fb9\u96c6\u5408 Transpose()-> cython.void \uff1a\u5bf9\u6709\u5411\u56fe\u8fdb\u884c\u56fe\u53cd\u8f6c LoadFromArray(edge_array: cython.p_char, input_vertices: size_t, input_edges: size_t, edge_direction_policy: EdgeDirectionPolicy) \uff1a\u4ece\u6570\u7ec4\u4e2d\u52a0\u8f7d\u56fe\u6570\u636e\uff0c\u5305\u542b\u56db\u4e2a\u53c2\u6570\uff0c\u5176\u542b\u4e49\u5206\u522b\u8868\u793a\uff1a edge_array \uff1a\u5c06\u8be5\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u8bfb\u5165\u56fe\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8be5\u6570\u7ec4\u5305\u542b\u591a\u6761\u8fb9\u3002 input_vertices \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u9876\u70b9\u4e2a\u6570\u3002 input_edges \uff1a\u6307\u5b9a\u6570\u7ec4\u8bfb\u5165\u56fe\u7684\u8fb9\u7684\u6761\u6570\u3002 edge_direction_policy \uff1a\u6307\u5b9a\u56fe\u4e3a\u6709\u5411\u6216\u65e0\u5411\uff0c\u5305\u542b\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3aDUAL_DIRECTION\u3001MAKE_SYMMETRIC\u4ee5\u53caINPUT_SYMMETRIC\u3002\u5bf9\u5e94\u7684\u8be6\u7ec6\u4ecb\u7ecd\u89c1include/lgraph/olap_base.h\u6587\u4ef6\u7684 enum EdgeDirectionPolicy \u3002 AcquireVertexLock(vid: size_t)-> cython.void \uff1a\u5bf9\u9876\u70b9vid\u52a0\u9501\uff0c\u7981\u6b62\u5176\u5b83\u7ebf\u7a0b\u5bf9\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e\u8fdb\u884c\u8bbf\u5b58 void ReleaseVertexLock(vid: size_t)-> cython.void \uff1a\u5bf9\u9876\u70b9vid\u89e3\u9501\uff0c\u6240\u6709\u7ebf\u7a0b\u5747\u53ef\u8bbf\u5b58\u8be5\u9501\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u636e TuGraph\u63d0\u4f9b\u4e86\u4e24\u4e2a\u6279\u5904\u7406\u64cd\u4f5c\u6765\u5e76\u884c\u5730\u8fdb\u884c\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684\u6279\u5904\u7406\u8fc7\u7a0b\uff0c\u5728Python\u4e2d\u4e0eC++\u4f7f\u7528\u65b9\u6cd5\u7a0d\u6709\u4e0d\u540c\u3002 # \u51fd\u6570\u540d\u79f0:ProcessVertexInRange[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # lower: size_t, upper: size_t, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # \u51fd\u6570\u7528\u9014:\u5bf9Graph\u4e2d\u8282\u70b9\u7f16\u53f7\u4ecb\u4e8elower\u548cupper\u4e4b\u95f4\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b # \u7b2c\u4e94\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 # \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 # # \u4f7f\u7528\u793a\u4f8b:\u7edf\u8ba1\u6570\u7ec4parent\u6570\u7ec4\u4e2d\u6709\u51fa\u8fb9\u7684\u9876\u70b9\u4e2a\u6570 import cython from cython.cimports.olap_base import * @cython.cclass class CountCore: graph: cython. pointer(OlapBase[Empty]) parent: ParallelVector[size_t] @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: if self.graph.OutDegree(self.parent[vi]) > 0: return 1 return 0 def run(self, pointer_g: cython. pointer(OlapBase[Empty])): self.graph = pointer_g self.parent = self.graph.AllocVertexArray[size_t]() vertex_num: size_t vertex_num = self.graph.ProcessVertexInRange[size_t, CountCore](self.Work, 0, self.parent.Size(), self) print(\"the number is\", vertex_num) if __name__ == \"__main__\": count_core = CountCore() count_core.run(cython.address(g)) \u5176\u4e2dg\u4e3a\u56fe\u7c7bOlapBase\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 # \u51fd\u6570\u540d\u79f0:ProcessVertexActive[ReducedSum, Algorithm]( # work: (algo: Algorithm, vi: size_t)-> ReducedSum, # active: ParallelBitset, # algo: Algorithm, # zero: ReducedSum = 0, # reduce: (a: ReducedSum, b: ReducedSum)-> ReducedSum = reduce_plus[ReducedSum]) # # \u51fd\u6570\u7528\u9014:\u5bf9active_vertices\u4e2d\u5bf9\u5e94\u4e3a1\u7684\u8282\u70b9\u6267\u884cwork\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u8868\u793a\u7d2f\u52a0\u7684\u57fa\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff1b # \u7b2c\u56db\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u6bcf\u4e2awork\u5904\u7406\u540e\u7684\u8282\u70b9\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3reduce\u51fd\u6570\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a\u7d2f\u52a0\u64cd\u4f5c\u3002 # \u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003/include/lgraph/olap_base.h\u4e2d\u5177\u4f53\u4ee3\u7801 # # \u4f7f\u7528\u793a\u4f8b:\u8f93\u51faGraph\u4e2d\u8282\u70b91\uff0c2\uff0c3\u7684\u6240\u6709\u51fa\u5ea6\u90bb\u5c45\uff0c\u5e76\u7edf\u8ba1\u8fd9\u4e09\u4e2a\u8282\u70b9\u7684\u603b\u51fa\u5ea6 import cython from cython.cimports.olap_base import * from cython.cimports.libc.stdio import printf @cython.cclass class NeighborCore: graph: cython.pointer(OlapBase[Empty]) active_in: ParallelBitset @cython.cfunc @cython.nogil def Work(self, vi: size_t) -> size_t: degree = self.graph.OutDegree(vi) dst: size_t edges = self.graph.OutEdges(vi) local_out_degree: size_t for i in range(degree): dst = edges[i].neighbour printf(\"node %lu has neighbour %lu\\n\", vi, dst) local_out_degree += 1 return local_out_degree def run(self, pointer_g: cython.pointer(OlapBase[Empty])): self.graph = pointer_g self.active_in = self.graph.AllocVertexSubset() self. active_in. Add(1) self. active_in. Add(2) self. active_in. Add(3) total_outdegree = cython.declare( size_t, self.graph.ProcessVertexActive[size_t, CountCore](self.Work, self.active_in, self)) printf(\"total outdegree of node1,2,3 is %lu\\n\",total_outdegree) if __name__ == \"__main__\": neighbor_core = NeighborCore() neighbor_core.run(cython.address(g)) \u5982\u4e0a\u9762\u4e24\u4e2a\u4f8b\u5b50\u6240\u5c55\u793a\uff0c\u5728Python\u4e2dProcessVertexActive\u4e0eProcessVertexInRange\u6bd4\u5728C++\u4e2d\u989d\u5916\u9700\u8981\u4e00\u4e2a\u7b97\u6cd5\u7c7b\u6307\u9488\u53c2\u6570\uff0cWork\u51fd\u6570\u4e00\u822c\u4e5f\u4f5c\u4e3a\u8be5\u7b97\u6cd5\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6ee1\u8db3Work\u51fd\u6570\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u7684\u9700\u6c42\uff08\u5982\u56fegraph\uff0c\u9876\u70b9\u6570\u7ec4parent\uff09\uff0c\u5728\u8c03\u7528\u6279\u5904\u7406\u51fd\u6570\u65f6\u5c06Work\u51fd\u6570\u548c\u7b97\u6cd5\u7c7b\u7684self\u6307\u9488\u4f20\u5165\u6279\u5904\u7406\u51fd\u6570\u3002 \u5176\u4e2dWork\u51fd\u6570\u4f1a\u5728\u591a\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u56e0\u6b64\u52a0\u4e0a\u4fee\u9970\u5668 @cython.nogil \u91ca\u653ePython\u5168\u5c40\u89e3\u91ca\u9501\uff0c\u5728\u591a\u7ebf\u7a0b\u6267\u884c\u7684\u4ee3\u7801\u4e2d\uff08\u4f8b\u5982\u6279\u5904\u7406\u51fd\u6570\u4e2d\u7684Work\u51fd\u6570\uff0c cython.parallel.prange \u4e2d\uff09\uff0c\u4e0d\u80fd\u5305\u542bPython\u5bf9\u8c61\uff0c\u6700\u597d\u901a\u8fc7 dst: type \u6216\u8005 dst = cython.declare(type) \u7684\u65b9\u5f0f\u58f0\u660e\u53d8\u91cf\u4e3aC/C++\u7c7b\u578b\u3002","title":"\u56fe\u7c7bOlapBase"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#olapondb","text":"\u5e76\u884c\u5316\u521b\u5efa\u6709\u5411\u56fe\uff1a olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL) \u5e76\u884c\u5316\u521b\u5efa\u65e0\u5411\u56fe olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_UNDIRECTED) ID_MAPPING\u521b\u5efa\u6709\u5411\u56fe olapondb = OlapOnDB[Empty](db, txn, SNAPSHOT_PARALLEL | SNAPSHOT_IDMAPPING)","title":"\u56fe\u7c7bOlapOnDB:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#olapondisk","text":"","title":"\u56fe\u7c7bOlapOnDisk"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#configbase","text":"ConfigBase() : \u6784\u9020\u51fd\u6570 std::string input_dir : \u56fe\u8fb9\u8868\u6570\u636e\u8def\u5f84 std::string output_dir : \u8f93\u51fa\u7ed3\u679c\u8def\u5f84 Load(config: ConfigBase[EdgeData], edge_direction_policy: EdgeDirectionPolicy)-> void : \u8bfb\u5165\u56fe\u6570\u636e","title":"ConfigBase\uff1a"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#5-lgraph_db-api","text":"\u89c1plugins/cython/lgraph_db.pxd\u4e0elgraph_db_python.py\u6587\u4ef6\u3002 lgraph_db.pxd\u4e2d\u63a5\u53e3\u7528\u6cd5\u4e0e\u529f\u80fd\u57fa\u672c\u4e0eC++\u63a5\u53e3\u76f8\u540c\uff0clgraph_db.pxd\u4e2d\u58f0\u660e\u7684\u63a5\u53e3\u90fd\u7531C++\u5b9e\u73b0\uff0c\u5728py\u6587\u4ef6\u4e2d\u5fc5\u987b\u901a\u8fc7 from cython.cimports.olap_base import * \u7684\u65b9\u5f0f\u5bfc\u5165\uff0c\u7531Cython\u7f16\u8bd1py\u6587\u4ef6\u540e\u624d\u80fd\u8fd0\u884c\u3002","title":"5. lgraph_db API"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#vertexindexiterator","text":"GetVid()-> int64_t : \u83b7\u53d6\u9876\u70b9\u7684vid","title":"VertexIndexIterator"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#galaxy","text":"Galaxy(dir_path: std::string) : \u6784\u9020\u51fd\u6570\uff0cdir_path\u4e3adb\u8def\u5f84 SetCurrentUser(user: std::string, password: std::string)-> cython.void : \u8bbe\u7f6e\u7528\u6237 SetUser(user: std::string)-> cython.void : \u8bbe\u7f6e\u7528\u6237 OpenGraph(graph: std::string, read_only: bint)-> GraphDB : \u521b\u5efaGraphDB","title":"Galaxy"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#graphdb","text":"CreateReadTxn()-> Transaction : \u521b\u5efa\u53ea\u8bfb\u4e8b\u52a1 CreateWriteTxn()-> Transaction : \u521b\u5efa\u5199\u4e8b\u52a1 ForkTxn(txn: Transaction)-> Transaction : \u590d\u5236\u4e8b\u52a1\uff0c\u53ea\u80fd\u590d\u5236\u8bfb\u4e8b\u52a1","title":"GraphDB\uff1a"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#transaction","text":"GetVertexIndexIterator( label: std::string, field: std::string, key_start: std::string, key_end: std::string)-> VertexIndexIterator \u83b7\u53d6\u7d22\u5f15\u8fed\u4ee3\u5668\u3002\u8fed\u4ee3\u5668\u7684field\u503c\u4e3a [key_start, key_end]\u3002\u6240\u4ee5\u5728key_start=key_end=v\u65f6\uff0c\u8fd4\u56de\u6307\u5411field\u503c\u4e3av\u7684\u9876\u70b9\u7684\u8fed\u4ee3\u5668 lgraph_db_python.py\u662flgraph_db.pxd\u4e2dC++\u7c7b Galaxy\u4e0eGraphDB\u7684\u5305\u88c5\uff0c\u5c06C++\u7c7b\u5305\u88c5\u4e3aPython\u7c7b\uff0c\u5c06lgraph_db_python.py\u7f16\u8bd1\u4e3aPython\u62d3\u5c55\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728Python\u6587\u4ef6\u6216Python\u547d\u4ee4\u884c\u4e2d import lgraph_db_python \u8bbf\u95eelgraph_db_python.PyGraphDB\u4e0ePyGraphDB.PyGalaxy\u3002","title":"Transaction\uff1a"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#pygalaxy","text":"PyGalaxy(self, dir_path: str) : \u6784\u9020\u51fd\u6570\uff0cdir_path\u4e3adb\u8def\u5f84 SetCurrentUser(self, user: str password: str)-> void : \u8bbe\u7f6e\u7528\u6237 SetUser(self, user: std::string)-> void : \u8bbe\u7f6e\u7528\u6237 OpenGraph(self, graph: str, read_only: bool)-> PyGraphDB : \u521b\u5efaPyGraphDB","title":"PyGalaxy:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#pygraphdb","text":"get_pointer(self)-> cython.Py_ssize_t : C++ \u7c7bGraphDB\u7684\u5730\u5740","title":"PyGraphDB:"},{"location":"zh-CN/3.developer-document/4.graph_analytics_engine/6.python-api/#6","text":"\u4e0b\u9762\u4e3aPython\u5b9e\u73b0\u7684BFS\u7b97\u6cd5\u7684\u4ee3\u7801\u793a\u4f8b\uff1a # cython: language_level=3, cpp_locals=True, boundscheck=False, wraparound=False, initializedcheck=False # distutils: language = c++ # \u6ce8\u91ca\u4f5c\u7528\u5982\u4e0b\uff1a # language_level=3: \u4f7f\u7528Python3 # cpp_locals=True: \u9700\u8981c++17\uff0c\u4f7f\u7528std::optional\u7ba1\u7406Python\u4ee3\u7801\u4e2d\u7684C++\u5bf9\u8c61\uff0c\u53ef\u4ee5\u907f\u514dC++\u5bf9\u8c61\u7684\u62f7\u8d1d\u6784\u9020 # boundscheck=False: \u5173\u95ed\u7d22\u5f15\u7684\u8fb9\u754c\u68c0\u67e5 # wraparound=False: \u5173\u95ed\u8d1f\u6570\u4e0b\u6807\u7684\u5904\u7406\uff08\u7c7b\u4f3cPython List\uff09 # initializedcheck=False: \u5173\u95ed\u68c0\u67e5\u5185\u5b58\u662f\u5426\u521d\u59cb\u5316\uff0c\u5173\u95ed\u68c0\u67e5\u540e\u8fd0\u884c\u6027\u80fd\u66f4\u5feb # language = c++: \u5c06\u6b64py\u6587\u4ef6\u7ffb\u8bd1\u4e3aC++\u800c\u4e0d\u662fC\u6587\u4ef6\uff0cTuGraph\u4f7f\u7528\u5927\u91cf\u6a21\u677f\u51fd\u6570\uff0c\u6240\u4ee5\u90fd\u5e94\u8be5\u4f7f\u7528C++ import json import cython from cython.cimports.olap_base import * from cython.cimports.lgraph_db import * # \u4eceplugins/cython/ \u4e2dcimportolap_base.pxd\u4e0elgraph_db.pxd, \u7c7b\u4f3cC++\u4e2d#include \"xxx.h\" from cython.cimports.libc.stdio import printf # \u7c7b\u4f3cC++\u4e2d#include <stdio.h> # \u5176\u4ed6\u5e38\u89c1\u7684\u8fd8\u6709cython.cimports.libcpp.unordered_map\u7b49 import time import lgraph_db_python @cython.cclass # cython.cclass \u8868\u793aBFSCore\u4e3aC\u7c7b\u578b\u7684Class class BFSCore: graph: cython.pointer(OlapBase[Empty]) # cython.pointer(OlapBase[Empty])\u8868\u793aOlapBase[Empty]\u7684\u6307\u9488\uff0c\u7c7b\u4f3cC++\u4e2dOlapBase[Empty]* # cython\u63d0\u4f9b\u4e86\u5e38\u89c1\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5982cython.p_int, cython.p_char\u7b49\uff0c\u8868\u793aint*, char*, ... parent: ParallelVector[size_t] active_in: ParallelBitset active_out: ParallelBitset root: size_t # root: size_t \u58f0\u660eroot\u4e3aC++ size_t\u7c7b\u578b\u53d8\u91cf\uff0c\u7b49\u6548\u4e8eroot = cython.declare(size_t) # \u4e0d\u58f0\u660e\u7c7b\u578b\u7684\u53d8\u91cf\u4e3aPython object\u7c7b\u578b # \u58f0\u660e\u53d8\u91cf\u7c7b\u578b\u4f1a\u5927\u5e45\u63d0\u9ad8\u6027\u80fd\uff0c\u540c\u65f6\u5728\u591a\u7ebf\u7a0b\u90e8\u5206\uff0c\u53ea\u6709C/C++\u7c7b\u578b\u7684\u53d8\u91cf\u53ef\u4ee5\u8bbf\u95ee @cython.cfunc # cython.cfunc \u8868\u793aWork\u4e3aC\u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u5e94\u58f0\u660e # cfunc\u6027\u80fd\u597d\uff0c\u80fd\u63a5\u53d7C/C++\u5bf9\u8c61\u4e3a\u53c2\u6570\u3001\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u4e0d\u80fd\u5728\u5176\u4ed6python\u6587\u4ef6\u4e2d\u8c03\u7528 # \u7c7b\u4f3c\u7684\u6709cython.ccall\uff0c\u5982Standalone\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6python\u6587\u4ef6\u4e2d\u8c03\u7528 @cython.nogil # cython.nogil \u8868\u793a\u91ca\u653ePython\u5168\u5c40\u89e3\u91ca\u9501\uff0c\u5728nogil\u4fee\u9970\u7684\u90e8\u5206\uff0c\u4e0d\u80fd\u8bbf\u95eePython\u5bf9\u8c61 # \u5728\u591a\u7ebf\u7a0b\u90e8\u5206\uff0c\u90fd\u5e94\u6709nogil\u4fee\u9970\u5668 @cython.exceptval(check=False) # cython.exceptval(check=False) \u8868\u793a\u7981\u7528\u5f02\u5e38\u4f20\u64ad\uff0c\u5c06\u5ffd\u7565\u51fd\u6570\u5185\u90e8\u5f15\u53d1\u7684Python\u5f02\u5e38 def Work(self, vi: size_t) -> size_t: degree = cython.declare(size_t, self.graph.OutDegree(vi)) out_edges = cython.declare(AdjList[Empty], self.graph.OutEdges(vi)) i = cython.declare(size_t, 0) local_num_activations = cython.declare(size_t, 0) dst: size_t for i in range(degree): dst = out_edges[i].neighbour if self.parent[dst] == cython.cast(size_t, -1): # parent[dst] == -1 \u8868\u793adst\u6ca1\u6709\u88abbfs\u8bbf\u95ee\u8fc7 if self.active_out.Add(dst): # \u5c06dst\u8bbe\u7f6e\u4e3a\u4e3a\u6d3b\u8dc3\u8282\u70b9\uff1bParallelBitmap.Add\u4e3a\u539f\u5b50\u64cd\u4f5c\uff0c\u9632\u6b62\u91cd\u590d\u8ba1\u7b97 self.parent[dst] = vi local_num_activations += 1 return local_num_activations @cython.cfunc @cython.nogil @cython.exceptval(check=False) def run(self, g: cython.pointer(OlapBase[Empty]), r: size_t) -> cython.size_t: self.graph = g self.root = r self.active_in = g.AllocVertexSubset() self.active_out = g.AllocVertexSubset() self.parent = g.AllocVertexArray[size_t]() self.parent.Fill(-1) num_vertices = cython.declare(size_t, self.graph.NumVertices()) printf(\"num_vertices = %lu\\n\", num_vertices) self.parent[self.root] = self.root num_activations = cython.declare(size_t, 1) discovered_vertices = cython.declare(size_t, num_activations) self.active_in.Add(self.root) while num_activations > 0: self.active_out.Clear() num_activations = g.ProcessVertexActive[size_t, BFSCore](self.Work, self.active_in, self) discovered_vertices += num_activations self.active_out.Swap(self.active_in) printf(\"num_activations = %lu\\n\", num_activations) return discovered_vertices @cython.cfunc def procedure_process(db: cython.pointer(GraphDB), request: dict, response: dict) -> cython.bint: cost = time.time() root_id = \"0\" label = \"node\" field = \"id\" if \"root\" in request: root_id = request[\"root\"] if \"label\" in request: label = request[\"label\"] if \"field\" in request: field = request[\"field\"] txn = db.CreateReadTxn() olapondb = OlapOnDB[Empty](db[0], txn, SNAPSHOT_PARALLEL) # \u5e76\u884c\u521b\u5efaOlapOnDB # Cython\u4e0d\u652f\u6301\u5982 *db \u7684\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u901a\u8fc7db[0]\u6765\u89e3\u5f15\u7528 root_vid = txn.GetVertexIndexIterator( label.encode('utf-8'), field.encode('utf-8'), root_id.encode('utf-8'), root_id.encode('utf-8') ).GetVid() # \u901a\u8fc7 GetVertexIndexIterator \u6839\u636eroot\u8282\u70b9label\u540d\u548cfiled\u540d\u4e0efiled\u503c\uff08root_id\uff09 # \u83b7\u53d6root\u8282\u70b9\u7684\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u83b7\u53d6vid\uff0c\u5728\u65e0ID_MAPPING\u65f6\uff0c\u8be5vid\u4e0eOlapOnDB\u4e2d\u7684id\u76f8\u540c cost = time.time() - cost printf(\"prepare_cost = %lf s\\n\", cython.cast(cython.double, cost)) a = BFSCore() cost = time.time() count = a.run(cython.address(olapondb), root_vid) cost = time.time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) response[\"found_vertices\"] = count response[\"num_vertices\"] = olapondb.NumVertices() response[\"num_edges\"] = olapondb.NumEdges() return True @cython.ccall def Standalone(input_dir: str, root: size_t): # Standalone\u4e3aStandalone\u6a21\u5f0f\u4e0b\u63d2\u4ef6\u5165\u53e3\uff0c\u7528cython.ccall\u4fee\u9970 # \u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u53c2\u6570\uff0c\u76f8\u5e94\u4fee\u6539plugins/cython/standalone_main.py\u5373\u53ef cost = time.time() graph = OlapOnDisk[Empty]() config = ConfigBase[Empty]() config.input_dir = input_dir.encode(\"utf-8\") # config\u4e3aC++\u7c7b\uff0cconfig.input_dir\u4e3astd::string\uff0cPython str\u9700\u8981encode\u624d\u80fd\u4f20\u7ed9std::string graph.Load(config, DUAL_DIRECTION) # \u8bfb\u5165\u56fe cost = time.time() - cost printf(\"load_cost = %lf s\\n\", cython.cast(cython.double, cost)) cost = time.time() a = BFSCore() count = a.run(cython.address(graph), root) # cython.address(graph)\uff0c\u53d6\u5740\uff0c\u7c7b\u4f3cC++\u4e2d&graph cost = time.time() - cost printf(\"core_cost = %lf s\\n\", cython.cast(cython.double, cost)) print(\"find {} vertices\".format(count)) @cython.ccall def Process(db: lgraph_db_python.PyGraphDB, inp: bytes): # Process\u4e3aembed\u6a21\u5f0f\u548cprocedure\u6a21\u5f0f\u4e0b\u63d2\u4ef6\u5165\u53e3\uff0c\u7528cython.ccall\u4fee\u9970 # Process\u51fd\u6570\u5fc5\u987b\u540d\u4e3aProcess\uff0c\u53c2\u6570\u4e3algraph_db_python.PyGraphDB\u4e0ebytes # \u8fd4\u56de\u503c\u5fc5\u987b\u4e3a(bool, str) _inp = inp.decode(\"utf-8\") request = json.loads(_inp) response = {} addr = cython.declare(cython.Py_ssize_t, db.get_pointer()) # \u83b7\u53d6PyGraphDB\u4e2dGraphDB\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u8f6c\u6362\u4e3a\u6307\u9488\u540e\u4f20\u9012 procedure_process(cython.cast(cython.pointer(GraphDB), addr), request, response) return (True, json.dumps(response))","title":"6. \u7b97\u6cd5\u63d2\u4ef6\u793a\u4f8b"},{"location":"zh-CN/4.client/1.java-client/","text":"TuGraph Java SDK \u7f16\u8bd1java client\u4ee3\u7801 cd src/client/java/TuGraphRpcClient sh local_build.sh \u4f7f\u7528\u793a\u4f8b \u5b9e\u4f8b\u5316client\u5bf9\u8c61 \u5f15\u5165\u4f9d\u8d56\u5e76\u5b9e\u4f8b\u5316 import com.alipay.tugraph.TuGraphRpcClient; TuGraphRpcClient client = new TuGraphRpcClient(url, user, password); # \u5982\u679c\u662f\u4ecedocker\u542f\u52a8\u7684tugraph url : list://ip:9090 user : admin password : 73@TuGraph public TuGraphRpcClient(String url, String user, String pass) @param url: tugraph host looks like list://ip:port @param user: login user name @param password: login password \u8c03\u7528cypher String res = client.callCypher(\"CALL db.edgeLabels()\", \"default\", 10); log.info(\"db.edgeLabels() : \" + res); @param cypher: inquire statement. @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of cypher query execution public String callCypher(String cypher, String graph, double timeout) \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b String result = client.callPlugin(\"CPP\", \"khop\", kHopParamGen(), 1000, false, \"default\", 1000); log.info(\"testCallPlugin : \" + result); @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param param: the execution parameters @param pluginTimeOut: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public String callPlugin(String pluginType, String pluginName, String param, double pluginTimeOut, boolean inProcess, String graph, double timeout) \u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b String result = client.loadPlugin(\"./test/plugin/khop.so\", \"CPP\", \"khop\", \"SO\", \"test loadplugin\", true, \"default\", 1000); log.info(\"loadPlugin : \" + result); @param sourceFile: the source_file contain plugin code @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param codeType: code type, currently supported PY, SO, CPP, ZIP @param pluginDescription: plugin description @param readOnly: plugin is read only or not @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public boolean loadPlugin(String sourceFile, String pluginType, String pluginName, String codeType, String pluginDescription, boolean readOnly, String graph, double timeout) throws IOException \u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165schema boolean ret = client.importSchemaFromContent(schema, \"default\", 1000); log.info(\"importSchemaFromContent : \" + ret); @param schema: the schema to be imported @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromContent(String schema, String graph, double timeout) throws UnsupportedEncodingException \u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e boolean ret = client.importDataFromContent(personDesc, person, \",\", true, 16, \"default\", 1000); log.info(\"importDataFromContent : \" + ret); @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromContent(String desc, String data, String delimiter, boolean continueOnError, int threadNums, String graph, double timeout) throws UnsupportedEncodingException \u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165schema boolean ret = client.importSchemaFromFile(\"./test/data/yago.conf\", \"default\", 1000); log.info(\"importSchemaFromFile : \" + ret); @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromFile(String schemaFile, String graph, double timeout) throws UnsupportedEncodingException, IOException \u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e boolean ret = client.importDataFromFile(\"./test/data/yago.conf\", \",\", true, 16, 0, \"default\", 1000000000); log.info(\"importDataFromFile : \" + ret); @param confFile: data file contain format description and data @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param skipPackages: skip packages number @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromFile(String confFile, String delimiter, boolean continueOnError, int threadNums, int skipPackages, String graph, double timeout) throws IOException, UnsupportedEncodingException","title":"Java \u5ba2\u6237\u7aef"},{"location":"zh-CN/4.client/1.java-client/#tugraph-java-sdk","text":"","title":"TuGraph Java SDK"},{"location":"zh-CN/4.client/1.java-client/#java-client","text":"cd src/client/java/TuGraphRpcClient sh local_build.sh","title":"\u7f16\u8bd1java client\u4ee3\u7801"},{"location":"zh-CN/4.client/1.java-client/#_1","text":"","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"zh-CN/4.client/1.java-client/#client","text":"\u5f15\u5165\u4f9d\u8d56\u5e76\u5b9e\u4f8b\u5316 import com.alipay.tugraph.TuGraphRpcClient; TuGraphRpcClient client = new TuGraphRpcClient(url, user, password); # \u5982\u679c\u662f\u4ecedocker\u542f\u52a8\u7684tugraph url : list://ip:9090 user : admin password : 73@TuGraph public TuGraphRpcClient(String url, String user, String pass) @param url: tugraph host looks like list://ip:port @param user: login user name @param password: login password","title":"\u5b9e\u4f8b\u5316client\u5bf9\u8c61"},{"location":"zh-CN/4.client/1.java-client/#cypher","text":"String res = client.callCypher(\"CALL db.edgeLabels()\", \"default\", 10); log.info(\"db.edgeLabels() : \" + res); @param cypher: inquire statement. @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of cypher query execution public String callCypher(String cypher, String graph, double timeout)","title":"\u8c03\u7528cypher"},{"location":"zh-CN/4.client/1.java-client/#_2","text":"String result = client.callPlugin(\"CPP\", \"khop\", kHopParamGen(), 1000, false, \"default\", 1000); log.info(\"testCallPlugin : \" + result); @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param param: the execution parameters @param pluginTimeOut: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public String callPlugin(String pluginType, String pluginName, String param, double pluginTimeOut, boolean inProcess, String graph, double timeout)","title":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/4.client/1.java-client/#_3","text":"String result = client.loadPlugin(\"./test/plugin/khop.so\", \"CPP\", \"khop\", \"SO\", \"test loadplugin\", true, \"default\", 1000); log.info(\"loadPlugin : \" + result); @param sourceFile: the source_file contain plugin code @param pluginType: the plugin type, currently supported CPP and PY @param pluginName: plugin name @param codeType: code type, currently supported PY, SO, CPP, ZIP @param pluginDescription: plugin description @param readOnly: plugin is read only or not @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of plugin execution public boolean loadPlugin(String sourceFile, String pluginType, String pluginName, String codeType, String pluginDescription, boolean readOnly, String graph, double timeout) throws IOException","title":"\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/4.client/1.java-client/#schema","text":"boolean ret = client.importSchemaFromContent(schema, \"default\", 1000); log.info(\"importSchemaFromContent : \" + ret); @param schema: the schema to be imported @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromContent(String schema, String graph, double timeout) throws UnsupportedEncodingException","title":"\u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165schema"},{"location":"zh-CN/4.client/1.java-client/#_4","text":"boolean ret = client.importDataFromContent(personDesc, person, \",\", true, 16, \"default\", 1000); log.info(\"importDataFromContent : \" + ret); @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromContent(String desc, String data, String delimiter, boolean continueOnError, int threadNums, String graph, double timeout) throws UnsupportedEncodingException","title":"\u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e"},{"location":"zh-CN/4.client/1.java-client/#schema_1","text":"boolean ret = client.importSchemaFromFile(\"./test/data/yago.conf\", \"default\", 1000); log.info(\"importSchemaFromFile : \" + ret); @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import schema public boolean importSchemaFromFile(String schemaFile, String graph, double timeout) throws UnsupportedEncodingException, IOException","title":"\u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165schema"},{"location":"zh-CN/4.client/1.java-client/#_5","text":"boolean ret = client.importDataFromFile(\"./test/data/yago.conf\", \",\", true, 16, 0, \"default\", 1000000000); log.info(\"importDataFromFile : \" + ret); @param confFile: data file contain format description and data @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param skipPackages: skip packages number @param graph: the graph to query. @param timeout: Maximum execution time, overruns will be interrupted @return: the result of import data public boolean importDataFromFile(String confFile, String delimiter, boolean continueOnError, int threadNums, int skipPackages, String graph, double timeout) throws IOException, UnsupportedEncodingException","title":"\u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e"},{"location":"zh-CN/4.client/2.python-client/","text":"TuGraph Python SDK \u6b64\u6587\u6863\u4e3b\u8981\u662fTuGraph Python SDK\u7684\u4f7f\u7528\u8bf4\u660e \u4f7f\u7528\u793a\u4f8b \u8c03\u7528Cypher from TuGraphClient import TuGraphClient, AsyncTuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") cypher = \"match (n) return properties(n) limit 1\" res = client.call_cypher(cypher) print(res) aclient = AsyncTuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") cypher = \"match (n) return properties(n) limit 1\" res = await aclient.call_cypher(cypher) print(res) \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b from TuGraphClient import TuGraphClient, AsyncTuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") plugin_type = \"cpp\" plugin_name = \"khop\" plugin_input = \"{\\\"root\\\": 10, \\\"hop\\\": 3}\" res = client.call_plugin(plugin_type, plguin_name, plugin_input) print(res) aclient = AsyncTuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") res = await aclient.call_plugin(plugin_type, plguin_name, plugin_input) print(res)","title":"Python \u5ba2\u6237\u7aef"},{"location":"zh-CN/4.client/2.python-client/#tugraph-python-sdk","text":"\u6b64\u6587\u6863\u4e3b\u8981\u662fTuGraph Python SDK\u7684\u4f7f\u7528\u8bf4\u660e","title":"TuGraph Python SDK"},{"location":"zh-CN/4.client/2.python-client/#_1","text":"","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"zh-CN/4.client/2.python-client/#cypher","text":"from TuGraphClient import TuGraphClient, AsyncTuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") cypher = \"match (n) return properties(n) limit 1\" res = client.call_cypher(cypher) print(res) aclient = AsyncTuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") cypher = \"match (n) return properties(n) limit 1\" res = await aclient.call_cypher(cypher) print(res)","title":"\u8c03\u7528Cypher"},{"location":"zh-CN/4.client/2.python-client/#_2","text":"from TuGraphClient import TuGraphClient, AsyncTuGraphClient client = TuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") plugin_type = \"cpp\" plugin_name = \"khop\" plugin_input = \"{\\\"root\\\": 10, \\\"hop\\\": 3}\" res = client.call_plugin(plugin_type, plguin_name, plugin_input) print(res) aclient = AsyncTuGraphClient(\"127.0.0.1:7071\" , \"admin\", \"73@TuGraph\") res = await aclient.call_plugin(plugin_type, plguin_name, plugin_input) print(res)","title":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/4.client/3.cpp-client/","text":"TuGraph C++ SDK \u6b64\u6587\u6863\u4e3b\u8981\u662fTuGraph C++ SDK\u7684\u4f7f\u7528\u8bf4\u660e \u6982\u8ff0 C++ Client \u80fd\u591f\u4f7f\u7528 RPC \u8fde\u63a5lgraph_server\uff0c\u8fdb\u884c\u6570\u636e\u5bfc\u5165\u3001\u6267\u884c\u5b58\u50a8\u8fc7\u7a0b\u3001\u8c03\u7528Cypher\u7b49\u64cd\u4f5c\u3002 \u4f7f\u7528\u793a\u4f8b \u5b9e\u4f8b\u5316client\u5bf9\u8c61 \u5f15\u5165\u4f9d\u8d56\u5e76\u5b9e\u4f8b\u5316 RpcClient client3(\"0.0.0.0:19099\", \"admin\", \"73@TuGraph\"); RpcClient(const std::string& url, const std::string& user, const std::string& password); @param url: tugraph host looks like ip:port @param user: login user name @param password: login password \u8c03\u7528cypher std::string str; bool ret = client.CallCypher(str, \"CALL db.createVertexLabel('actor', 'name', 'name', string, false, 'age', int8, true)\"); bool CallCypher(std::string& result, const std::string& cypher, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param cypher: inquire statement. @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b std::string str; bool ret = client.CallPlugin(str, \"CPP\", \"test_plugin1\", \"bcefg\"); bool CallPlugin(std::string& result, const std::string& plugin_type, const std::string& plugin_name, const std::string& param, double plugin_time_out = 0.0, bool in_process = false, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param param: the execution parameters @param plugin_timeout: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully \u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b std::string str; bool ret = client.LoadPlugin(str, code_sleep, \"PY\", \"python_plugin1\", \"PY\", \"this is a test plugin\", bool LoadPlugin(std::string& result, const std::string& source_file, const std::string& plugin_type, const std::string& plugin_name, const std::string& code_type, const std::string& plugin_description, bool read_only, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param source_file: the source_file contain plugin code @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param code_type: code type, currently supported PY, SO, CPP, ZIP @param plugin_description: plugin description @param read_only: plugin is read only or not @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully \u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165schema std::string str; bool ret = client.ImportSchemaFromContent(str, sImportContent[\"schema\"]); bool ImportSchemaFromContent(std::string& result, const std::string& schema, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schema: the schema to be imported @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully \u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e std::string str; ret = client.ImportDataFromContent(str, sImportContent[\"person_desc\"], sImportContent[\"person\"],\",\"); bool ImportDataFromContent(std::string& result, const std::string& desc, const std::string& data, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully \u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165schema std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportSchemaFromFile(str, conf_file); bool ImportSchemaFromFile(std::string& result, const std::string& schema_file, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully \u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportDataFromFile(str, conf_file, \",\"); bool ImportDataFromFile(std::string& result, const std::string& conf_file, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, int skip_packages = 0, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param conf_file: data file contain format description and data @param delimiter: data separator @param continue_on_error: whether to continue when importing data fails @param thread_nums: maximum number of threads @param skip_packages: skip packages number @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"CPP \u5ba2\u6237\u7aef"},{"location":"zh-CN/4.client/3.cpp-client/#tugraph-c-sdk","text":"\u6b64\u6587\u6863\u4e3b\u8981\u662fTuGraph C++ SDK\u7684\u4f7f\u7528\u8bf4\u660e","title":"TuGraph C++ SDK"},{"location":"zh-CN/4.client/3.cpp-client/#_1","text":"C++ Client \u80fd\u591f\u4f7f\u7528 RPC \u8fde\u63a5lgraph_server\uff0c\u8fdb\u884c\u6570\u636e\u5bfc\u5165\u3001\u6267\u884c\u5b58\u50a8\u8fc7\u7a0b\u3001\u8c03\u7528Cypher\u7b49\u64cd\u4f5c\u3002","title":"\u6982\u8ff0"},{"location":"zh-CN/4.client/3.cpp-client/#_2","text":"","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"zh-CN/4.client/3.cpp-client/#client","text":"\u5f15\u5165\u4f9d\u8d56\u5e76\u5b9e\u4f8b\u5316 RpcClient client3(\"0.0.0.0:19099\", \"admin\", \"73@TuGraph\"); RpcClient(const std::string& url, const std::string& user, const std::string& password); @param url: tugraph host looks like ip:port @param user: login user name @param password: login password","title":"\u5b9e\u4f8b\u5316client\u5bf9\u8c61"},{"location":"zh-CN/4.client/3.cpp-client/#cypher","text":"std::string str; bool ret = client.CallCypher(str, \"CALL db.createVertexLabel('actor', 'name', 'name', string, false, 'age', int8, true)\"); bool CallCypher(std::string& result, const std::string& cypher, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param cypher: inquire statement. @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u8c03\u7528cypher"},{"location":"zh-CN/4.client/3.cpp-client/#_3","text":"std::string str; bool ret = client.CallPlugin(str, \"CPP\", \"test_plugin1\", \"bcefg\"); bool CallPlugin(std::string& result, const std::string& plugin_type, const std::string& plugin_name, const std::string& param, double plugin_time_out = 0.0, bool in_process = false, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param param: the execution parameters @param plugin_timeout: Maximum execution time, overruns will be interrupted @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/4.client/3.cpp-client/#_4","text":"std::string str; bool ret = client.LoadPlugin(str, code_sleep, \"PY\", \"python_plugin1\", \"PY\", \"this is a test plugin\", bool LoadPlugin(std::string& result, const std::string& source_file, const std::string& plugin_type, const std::string& plugin_name, const std::string& code_type, const std::string& plugin_description, bool read_only, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param source_file: the source_file contain plugin code @param plugin_type: the plugin type, currently supported CPP and PY @param plugin_name: plugin name @param code_type: code type, currently supported PY, SO, CPP, ZIP @param plugin_description: plugin description @param read_only: plugin is read only or not @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u52a0\u8f7d\u5b58\u50a8\u8fc7\u7a0b"},{"location":"zh-CN/4.client/3.cpp-client/#schema","text":"std::string str; bool ret = client.ImportSchemaFromContent(str, sImportContent[\"schema\"]); bool ImportSchemaFromContent(std::string& result, const std::string& schema, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schema: the schema to be imported @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165schema"},{"location":"zh-CN/4.client/3.cpp-client/#_5","text":"std::string str; ret = client.ImportDataFromContent(str, sImportContent[\"person_desc\"], sImportContent[\"person\"],\",\"); bool ImportDataFromContent(std::string& result, const std::string& desc, const std::string& data, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param desc: data format description @param data: the data to be imported @param delimiter: data separator @param continueOnError: whether to continue when importing data fails @param threadNums: maximum number of threads @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u4ece\u5b57\u8282\u6d41\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e"},{"location":"zh-CN/4.client/3.cpp-client/#schema_1","text":"std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportSchemaFromFile(str, conf_file); bool ImportSchemaFromFile(std::string& result, const std::string& schema_file, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param schemaFile: the schema_file contain schema @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165schema"},{"location":"zh-CN/4.client/3.cpp-client/#_6","text":"std::string conf_file(\"./yago.conf\"); std::string str; ret = client.ImportDataFromFile(str, conf_file, \",\"); bool ImportDataFromFile(std::string& result, const std::string& conf_file, const std::string& delimiter, bool continue_on_error = false, int thread_nums = 8, int skip_packages = 0, const std::string& graph = \"default\", bool json_format = true, double timeout = 0); @param result: the result returned by the service. @param conf_file: data file contain format description and data @param delimiter: data separator @param continue_on_error: whether to continue when importing data fails @param thread_nums: maximum number of threads @param skip_packages: skip packages number @param graph: the graph to query. @param json_format: The result is returned in JSON format @param timeout: Maximum execution time, overruns will be interrupted @return: whether the command is executed successfully","title":"\u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165\u70b9\u8fb9\u6570\u636e"},{"location":"zh-CN/4.client/4.java-ogm/","text":"TuGraph-OGM \u7b80\u4ecb TuGraph-OGM \u9879\u76ee\u5728\u5176\u4ed6\u4ed3\u5e93\u5f00\u6e90\u3002 TuGraph-OGM(Object Graph Mapping)\u4e3a\u9762\u5411 TuGraph \u7684\u56fe\u5bf9\u8c61\u6620\u5c04\u5de5\u5177\uff0c\u652f\u6301\u5c06 JAVA \u5bf9\u8c61\uff08POJO\uff09\u6620\u5c04\u5230 TuGraph \u4e2d\uff0cJAVA \u4e2d\u7684\u7c7b\u6620\u5c04\u4e3a\u56fe\u4e2d\u7684\u8282\u70b9\u3001\u7c7b\u4e2d\u7684\u96c6\u5408\u6620\u5c04\u4e3a\u8fb9\u3001\u7c7b\u7684\u5c5e\u6027\u6620\u5c04\u4e3a\u56fe\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5e76\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u51fd\u6570\u64cd\u4f5c\u56fe\u6570\u636e\u5e93\uff0c\u56e0\u6b64 JAVA \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5728\u719f\u6089\u7684\u751f\u6001\u4e2d\u8f7b\u677e\u5730\u4f7f\u7528 TuGraph \u6570\u636e\u5e93\u3002\u540c\u65f6 TuGraph-OGM \u517c\u5bb9 Neo4j-OGM\uff0cNeo4j \u751f\u6001\u7528\u6237\u53ef\u4ee5\u65e0\u7f1d\u8fc1\u79fb\u5230 TuGraph \u6570\u636e\u5e93\u4e0a\u3002 TuGraph-OGM \u529f\u80fd TuGraph-OGM \u63d0\u4f9b\u4ee5\u4e0b\u51fd\u6570\u64cd\u4f5c TuGraph\uff1a \u529f\u80fd \u7528\u6cd5 \u63d2\u5165\u5355\u4e2a\u8282\u70b9\\\u8fb9 void session.save(T object) \u6279\u91cf\u63d2\u5165\u8282\u70b9\\\u8fb9 void session.save(T object) \u5220\u9664\u8282\u70b9\u4e0e\u5bf9\u5e94\u8fb9 void session.delete(T object) \u5220\u9664\u6307\u5b9a label \u7684\u5168\u90e8\u8282\u70b9 void session.deleteAll(Class\\ type) \u6e05\u7a7a\u6570\u636e\u5e93 void purgeDatabase() \u66f4\u65b0\u8282\u70b9 void session.save(T newObject) \u6839\u636e id \u67e5\u8be2\u5355\u4e2a\u8282\u70b9 T load(Class type, ID id) \u6839\u636e ids \u67e5\u8be2\u591a\u4e2a\u8282\u70b9 Collection\\ loadAll(Class\\ type, Collection ids) \u6839\u636e label \u67e5\u8be2\u5168\u90e8\u8282\u70b9 Collection\\ loadAll(Class\\ type) \u6761\u4ef6\u67e5\u8be2 Collection\\ loadAll(Class\\ type, Filters filters) Cypher \u67e5\u8be2\uff08\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u7c7b\u578b\uff09 T queryForObject(Class\\ objectType, String cypher, Map parameters) Cypher \u67e5\u8be2 Result query(String cypher, Map parameters) \u7f16\u8bd1 TuGraph-OGM cd tugraph-ogm mvn clean install -DskipTests -Denforcer.skip=true \u4f7f\u7528 TuGraph-OGM \u8be6\u7ec6\u793a\u4f8b\u8bf7\u53c2\u8003 demo \u6587\u4ef6\u5939\u4e0b\u7684 TuGraphOGMDemo ###\u5728 pom.xml \u4e2d\u5f15\u5165\u4f9d\u8d56 <dependency> <groupId>org.neo4j</groupId> <artifactId>neo4j-ogm-api</artifactId> <version>0.1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>org.neo4j</groupId> <artifactId>neo4j-ogm-core</artifactId> <version>0.1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>org.neo4j</groupId> <artifactId>tugraph-rpc-driver</artifactId> <version>0.1.0-SNAPSHOT</version> </dependency> \u6784\u5efa\u56fe\u5bf9\u8c61 @NodeEntity public class Movie { // \u6784\u5efaMovie\u8282\u70b9 @Id private Long id; // Movie\u8282\u70b9\u7684id private String title; // title\u5c5e\u6027 private int released; // released\u5c5e\u6027 // \u6784\u5efa\u8fb9ACTS_IN (actor)-[:ACTS_IN]->(movie) @Relationship(type = \"ACTS_IN\", direction = Relationship.Direction.INCOMING) Set<Actor> actors = new HashSet<>(); public Movie(String title, int year) { this.title = title; this.released = year; } public Long getId() { return id; } public void setReleased(int released) { this.released = released; } } @NodeEntity public class Actor { // \u6784\u5efaActor\u8282\u70b9 @Id private Long id; private String name; @Relationship(type = \"ACTS_IN\", direction = Relationship.Direction.OUTGOING) private Set<Movie> movies = new HashSet<>(); public Actor(String name) { this.name = name; } public void actsIn(Movie movie) { movies.add(movie); movie.getActors().add(this); } } \u4e0e TuGraph \u5efa\u7acb\u8fde\u63a5 // \u914d\u7f6e String databaseUri = \"list://ip:port\"; String username = \"admin\"; String password = \"73@TuGraph\"; //\u542f\u52a8driver Driver driver = new RpcDriver(); Configuration.Builder baseConfigurationBuilder = new Configuration.Builder() .uri(databaseUri) .verifyConnection(true) .credentials(username, password); driver.configure(baseConfigurationBuilder.build()); driver.configure(baseConfigurationBuilder.build()); // \u5f00\u542fsession SessionFactory sessionFactory = new SessionFactory(driver, \"entity_path\"); Session session = sessionFactory.openSession(); \u901a\u8fc7 OGM \u8fdb\u884c\u589e\u5220\u6539\u67e5 // \u589e Movie jokes = new Movie(\"Jokes\", 1990); // \u65b0\u5efaMovie\u8282\u70b9jokes session.save(jokes); // \u5c06jokes\u5b58\u50a8\u5728TuGraph\u4e2d Movie speed = new Movie(\"Speed\", 2019); Actor alice = new Actor(\"Alice Neeves\"); alice.actsIn(speed); // \u5c06speed\u8282\u70b9\u4e0ealice\u8282\u70b9\u901a\u8fc7ACTS_IN\u8fdb\u884c\u8fde\u63a5 session.save(speed); // \u5b58\u50a8\u4e24\u4e2a\u8282\u70b9\u4e0e\u4e00\u6761\u8fb9 // \u5220 session.delete(alice); // \u5220\u9664alice\u8282\u70b9\u4ee5\u53ca\u76f8\u8fde\u7684\u8fb9 Movie m = session.load(Movie.class, jokes.getId()); // \u6839\u636ejokes\u8282\u70b9\u7684id\u83b7\u53d6jokes\u8282\u70b9 session.delete(m); // \u5220\u9664jokes\u8282\u70b9 // \u6539 speed.setReleased(2018); session.save(speed); // \u66f4\u65b0speed\u8282\u70b9\u5c5e\u6027 // \u67e5 Collection<Movie> movies = session.loadAll(Movie.class); // \u83b7\u53d6\u6240\u6709Movie\u8282\u70b9 Collection<Movie> moviesFilter = session.loadAll(Movie.class, new Filter(\"released\", ComparisonOperator.LESS_THAN, 1995)); // \u67e5\u8be2\u6240\u6709\u5c0f\u4e8e1995\u5e74\u53d1\u5e03\u7684\u7535\u5f71 // \u8c03\u7528Cypher HashMap<String, Object> parameters = new HashMap<>(); parameters.put(\"Speed\", 2018); Movie cm = session.queryForObject(Movie.class, \"MATCH (cm:Movie{Speed: $Speed}) RETURN *\", parameters); // \u67e5\u8be2Speed\u4e3a2018\u7684Movie session.query(\"CALL db.createVertexLabel('Director', 'name', 'name',\" + \"STRING, false, 'age', INT16, true)\", emptyMap()); // \u521b\u5efa\u8282\u70b9Label Director session.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap()); // \u521b\u5efa\u8fb9Label DIRECT Result createResult = session.query( \"CREATE (n:Movie{title:\\\"The Shawshank Redemption\\\", released:1994})\" + \"<-[r:DIRECT]-\" + \"(n2:Director{name:\\\"Frank Darabont\\\", age:63})\", emptyMap()); QueryStatistics statistics = createResult.queryStatistics(); // \u83b7\u53d6create\u7ed3\u679c System.out.println(\"created \" + statistics.getNodesCreated() + \" vertices\"); // \u67e5\u770b\u521b\u5efa\u8282\u70b9\u6570\u76ee System.out.println(\"created \" + statistics.getRelationshipsCreated() + \" edges\"); //\u67e5\u770b\u521b\u5efa\u8fb9\u6570\u76ee // \u6e05\u7a7a\u6570\u636e\u5e93 session.deleteAll(Movie.class); // \u5220\u9664\u6240\u6709Movie\u8282\u70b9 session.purgeDatabase(); // \u5220\u9664\u5168\u90e8\u6570\u636e","title":"Java OGM"},{"location":"zh-CN/4.client/4.java-ogm/#tugraph-ogm","text":"","title":"TuGraph-OGM"},{"location":"zh-CN/4.client/4.java-ogm/#_1","text":"TuGraph-OGM \u9879\u76ee\u5728\u5176\u4ed6\u4ed3\u5e93\u5f00\u6e90\u3002 TuGraph-OGM(Object Graph Mapping)\u4e3a\u9762\u5411 TuGraph \u7684\u56fe\u5bf9\u8c61\u6620\u5c04\u5de5\u5177\uff0c\u652f\u6301\u5c06 JAVA \u5bf9\u8c61\uff08POJO\uff09\u6620\u5c04\u5230 TuGraph \u4e2d\uff0cJAVA \u4e2d\u7684\u7c7b\u6620\u5c04\u4e3a\u56fe\u4e2d\u7684\u8282\u70b9\u3001\u7c7b\u4e2d\u7684\u96c6\u5408\u6620\u5c04\u4e3a\u8fb9\u3001\u7c7b\u7684\u5c5e\u6027\u6620\u5c04\u4e3a\u56fe\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5e76\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u51fd\u6570\u64cd\u4f5c\u56fe\u6570\u636e\u5e93\uff0c\u56e0\u6b64 JAVA \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5728\u719f\u6089\u7684\u751f\u6001\u4e2d\u8f7b\u677e\u5730\u4f7f\u7528 TuGraph \u6570\u636e\u5e93\u3002\u540c\u65f6 TuGraph-OGM \u517c\u5bb9 Neo4j-OGM\uff0cNeo4j \u751f\u6001\u7528\u6237\u53ef\u4ee5\u65e0\u7f1d\u8fc1\u79fb\u5230 TuGraph \u6570\u636e\u5e93\u4e0a\u3002","title":"\u7b80\u4ecb"},{"location":"zh-CN/4.client/4.java-ogm/#tugraph-ogm_1","text":"TuGraph-OGM \u63d0\u4f9b\u4ee5\u4e0b\u51fd\u6570\u64cd\u4f5c TuGraph\uff1a \u529f\u80fd \u7528\u6cd5 \u63d2\u5165\u5355\u4e2a\u8282\u70b9\\\u8fb9 void session.save(T object) \u6279\u91cf\u63d2\u5165\u8282\u70b9\\\u8fb9 void session.save(T object) \u5220\u9664\u8282\u70b9\u4e0e\u5bf9\u5e94\u8fb9 void session.delete(T object) \u5220\u9664\u6307\u5b9a label \u7684\u5168\u90e8\u8282\u70b9 void session.deleteAll(Class\\ type) \u6e05\u7a7a\u6570\u636e\u5e93 void purgeDatabase() \u66f4\u65b0\u8282\u70b9 void session.save(T newObject) \u6839\u636e id \u67e5\u8be2\u5355\u4e2a\u8282\u70b9 T load(Class type, ID id) \u6839\u636e ids \u67e5\u8be2\u591a\u4e2a\u8282\u70b9 Collection\\ loadAll(Class\\ type, Collection ids) \u6839\u636e label \u67e5\u8be2\u5168\u90e8\u8282\u70b9 Collection\\ loadAll(Class\\ type) \u6761\u4ef6\u67e5\u8be2 Collection\\ loadAll(Class\\ type, Filters filters) Cypher \u67e5\u8be2\uff08\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u7c7b\u578b\uff09 T queryForObject(Class\\ objectType, String cypher, Map parameters) Cypher \u67e5\u8be2 Result query(String cypher, Map parameters)","title":"TuGraph-OGM \u529f\u80fd"},{"location":"zh-CN/4.client/4.java-ogm/#tugraph-ogm_2","text":"cd tugraph-ogm mvn clean install -DskipTests -Denforcer.skip=true","title":"\u7f16\u8bd1 TuGraph-OGM"},{"location":"zh-CN/4.client/4.java-ogm/#tugraph-ogm_3","text":"\u8be6\u7ec6\u793a\u4f8b\u8bf7\u53c2\u8003 demo \u6587\u4ef6\u5939\u4e0b\u7684 TuGraphOGMDemo ###\u5728 pom.xml \u4e2d\u5f15\u5165\u4f9d\u8d56 <dependency> <groupId>org.neo4j</groupId> <artifactId>neo4j-ogm-api</artifactId> <version>0.1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>org.neo4j</groupId> <artifactId>neo4j-ogm-core</artifactId> <version>0.1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>org.neo4j</groupId> <artifactId>tugraph-rpc-driver</artifactId> <version>0.1.0-SNAPSHOT</version> </dependency>","title":"\u4f7f\u7528 TuGraph-OGM"},{"location":"zh-CN/4.client/4.java-ogm/#_2","text":"@NodeEntity public class Movie { // \u6784\u5efaMovie\u8282\u70b9 @Id private Long id; // Movie\u8282\u70b9\u7684id private String title; // title\u5c5e\u6027 private int released; // released\u5c5e\u6027 // \u6784\u5efa\u8fb9ACTS_IN (actor)-[:ACTS_IN]->(movie) @Relationship(type = \"ACTS_IN\", direction = Relationship.Direction.INCOMING) Set<Actor> actors = new HashSet<>(); public Movie(String title, int year) { this.title = title; this.released = year; } public Long getId() { return id; } public void setReleased(int released) { this.released = released; } } @NodeEntity public class Actor { // \u6784\u5efaActor\u8282\u70b9 @Id private Long id; private String name; @Relationship(type = \"ACTS_IN\", direction = Relationship.Direction.OUTGOING) private Set<Movie> movies = new HashSet<>(); public Actor(String name) { this.name = name; } public void actsIn(Movie movie) { movies.add(movie); movie.getActors().add(this); } }","title":"\u6784\u5efa\u56fe\u5bf9\u8c61"},{"location":"zh-CN/4.client/4.java-ogm/#tugraph","text":"// \u914d\u7f6e String databaseUri = \"list://ip:port\"; String username = \"admin\"; String password = \"73@TuGraph\"; //\u542f\u52a8driver Driver driver = new RpcDriver(); Configuration.Builder baseConfigurationBuilder = new Configuration.Builder() .uri(databaseUri) .verifyConnection(true) .credentials(username, password); driver.configure(baseConfigurationBuilder.build()); driver.configure(baseConfigurationBuilder.build()); // \u5f00\u542fsession SessionFactory sessionFactory = new SessionFactory(driver, \"entity_path\"); Session session = sessionFactory.openSession();","title":"\u4e0e TuGraph \u5efa\u7acb\u8fde\u63a5"},{"location":"zh-CN/4.client/4.java-ogm/#ogm","text":"// \u589e Movie jokes = new Movie(\"Jokes\", 1990); // \u65b0\u5efaMovie\u8282\u70b9jokes session.save(jokes); // \u5c06jokes\u5b58\u50a8\u5728TuGraph\u4e2d Movie speed = new Movie(\"Speed\", 2019); Actor alice = new Actor(\"Alice Neeves\"); alice.actsIn(speed); // \u5c06speed\u8282\u70b9\u4e0ealice\u8282\u70b9\u901a\u8fc7ACTS_IN\u8fdb\u884c\u8fde\u63a5 session.save(speed); // \u5b58\u50a8\u4e24\u4e2a\u8282\u70b9\u4e0e\u4e00\u6761\u8fb9 // \u5220 session.delete(alice); // \u5220\u9664alice\u8282\u70b9\u4ee5\u53ca\u76f8\u8fde\u7684\u8fb9 Movie m = session.load(Movie.class, jokes.getId()); // \u6839\u636ejokes\u8282\u70b9\u7684id\u83b7\u53d6jokes\u8282\u70b9 session.delete(m); // \u5220\u9664jokes\u8282\u70b9 // \u6539 speed.setReleased(2018); session.save(speed); // \u66f4\u65b0speed\u8282\u70b9\u5c5e\u6027 // \u67e5 Collection<Movie> movies = session.loadAll(Movie.class); // \u83b7\u53d6\u6240\u6709Movie\u8282\u70b9 Collection<Movie> moviesFilter = session.loadAll(Movie.class, new Filter(\"released\", ComparisonOperator.LESS_THAN, 1995)); // \u67e5\u8be2\u6240\u6709\u5c0f\u4e8e1995\u5e74\u53d1\u5e03\u7684\u7535\u5f71 // \u8c03\u7528Cypher HashMap<String, Object> parameters = new HashMap<>(); parameters.put(\"Speed\", 2018); Movie cm = session.queryForObject(Movie.class, \"MATCH (cm:Movie{Speed: $Speed}) RETURN *\", parameters); // \u67e5\u8be2Speed\u4e3a2018\u7684Movie session.query(\"CALL db.createVertexLabel('Director', 'name', 'name',\" + \"STRING, false, 'age', INT16, true)\", emptyMap()); // \u521b\u5efa\u8282\u70b9Label Director session.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap()); // \u521b\u5efa\u8fb9Label DIRECT Result createResult = session.query( \"CREATE (n:Movie{title:\\\"The Shawshank Redemption\\\", released:1994})\" + \"<-[r:DIRECT]-\" + \"(n2:Director{name:\\\"Frank Darabont\\\", age:63})\", emptyMap()); QueryStatistics statistics = createResult.queryStatistics(); // \u83b7\u53d6create\u7ed3\u679c System.out.println(\"created \" + statistics.getNodesCreated() + \" vertices\"); // \u67e5\u770b\u521b\u5efa\u8282\u70b9\u6570\u76ee System.out.println(\"created \" + statistics.getRelationshipsCreated() + \" edges\"); //\u67e5\u770b\u521b\u5efa\u8fb9\u6570\u76ee // \u6e05\u7a7a\u6570\u636e\u5e93 session.deleteAll(Movie.class); // \u5220\u9664\u6240\u6709Movie\u8282\u70b9 session.purgeDatabase(); // \u5220\u9664\u5168\u90e8\u6570\u636e","title":"\u901a\u8fc7 OGM \u8fdb\u884c\u589e\u5220\u6539\u67e5"},{"location":"zh-CN/5.supplement/changelog/","text":"\u66f4\u65b0\u5185\u5bb9\u8bf4\u660e 3.4.0 (2023-3-11) Breaking Changes: OLAP Python API support New lgraph_import implementation DataX export support Improvements And Bug Fixes: String 4MB support lgraph_result json format update Other bug fix 3.3.4 (2023-1-28) Breaking Changes: None Improvements And Bug Fixes: Fix WAL sync bug Update python rest client Other bug fix 3.3.3 (2022-12-23) Breaking Changes: Improve WAL performance Add English Doc Update JWT security issues Improvements And Bug Fixes: Fix edge constraints issues Add ubuntu docker Use pthread in fulltext Other bug fix 3.3.2 (2022-11-21) Breaking Changes: Add OGM support Improve UT coverage to 87% Use static library for link Improvements And Bug Fixes: Fix python procedure api doc Update docs Add khop procedure Other bug fix 3.3.1 (2022-10-14) Breaking Changes: Refine Graph Analytics Engine Path support in cypher Improvements And Bug Fixes: Fix RWLock Bug Rewrite docs Cleanup Dockerfile 3.3.0 (2022-08-05) Breaking Changes: \u6dfb\u52a0\u5c5e\u6027\u7ea7\u522b\u7684\u8bbf\u95ee\u6743\u9650 db_async\u9009\u9879\u6539\u540d\u4e3adurable Improvements And Bug Fixes: \u4f7f\u7528gtest\u6846\u67b6 \u4fee\u590dgraph\u4e3a\u7a7a\u5bfc\u81f4\u5d29\u6e83\u7684\u95ee\u9898 \u4f7f\u7528WAL\uff0c\u5927\u5e45\u63d0\u9ad8\u5199\u6548\u7387 3.2.0 (2022-07-19) Breaking Changes: Edge\u589e\u52a0timestamp\u4f5c\u4e3a\u6392\u5e8f\u952e \u8c03\u6574\u5c11\u91cfparallel plugin API Improvements And Bug Fixes: \u589e\u52a0WAL\u529f\u80fd\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5199\u64cd\u4f5c\u6027\u80fd\uff0c\u5e76\u964d\u4f4e\u78c1\u76d8\u6027\u80fd\u5bf9\u7cfb\u7edf\u6027\u80fd\u7684\u5f71\u54cd Transaction maxreaders\u7531\u9ed8\u8ba4\u503c126\u589e\u5927\u5230240\uff0c\u53ef\u540c\u65f6\u652f\u6301\u66f4\u591areaders LDBC SNB Audit 2022 \u7248\u672c 3.1.1 (2022-07-08) Breaking Changes: \u6dfb\u52a0Cypher\u67e5\u8be2\u5185\u5b58\u9650\u5236\u3002 \u6dfb\u52a0\u8fb9\u7d22\u5f15\u3002 \u6dfb\u52a0\u5168\u6587\u7d22\u5f15\u3002 \u4f18\u5316\u9ad8\u53ef\u7528\u7684\u542f\u52a8\u65b9\u5f0f\u3002 \u56fe\u8ba1\u7b97\u7cfb\u7edfGeminiLite\u5408\u5e76\u5230TuGraph\u56fe\u8ba1\u7b97\u6a21\u5757\u3002 \u56fe\u8ba1\u7b97\u6a21\u5757\u6838\u5fc3\u4ee3\u7801\u4fdd\u62a4\u3002 \u56fe\u8ba1\u7b97\u6a21\u5757IDMapping\u81ea\u9002\u5e94\u4f18\u5316\u3002 Improvements And Bug Fixes: \u4fee\u590dcypher\u67e5\u8be2filter\u4e22\u5931\u7684\u95ee\u9898\u3002 \u4fee\u590dcypher\u4e2d\u5173\u952e\u5b57\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u4fee\u590d\u70b9\u8fb9LABEL\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u4f18\u5316cypher\u67e5\u8be2\uff1a\u901a\u8fc7vid\u67e5\u627e\u70b9\u3002 \u6dfb\u52a0cpp/java/python rpc client demo\u3002 \u6dfb\u52a0prometheus\u652f\u6301\u3002 \u6dfb\u52a0DGL\u652f\u6301\u3002 \u7edf\u4e00procedure\u548cplugin\u7684\u7ed3\u679c\u3002 3.1.0 (2022-01-20) Breaking Changes: \u6570\u636e\u6a21\u578b\uff08schema\uff09\u8c03\u6574\uff1a\u589e\u52a0\u4e3b\u952e\uff1b\u589e\u52a0Edge Label\u7684\u8fde\u63a5Node Labels\u7684\u9650\u5236\uff1b \u8c03\u6574\u5bfc\u5165\u5de5\u5177lgraph_import\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f \u5bfc\u5165\u5de5\u5177lgraph_import\u53ca\u5bfc\u51fa\u5de5\u5177lgraph_export\u652f\u6301JSON\u6570\u636e\u683c\u5f0f \u8c03\u6574Cypher\u4e2dSchema\u76f8\u5173procedures\u7684\u7b7e\u540d \u8c03\u6574RPC Client\u63a5\u53e3 Improvements And Bug Fixes: \u589e\u52a0DataX\u5de5\u5177\uff0c\u652f\u6301MySQL\u3001JSON\u7b49\u6570\u636e\u6e90\u7684\u6570\u636e\u5bfc\u5165 \u589e\u52a0Cypher\u4e2d\u7528\u6237\u6743\u9650\u7ba1\u7406\u76f8\u5173procedures \u66f4\u65b0\u5f00\u53d1\u73af\u5883Dockerfiles \u4fee\u590dCall plugins\u65f6\u4ea7\u751f\u7684bug Cypher\u67e5\u8be2\u8bed\u8a00\u4f18\u5316\uff0c\u7efc\u5408\u67e5\u8be2\u6548\u7387\u5e73\u5747\u63d0\u534710\u500d 3.0.0 (2021-12-14) Breaking Changes: \u66f4\u6362\u7248\u672c\u5347\u7ea7\u89c4\u5219\uff1a\u4ece2017\u5e74\u7684version 1.0.0\u5f00\u59cb\uff0c\u6bcf\u5e74\u66f4\u65b0\u4e00\u4e2amajor version Improvements And Bug Fixes: Cypher\u6027\u80fd\u63d0\u5347\uff1a\u5f15\u5165Lazy Materialization\u673a\u5236\uff0c\u4f18\u5316count DISTINCT\u6027\u80fd \u6e90\u4ee3\u7801\u7ec4\u7ec7\u4f18\u5316 1.20.0 (2021-09-17) Breaking Changes: \u4fee\u6539\u7528\u6237\u6743\u9650\u7ba1\u7406\uff0c\u589e\u52a0\u7528\u6237\u89d2\u8272\u7ba1\u7406\uff08\u6ce8\uff1a\u9700\u8981\u91cd\u65b0\u5bfc\u5165\u6570\u636e\uff09 \u670d\u52a1\u5668\u914d\u7f6e\u9009\u9879\u53d8\u66f4\uff1alog_file\u53d8\u66f4\u4e3alog_dir Improvements And Bug Fixes: \u652f\u6301Cypher functions\u5bf9\u975e\u6cd5\u53c2\u6570\u7684\u5904\u7406\uff0c\u652f\u6301REGEX\u3001variance \u652f\u6301\u6570\u636e\u5bfc\u5165\u81ea\u5b9a\u4e49\u5206\u9694\u7b26\uff0c\u5141\u8bb8\u6570\u636e\u5bfc\u5165\u53d1\u751fparser\u9519\u8bef\u65f6\u7ee7\u7eed \u589e\u52a0python\u548ccpp rest client sdk \u4f18\u5316Cypher\u4e0d\u5b9a\u957f\u6269\u5c55\u7684\u6027\u80fd\uff0c\u5e76\u51cf\u5c11\u6269\u5c55\u8fc7\u7a0b\u5185\u5b58\u6d88\u8017 \u4fee\u590d\u5907\u4efd\u548c\u91cd\u65b0\u52a0\u8f7dplugin\u529f\u80fd \u66f4\u65b0Web\u7aef\u7248\u672c \u4fee\u590d\u6570\u636e\u5bfc\u5165\u3001Server\u3001Cypher\u7b49\u76f8\u5173bug\u82e5\u5e72 1.12.0 (2020-09-07) Breaking Changes: \u4fee\u6539\u6279\u91cf\u5bfc\u5165\u6570\u636e\u7684\u8f93\u5165\u683c\u5f0f\uff0c\u5206\u79bbschema\u5efa\u7acb\u548c\u6570\u636e\u5bfc\u5165 Improvements And Bug Fixes: \u4fee\u590dHA\u6a21\u5f0f\u4e0b\u5076\u53d1\u7684\u5185\u5b58\u9519\u8bef \u652f\u6301\u4e0a\u4f20zip\u548ccpp\u683c\u5f0f\u7684plugin \u652f\u6301clang\u7f16\u8bd1 Cypher\u652f\u6301EXPLAIN\u548cPROFILE 1.11.0 (2020-07-14) Breaking Changes: \u4fee\u6539\u5185\u90e8\u5b58\u50a8\u683c\u5f0f\uff0c\u4f18\u5316\u8bfb\u5199\u6027\u80fd\u3002\u65e7\u7248\u672c\u6570\u636e\u9700\u8981\u91cd\u65b0\u5bfc\u5165 Improvements And Bug Fixes: Cypher\u529f\u80fd\u5b8c\u5584\uff1a\u652f\u6301LDBC SNB interactive\u67e5\u8be2 \u652f\u6301DeleteLabel\u548cAlterLabel \u652f\u6301Cypher List Comprehension \u589e\u52a0\u5b50\u56fe\u63cf\u8ff0\u5b57\u6bb5 1.10.0 (2020-06-17) Breaking Changes: \u5c06BIN\u7c7b\u578b\u66f4\u6539\u4e3aBLOB\u7c7b\u578b\uff0c\u5e76\u652f\u6301\u8d85\u8fc732KB\u7684BLOB Improvements And Bug Fixes: Cypher\u652f\u6301IN {list}\uff0csize(string) \u5bf9Python plugin\u4f7f\u7528\u8fdb\u7a0b\u6c60\u4ee5\u6539\u8fdb\u6027\u80fd \u652f\u6301\u5728\u7ebf\u4fee\u6539\u6570\u636e\u5e93\u914d\u7f6e \u652f\u6301\u5728\u7ebf\u5907\u4efd\u548c\u589e\u91cf\u5907\u4efd \u652f\u6301IP\u767d\u540d\u5355 1.9.0 (2020-03-10) Improvements And Bug Fixes: Cypher\u529f\u80fd\u5b8c\u5584\uff1a\u652f\u6301LDBC SNB interactive-short\u90e8\u5206\u67e5\u8be2 lgraph_server\u589e\u52a0optimistic_txn\u9009\u9879\uff0c\u8be5\u9009\u9879\u4e3atrue\u65f6cypher\u5c06\u4f18\u5148\u4f7f\u7528multi-writer transaction \u5141\u8bb8\u591a\u4e2aLGraph\u5b9e\u4f8b\u5171\u7528\u540c\u4e00\u4e2a\u6570\u636e\u76ee\u5f55(ENABLE_SHARE_DIR) \u589e\u52a0 lgraph_export \u5de5\u5177 \u91cd\u65b0\u8bbe\u8ba1Web\u754c\u9762 1.4.5 (2019-10-15) Breaking Changes: 1. lgraph_server\u7684directory, license, web\u53c2\u6570\u9ed8\u8ba4\u6539\u4e3algraph_server\u6240\u5728\u76ee\u5f55\u4e0b\u7684lgraph_db, fma.lic\u548cresouce 2. lgraph_server\u5728-d run\uff08\u5b88\u62a4\u8fdb\u7a0b\uff09\u6a21\u5f0f\u4e0b\u7684\u9ed8\u8ba4\u5de5\u4f5c\u76ee\u5f55\u7531\u6839\u76ee\u5f55\u53d8\u4e3algraph_server\u6240\u5728\u76ee\u5f55 Improvements And Bug Fixes: 1. \u5141\u8bb8lgraph_api\u4e2d\u7684iterator\u8fdb\u884c\u8fb9\u8bfb\u8fb9\u5199\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u5176\u5b83iterator\u7684\u6b63\u786e\u6027 2. Cypher\u529f\u80fd\u5b8c\u5584\uff1aOPTIONAL MATCH\u5b50\u53e5\uff0cSET\u8bed\u53e5, DELETE\u8bed\u53e5\uff0cCASE\u8868\u8fbe\u5f0f\uff0c\u7b97\u672f\u8868\u8fbe\u5f0f\uff0cWHERE\u5b50\u53e5\u652f\u6301\u5b57\u7b26\u4e32\u5339\u914d\u7b49 3. \u524d\u7aef\u9875\u9762\u6539\u8fdb\uff1a\u589e\u52a0plugin\u7ba1\u7406\u9875\u9762 1.4.4 (2019-08-06) Breaking Changes: 1. \u5c06plugin\u4fe1\u606f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u56e0\u6b64\u6240\u6709\u5df2\u6ce8\u518cplugin\u9700\u8981\u5220\u9664\u91cd\u65b0\u52a0\u8f7d 2. \u5f00\u542fpython plugin\u529f\u80fd 3. python\u6a21\u5757\u66f4\u540d\u4e3algraph_python\uff0cLightningGraph\u7c7b\u66f4\u540d\u4e3aGraphDB 4. \u589e\u52a0cypher WITH\u8bed\u53e5\u7684\u652f\u6301 Improvements And Bug Fixes: \u5c06CMAKE_BUILD_TYPE\u9ed8\u8ba4\u6539\u56deRelease\u4ee5\u89e3\u51b3\u6027\u80fd\u95ee\u9898 \u4fee\u590dHA\u6a21\u5f0f\u4e0bsnapshot\u65e0\u6cd5\u987e\u53caplugin\u7684\u95ee\u9898 \u4f18\u5316TaskTracker\u5e26\u6765\u7684\u6027\u80fd\u635f\u5931(\u7ea62%) \u53bb\u9664C++\u7a0b\u5e8f\uff08embedded\u7a0b\u5e8f/plugin\uff09\u7f16\u8bd1\u8fc7\u7a0b\u5bf9python\u5e93\u7684\u4f9d\u8d56 1.4.3 Breaking Changes: 1. \u68c0\u67e5\u7528\u6237\u540d\uff0c\u53ea\u80fd\u4e3a0-9, a-z, A-Z\u548c\u4e0b\u5212\u7ebf\u3002 2. \u5347\u7ea7license\u673a\u5236\uff0c\u9700\u8981\u7528\u6237\u66f4\u65b0license Improvements And Bug Fixes: 1. \u652f\u6301\u4efb\u52a1\u67e5\u8be2\u548c\u4efb\u52a1\u4e2d\u6b62 2. \u4fee\u590dwindows\u4e0blgraph_server\u65e0\u6cd5\u542f\u52a8\u7684bug 3. \u5141\u8bb8\u7528\u6237\u5728embedded mode\u4e2d\u6253\u5f00\u591a\u4e2aGraphDB 4. \u53ef\u89c6\u5316\u754c\u9762\u6539\u8fdb 1.4.2 Breaking Changes: 1. \u652f\u6301HA\u6a21\u5f0fCypher\u67e5\u8be2\u8bed\u8a00 2. \u4fee\u6539\u914d\u7f6e\u9009\u9879disable_auth\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u5f53\u6b64\u9009\u9879\u4e3atrue\u65f6\uff0c\u670d\u52a1\u5668\u4e0d\u518d\u505a\u6743\u9650\u68c0\u67e5\u3002 Improvements And Bug Fixes: 1. \u4fee\u590d\u524d\u7aef\u663e\u793a 1.4.1 Breaking Changes: 1. \u6682\u65f6\u5173\u95edpython plugin\u529f\u80fd\uff0c\u56e0python plugin\u5728snapshot load\u65f6\u62a5\u9519 Improvements And Bug Fixes: 1. \u4fee\u590dbootstrap\u95ee\u9898\uff0c\u540c\u6b65\u66f4\u65b0\u6587\u6863 1.4.0 Breaking Changes: 1. \u5bfc\u5165\u5de5\u5177 lgraph_import \u547d\u4ee4\u884c\u53c2\u6570\u53d8\u5316\uff0c\u76f8\u5e94\u7684config\u6587\u4ef6\u4e2d\u5bf9\u8fb9\u6570\u636e\u7684\u63cf\u8ff0\u683c\u5f0f\u53d8\u5316\u3002 2. \u6570\u636e\u683c\u5f0f\u53d8\u5316\uff0c1.4.0\u4e4b\u524d\u7248\u672c\u751f\u6210\u7684\u6570\u636e\u9700\u8981\u91cd\u65b0\u5bfc\u5165\u3002 3. \u52a0\u8f7dPlugin\u7684\u65b9\u5f0f\u53d8\u5316\uff0c\u9700\u8981\u624b\u52a8\u5bfc\u5165Plugin\u6587\u4ef6\uff0c\u76f8\u5e94\u7684REST API\u53d8\u5316\u3002 4. Plugin\u63d0\u4f9b\u53ea\u8bfb\u548c\u8bfb\u5199\u4e24\u79cd\u6a21\u5f0f\uff0c\u5728\u52a0\u8f7d\u65f6\u6307\u5b9a\uff0c\u8bfb\u5199Plugin\u7684\u8c03\u7528\u5728HA\u6a21\u5f0f\u4e0b\u4f1a\u88ab\u590d\u5236\u3002 5. \u6539\u8fdbHA\u6a21\u5f0f\u4e0b\u7684\u670d\u52a1\u5668\u5217\u8868\u53caleader\u72b6\u6001\u83b7\u53d6\u65b9\u5f0f\uff0cREST\u62a5\u5934\u5305\u542b\u6b63\u786e\u7684redirect\u4fe1\u606f\u3002 Improvements And Bug Fixes: 1. \u4fee\u590d\u4e86REST server\u5728\u8d85\u591aclient\u548c\u957f\u8bf7\u6c42\u4e0b\u6b7b\u9501\u7684\u95ee\u9898\u3002 2. \u4fee\u590d\u4e86\u4e00\u4e9bREST API\u4e0d\u7b26\u5408\u6587\u6863\u7684\u60c5\u51b5\u3002 3. \u4fee\u590d\u4e86\u7535\u7f51\u573a\u666f\u4e0bREST API\u8de8\u57df\u8bbf\u95ee\u7684\u95ee\u9898\u3002 4. \u51cf\u5c11import\u5de5\u5177\u4f7f\u7528\u7684\u5185\u5b58\u91cf\u3002","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"zh-CN/5.supplement/changelog/#_1","text":"","title":"\u66f4\u65b0\u5185\u5bb9\u8bf4\u660e"},{"location":"zh-CN/5.supplement/changelog/#340-2023-3-11","text":"Breaking Changes: OLAP Python API support New lgraph_import implementation DataX export support Improvements And Bug Fixes: String 4MB support lgraph_result json format update Other bug fix","title":"3.4.0 (2023-3-11)"},{"location":"zh-CN/5.supplement/changelog/#334-2023-1-28","text":"Breaking Changes: None Improvements And Bug Fixes: Fix WAL sync bug Update python rest client Other bug fix","title":"3.3.4 (2023-1-28)"},{"location":"zh-CN/5.supplement/changelog/#333-2022-12-23","text":"Breaking Changes: Improve WAL performance Add English Doc Update JWT security issues Improvements And Bug Fixes: Fix edge constraints issues Add ubuntu docker Use pthread in fulltext Other bug fix","title":"3.3.3 (2022-12-23)"},{"location":"zh-CN/5.supplement/changelog/#332-2022-11-21","text":"Breaking Changes: Add OGM support Improve UT coverage to 87% Use static library for link Improvements And Bug Fixes: Fix python procedure api doc Update docs Add khop procedure Other bug fix","title":"3.3.2 (2022-11-21)"},{"location":"zh-CN/5.supplement/changelog/#331-2022-10-14","text":"Breaking Changes: Refine Graph Analytics Engine Path support in cypher Improvements And Bug Fixes: Fix RWLock Bug Rewrite docs Cleanup Dockerfile","title":"3.3.1 (2022-10-14)"},{"location":"zh-CN/5.supplement/changelog/#330-2022-08-05","text":"Breaking Changes: \u6dfb\u52a0\u5c5e\u6027\u7ea7\u522b\u7684\u8bbf\u95ee\u6743\u9650 db_async\u9009\u9879\u6539\u540d\u4e3adurable Improvements And Bug Fixes: \u4f7f\u7528gtest\u6846\u67b6 \u4fee\u590dgraph\u4e3a\u7a7a\u5bfc\u81f4\u5d29\u6e83\u7684\u95ee\u9898 \u4f7f\u7528WAL\uff0c\u5927\u5e45\u63d0\u9ad8\u5199\u6548\u7387","title":"3.3.0 (2022-08-05)"},{"location":"zh-CN/5.supplement/changelog/#320-2022-07-19","text":"Breaking Changes: Edge\u589e\u52a0timestamp\u4f5c\u4e3a\u6392\u5e8f\u952e \u8c03\u6574\u5c11\u91cfparallel plugin API Improvements And Bug Fixes: \u589e\u52a0WAL\u529f\u80fd\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5199\u64cd\u4f5c\u6027\u80fd\uff0c\u5e76\u964d\u4f4e\u78c1\u76d8\u6027\u80fd\u5bf9\u7cfb\u7edf\u6027\u80fd\u7684\u5f71\u54cd Transaction maxreaders\u7531\u9ed8\u8ba4\u503c126\u589e\u5927\u5230240\uff0c\u53ef\u540c\u65f6\u652f\u6301\u66f4\u591areaders LDBC SNB Audit 2022 \u7248\u672c","title":"3.2.0 (2022-07-19)"},{"location":"zh-CN/5.supplement/changelog/#311-2022-07-08","text":"Breaking Changes: \u6dfb\u52a0Cypher\u67e5\u8be2\u5185\u5b58\u9650\u5236\u3002 \u6dfb\u52a0\u8fb9\u7d22\u5f15\u3002 \u6dfb\u52a0\u5168\u6587\u7d22\u5f15\u3002 \u4f18\u5316\u9ad8\u53ef\u7528\u7684\u542f\u52a8\u65b9\u5f0f\u3002 \u56fe\u8ba1\u7b97\u7cfb\u7edfGeminiLite\u5408\u5e76\u5230TuGraph\u56fe\u8ba1\u7b97\u6a21\u5757\u3002 \u56fe\u8ba1\u7b97\u6a21\u5757\u6838\u5fc3\u4ee3\u7801\u4fdd\u62a4\u3002 \u56fe\u8ba1\u7b97\u6a21\u5757IDMapping\u81ea\u9002\u5e94\u4f18\u5316\u3002 Improvements And Bug Fixes: \u4fee\u590dcypher\u67e5\u8be2filter\u4e22\u5931\u7684\u95ee\u9898\u3002 \u4fee\u590dcypher\u4e2d\u5173\u952e\u5b57\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u4fee\u590d\u70b9\u8fb9LABEL\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u4f18\u5316cypher\u67e5\u8be2\uff1a\u901a\u8fc7vid\u67e5\u627e\u70b9\u3002 \u6dfb\u52a0cpp/java/python rpc client demo\u3002 \u6dfb\u52a0prometheus\u652f\u6301\u3002 \u6dfb\u52a0DGL\u652f\u6301\u3002 \u7edf\u4e00procedure\u548cplugin\u7684\u7ed3\u679c\u3002","title":"3.1.1 (2022-07-08)"},{"location":"zh-CN/5.supplement/changelog/#310-2022-01-20","text":"Breaking Changes: \u6570\u636e\u6a21\u578b\uff08schema\uff09\u8c03\u6574\uff1a\u589e\u52a0\u4e3b\u952e\uff1b\u589e\u52a0Edge Label\u7684\u8fde\u63a5Node Labels\u7684\u9650\u5236\uff1b \u8c03\u6574\u5bfc\u5165\u5de5\u5177lgraph_import\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f \u5bfc\u5165\u5de5\u5177lgraph_import\u53ca\u5bfc\u51fa\u5de5\u5177lgraph_export\u652f\u6301JSON\u6570\u636e\u683c\u5f0f \u8c03\u6574Cypher\u4e2dSchema\u76f8\u5173procedures\u7684\u7b7e\u540d \u8c03\u6574RPC Client\u63a5\u53e3 Improvements And Bug Fixes: \u589e\u52a0DataX\u5de5\u5177\uff0c\u652f\u6301MySQL\u3001JSON\u7b49\u6570\u636e\u6e90\u7684\u6570\u636e\u5bfc\u5165 \u589e\u52a0Cypher\u4e2d\u7528\u6237\u6743\u9650\u7ba1\u7406\u76f8\u5173procedures \u66f4\u65b0\u5f00\u53d1\u73af\u5883Dockerfiles \u4fee\u590dCall plugins\u65f6\u4ea7\u751f\u7684bug Cypher\u67e5\u8be2\u8bed\u8a00\u4f18\u5316\uff0c\u7efc\u5408\u67e5\u8be2\u6548\u7387\u5e73\u5747\u63d0\u534710\u500d","title":"3.1.0 (2022-01-20)"},{"location":"zh-CN/5.supplement/changelog/#300-2021-12-14","text":"Breaking Changes: \u66f4\u6362\u7248\u672c\u5347\u7ea7\u89c4\u5219\uff1a\u4ece2017\u5e74\u7684version 1.0.0\u5f00\u59cb\uff0c\u6bcf\u5e74\u66f4\u65b0\u4e00\u4e2amajor version Improvements And Bug Fixes: Cypher\u6027\u80fd\u63d0\u5347\uff1a\u5f15\u5165Lazy Materialization\u673a\u5236\uff0c\u4f18\u5316count DISTINCT\u6027\u80fd \u6e90\u4ee3\u7801\u7ec4\u7ec7\u4f18\u5316","title":"3.0.0 (2021-12-14)"},{"location":"zh-CN/5.supplement/changelog/#1200-2021-09-17","text":"Breaking Changes: \u4fee\u6539\u7528\u6237\u6743\u9650\u7ba1\u7406\uff0c\u589e\u52a0\u7528\u6237\u89d2\u8272\u7ba1\u7406\uff08\u6ce8\uff1a\u9700\u8981\u91cd\u65b0\u5bfc\u5165\u6570\u636e\uff09 \u670d\u52a1\u5668\u914d\u7f6e\u9009\u9879\u53d8\u66f4\uff1alog_file\u53d8\u66f4\u4e3alog_dir Improvements And Bug Fixes: \u652f\u6301Cypher functions\u5bf9\u975e\u6cd5\u53c2\u6570\u7684\u5904\u7406\uff0c\u652f\u6301REGEX\u3001variance \u652f\u6301\u6570\u636e\u5bfc\u5165\u81ea\u5b9a\u4e49\u5206\u9694\u7b26\uff0c\u5141\u8bb8\u6570\u636e\u5bfc\u5165\u53d1\u751fparser\u9519\u8bef\u65f6\u7ee7\u7eed \u589e\u52a0python\u548ccpp rest client sdk \u4f18\u5316Cypher\u4e0d\u5b9a\u957f\u6269\u5c55\u7684\u6027\u80fd\uff0c\u5e76\u51cf\u5c11\u6269\u5c55\u8fc7\u7a0b\u5185\u5b58\u6d88\u8017 \u4fee\u590d\u5907\u4efd\u548c\u91cd\u65b0\u52a0\u8f7dplugin\u529f\u80fd \u66f4\u65b0Web\u7aef\u7248\u672c \u4fee\u590d\u6570\u636e\u5bfc\u5165\u3001Server\u3001Cypher\u7b49\u76f8\u5173bug\u82e5\u5e72","title":"1.20.0 (2021-09-17)"},{"location":"zh-CN/5.supplement/changelog/#1120-2020-09-07","text":"Breaking Changes: \u4fee\u6539\u6279\u91cf\u5bfc\u5165\u6570\u636e\u7684\u8f93\u5165\u683c\u5f0f\uff0c\u5206\u79bbschema\u5efa\u7acb\u548c\u6570\u636e\u5bfc\u5165 Improvements And Bug Fixes: \u4fee\u590dHA\u6a21\u5f0f\u4e0b\u5076\u53d1\u7684\u5185\u5b58\u9519\u8bef \u652f\u6301\u4e0a\u4f20zip\u548ccpp\u683c\u5f0f\u7684plugin \u652f\u6301clang\u7f16\u8bd1 Cypher\u652f\u6301EXPLAIN\u548cPROFILE","title":"1.12.0 (2020-09-07)"},{"location":"zh-CN/5.supplement/changelog/#1110-2020-07-14","text":"Breaking Changes: \u4fee\u6539\u5185\u90e8\u5b58\u50a8\u683c\u5f0f\uff0c\u4f18\u5316\u8bfb\u5199\u6027\u80fd\u3002\u65e7\u7248\u672c\u6570\u636e\u9700\u8981\u91cd\u65b0\u5bfc\u5165 Improvements And Bug Fixes: Cypher\u529f\u80fd\u5b8c\u5584\uff1a\u652f\u6301LDBC SNB interactive\u67e5\u8be2 \u652f\u6301DeleteLabel\u548cAlterLabel \u652f\u6301Cypher List Comprehension \u589e\u52a0\u5b50\u56fe\u63cf\u8ff0\u5b57\u6bb5","title":"1.11.0 (2020-07-14)"},{"location":"zh-CN/5.supplement/changelog/#1100-2020-06-17","text":"Breaking Changes: \u5c06BIN\u7c7b\u578b\u66f4\u6539\u4e3aBLOB\u7c7b\u578b\uff0c\u5e76\u652f\u6301\u8d85\u8fc732KB\u7684BLOB Improvements And Bug Fixes: Cypher\u652f\u6301IN {list}\uff0csize(string) \u5bf9Python plugin\u4f7f\u7528\u8fdb\u7a0b\u6c60\u4ee5\u6539\u8fdb\u6027\u80fd \u652f\u6301\u5728\u7ebf\u4fee\u6539\u6570\u636e\u5e93\u914d\u7f6e \u652f\u6301\u5728\u7ebf\u5907\u4efd\u548c\u589e\u91cf\u5907\u4efd \u652f\u6301IP\u767d\u540d\u5355","title":"1.10.0 (2020-06-17)"},{"location":"zh-CN/5.supplement/changelog/#190-2020-03-10","text":"Improvements And Bug Fixes: Cypher\u529f\u80fd\u5b8c\u5584\uff1a\u652f\u6301LDBC SNB interactive-short\u90e8\u5206\u67e5\u8be2 lgraph_server\u589e\u52a0optimistic_txn\u9009\u9879\uff0c\u8be5\u9009\u9879\u4e3atrue\u65f6cypher\u5c06\u4f18\u5148\u4f7f\u7528multi-writer transaction \u5141\u8bb8\u591a\u4e2aLGraph\u5b9e\u4f8b\u5171\u7528\u540c\u4e00\u4e2a\u6570\u636e\u76ee\u5f55(ENABLE_SHARE_DIR) \u589e\u52a0 lgraph_export \u5de5\u5177 \u91cd\u65b0\u8bbe\u8ba1Web\u754c\u9762","title":"1.9.0 (2020-03-10)"},{"location":"zh-CN/5.supplement/changelog/#145-2019-10-15","text":"Breaking Changes: 1. lgraph_server\u7684directory, license, web\u53c2\u6570\u9ed8\u8ba4\u6539\u4e3algraph_server\u6240\u5728\u76ee\u5f55\u4e0b\u7684lgraph_db, fma.lic\u548cresouce 2. lgraph_server\u5728-d run\uff08\u5b88\u62a4\u8fdb\u7a0b\uff09\u6a21\u5f0f\u4e0b\u7684\u9ed8\u8ba4\u5de5\u4f5c\u76ee\u5f55\u7531\u6839\u76ee\u5f55\u53d8\u4e3algraph_server\u6240\u5728\u76ee\u5f55 Improvements And Bug Fixes: 1. \u5141\u8bb8lgraph_api\u4e2d\u7684iterator\u8fdb\u884c\u8fb9\u8bfb\u8fb9\u5199\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u5176\u5b83iterator\u7684\u6b63\u786e\u6027 2. Cypher\u529f\u80fd\u5b8c\u5584\uff1aOPTIONAL MATCH\u5b50\u53e5\uff0cSET\u8bed\u53e5, DELETE\u8bed\u53e5\uff0cCASE\u8868\u8fbe\u5f0f\uff0c\u7b97\u672f\u8868\u8fbe\u5f0f\uff0cWHERE\u5b50\u53e5\u652f\u6301\u5b57\u7b26\u4e32\u5339\u914d\u7b49 3. \u524d\u7aef\u9875\u9762\u6539\u8fdb\uff1a\u589e\u52a0plugin\u7ba1\u7406\u9875\u9762","title":"1.4.5 (2019-10-15)"},{"location":"zh-CN/5.supplement/changelog/#144-2019-08-06","text":"Breaking Changes: 1. \u5c06plugin\u4fe1\u606f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u56e0\u6b64\u6240\u6709\u5df2\u6ce8\u518cplugin\u9700\u8981\u5220\u9664\u91cd\u65b0\u52a0\u8f7d 2. \u5f00\u542fpython plugin\u529f\u80fd 3. python\u6a21\u5757\u66f4\u540d\u4e3algraph_python\uff0cLightningGraph\u7c7b\u66f4\u540d\u4e3aGraphDB 4. \u589e\u52a0cypher WITH\u8bed\u53e5\u7684\u652f\u6301 Improvements And Bug Fixes: \u5c06CMAKE_BUILD_TYPE\u9ed8\u8ba4\u6539\u56deRelease\u4ee5\u89e3\u51b3\u6027\u80fd\u95ee\u9898 \u4fee\u590dHA\u6a21\u5f0f\u4e0bsnapshot\u65e0\u6cd5\u987e\u53caplugin\u7684\u95ee\u9898 \u4f18\u5316TaskTracker\u5e26\u6765\u7684\u6027\u80fd\u635f\u5931(\u7ea62%) \u53bb\u9664C++\u7a0b\u5e8f\uff08embedded\u7a0b\u5e8f/plugin\uff09\u7f16\u8bd1\u8fc7\u7a0b\u5bf9python\u5e93\u7684\u4f9d\u8d56","title":"1.4.4 (2019-08-06)"},{"location":"zh-CN/5.supplement/changelog/#143","text":"Breaking Changes: 1. \u68c0\u67e5\u7528\u6237\u540d\uff0c\u53ea\u80fd\u4e3a0-9, a-z, A-Z\u548c\u4e0b\u5212\u7ebf\u3002 2. \u5347\u7ea7license\u673a\u5236\uff0c\u9700\u8981\u7528\u6237\u66f4\u65b0license Improvements And Bug Fixes: 1. \u652f\u6301\u4efb\u52a1\u67e5\u8be2\u548c\u4efb\u52a1\u4e2d\u6b62 2. \u4fee\u590dwindows\u4e0blgraph_server\u65e0\u6cd5\u542f\u52a8\u7684bug 3. \u5141\u8bb8\u7528\u6237\u5728embedded mode\u4e2d\u6253\u5f00\u591a\u4e2aGraphDB 4. \u53ef\u89c6\u5316\u754c\u9762\u6539\u8fdb","title":"1.4.3"},{"location":"zh-CN/5.supplement/changelog/#142","text":"Breaking Changes: 1. \u652f\u6301HA\u6a21\u5f0fCypher\u67e5\u8be2\u8bed\u8a00 2. \u4fee\u6539\u914d\u7f6e\u9009\u9879disable_auth\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u5f53\u6b64\u9009\u9879\u4e3atrue\u65f6\uff0c\u670d\u52a1\u5668\u4e0d\u518d\u505a\u6743\u9650\u68c0\u67e5\u3002 Improvements And Bug Fixes: 1. \u4fee\u590d\u524d\u7aef\u663e\u793a","title":"1.4.2"},{"location":"zh-CN/5.supplement/changelog/#141","text":"Breaking Changes: 1. \u6682\u65f6\u5173\u95edpython plugin\u529f\u80fd\uff0c\u56e0python plugin\u5728snapshot load\u65f6\u62a5\u9519 Improvements And Bug Fixes: 1. \u4fee\u590dbootstrap\u95ee\u9898\uff0c\u540c\u6b65\u66f4\u65b0\u6587\u6863","title":"1.4.1"},{"location":"zh-CN/5.supplement/changelog/#140","text":"Breaking Changes: 1. \u5bfc\u5165\u5de5\u5177 lgraph_import \u547d\u4ee4\u884c\u53c2\u6570\u53d8\u5316\uff0c\u76f8\u5e94\u7684config\u6587\u4ef6\u4e2d\u5bf9\u8fb9\u6570\u636e\u7684\u63cf\u8ff0\u683c\u5f0f\u53d8\u5316\u3002 2. \u6570\u636e\u683c\u5f0f\u53d8\u5316\uff0c1.4.0\u4e4b\u524d\u7248\u672c\u751f\u6210\u7684\u6570\u636e\u9700\u8981\u91cd\u65b0\u5bfc\u5165\u3002 3. \u52a0\u8f7dPlugin\u7684\u65b9\u5f0f\u53d8\u5316\uff0c\u9700\u8981\u624b\u52a8\u5bfc\u5165Plugin\u6587\u4ef6\uff0c\u76f8\u5e94\u7684REST API\u53d8\u5316\u3002 4. Plugin\u63d0\u4f9b\u53ea\u8bfb\u548c\u8bfb\u5199\u4e24\u79cd\u6a21\u5f0f\uff0c\u5728\u52a0\u8f7d\u65f6\u6307\u5b9a\uff0c\u8bfb\u5199Plugin\u7684\u8c03\u7528\u5728HA\u6a21\u5f0f\u4e0b\u4f1a\u88ab\u590d\u5236\u3002 5. \u6539\u8fdbHA\u6a21\u5f0f\u4e0b\u7684\u670d\u52a1\u5668\u5217\u8868\u53caleader\u72b6\u6001\u83b7\u53d6\u65b9\u5f0f\uff0cREST\u62a5\u5934\u5305\u542b\u6b63\u786e\u7684redirect\u4fe1\u606f\u3002 Improvements And Bug Fixes: 1. \u4fee\u590d\u4e86REST server\u5728\u8d85\u591aclient\u548c\u957f\u8bf7\u6c42\u4e0b\u6b7b\u9501\u7684\u95ee\u9898\u3002 2. \u4fee\u590d\u4e86\u4e00\u4e9bREST API\u4e0d\u7b26\u5408\u6587\u6863\u7684\u60c5\u51b5\u3002 3. \u4fee\u590d\u4e86\u7535\u7f51\u573a\u666f\u4e0bREST API\u8de8\u57df\u8bbf\u95ee\u7684\u95ee\u9898\u3002 4. \u51cf\u5c11import\u5de5\u5177\u4f7f\u7528\u7684\u5185\u5b58\u91cf\u3002","title":"1.4.0"},{"location":"zh-CN/6.community/1.contributing/","text":"TuGraph \u8d21\u732e\u6307\u5357 0. \u524d\u8a00 \u611f\u8c22\u4f60\u4e3aTuGraph\u505a\u51fa\u8d21\u732e\uff0c\u6211\u4eec\u7531\u8877\u5730\u5e0c\u671b\u6709\u66f4\u591a\u793e\u533a\u7684\u540c\u5b66\u52a0\u5165\u8fdb\u6765\uff0c\u4e00\u8d77\u5efa\u8bbe\u4e00\u4e2a\u66f4\u597d\u7684\u56fe\u6570\u636e\u5e93\u9879\u76ee\u3002 \u5728\u8d21\u732e\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u60a8\u7a0d\u5fae\u82b1\u4e00\u4e9b\u65f6\u95f4\u4e86\u89e3\u4e3aTuGraph\u8d21\u732e\u4ee3\u7801\u7684\u6d41\u7a0b\uff0c\u5e76\u9605\u8bfb\u300a\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u300b\uff0c\u53c2\u4e0e\u8d21\u732e\u5219\u89c6\u4e3a\u540c\u610f\u4e0a\u8ff0\u534f\u8bae\u3002 \u4e2a\u4eba\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff1a[4.individual_cla.md] \u516c\u53f8\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff1a[5.corporate_cla.md] 1. \u8d21\u732e\u4ec0\u4e48 \u6211\u4eec\u968f\u65f6\u90fd\u6b22\u8fce\u4efb\u4f55\u8d21\u732e\uff0c\u65e0\u8bba\u662f\u7b80\u5355\u7684\u9519\u522b\u5b57\u4fee\u6b63\uff0cBUG \u4fee\u590d\u8fd8\u662f\u589e\u52a0\u65b0\u529f\u80fd\u3002\u8bf7\u8e0a\u8dc3\u63d0\u51fa\u95ee\u9898\u6216\u53d1\u8d77 PR\u3002\u6211\u4eec\u540c\u6837\u91cd\u89c6\u6587\u6863\u4ee5\u53ca\u4e0e\u5176\u5b83\u5f00\u6e90\u9879\u76ee\u7684\u6574\u5408\uff0c\u6b22\u8fce\u5728\u8fd9\u65b9\u9762\u505a\u51fa\u8d21\u732e\u3002 \u5bf9\u4e8e\u4efb\u4f55\u4fee\u6539\uff0c\u5c24\u5176\u662f\u8f83\u4e3a\u590d\u6742\u4fee\u6539\uff0c\u5efa\u8bae\u5efa\u4e00\u4e2aissue \uff0c\u6309\u7167BUG\u6216\u8005PR\u7684\u6a21\u677f\u586b\u5199\u3002 2. \u51c6\u5907\u5de5\u4f5c \u8d21\u732e\u4ee3\u7801\u524d\u9700\u8981\u5148\u4e86\u89e3 git \u5de5\u5177\u7684\u4f7f\u7528\u548c GitHub \u7f51\u7ad9\u7684\u4f7f\u7528\u3002 3. \u8d21\u732e\u4ee3\u7801\u6d41\u7a0b 3.1 \u63d0\u4ea4issue \u4e0d\u8bba\u60a8\u662f\u4fee\u590d TuGraph \u7684 bug \u8fd8\u662f\u65b0\u589e TuGraph \u7684\u529f\u80fd\uff0c\u5728\u60a8\u63d0\u4ea4\u4ee3\u7801\u4e4b\u524d\uff0c\u5728 TuGraph \u7684 GitHub \u4e0a\u63d0\u4ea4\u4e00\u4e2a issue\uff0c\u63cf\u8ff0\u60a8\u8981\u4fee\u590d\u7684\u95ee\u9898\u6216\u8005\u8981\u589e\u52a0\u7684\u529f\u80fd\u3002\u8fd9\u4e48\u505a\u6709\u51e0\u4e2a\u597d\u5904: \u4e0d\u4f1a\u4e0e\u5176\u5b83\u5f00\u53d1\u8005\u6216\u662f\u4ed6\u4eec\u5bf9\u8fd9\u4e2a\u9879\u76ee\u7684\u8ba1\u5212\u53d1\u751f\u51b2\u7a81\uff0c\u4ea7\u751f\u91cd\u590d\u5de5\u4f5c\u3002 TuGraph \u7684\u7ef4\u62a4\u4eba\u5458\u4f1a\u5bf9\u60a8\u63d0\u7684 bug \u6216\u8005\u65b0\u589e\u529f\u80fd\u8fdb\u884c\u76f8\u5173\u8ba8\u8bba\uff0c\u786e\u5b9a\u8be5\u4fee\u6539\u662f\u4e0d\u662f\u5fc5\u8981\uff0c\u6709\u6ca1\u6709\u63d0\u5347\u7684\u7a7a\u95f4\u6216\u66f4\u597d\u7684\u529e\u6cd5\u3002 \u5728\u8fbe\u6210\u4e00\u81f4\u540e\u518d\u5f00\u53d1\uff0c\u5e76\u63d0\u4ea4\u4ee3\u7801\uff0c\u51cf\u5c11\u53cc\u65b9\u6c9f\u901a\u6210\u672c\uff0c\u4e5f\u51cf\u5c11 pull request \u88ab\u62d2\u7edd\u7684\u60c5\u51b5\u3002 3.2 \u83b7\u53d6\u6e90\u7801 \u8981\u4fee\u6539\u6216\u65b0\u589e\u529f\u80fd\uff0c\u5728\u63d0 issue \u540e\uff0cfork\u4e00\u4efd TuGraph Master\u4ee3\u7801\u5230\u60a8\u7684\u4ee3\u7801\u4ed3\u5e93\u3002 3.3 \u62c9\u5206\u652f TuGraph \u6240\u6709\u4fee\u6539\u90fd\u5728\u5206\u652f\u4e0a\u8fdb\u884c\uff0c\u4fee\u6539\u5b8c\u540e\u63d0\u4ea4 pull request\uff0c\u5728 Code Review \u540e\u7531\u9879\u76ee\u7ef4\u62a4\u4eba\u5458 Merge \u5230 Master\u3002 \u56e0\u6b64\uff0c\u5728\u83b7\u53d6\u6e90\u7801\u6b65\u9aa4\u4ecb\u7ecd\u540e\uff0c\u60a8\u9700\u8981: \u4e0b\u8f7d\u4ee3\u7801\u5230\u672c\u5730\uff0c\u8fd9\u4e00\u6b65\u60a8\u53ef\u4ee5\u9009\u62e9git/https\u65b9\u5f0f\uff0c\u8fd1\u5e74github\u7684\u6743\u9650\u8981\u6c42\u66f4\u52a0\u4e25\u683c\uff0c\u6bd4\u5982git\u65b9\u5f0f\u9700\u8981\u66f4\u590d\u6742\u7684ssh key( https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent )\uff0chttps\u65b9\u5f0f\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u7528\u6237\u540d\u5bc6\u7801\u9a8c\u8bc1\uff0c\u8bf7\u6309\u7167\u6307\u5f15\u6388\u6743\u3002 git clone https://github.com/\u60a8\u7684\u8d26\u53f7\u540d/tugraph-db \u62c9\u5206\u652f\u51c6\u5907\u4fee\u6539\u4ee3\u7801: git branch add_xxx_feature \u6267\u884c\u5b8c\u4e0a\u8ff0\u547d\u4ee4\u540e\uff0c\u60a8\u7684\u4ee3\u7801\u4ed3\u5e93\u5c31\u5207\u6362\u5230\u76f8\u5e94\u5206\u652f\u4e86\u3002\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u60a8\u5f53\u524d\u5206\u652f: git branch -a \u5982\u679c\u60a8\u60f3\u5207\u6362\u56de Master\uff0c\u6267\u884c\u4e0b\u9762\u547d\u4ee4: git checkout -b master \u5982\u679c\u60a8\u60f3\u5207\u6362\u56de\u5206\u652f\uff0c\u6267\u884c\u4e0b\u9762\u547d\u4ee4: git checkout -b \"branchName\" 3.4 \u914d\u7f6e Github \u4fe1\u606f \u5728\u60a8\u7684\u673a\u5668\u6267\u884c git config --list \uff0c\u67e5\u770b git \u7684\u5168\u5c40\u7528\u6237\u540d\u548c\u90ae\u7bb1\u3002\u68c0\u67e5\u663e\u793a\u7684 user.name \u548c user.email \u662f\u4e0d\u662f\u4e0e\u81ea\u5df1 github \u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1\u76f8\u5339\u914d\u3002 \u5982\u679c\u516c\u53f8\u5185\u90e8\u6709\u81ea\u5df1\u7684 gitlab \u6216\u8005\u4f7f\u7528\u4e86\u5176\u4ed6\u5546\u4e1a\u5316\u7684 gitlab\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u5339\u914d\u7684\u60c5\u51b5\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u9700\u8981\u4e3a tugraph-db \u9879\u76ee\u5355\u72ec\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u90ae\u7bb1\u3002\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u90ae\u7bb1\u7684\u65b9\u5f0f\u8bf7\u53c2\u8003 github \u5b98\u65b9\u6587\u6863\u3002 3.4 \u4fee\u6539\u4ee3\u7801\u63d0\u4ea4\u5230\u672c\u5730 \u62c9\u5b8c\u5206\u652f\u540e\uff0c\u5c31\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\u4e86\u3002 \u4fee\u6539\u4ee3\u7801\u6ce8\u610f\u4e8b\u9879 \u4ee3\u7801\u2edb\u683c\u4fdd\u6301\u4e00\u81f4\uff1aTuGraph \u901a\u8fc7 cpplint \u6765\u4fdd\u6301\u4ee3\u7801\u683c\u5f0f\u4e00\u81f4\uff0cIDE\u53ef\u4ee5\u901a\u8fc7.clang\u6765\u914d\u7f6e\u98ce\u683c\u3002\u5728\u63d0\u4ea4\u4ee3\u7801\u524d\uff0c\u52a1\u5fc5\u672c\u5730\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\uff0c\u5426\u5219ACI\u5c06\u62a5\u9519\u3002 \u8865\u5145\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\uff1a\u65b0\u6709\u4fee\u6539\u5e94\u8be5\u901a\u8fc7\u5df2\u6709\u7684\u5355\u5143\u6d4b\u8bd5 \u5e94\u8be5\u63d0\u4f9b\u65b0\u7684\u5355\u5143\u6d4b\u8bd5\u6765\u8bc1\u660e\u4ee5\u524d\u7684\u4ee3\u7801\u5b58\u5728 bug\uff0c\u800c \u65b0\u7684\u4ee3\u7801\u5df2\u7ecf\u89e3\u51b3\u4e86\u8fd9\u4e9b bug \u60a8\u53ef\u4ee5\u7528\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5: ./unit_test \u4e5f\u53ef\u4ee5\u901a\u8fc7IDE\u6765\u8f85\u52a9\u8fd0\u884c\u3002 \u5176\u5b83\u6ce8\u610f\u4e8b\u9879 \u8bf7\u4fdd\u6301\u60a8\u7f16\u8f91\u7684\u4ee3\u7801\u7684\u539f\u6709\u2edb\u683c\uff0c\u5c24\u5176\u662f\u7a7a\u683c\u6362\u884c\u7b49\u3002 \u5bf9\u4e8e\u65e0\u7528\u7684\u6ce8\u91ca\uff0c\u8bf7\u76f4\u63a5\u5220\u9664\u3002 \u5bf9\u903b\u8f91\u548c\u529f\u80fd\u4e0d\u5bb9\u6613\u88ab\u7406\u89e3\u7684\u5730\u65b9\u6dfb\u52a0\u6ce8\u91ca\u3002 \u53ca\u65f6\u66f4\u65b0\u6587\u6863\u3002 \u4fee\u6539\u5b8c\u4ee3\u7801\u540e\uff0c\u8bf7\u6309\u7167\u5982\u4e0b\u683c\u5f0f\u6267\u884c\u547d\u4ee4\u63d0\u4ea4\u6240\u6709\u7684\u4fee\u6539\u5230\u672c\u5730: git commit -am '(feat) \u6dfb\u52a0xx\u529f\u80fd' git commit -am '(fix) \u4fee\u590dxx\u95ee\u9898'` 3.4 \u63d0\u4ea4\u4ee3\u7801\u5230\u8fdc\u7a0b\u4ed3\u5e93 \u5728\u4ee3\u7801\u63d0\u4ea4\u5230\u672c\u5730\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\u540c\u6b65\u4ee3\u7801\u4e86\u3002\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u63d0\u4ea4\u672c\u5730\u4fee\u6539\u5230 github \u4e0a: git push origin \"branchname\" \u5982\u679c\u524d\u9762\u60a8\u662f\u901a\u8fc7 fork \u6765\u505a\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684 origin \u662f push \u5230\u60a8\u7684\u4ee3\u7801\u4ed3\u5e93\uff0c\u800c\u4e0d\u662f TuGraph \u7684\u4ee3\u7801\u4ed3\u5e93\u3002 \u63d0\u4ea4\u5408\u5e76\u4ee3\u7801\u5230 Master \u7684\u8bf7\u6c42 \u5728\u7684\u4ee3\u7801\u63d0\u4ea4\u5230 GitHub \u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u6765\u628a\u60a8\u6539\u597d\u7684\u4ee3\u7801\u5408\u5165 TuGraph Master \u4ee3\u7801\u4e86\u3002\u6b64\u65f6\u60a8\u9700\u8981\u8fdb\u5165\u60a8\u5728 GitHub \u4e0a\u7684\u5bf9\u5e94\u4ed3\u5e93\uff0c\u6309\u53f3\u4e0a\u2ec6\u7684 pull request \u6309\u94ae\u3002\u9009\u62e9\u76ee\u6807\u5206\u652f\uff0c\u4e00\u822c\u5c31\u662f master\uff0c\u7cfb\u7edf\u4f1a\u901a\u77e5 TuGraph \u7684\u4eba\u5458\uff0c TuGraph \u4eba\u5458\u4f1a Review \u60a8\u7684\u4ee3\u7801\uff0c\u7b26\u5408\u8981\u6c42\u540e\u5c31\u4f1a\u5408\u5165\u4e3b\u5e72\uff0c\u6210\u4e3a TuGraph \u7684\u4e00\u90e8\u5206\u3002 \u8bf7\u6ce8\u610f\u4f1a\u81ea\u52a8\u68c0\u67e5CI\uff0c\u4ee5\u53ca\u6240\u6709Commits\u4e2d\u7684\u8d21\u732e\u8005\u662f\u5426\u7b7e\u7f72\u4e86cla\uff0c\u901a\u8fc7\u540e\u4f1a\u6709\u7eff\u8272\u7684\u6807\u8bc6\u3002 3.5 \u4ee3\u7801 Review \u5728\u60a8\u63d0\u4ea4\u4ee3\u7801\u540e\uff0c\u60a8\u7684\u4ee3\u7801\u4f1a\u88ab\u6307\u6d3e\u7ed9\u7ef4\u62a4\u4eba\u5458 Review\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002\u5982\u679c\u4e24\u4e2a\u5de5\u4f5c\u65e5\u540e\uff0c\u4ecd\u7136\u6ca1\u6709\u4eba\u5bf9\u60a8\u7684\u63d0\u4ea4\u7ed9\u4e88\u4efb\u4f55\u56de\u590d\uff0c\u53ef\u4ee5\u5728 PR \u4e0b\u9762\u7559\u8a00\uff0c\u5e76 @ \u5bf9\u5e94\u7684\u4eba\u5458\u3002 \u5bf9\u4e8e\u4ee3\u7801 Review \u7684\u610f\u2ec5\u4f1a\u76f4\u63a5\u5907\u6ce8\u5230\u5230\u5bf9\u5e94 PR \u6216\u8005 Issue\u3002\u5982\u679c\u89c9\u5f97\u5efa\u8bae\u662f\u5408\u7406\u7684\uff0c\u4e5f\u8bf7\u60a8\u628a\u8fd9\u4e9b\u5efa\u8bae\u66f4\u65b0\u5230\u60a8\u7684\u4ee3\u7801\u4e2d\u3002 3.6 \u5408\u5e76\u4ee3\u7801\u5230Master \u5728\u4ee3\u7801 Review \u901a\u8fc7\u540e\uff0c\u5c31\u7531 TuGraph \u7ef4\u62a4\u4eba\u5458\u64cd\u4f5c\u5408\u5165 Master\u4e86\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u4eba\u5458\u53ef\u80fd\u4f1a\u6307\u5b9a\u7684\u65b0\u7684Reviewer\uff0c\u63d0\u51fa\u65b0\u7684\u610f\u89c1\u9700\u8981\u4fee\u6539\u3002\u4e00\u822c\u8fd9\u4e00\u6b65\u4e0d\u7528\u53c2\u4e0e\uff0c\u4ee3\u7801\u5408\u5e76\u4e4b\u540e\uff0c\u60a8\u4f1a\u6536\u5230\u5408\u5e76\u6210\u529f\u7684\u63d0\u793a\u3002","title":"\u53c2\u4e0e\u8d21\u732e"},{"location":"zh-CN/6.community/1.contributing/#tugraph","text":"","title":"TuGraph \u8d21\u732e\u6307\u5357"},{"location":"zh-CN/6.community/1.contributing/#0","text":"\u611f\u8c22\u4f60\u4e3aTuGraph\u505a\u51fa\u8d21\u732e\uff0c\u6211\u4eec\u7531\u8877\u5730\u5e0c\u671b\u6709\u66f4\u591a\u793e\u533a\u7684\u540c\u5b66\u52a0\u5165\u8fdb\u6765\uff0c\u4e00\u8d77\u5efa\u8bbe\u4e00\u4e2a\u66f4\u597d\u7684\u56fe\u6570\u636e\u5e93\u9879\u76ee\u3002 \u5728\u8d21\u732e\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u60a8\u7a0d\u5fae\u82b1\u4e00\u4e9b\u65f6\u95f4\u4e86\u89e3\u4e3aTuGraph\u8d21\u732e\u4ee3\u7801\u7684\u6d41\u7a0b\uff0c\u5e76\u9605\u8bfb\u300a\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u300b\uff0c\u53c2\u4e0e\u8d21\u732e\u5219\u89c6\u4e3a\u540c\u610f\u4e0a\u8ff0\u534f\u8bae\u3002 \u4e2a\u4eba\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff1a[4.individual_cla.md] \u516c\u53f8\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff1a[5.corporate_cla.md]","title":"0. \u524d\u8a00"},{"location":"zh-CN/6.community/1.contributing/#1","text":"\u6211\u4eec\u968f\u65f6\u90fd\u6b22\u8fce\u4efb\u4f55\u8d21\u732e\uff0c\u65e0\u8bba\u662f\u7b80\u5355\u7684\u9519\u522b\u5b57\u4fee\u6b63\uff0cBUG \u4fee\u590d\u8fd8\u662f\u589e\u52a0\u65b0\u529f\u80fd\u3002\u8bf7\u8e0a\u8dc3\u63d0\u51fa\u95ee\u9898\u6216\u53d1\u8d77 PR\u3002\u6211\u4eec\u540c\u6837\u91cd\u89c6\u6587\u6863\u4ee5\u53ca\u4e0e\u5176\u5b83\u5f00\u6e90\u9879\u76ee\u7684\u6574\u5408\uff0c\u6b22\u8fce\u5728\u8fd9\u65b9\u9762\u505a\u51fa\u8d21\u732e\u3002 \u5bf9\u4e8e\u4efb\u4f55\u4fee\u6539\uff0c\u5c24\u5176\u662f\u8f83\u4e3a\u590d\u6742\u4fee\u6539\uff0c\u5efa\u8bae\u5efa\u4e00\u4e2aissue \uff0c\u6309\u7167BUG\u6216\u8005PR\u7684\u6a21\u677f\u586b\u5199\u3002","title":"1. \u8d21\u732e\u4ec0\u4e48"},{"location":"zh-CN/6.community/1.contributing/#2","text":"\u8d21\u732e\u4ee3\u7801\u524d\u9700\u8981\u5148\u4e86\u89e3 git \u5de5\u5177\u7684\u4f7f\u7528\u548c GitHub \u7f51\u7ad9\u7684\u4f7f\u7528\u3002","title":"2. \u51c6\u5907\u5de5\u4f5c"},{"location":"zh-CN/6.community/1.contributing/#3","text":"","title":"3. \u8d21\u732e\u4ee3\u7801\u6d41\u7a0b"},{"location":"zh-CN/6.community/1.contributing/#31-issue","text":"\u4e0d\u8bba\u60a8\u662f\u4fee\u590d TuGraph \u7684 bug \u8fd8\u662f\u65b0\u589e TuGraph \u7684\u529f\u80fd\uff0c\u5728\u60a8\u63d0\u4ea4\u4ee3\u7801\u4e4b\u524d\uff0c\u5728 TuGraph \u7684 GitHub \u4e0a\u63d0\u4ea4\u4e00\u4e2a issue\uff0c\u63cf\u8ff0\u60a8\u8981\u4fee\u590d\u7684\u95ee\u9898\u6216\u8005\u8981\u589e\u52a0\u7684\u529f\u80fd\u3002\u8fd9\u4e48\u505a\u6709\u51e0\u4e2a\u597d\u5904: \u4e0d\u4f1a\u4e0e\u5176\u5b83\u5f00\u53d1\u8005\u6216\u662f\u4ed6\u4eec\u5bf9\u8fd9\u4e2a\u9879\u76ee\u7684\u8ba1\u5212\u53d1\u751f\u51b2\u7a81\uff0c\u4ea7\u751f\u91cd\u590d\u5de5\u4f5c\u3002 TuGraph \u7684\u7ef4\u62a4\u4eba\u5458\u4f1a\u5bf9\u60a8\u63d0\u7684 bug \u6216\u8005\u65b0\u589e\u529f\u80fd\u8fdb\u884c\u76f8\u5173\u8ba8\u8bba\uff0c\u786e\u5b9a\u8be5\u4fee\u6539\u662f\u4e0d\u662f\u5fc5\u8981\uff0c\u6709\u6ca1\u6709\u63d0\u5347\u7684\u7a7a\u95f4\u6216\u66f4\u597d\u7684\u529e\u6cd5\u3002 \u5728\u8fbe\u6210\u4e00\u81f4\u540e\u518d\u5f00\u53d1\uff0c\u5e76\u63d0\u4ea4\u4ee3\u7801\uff0c\u51cf\u5c11\u53cc\u65b9\u6c9f\u901a\u6210\u672c\uff0c\u4e5f\u51cf\u5c11 pull request \u88ab\u62d2\u7edd\u7684\u60c5\u51b5\u3002","title":"3.1 \u63d0\u4ea4issue"},{"location":"zh-CN/6.community/1.contributing/#32","text":"\u8981\u4fee\u6539\u6216\u65b0\u589e\u529f\u80fd\uff0c\u5728\u63d0 issue \u540e\uff0cfork\u4e00\u4efd TuGraph Master\u4ee3\u7801\u5230\u60a8\u7684\u4ee3\u7801\u4ed3\u5e93\u3002","title":"3.2 \u83b7\u53d6\u6e90\u7801"},{"location":"zh-CN/6.community/1.contributing/#33","text":"TuGraph \u6240\u6709\u4fee\u6539\u90fd\u5728\u5206\u652f\u4e0a\u8fdb\u884c\uff0c\u4fee\u6539\u5b8c\u540e\u63d0\u4ea4 pull request\uff0c\u5728 Code Review \u540e\u7531\u9879\u76ee\u7ef4\u62a4\u4eba\u5458 Merge \u5230 Master\u3002 \u56e0\u6b64\uff0c\u5728\u83b7\u53d6\u6e90\u7801\u6b65\u9aa4\u4ecb\u7ecd\u540e\uff0c\u60a8\u9700\u8981: \u4e0b\u8f7d\u4ee3\u7801\u5230\u672c\u5730\uff0c\u8fd9\u4e00\u6b65\u60a8\u53ef\u4ee5\u9009\u62e9git/https\u65b9\u5f0f\uff0c\u8fd1\u5e74github\u7684\u6743\u9650\u8981\u6c42\u66f4\u52a0\u4e25\u683c\uff0c\u6bd4\u5982git\u65b9\u5f0f\u9700\u8981\u66f4\u590d\u6742\u7684ssh key( https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent )\uff0chttps\u65b9\u5f0f\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u7528\u6237\u540d\u5bc6\u7801\u9a8c\u8bc1\uff0c\u8bf7\u6309\u7167\u6307\u5f15\u6388\u6743\u3002 git clone https://github.com/\u60a8\u7684\u8d26\u53f7\u540d/tugraph-db \u62c9\u5206\u652f\u51c6\u5907\u4fee\u6539\u4ee3\u7801: git branch add_xxx_feature \u6267\u884c\u5b8c\u4e0a\u8ff0\u547d\u4ee4\u540e\uff0c\u60a8\u7684\u4ee3\u7801\u4ed3\u5e93\u5c31\u5207\u6362\u5230\u76f8\u5e94\u5206\u652f\u4e86\u3002\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u60a8\u5f53\u524d\u5206\u652f: git branch -a \u5982\u679c\u60a8\u60f3\u5207\u6362\u56de Master\uff0c\u6267\u884c\u4e0b\u9762\u547d\u4ee4: git checkout -b master \u5982\u679c\u60a8\u60f3\u5207\u6362\u56de\u5206\u652f\uff0c\u6267\u884c\u4e0b\u9762\u547d\u4ee4: git checkout -b \"branchName\"","title":"3.3 \u62c9\u5206\u652f"},{"location":"zh-CN/6.community/1.contributing/#34-github","text":"\u5728\u60a8\u7684\u673a\u5668\u6267\u884c git config --list \uff0c\u67e5\u770b git \u7684\u5168\u5c40\u7528\u6237\u540d\u548c\u90ae\u7bb1\u3002\u68c0\u67e5\u663e\u793a\u7684 user.name \u548c user.email \u662f\u4e0d\u662f\u4e0e\u81ea\u5df1 github \u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1\u76f8\u5339\u914d\u3002 \u5982\u679c\u516c\u53f8\u5185\u90e8\u6709\u81ea\u5df1\u7684 gitlab \u6216\u8005\u4f7f\u7528\u4e86\u5176\u4ed6\u5546\u4e1a\u5316\u7684 gitlab\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u5339\u914d\u7684\u60c5\u51b5\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u9700\u8981\u4e3a tugraph-db \u9879\u76ee\u5355\u72ec\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u90ae\u7bb1\u3002\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u90ae\u7bb1\u7684\u65b9\u5f0f\u8bf7\u53c2\u8003 github \u5b98\u65b9\u6587\u6863\u3002","title":"3.4 \u914d\u7f6e Github \u4fe1\u606f"},{"location":"zh-CN/6.community/1.contributing/#34","text":"\u62c9\u5b8c\u5206\u652f\u540e\uff0c\u5c31\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\u4e86\u3002 \u4fee\u6539\u4ee3\u7801\u6ce8\u610f\u4e8b\u9879 \u4ee3\u7801\u2edb\u683c\u4fdd\u6301\u4e00\u81f4\uff1aTuGraph \u901a\u8fc7 cpplint \u6765\u4fdd\u6301\u4ee3\u7801\u683c\u5f0f\u4e00\u81f4\uff0cIDE\u53ef\u4ee5\u901a\u8fc7.clang\u6765\u914d\u7f6e\u98ce\u683c\u3002\u5728\u63d0\u4ea4\u4ee3\u7801\u524d\uff0c\u52a1\u5fc5\u672c\u5730\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\uff0c\u5426\u5219ACI\u5c06\u62a5\u9519\u3002 \u8865\u5145\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\uff1a\u65b0\u6709\u4fee\u6539\u5e94\u8be5\u901a\u8fc7\u5df2\u6709\u7684\u5355\u5143\u6d4b\u8bd5 \u5e94\u8be5\u63d0\u4f9b\u65b0\u7684\u5355\u5143\u6d4b\u8bd5\u6765\u8bc1\u660e\u4ee5\u524d\u7684\u4ee3\u7801\u5b58\u5728 bug\uff0c\u800c \u65b0\u7684\u4ee3\u7801\u5df2\u7ecf\u89e3\u51b3\u4e86\u8fd9\u4e9b bug \u60a8\u53ef\u4ee5\u7528\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5: ./unit_test \u4e5f\u53ef\u4ee5\u901a\u8fc7IDE\u6765\u8f85\u52a9\u8fd0\u884c\u3002 \u5176\u5b83\u6ce8\u610f\u4e8b\u9879 \u8bf7\u4fdd\u6301\u60a8\u7f16\u8f91\u7684\u4ee3\u7801\u7684\u539f\u6709\u2edb\u683c\uff0c\u5c24\u5176\u662f\u7a7a\u683c\u6362\u884c\u7b49\u3002 \u5bf9\u4e8e\u65e0\u7528\u7684\u6ce8\u91ca\uff0c\u8bf7\u76f4\u63a5\u5220\u9664\u3002 \u5bf9\u903b\u8f91\u548c\u529f\u80fd\u4e0d\u5bb9\u6613\u88ab\u7406\u89e3\u7684\u5730\u65b9\u6dfb\u52a0\u6ce8\u91ca\u3002 \u53ca\u65f6\u66f4\u65b0\u6587\u6863\u3002 \u4fee\u6539\u5b8c\u4ee3\u7801\u540e\uff0c\u8bf7\u6309\u7167\u5982\u4e0b\u683c\u5f0f\u6267\u884c\u547d\u4ee4\u63d0\u4ea4\u6240\u6709\u7684\u4fee\u6539\u5230\u672c\u5730: git commit -am '(feat) \u6dfb\u52a0xx\u529f\u80fd' git commit -am '(fix) \u4fee\u590dxx\u95ee\u9898'`","title":"3.4 \u4fee\u6539\u4ee3\u7801\u63d0\u4ea4\u5230\u672c\u5730"},{"location":"zh-CN/6.community/1.contributing/#34_1","text":"\u5728\u4ee3\u7801\u63d0\u4ea4\u5230\u672c\u5730\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\u540c\u6b65\u4ee3\u7801\u4e86\u3002\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u63d0\u4ea4\u672c\u5730\u4fee\u6539\u5230 github \u4e0a: git push origin \"branchname\" \u5982\u679c\u524d\u9762\u60a8\u662f\u901a\u8fc7 fork \u6765\u505a\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684 origin \u662f push \u5230\u60a8\u7684\u4ee3\u7801\u4ed3\u5e93\uff0c\u800c\u4e0d\u662f TuGraph \u7684\u4ee3\u7801\u4ed3\u5e93\u3002 \u63d0\u4ea4\u5408\u5e76\u4ee3\u7801\u5230 Master \u7684\u8bf7\u6c42 \u5728\u7684\u4ee3\u7801\u63d0\u4ea4\u5230 GitHub \u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u6765\u628a\u60a8\u6539\u597d\u7684\u4ee3\u7801\u5408\u5165 TuGraph Master \u4ee3\u7801\u4e86\u3002\u6b64\u65f6\u60a8\u9700\u8981\u8fdb\u5165\u60a8\u5728 GitHub \u4e0a\u7684\u5bf9\u5e94\u4ed3\u5e93\uff0c\u6309\u53f3\u4e0a\u2ec6\u7684 pull request \u6309\u94ae\u3002\u9009\u62e9\u76ee\u6807\u5206\u652f\uff0c\u4e00\u822c\u5c31\u662f master\uff0c\u7cfb\u7edf\u4f1a\u901a\u77e5 TuGraph \u7684\u4eba\u5458\uff0c TuGraph \u4eba\u5458\u4f1a Review \u60a8\u7684\u4ee3\u7801\uff0c\u7b26\u5408\u8981\u6c42\u540e\u5c31\u4f1a\u5408\u5165\u4e3b\u5e72\uff0c\u6210\u4e3a TuGraph \u7684\u4e00\u90e8\u5206\u3002 \u8bf7\u6ce8\u610f\u4f1a\u81ea\u52a8\u68c0\u67e5CI\uff0c\u4ee5\u53ca\u6240\u6709Commits\u4e2d\u7684\u8d21\u732e\u8005\u662f\u5426\u7b7e\u7f72\u4e86cla\uff0c\u901a\u8fc7\u540e\u4f1a\u6709\u7eff\u8272\u7684\u6807\u8bc6\u3002","title":"3.4 \u63d0\u4ea4\u4ee3\u7801\u5230\u8fdc\u7a0b\u4ed3\u5e93"},{"location":"zh-CN/6.community/1.contributing/#35-review","text":"\u5728\u60a8\u63d0\u4ea4\u4ee3\u7801\u540e\uff0c\u60a8\u7684\u4ee3\u7801\u4f1a\u88ab\u6307\u6d3e\u7ed9\u7ef4\u62a4\u4eba\u5458 Review\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002\u5982\u679c\u4e24\u4e2a\u5de5\u4f5c\u65e5\u540e\uff0c\u4ecd\u7136\u6ca1\u6709\u4eba\u5bf9\u60a8\u7684\u63d0\u4ea4\u7ed9\u4e88\u4efb\u4f55\u56de\u590d\uff0c\u53ef\u4ee5\u5728 PR \u4e0b\u9762\u7559\u8a00\uff0c\u5e76 @ \u5bf9\u5e94\u7684\u4eba\u5458\u3002 \u5bf9\u4e8e\u4ee3\u7801 Review \u7684\u610f\u2ec5\u4f1a\u76f4\u63a5\u5907\u6ce8\u5230\u5230\u5bf9\u5e94 PR \u6216\u8005 Issue\u3002\u5982\u679c\u89c9\u5f97\u5efa\u8bae\u662f\u5408\u7406\u7684\uff0c\u4e5f\u8bf7\u60a8\u628a\u8fd9\u4e9b\u5efa\u8bae\u66f4\u65b0\u5230\u60a8\u7684\u4ee3\u7801\u4e2d\u3002","title":"3.5 \u4ee3\u7801 Review"},{"location":"zh-CN/6.community/1.contributing/#36-master","text":"\u5728\u4ee3\u7801 Review \u901a\u8fc7\u540e\uff0c\u5c31\u7531 TuGraph \u7ef4\u62a4\u4eba\u5458\u64cd\u4f5c\u5408\u5165 Master\u4e86\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u4eba\u5458\u53ef\u80fd\u4f1a\u6307\u5b9a\u7684\u65b0\u7684Reviewer\uff0c\u63d0\u51fa\u65b0\u7684\u610f\u89c1\u9700\u8981\u4fee\u6539\u3002\u4e00\u822c\u8fd9\u4e00\u6b65\u4e0d\u7528\u53c2\u4e0e\uff0c\u4ee3\u7801\u5408\u5e76\u4e4b\u540e\uff0c\u60a8\u4f1a\u6536\u5230\u5408\u5e76\u6210\u529f\u7684\u63d0\u793a\u3002","title":"3.6 \u5408\u5e76\u4ee3\u7801\u5230Master"},{"location":"zh-CN/6.community/2.membership/","text":"TuGraph \u793e\u533a\u89d2\u8272 0. \u524d\u8a00 \u672c\u6587\u6863\u63cf\u8ff0 TuGraph \u793e\u533a\u4e2d\u6210\u5458\u8eab\u4efd\u7684\u2ec6\u8272\uff0c\u5bf9\u6bcf\u79cd\u2ec6\u8272\u7684\u8981\u6c42\u53ca\u6743\u9650\u3002 1. \u2ec6\u8272\u6458\u8981 \u8fd9\u662f TuGraph \u793e\u533a\u7684\u2ec6\u8272\u5212\u5206\uff0c\u63cf\u8ff0\u4e86\u6bcf\u79cd\u2ec6\u8272\u7684\u804c\u8d23\uff0c\u6210\u4e3a\u67d0\u79cd\u2ec6\u8272\u5e76\u4fdd\u6301\u8be5\u2ec6\u8272\u7684\u8981\u6c42\uff0c\u4ee5\u53ca\u76f8\u5e94\u2ec6\u8272\u7684\u6743\u9650\u3002 \u6211\u4eec\u793e\u533a\u53c2\u7167 Apache \u89c4\u8303\u6709\u5212\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u2ec6\u8272\uff1a Contributor Maintainer PMC \u4ee5\u4e0b\u63cf\u8ff0\u4e86\u6bcf\u79cd\u2ec6\u8272\u7684\u8981\u6c42\u3001\u804c\u8d23\u548c\u6743\u9650\u3002 2. Contributor 2.1 \u8981\u6c42 \u5728 TuGraph \u7684\u4efb\u4f55\u4e00\u4e2a\u6b63\u5f0f\u9879\u76ee\u4e2d\u6210\u529f\u63d0\u4ea4\u4e00\u4e2a PR \u5e76\u5408\u5e76\u3002 2.2 \u804c\u8d23 \u79ef\u6781\u54cd\u5e94\u6307\u6d3e\u7ed9\u60a8\u7684 Issue \u6216 PR \u4e00\u8d77\u5e2e\u5fd9\u56de\u590d issue/pr\uff0c\u628a issue \u5206\u914d\u7ed9\u5bf9\u5e94\u6a21\u5757\u7684\u8d1f\u8d23\u4eba 2.3 \u6743\u9650 \u52a0\u5165 TuGraph GitHub \u7ec4\u7ec7\uff0c\u6210\u4e3a TuGraph \u5f00\u6e90\u793e\u533a\u7684\u4e00\u5458\u3002 3 Maintainer 3.1 \u8981\u6c42 \u65b0\u7684 Committer \u7531\u5df2\u6709\u7684 PMC \u63a8\u8350\uff0c\u5e76\u901a\u8fc7 2/3 \u4ee5\u4e0a\u6295\u7968\u901a\u8fc7\uff0cCommiter \u81f3\u5c11\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u4e2a\u6761\u4ef6\uff1a \u6210\u4e3a\u793e\u533a\u6210\u5458\u65f6\u95f4\u8d85\u8fc7\u4e09\u4e2a\u6708 \u8d85\u8fc7 10 \u4e2a PMC approve \u7684 PR \u5b8c\u6210\u91cd\u5927\u529f\u80fd \u4fee\u590d\u4e25\u91cd Bug \u957f\u671f\u5173\u6ce8\u9879\u76ee\u53d1\u5c55\u5e76\u53c2\u4e0e\u793e\u533a\u8ba8\u8bba 3.2 \u804c\u8d23 \u793e\u533a\u54a8\u8be2\u652f\u6301 \u79ef\u6781\u54cd\u5e94\u6307\u6d3e\u7ed9\u60a8\u7684 Issue \u6216 PR \u5bf9\u4e8e\u793e\u533a\u91cd\u5927\u51b3\u5b9a\u7684\u6295\u7968\u6743 Review \u793e\u533a\u7684 PR 3.3 \u6743\u9650 Pull Request review \u6743\u9650 4. PMC 4.1 \u8981\u6c42 \u6682\u4e0d\u5f00\u653e\uff0c\u5982\u6709\u5f3a\u70c8\u613f\u671b\u8bf7\u8054\u7cfbPMC 4.2 \u804c\u8d23 \u79ef\u6781\u53c2\u4e0e\u793e\u533a\u8ba8\u8bba\uff0c\u5bf9\u793e\u533a\u91cd\u5927\u51b3\u7b56\u7ed9\u4e88\u6307\u5bfc \u8d1f\u8d23\u4fdd\u8bc1\u5f00\u6e90\u9879\u76ee\u7684\u793e\u533a\u6d3b\u52a8\u90fd\u80fd\u8fd0\u8f6c\u826f\u597d 4.3 \u6743\u9650 Pull Request review \u6743\u9650 Pull Request approve \u6743\u9650 \u793e\u533a\u89d2\u8272\u6210\u5458\u7ba1\u7406","title":"\u6210\u5458\u8d44\u683c"},{"location":"zh-CN/6.community/2.membership/#tugraph","text":"","title":"TuGraph \u793e\u533a\u89d2\u8272"},{"location":"zh-CN/6.community/2.membership/#0","text":"\u672c\u6587\u6863\u63cf\u8ff0 TuGraph \u793e\u533a\u4e2d\u6210\u5458\u8eab\u4efd\u7684\u2ec6\u8272\uff0c\u5bf9\u6bcf\u79cd\u2ec6\u8272\u7684\u8981\u6c42\u53ca\u6743\u9650\u3002","title":"0. \u524d\u8a00"},{"location":"zh-CN/6.community/2.membership/#1","text":"\u8fd9\u662f TuGraph \u793e\u533a\u7684\u2ec6\u8272\u5212\u5206\uff0c\u63cf\u8ff0\u4e86\u6bcf\u79cd\u2ec6\u8272\u7684\u804c\u8d23\uff0c\u6210\u4e3a\u67d0\u79cd\u2ec6\u8272\u5e76\u4fdd\u6301\u8be5\u2ec6\u8272\u7684\u8981\u6c42\uff0c\u4ee5\u53ca\u76f8\u5e94\u2ec6\u8272\u7684\u6743\u9650\u3002 \u6211\u4eec\u793e\u533a\u53c2\u7167 Apache \u89c4\u8303\u6709\u5212\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u2ec6\u8272\uff1a Contributor Maintainer PMC \u4ee5\u4e0b\u63cf\u8ff0\u4e86\u6bcf\u79cd\u2ec6\u8272\u7684\u8981\u6c42\u3001\u804c\u8d23\u548c\u6743\u9650\u3002","title":"1. \u2ec6\u8272\u6458\u8981"},{"location":"zh-CN/6.community/2.membership/#2-contributor","text":"","title":"2. Contributor"},{"location":"zh-CN/6.community/2.membership/#21","text":"\u5728 TuGraph \u7684\u4efb\u4f55\u4e00\u4e2a\u6b63\u5f0f\u9879\u76ee\u4e2d\u6210\u529f\u63d0\u4ea4\u4e00\u4e2a PR \u5e76\u5408\u5e76\u3002","title":"2.1 \u8981\u6c42"},{"location":"zh-CN/6.community/2.membership/#22","text":"\u79ef\u6781\u54cd\u5e94\u6307\u6d3e\u7ed9\u60a8\u7684 Issue \u6216 PR \u4e00\u8d77\u5e2e\u5fd9\u56de\u590d issue/pr\uff0c\u628a issue \u5206\u914d\u7ed9\u5bf9\u5e94\u6a21\u5757\u7684\u8d1f\u8d23\u4eba","title":"2.2 \u804c\u8d23"},{"location":"zh-CN/6.community/2.membership/#23","text":"\u52a0\u5165 TuGraph GitHub \u7ec4\u7ec7\uff0c\u6210\u4e3a TuGraph \u5f00\u6e90\u793e\u533a\u7684\u4e00\u5458\u3002","title":"2.3 \u6743\u9650"},{"location":"zh-CN/6.community/2.membership/#3-maintainer","text":"","title":"3 Maintainer"},{"location":"zh-CN/6.community/2.membership/#31","text":"\u65b0\u7684 Committer \u7531\u5df2\u6709\u7684 PMC \u63a8\u8350\uff0c\u5e76\u901a\u8fc7 2/3 \u4ee5\u4e0a\u6295\u7968\u901a\u8fc7\uff0cCommiter \u81f3\u5c11\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u4e2a\u6761\u4ef6\uff1a \u6210\u4e3a\u793e\u533a\u6210\u5458\u65f6\u95f4\u8d85\u8fc7\u4e09\u4e2a\u6708 \u8d85\u8fc7 10 \u4e2a PMC approve \u7684 PR \u5b8c\u6210\u91cd\u5927\u529f\u80fd \u4fee\u590d\u4e25\u91cd Bug \u957f\u671f\u5173\u6ce8\u9879\u76ee\u53d1\u5c55\u5e76\u53c2\u4e0e\u793e\u533a\u8ba8\u8bba","title":"3.1 \u8981\u6c42"},{"location":"zh-CN/6.community/2.membership/#32","text":"\u793e\u533a\u54a8\u8be2\u652f\u6301 \u79ef\u6781\u54cd\u5e94\u6307\u6d3e\u7ed9\u60a8\u7684 Issue \u6216 PR \u5bf9\u4e8e\u793e\u533a\u91cd\u5927\u51b3\u5b9a\u7684\u6295\u7968\u6743 Review \u793e\u533a\u7684 PR","title":"3.2 \u804c\u8d23"},{"location":"zh-CN/6.community/2.membership/#33","text":"Pull Request review \u6743\u9650","title":"3.3 \u6743\u9650"},{"location":"zh-CN/6.community/2.membership/#4-pmc","text":"","title":"4. PMC"},{"location":"zh-CN/6.community/2.membership/#41","text":"\u6682\u4e0d\u5f00\u653e\uff0c\u5982\u6709\u5f3a\u70c8\u613f\u671b\u8bf7\u8054\u7cfbPMC","title":"4.1 \u8981\u6c42"},{"location":"zh-CN/6.community/2.membership/#42","text":"\u79ef\u6781\u53c2\u4e0e\u793e\u533a\u8ba8\u8bba\uff0c\u5bf9\u793e\u533a\u91cd\u5927\u51b3\u7b56\u7ed9\u4e88\u6307\u5bfc \u8d1f\u8d23\u4fdd\u8bc1\u5f00\u6e90\u9879\u76ee\u7684\u793e\u533a\u6d3b\u52a8\u90fd\u80fd\u8fd0\u8f6c\u826f\u597d","title":"4.2 \u804c\u8d23"},{"location":"zh-CN/6.community/2.membership/#43","text":"Pull Request review \u6743\u9650 Pull Request approve \u6743\u9650 \u793e\u533a\u89d2\u8272\u6210\u5458\u7ba1\u7406","title":"4.3 \u6743\u9650"},{"location":"zh-CN/6.community/3.roadmap/","text":"TuGraph \u5f00\u6e90\u89c4\u5212 0. \u7b80\u4ecb \u8be5\u6587\u6863\u662f TuGraph \u672a\u6765\u5f00\u53d1\u7684\u89c4\u5212\uff0c\u5305\u62ec\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u4e0d\u5728\u5f00\u53d1\u8ba1\u5212\u91cc\uff0c\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\u4f46\u4e0d\u5728\u5f00\u6e90\u7248\u672c\u91cc\u7b49\u3002 TuGraph\u5b9a\u4f4d\u5f00\u6e90\u9ad8\u6027\u80fd\u56fe\u6570\u636e\u5e93\uff0c\u56fe\u6570\u636e\u91c7\u7528\u96c6\u4e2d\u5b58\u50a8\u7684\u65b9\u5f0f\uff0c\u77ed\u671f \u4e0d\u4f1a \u8003\u8651\u57fa\u4e8e\u5206\u7247\uff08Sharding\uff09\u7684\u6570\u636e\u5207\u5206\uff0c \u800c\u5c06\u652f\u6301\u4e3b\u5907\u590d\u5236\u7684\u6a21\u5f0f\u6765\u89e3\u51b3\u9ad8\u5e76\u53d1\u8bfb\u7684\u573a\u666f\uff0c\u8fdb\u800c\u91c7\u7528\u4e91\u4e0a\u5b58\u50a8\u89e3\u51b3\u5b58\u50a8\u5bb9\u91cf\u7684\u95ee\u9898\u3002 1. 2022\u5e74\u5df2\u5b8c\u6210\u529f\u80fd TuGraph\u4e8e2022\u5e749\u67081\u65e5\u5f00\u6e90\uff0c\u81ea\u5f00\u6e90\u4ee5\u6765\u7684\u56db\u4e94\u4e2a\u6708\uff0cTuGraph\u5728\u793e\u533a\u7684\u53cd\u9988\u58f0\u4e2d\uff0c\u8fdb\u884c\u65e5\u5e38BUG\u4fee\u590d\uff0c\u81ea\u8eab\u80fd\u529b\u5f97\u5230\u4e86\u5b8c\u5584\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u65f6\u95f4 3.3.0 \u5f00\u6e90\u521d\u7248 2022.9.1 3.3.1 \u56fe\u5206\u6790\u5f15\u64ce\u91cd\u6784\uff0c\u591a\u6a21\u5f0f\u652f\u6301 2023.10.14 3.3.2 OGM\u652f\u6301\uff0cUT\u8986\u76d6\u7387\u63d0\u5347 2023.11.21 3.3.3 \u94fe\u63a5\u8ba4\u8bc1\u673a\u5236\u8fed\u4ee3\uff0c\u52a0\u5165\u82f1\u6587\u6587\u6863 2023.12.23 3.3.4 \u652f\u6301\u4e0a\u4e91\uff0c\u68b3\u7406LDBC SNB Audit\u6d41\u7a0b 2023.1.28 \u9664\u6b64\u4e4b\u5916\uff0cTuGraph\u642d\u5efa\u4e86\u8f83\u4e3a\u5b8c\u5584\u7684\u8d28\u91cf\u4f53\u7cfb\uff0c\u6db5\u76d6\u81ea\u52a8\u5316\u7684\u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u3001\u6027\u80fd\u6d4b\u8bd5\u7b49\u3002 2. 2023\u5e74\u6838\u5fc3\u7248\u672c\u8fed\u4ee3 \u57282023\u5e74\u5ea6\uff0cTuGraph\u5c06\u5b8c\u6210\u6838\u5fc3\u529f\u80fd\u7684\u8fed\u4ee3\u3002 \u7b2c\u4e00\u5b63\u5ea6\u5b8c\u6210OLAP Python\u7684\u652f\u6301\uff0c\u517c\u987e\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u964d\u4f4e\u56fe\u7b97\u6cd5\u7f16\u5199\u8bed\u8a00\u7684\u96be\u5ea6\uff1b \u7b2c\u4e8c\u5b63\u5ea6\u5f00\u6e90\u9ad8\u53ef\u7528\u529f\u80fd\uff0c\u4e3a\u4f01\u4e1a\u7528\u6237\u63d0\u4f9b\u5b9e\u65f6\u70ed\u5907\u548c\u96c6\u7fa4\u90e8\u7f72\u7684\u80fd\u529b\uff1b \u7b2c\u4e09\u5b63\u5ea6\u5c06\u67e5\u8be2\u8bed\u8a00\u6807\u51c6\u5316\uff0c\u7387\u5148\u652f\u6301ISO GQL\u7684\u9884\u5370\u7248\u672c\uff1b \u7b2c\u56db\u5b63\u5ea6\u52a0\u6df1\u56fe\u5b66\u4e60\u7684\u80fd\u529b\uff0c\u652f\u6301\u4e30\u5bcc\u7684\u56fe\u5b66\u4e60\u6846\u67b6\u548c\u7075\u6d3b\u7f16\u7a0b\u7684\u63a5\u53e3\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u8ba1\u5212\u65f6\u95f4 3.4.0 OLAP Python API \u652f\u6301 2023.3 3.5.0 \u9ad8\u53ef\u7528\u652f\u6301 2023.6 4.0.0 ISO GQL \u8bed\u8a00\u652f\u6301 2023.9 4.1.0 \u56fe\u5b66\u4e60\u6df1\u5ea6\u96c6\u6210 2023.12 3. 2023\u5e74\u529f\u80fd\u66f4\u65b0 \u57282023\u5e74\u5ea6\uff0c\u9664\u4e86\u4e0a\u8ff0\u6838\u5fc3\u529f\u80fd\uff0c\u8fd8\u5305\u62ec\u5982\u4e0b\u7ec4\u4ef6\u7684\u7814\u53d1\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u8ba1\u5212\u65f6\u95f4 3.4.x APOC\u6846\u67b6\u642d\u5efa 2023.4 3.4.x REST\u63a5\u53e3\u8fc1\u79fb\u5230 brpc 2023.5 3.5.x \u6570\u636e\u5e93\u95f4\u5feb\u901f\u8fc1\u79fb 2023.6 3.5.x \u65e5\u5fd7\u7cfb\u7edf\u4f18\u5316 2023.7 3.5.x \u51b7\u5907\u652f\u6301 2023.8 x.x.x \u63a2\u7d22\u65b0\u5b58\u50a8\u5f15\u64ce 2023.x x.x.x TuGraph Brower\u7248\u672c\u8fed\u4ee3 2023.x x.x.x TuGraph Explorer\u7248\u672c\u8fed\u4ee3 2023.x x.x.x \u5b58\u50a8\u8fc7\u7a0b Python API \u8fed\u4ee3 2023.x 4. \u671f\u671b\u793e\u533a\u5171\u521b\u7684\u529f\u80fd \u76ee\u524d\u7684\u56e2\u961f\u7814\u53d1\u7cbe\u529b\u5e76\u4e0d\u80fd\u5b9e\u73b0\u6211\u4eec\u5bf9TuGraph\u5168\u90e8\u7684\u671f\u671b\uff0c\u5728\u529f\u80fd\u7684\u68b3\u7406\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u7cfb\u5217\u503c\u5f97\u6316\u6398\u7684\u60f3\u6cd5\uff0c \u56e2\u961f\u4e5f\u6709\u4e00\u4e9b\u521d\u6b65\u7684\u60f3\u6cd5\uff0c\u671f\u671b\u4e0b\u9762\u529f\u80fd\u80fd\u591f\u5728\u793e\u533a\u4e2d\u5171\u540c\u7814\u53d1\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u8ba1\u5212\u65f6\u95f4 x.x.x \u6587\u6863\u5b8c\u5584 2023.x x.x.x APOC\u5de5\u5177\u4e30\u5bcc 2023.x x.x.x \u5c5e\u6027\u9ed8\u8ba4\u503c\u652f\u6301 2023.x x.x.x \u591a\u5c5e\u6027\u8054\u5408\u7d22\u5f15 2023.x x.x.x \u5728\u7ebf\u5168\u91cfimport\u652f\u6301 2023.x x.x.x \u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u589e\u91cfUPSERT 2023.x x.x.x \u65f6\u7a7a\u6570\u636e 2023.x x.x.x \u56fe\u6743\u9650\u5b8c\u5584 2023.x x.x.x NLP\u652f\u6301 2023.x x.x.x \u591a\u56fe\u8054\u5408\u64cd\u4f5c\u63a5\u53e3 2023.x \u6b22\u8fce\u5bf9\u56fe\u6570\u636e\u5e93\u611f\u5174\u8da3\u7684\u6280\u672f\u7231\u597d\u8005\u6765\u793e\u533a\u5171\u540c\u7814\u8ba8\u3002","title":"\u8def\u7ebf\u56fe"},{"location":"zh-CN/6.community/3.roadmap/#tugraph","text":"","title":"TuGraph \u5f00\u6e90\u89c4\u5212"},{"location":"zh-CN/6.community/3.roadmap/#0","text":"\u8be5\u6587\u6863\u662f TuGraph \u672a\u6765\u5f00\u53d1\u7684\u89c4\u5212\uff0c\u5305\u62ec\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u4e0d\u5728\u5f00\u53d1\u8ba1\u5212\u91cc\uff0c\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\u4f46\u4e0d\u5728\u5f00\u6e90\u7248\u672c\u91cc\u7b49\u3002 TuGraph\u5b9a\u4f4d\u5f00\u6e90\u9ad8\u6027\u80fd\u56fe\u6570\u636e\u5e93\uff0c\u56fe\u6570\u636e\u91c7\u7528\u96c6\u4e2d\u5b58\u50a8\u7684\u65b9\u5f0f\uff0c\u77ed\u671f \u4e0d\u4f1a \u8003\u8651\u57fa\u4e8e\u5206\u7247\uff08Sharding\uff09\u7684\u6570\u636e\u5207\u5206\uff0c \u800c\u5c06\u652f\u6301\u4e3b\u5907\u590d\u5236\u7684\u6a21\u5f0f\u6765\u89e3\u51b3\u9ad8\u5e76\u53d1\u8bfb\u7684\u573a\u666f\uff0c\u8fdb\u800c\u91c7\u7528\u4e91\u4e0a\u5b58\u50a8\u89e3\u51b3\u5b58\u50a8\u5bb9\u91cf\u7684\u95ee\u9898\u3002","title":"0. \u7b80\u4ecb"},{"location":"zh-CN/6.community/3.roadmap/#1-2022","text":"TuGraph\u4e8e2022\u5e749\u67081\u65e5\u5f00\u6e90\uff0c\u81ea\u5f00\u6e90\u4ee5\u6765\u7684\u56db\u4e94\u4e2a\u6708\uff0cTuGraph\u5728\u793e\u533a\u7684\u53cd\u9988\u58f0\u4e2d\uff0c\u8fdb\u884c\u65e5\u5e38BUG\u4fee\u590d\uff0c\u81ea\u8eab\u80fd\u529b\u5f97\u5230\u4e86\u5b8c\u5584\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u65f6\u95f4 3.3.0 \u5f00\u6e90\u521d\u7248 2022.9.1 3.3.1 \u56fe\u5206\u6790\u5f15\u64ce\u91cd\u6784\uff0c\u591a\u6a21\u5f0f\u652f\u6301 2023.10.14 3.3.2 OGM\u652f\u6301\uff0cUT\u8986\u76d6\u7387\u63d0\u5347 2023.11.21 3.3.3 \u94fe\u63a5\u8ba4\u8bc1\u673a\u5236\u8fed\u4ee3\uff0c\u52a0\u5165\u82f1\u6587\u6587\u6863 2023.12.23 3.3.4 \u652f\u6301\u4e0a\u4e91\uff0c\u68b3\u7406LDBC SNB Audit\u6d41\u7a0b 2023.1.28 \u9664\u6b64\u4e4b\u5916\uff0cTuGraph\u642d\u5efa\u4e86\u8f83\u4e3a\u5b8c\u5584\u7684\u8d28\u91cf\u4f53\u7cfb\uff0c\u6db5\u76d6\u81ea\u52a8\u5316\u7684\u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u3001\u6027\u80fd\u6d4b\u8bd5\u7b49\u3002","title":"1. 2022\u5e74\u5df2\u5b8c\u6210\u529f\u80fd"},{"location":"zh-CN/6.community/3.roadmap/#2-2023","text":"\u57282023\u5e74\u5ea6\uff0cTuGraph\u5c06\u5b8c\u6210\u6838\u5fc3\u529f\u80fd\u7684\u8fed\u4ee3\u3002 \u7b2c\u4e00\u5b63\u5ea6\u5b8c\u6210OLAP Python\u7684\u652f\u6301\uff0c\u517c\u987e\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u964d\u4f4e\u56fe\u7b97\u6cd5\u7f16\u5199\u8bed\u8a00\u7684\u96be\u5ea6\uff1b \u7b2c\u4e8c\u5b63\u5ea6\u5f00\u6e90\u9ad8\u53ef\u7528\u529f\u80fd\uff0c\u4e3a\u4f01\u4e1a\u7528\u6237\u63d0\u4f9b\u5b9e\u65f6\u70ed\u5907\u548c\u96c6\u7fa4\u90e8\u7f72\u7684\u80fd\u529b\uff1b \u7b2c\u4e09\u5b63\u5ea6\u5c06\u67e5\u8be2\u8bed\u8a00\u6807\u51c6\u5316\uff0c\u7387\u5148\u652f\u6301ISO GQL\u7684\u9884\u5370\u7248\u672c\uff1b \u7b2c\u56db\u5b63\u5ea6\u52a0\u6df1\u56fe\u5b66\u4e60\u7684\u80fd\u529b\uff0c\u652f\u6301\u4e30\u5bcc\u7684\u56fe\u5b66\u4e60\u6846\u67b6\u548c\u7075\u6d3b\u7f16\u7a0b\u7684\u63a5\u53e3\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u8ba1\u5212\u65f6\u95f4 3.4.0 OLAP Python API \u652f\u6301 2023.3 3.5.0 \u9ad8\u53ef\u7528\u652f\u6301 2023.6 4.0.0 ISO GQL \u8bed\u8a00\u652f\u6301 2023.9 4.1.0 \u56fe\u5b66\u4e60\u6df1\u5ea6\u96c6\u6210 2023.12","title":"2. 2023\u5e74\u6838\u5fc3\u7248\u672c\u8fed\u4ee3"},{"location":"zh-CN/6.community/3.roadmap/#3-2023","text":"\u57282023\u5e74\u5ea6\uff0c\u9664\u4e86\u4e0a\u8ff0\u6838\u5fc3\u529f\u80fd\uff0c\u8fd8\u5305\u62ec\u5982\u4e0b\u7ec4\u4ef6\u7684\u7814\u53d1\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u8ba1\u5212\u65f6\u95f4 3.4.x APOC\u6846\u67b6\u642d\u5efa 2023.4 3.4.x REST\u63a5\u53e3\u8fc1\u79fb\u5230 brpc 2023.5 3.5.x \u6570\u636e\u5e93\u95f4\u5feb\u901f\u8fc1\u79fb 2023.6 3.5.x \u65e5\u5fd7\u7cfb\u7edf\u4f18\u5316 2023.7 3.5.x \u51b7\u5907\u652f\u6301 2023.8 x.x.x \u63a2\u7d22\u65b0\u5b58\u50a8\u5f15\u64ce 2023.x x.x.x TuGraph Brower\u7248\u672c\u8fed\u4ee3 2023.x x.x.x TuGraph Explorer\u7248\u672c\u8fed\u4ee3 2023.x x.x.x \u5b58\u50a8\u8fc7\u7a0b Python API \u8fed\u4ee3 2023.x","title":"3. 2023\u5e74\u529f\u80fd\u66f4\u65b0"},{"location":"zh-CN/6.community/3.roadmap/#4","text":"\u76ee\u524d\u7684\u56e2\u961f\u7814\u53d1\u7cbe\u529b\u5e76\u4e0d\u80fd\u5b9e\u73b0\u6211\u4eec\u5bf9TuGraph\u5168\u90e8\u7684\u671f\u671b\uff0c\u5728\u529f\u80fd\u7684\u68b3\u7406\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u7cfb\u5217\u503c\u5f97\u6316\u6398\u7684\u60f3\u6cd5\uff0c \u56e2\u961f\u4e5f\u6709\u4e00\u4e9b\u521d\u6b65\u7684\u60f3\u6cd5\uff0c\u671f\u671b\u4e0b\u9762\u529f\u80fd\u80fd\u591f\u5728\u793e\u533a\u4e2d\u5171\u540c\u7814\u53d1\u3002 \u7248\u672c\u53f7 \u529f\u80fd \u8ba1\u5212\u65f6\u95f4 x.x.x \u6587\u6863\u5b8c\u5584 2023.x x.x.x APOC\u5de5\u5177\u4e30\u5bcc 2023.x x.x.x \u5c5e\u6027\u9ed8\u8ba4\u503c\u652f\u6301 2023.x x.x.x \u591a\u5c5e\u6027\u8054\u5408\u7d22\u5f15 2023.x x.x.x \u5728\u7ebf\u5168\u91cfimport\u652f\u6301 2023.x x.x.x \u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u589e\u91cfUPSERT 2023.x x.x.x \u65f6\u7a7a\u6570\u636e 2023.x x.x.x \u56fe\u6743\u9650\u5b8c\u5584 2023.x x.x.x NLP\u652f\u6301 2023.x x.x.x \u591a\u56fe\u8054\u5408\u64cd\u4f5c\u63a5\u53e3 2023.x \u6b22\u8fce\u5bf9\u56fe\u6570\u636e\u5e93\u611f\u5174\u8da3\u7684\u6280\u672f\u7231\u597d\u8005\u6765\u793e\u533a\u5171\u540c\u7814\u8ba8\u3002","title":"4. \u671f\u671b\u793e\u533a\u5171\u521b\u7684\u529f\u80fd"},{"location":"zh-CN/6.community/4.individual_cla/","text":"Ant_Group_Open_Source_Individual_CLA_English_Chinese_2021 Ant Group Individual Contributor License Agreement \u8682\u8681\u96c6\u56e2 \u4e2a\u4eba\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae Thank you for your interest in contributing documentation and related software code to a project hosted or managed by Ant Group, or any of its affiliates. In order to clarify the intellectual property license granted with Contributions from any person or entity, Ant Group must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This version of the Contributor License Agreement allows an individual to submit Contributions to the applicable project. If you are making a submission on behalf of a legal entity, then you should sign the separation Corporate Contributor License Agreement. \u611f\u8c22\u60a8\u5bf9\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4efb\u4f55\u5173\u8054\u65b9\u4e3b\u529e\u6216\u7ba1\u7406\u7684\u9879\u76ee\u8d21\u732e\u6587\u6863\u548c\u76f8\u5173\u8f6f\u4ef6\u4ee3\u7801\u7684\u5174\u8da3\u3002\u4e3a\u5398\u6e05\u5c31\u4e2a\u4eba\u6216\u5b9e\u4f53\u8d21\u732e\u5185\u5bb9\u800c\u6388\u4e88\u7684\u77e5\u8bc6\u4ea7\u6743\u8bb8\u53ef\uff0c\u8682\u8681\u96c6\u56e2\u5fc5\u987b\u5bf9\u6bcf\u4f4d\u8d21\u732e\u8005\u7b7e\u7f72\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff08\u201cCLA\u201d\uff09\u8fdb\u884c\u5f52\u6863\uff0c\u4ee5\u8bc1\u660e\u5c31\u4ee5\u4e0b\u8bb8\u53ef\u6761\u4ef6\u8fbe\u6210\u7684\u4e00\u81f4\u3002\u6b64\u7248\u672c\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u5141\u8bb8\u4e2a\u4eba\u5411\u76f8\u5e94\u9879\u76ee\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u3002\u5982\u679c\u60a8\u662f\u4ee5\u516c\u53f8\u540d\u4e49\u8fdb\u884c\u63d0\u4ea4\uff0c\u60a8\u5e94\u5f53\u53e6\u884c\u7b7e\u7f72\u4e00\u4efd\u516c\u53f8\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u3002 You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Ant Group. Except for the license granted herein to Ant Group and recipients of documentation and software distributed by Ant Group, You reserve all right, title, and interest in and to Your Contributions. \u5c31\u60a8\u76ee\u524d\u548c\u5c06\u6765\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u60a8\u63a5\u53d7\u5e76\u540c\u610f\u4ee5\u4e0b\u6761\u6b3e\u548c\u6761\u4ef6\u3002\u9664\u4e86\u6839\u636e\u672c\u534f\u8bae\u5411\u8682\u8681\u96c6\u56e2\u548c\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6388\u4e88\u7684\u8bb8\u53ef\uff0c\u60a8\u5bf9\u4e8e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fdd\u7559\u6240\u6709\u6743\u5229\u3001\u6240\u6709\u6743\u548c\u5229\u76ca\u3002 Definitions. \u5b9a\u4e49\u3002 \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Ant Group. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201c\u60a8\u201d\uff08\u6216\u201c\u60a8\u7684\u201d\uff09\u7cfb\u6307\u4e0e\u8682\u8681\u96c6\u56e2\u7b7e\u7f72\u672c\u534f\u8bae\u7684\u8457\u4f5c\u6743\u4eba\u6216\u7ecf\u8457\u4f5c\u6743\u4eba\u6388\u6743\u7684\u6cd5\u5f8b\u5b9e\u4f53\u3002\u5bf9\u4e8e\u6cd5\u5f8b\u5b9e\u4f53\u800c\u8a00\uff0c\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u7684\u5b9e\u4f53\u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u63a7\u5236\u8be5\u5b9e\u4f53\u3001\u53d7\u5176\u63a7\u5236\u6216\u4e0e\u5176\u53d7\u5230\u540c\u4e00\u4e3b\u4f53\u63a7\u5236\u7684\u5b9e\u4f53\u88ab\u89c6\u4e3a\u5355\u4e2a\u8d21\u732e\u8005\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63a7\u5236\u201d \u7cfb\u6307\uff08i\uff09\u901a\u8fc7\u5408\u540c\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u76f4\u63a5\u6216\u95f4\u63a5\u5bf9\u8be5\u5b9e\u4f53\u8fdb\u884c\u6307\u5bfc\u548c\u7ba1\u7406\u7684\u6743\u529b\uff0c\uff08ii\uff09\u6301\u6709\u8be5\u5b9e\u4f53\u767e\u5206\u4e4b\u4e94\u5341\uff0850%\uff09\u6216\u66f4\u591a\u7684\u5df2\u53d1\u884c\u80a1\u4efd\uff0c\u6216\uff08iii\uff09\u95f4\u63a5\u6301\u6709\u8be5\u5b9e\u4f53\u6743\u76ca\u3002 \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Ant Group for inclusion in, or documentation of, any of the products or projects owned or managed by Ant Group (the \"Work\"), including without limitation any Work described in Schedule A. For the purposes of this definition, \"submitted\" means any form of electronic or written communication sent to Ant Group or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Ant Group for the purpose of discussing and improving the Work. \u201c\u8d21\u732e\u5185\u5bb9\u201d\u7cfb\u6307\u7531\u60a8\u6709\u610f\u5730\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u4ee5\u4fbf\u88ab\u5305\u542b\u6216\u8bb0\u8f7d\u5728\u4efb\u4f55\u8682\u8681\u96c6\u56e2\u62e5\u6709\u6216\u7ba1\u7406\u7684\u4ea7\u54c1\u6216\u9879\u76ee\uff08\u201c\u4f5c\u54c1\u201d\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4efb\u4f55\u5728\u9644\u5f55A\u4e2d\u5217\u4e3e\u7684\u4f5c\u54c1\uff09\u4e2d\u7684\u4efb\u4f55\u539f\u521b\u4f5c\u54c1\uff0c\u5305\u62ec\u5bf9\u65e2\u5b58\u4f5c\u54c1\u7684\u4efb\u4f55\u4fee\u6539\u548c\u589e\u52a0\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63d0\u4ea4\u201d\u7cfb\u6307\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4ee3\u8868\u8fdb\u884c\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u7535\u5b50\u6216\u4e66\u9762\u4ea4\u6d41\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u8ba8\u8bba\u548c\u6539\u5584\u4f5c\u54c1\u4e3a\u76ee\u7684\uff0c\u901a\u8fc7\u8682\u8681\u96c6\u56e2\u7ba1\u7406\u7684\uff08\u6216\u4ee5\u8682\u8681\u96c6\u56e2\u540d\u4e49\u7ba1\u7406\u7684\uff09\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u3001\u6e90\u4ee3\u7801\u63a7\u5236\u7cfb\u7edf\u548c\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u8fdb\u884c\u7684\u4ea4\u6d41\u3002 Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. \u8457\u4f5c\u6743\u8bb8\u53ef\u7684\u6388\u4e88\u3002\u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\u7684\u8457\u4f5c\u6743\u8bb8\u53ef\uff0c\u4ee5\u590d\u5236\u3001\u884d\u751f\u3001\u516c\u5f00\u5c55\u793a\u3001\u516c\u5f00\u6267\u884c\u3001\u8f6c\u6388\u6743\u548c\u53d1\u5e03\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u548c\u8be5\u7b49\u884d\u751f\u4f5c\u54c1\u3002 Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. \u4e13\u5229\u8bb8\u53ef\u7684\u6388\u4e88\u3002 \u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\uff08\u672c\u8282\u89c4\u5b9a\u7684\u60c5\u5f62\u9664\u5916\uff09\u7684\u4e13\u5229\u8bb8\u53ef\uff0c\u4ee5\u5f00\u53d1\u3001\u5229\u7528\u3001\u8981\u7ea6\u51fa\u552e\u3001\u51fa\u552e\u3001\u5bfc\u5165\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8f6c\u8ba9\u4f5c\u54c1\uff0c\u4f46\u8be5\u8bb8\u53ef\u4ec5\u9002\u7528\u4e8e\u60a8\u6709\u6743\u8bb8\u53ef\u7684\uff0c\u4e14\u5fc5\u7136\u4f1a\u88ab\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fb5\u6743\uff08\u8d21\u732e\u5185\u5bb9\u5355\u72ec\u6784\u6210\u4fb5\u6743\u3001\u6216\u4e0e\u8d21\u732e\u5185\u5bb9\u7684\u76f8\u5173\u4f5c\u54c1\u4e00\u540c\u6784\u6210\u4fb5\u6743\uff09\u7684\u4e13\u5229\u7533\u8bf7\u8303\u56f4\u3002\u5982\u679c\u4efb\u4f55\u5b9e\u4f53\u9488\u5bf9\u60a8\u6216\u5176\u4ed6\u5b9e\u4f53\u63d0\u8d77\u4e13\u5229\u8bc9\u8bbc\uff08\u5305\u62ec\u8bc9\u8bbc\u4e2d\u7684\u4ea4\u53c9\u8bf7\u6c42\u6216\u53cd\u8bc9\uff09\uff0c\u4e3b\u5f20\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff08\u6216\u60a8\u53c2\u4e0e\u8d21\u732e\u7684\u4f5c\u54c1\uff09\u9020\u6210\u4e86\u76f4\u63a5\u6027\u6216\u8f85\u52a9\u6027\u7684\u4e13\u5229\u4fb5\u6743\uff0c\u5219\u4efb\u4f55\u6839\u636e\u672c\u534f\u8bae\u9488\u5bf9\u8be5\u8d21\u732e\u5185\u5bb9\u6216\u4f5c\u54c1\u6388\u4e88\u8be5\u5b9e\u4f53\u7684\u4e13\u5229\u8bb8\u53ef\u5e94\u5f53\u5728\u8d77\u8bc9\u4e4b\u65e5\u7ec8\u6b62\u3002 You represent that you are legally entitled to grant the above license. \u60a8\u4fdd\u8bc1\u60a8\u4f9d\u6cd5\u6709\u6743\u6388\u4e88\u4e0a\u8ff0\u8bb8\u53ef\u3002 You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. \u60a8\u4fdd\u8bc1\u60a8\u6240\u6709\u7684\u8d21\u732e\u5185\u5bb9\u5747\u4e3a\u60a8\u7684\u539f\u521b\u4f5c\u54c1\uff08\u5173\u4e8e\u4e3a\u4ed6\u4eba\u63d0\u4ea4\u4f5c\u54c1\u7684\u89c4\u5b9a\uff0c\u53ef\u53c2\u89c1\u7b2c7\u8282\uff09\u3002\u60a8\u4fdd\u8bc1\u60a8\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4efb\u4f55\u7b2c\u4e09\u65b9\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u6216\u5546\u6807\uff09\u7684\u5168\u90e8\u7ec6\u8282\uff0c\u53ea\u8981\u8be5\u7b49\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\u4e3a\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u4e14\u4e0e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u7684\u4efb\u4f55\u90e8\u5206\u76f8\u5173\u3002 You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. \u5728\u60a8\u81ea\u613f\u63d0\u4f9b\u652f\u6301\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u60a8\u65e0\u9700\u5bf9\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u63d0\u4f9b\u652f\u6301\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u514d\u8d39\u652f\u6301\u6216\u6536\u8d39\u652f\u6301\uff0c\u4e5f\u53ef\u4ee5\u5b8c\u5168\u4e0d\u63d0\u4f9b\u652f\u6301\u3002\u9664\u975e\u9002\u7528\u6cd5\u5f8b\u53e6\u6709\u89c4\u5b9a\u6216\u53e6\u6709\u4e66\u9762\u7ea6\u5b9a\uff0c\u60a8\u201c\u6309\u7167\u73b0\u72b6\u201d\u63d0\u4f9b\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u800c\u4e0d\u5bf9\u5176\u63d0\u4f9b\u4efb\u4f55\u7c7b\u578b\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\uff0c\u65e0\u8bba\u660e\u793a\u8fd8\u662f\u9ed8\u793a\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u4efb\u4f55\u7279\u5b9a\u76ee\u7684\u5bf9\u6240\u6709\u6743\u3001\u65e0\u4fb5\u6743\u3001\u9002\u9500\u6027\u6216\u9002\u5f53\u6027\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\u3002 Should You wish to submit work that is not Your original creation, You may submit it to Ant Group separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". \u5982\u679c\u60a8\u5e0c\u671b\u63d0\u4ea4\u5e76\u975e\u60a8\u539f\u521b\u7684\u4f5c\u54c1\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u8d21\u732e\u5185\u5bb9\u4e4b\u5916\u5355\u72ec\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u6807\u6ce8\u5173\u4e8e\u5176\u6765\u6e90\u548c\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u7684\u4efb\u4f55\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u3001\u5546\u6807\u548c\u8bb8\u53ef\u534f\u8bae\uff09\u7684\u5b8c\u6574\u4fe1\u606f\uff0c\u5e76\u4ee5\u663e\u8457\u65b9\u5f0f\u6807\u660e\u8be5\u4f5c\u54c1\u5c5e\u4e8e\u201c\u4ee5\u7b2c\u4e09\u65b9\u540d\u4e49\u63d0\u4ea4\uff1a\u3010\u586b\u5199\u59d3\u540d\u3011\u201d\u3002 You agree to notify Ant Group of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect. \u60a8\u540c\u610f\u5728\u60a8\u83b7\u6089\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u4e0a\u8ff0\u4fdd\u8bc1\u5728\u4efb\u4f55\u65b9\u9762\u4e0d\u51c6\u786e\u7684\u4e8b\u5b9e\u6216\u60c5\u51b5\u4e4b\u65f6\u901a\u77e5\u8682\u8681\u96c6\u56e2\u3002 This Agreement will be governed by and construed in accordance with the laws of the People's Republic of China excluding that body of laws known as conflict of laws. The parties expressly agree that the United Nations Convention on Contracts for the International Sale of Goods will not apply. Any legal action or proceeding arising under this Agreement will be brought exclusively in the courts located in Hangzhou, China, and the parties hereby irrevocably consent to the personal jurisdiction and venue therein. \u672c\u534f\u8bae\u53d7\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6cd5\u5f8b\u7ba1\u8f96\uff0c\u5e76\u4f9d\u636e\u5176\u8fdb\u884c\u89e3\u91ca\uff0c\u4f46\u51b2\u7a81\u6cd5\u89c4\u5219\u9664\u5916\u3002\u534f\u8bae\u5404\u65b9\u660e\u786e\u540c\u610f\u6392\u9664\u300a\u8054\u5408\u56fd\u56fd\u9645\u8d27\u7269\u9500\u552e\u5408\u540c\u516c\u7ea6\u300b\u7684\u9002\u7528\u3002\u4efb\u4f55\u7531\u672c\u534f\u8bae\u4ea7\u751f\u7684\u6cd5\u5f8b\u8bc9\u8bbc\u6216\u7a0b\u5e8f\u5747\u5e94\u6392\u4ed6\u6027\u5730\u63d0\u4ea4\u81f3\u4e2d\u56fd\u676d\u5dde\u7684\u6cd5\u9662\u8fdb\u884c\u5ba1\u7406\uff0c\u4e14\u5404\u65b9\u5728\u6b64\u4e0d\u53ef\u64a4\u9500\u5730\u540c\u610f\u8be5\u7b49\u5173\u4e8e\u5c5e\u4eba\u7ba1\u8f96\u548c\u6cd5\u9662\u5730\u7684\u5b89\u6392\u3002 For your reading convenience, this Agreement is written in parallel English and Chinese sections. To the extent there is a conflict between the English and Chinese sections, the English sections shall govern. \u4e3a\u4e86\u60a8\u7684\u9605\u8bfb\u65b9\u4fbf\uff0c\u672c\u534f\u8bae\u540c\u65f6\u63d0\u4f9b\u4e86\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u3002\u5982\u679c\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u6709\u77db\u76fe\uff0c\u5219\u4ee5\u82f1\u6587\u6bb5\u843d\u4e3a\u51c6\u3002 Please sign\u8bf7\u7b7e\u7f72: _ _ _ _ _ _ Date\u65e5\u671f: _ ___ Full name\u5168\u540d: _ _ _ _ _ _ _ ____ Mailing Address\u4fe1\u4ef6\u5730\u5740: _ _ _ _ _ _ ______ Telephone\u7535\u8bdd: _ _ _ _ _ _ _ ____ E-Mail\u7535\u5b50\u90ae\u7bb1: _ _ _ _ _ _ _ _____ Schedule A\u9644\u5f55A: Description of Initial Contribution: \u63cf\u8ff0\u521d\u59cb\u8d21\u732e\u5185\u5bb9\uff1a","title":"\u4e2a\u4eba CLA"},{"location":"zh-CN/6.community/5.corporate_cla/","text":"Ant_Group_Open_Source_Corporate_CLA_English_Chinese_2021 Ant Group Corporate Contributor License Agreement \u8682\u8681\u96c6\u56e2 \u516c\u53f8\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae Thank you for your interest in contributing documentation and related software code to a project hosted or managed by Ant Group, or any of its affiliates. In order to clarify the intellectual property license granted with Contributions from any person or entity, Ant Group must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This version of the Contributor License Agreement allows a legal entity (the \"Corporation\") to submit Contributions to the applicable project. If you are an individual making a submission on your own behalf, then you should sign the separation Individual Contributor License Agreement. \u611f\u8c22\u60a8\u5bf9\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4efb\u4f55\u5173\u8054\u65b9\u4e3b\u529e\u6216\u7ba1\u7406\u7684\u9879\u76ee\u8d21\u732e\u6587\u6863\u548c\u76f8\u5173\u8f6f\u4ef6\u4ee3\u7801\u7684\u5174\u8da3\u3002\u4e3a\u5398\u6e05\u5c31\u4e2a\u4eba\u6216\u5b9e\u4f53\u8d21\u732e\u5185\u5bb9\u800c\u6388\u4e88\u7684\u77e5\u8bc6\u4ea7\u6743\u8bb8\u53ef\uff0c\u8682\u8681\u96c6\u56e2\u5fc5\u987b\u5bf9\u6bcf\u4f4d\u8d21\u732e\u8005\u7b7e\u7f72\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff08\u201cCLA\u201d\uff09\u8fdb\u884c\u5f52\u6863\uff0c\u4ee5\u8bc1\u660e\u5c31\u4ee5\u4e0b\u8bb8\u53ef\u6761\u4ef6\u8fbe\u6210\u7684\u4e00\u81f4\u3002\u6b64\u7248\u672c\u7684\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u5141\u8bb8\u6cd5\u4eba\u5b9e\u4f53\uff08\u201c\u516c\u53f8\u201d\uff09\u5411\u76f8\u5e94\u9879\u76ee\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u3002\u5982\u679c\u60a8\u662f\u4ee5\u81ea\u8eab\u540d\u4e49\u8fdb\u884c\u63d0\u4ea4\u7684\u4e2a\u4eba\uff0c\u60a8\u5e94\u5f53\u53e6\u884c\u7b7e\u7f72\u4e00\u4efd\u4e2a\u4eba\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u3002 You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Ant Group. Except for the license granted herein to Ant Group and recipients of documentation and software distributed by Ant Group, You reserve all right, title, and interest in and to Your Contributions. \u5c31\u60a8\u76ee\u524d\u548c\u5c06\u6765\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u60a8\u63a5\u53d7\u5e76\u540c\u610f\u4ee5\u4e0b\u6761\u6b3e\u548c\u6761\u4ef6\u3002\u9664\u4e86\u6839\u636e\u672c\u534f\u8bae\u5411\u8682\u8681\u96c6\u56e2\u548c\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6388\u4e88\u7684\u8bb8\u53ef\uff0c\u60a8\u5bf9\u4e8e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fdd\u7559\u6240\u6709\u6743\u5229\u3001\u6240\u6709\u6743\u548c\u5229\u76ca\u3002 1. Definitions. 1. \u5b9a\u4e49\u3002 \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Ant Group. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201c\u60a8\u201d\uff08\u6216\u201c\u60a8\u7684\u201d\uff09\u7cfb\u6307\u4e0e\u8682\u8681\u96c6\u56e2\u7b7e\u7f72\u672c\u534f\u8bae\u7684\u8457\u4f5c\u6743\u4eba\u6216\u7ecf\u8457\u4f5c\u6743\u4eba\u6388\u6743\u7684\u6cd5\u5f8b\u5b9e\u4f53\u3002\u5bf9\u4e8e\u6cd5\u5f8b\u5b9e\u4f53\u800c\u8a00\uff0c\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u7684\u5b9e\u4f53\u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u63a7\u5236\u8be5\u5b9e\u4f53\u3001\u53d7\u5176\u63a7\u5236\u6216\u4e0e\u5176\u53d7\u5230\u540c\u4e00\u4e3b\u4f53\u63a7\u5236\u7684\u5b9e\u4f53\u88ab\u89c6\u4e3a\u5355\u4e2a\u8d21\u732e\u8005\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63a7\u5236\u201d \u7cfb\u6307\uff08i\uff09\u901a\u8fc7\u5408\u540c\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u76f4\u63a5\u6216\u95f4\u63a5\u5bf9\u8be5\u5b9e\u4f53\u8fdb\u884c\u6307\u5bfc\u548c\u7ba1\u7406\u7684\u6743\u529b\uff0c\uff08ii\uff09\u6301\u6709\u8be5\u5b9e\u4f53\u767e\u5206\u4e4b\u4e94\u5341\uff0850%\uff09\u6216\u66f4\u591a\u7684\u5df2\u53d1\u884c\u80a1\u4efd\uff0c\u6216\uff08iii\uff09\u95f4\u63a5\u6301\u6709\u8be5\u5b9e\u4f53\u6743\u76ca\u3002 \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Ant Group for inclusion in, or documentation of, any of the products or projects owned or managed by Ant Group (the \"Work\"), including without limitation any Work described in Schedule B. For the purposes of this definition, \"submitted\" means any form of electronic or written communication sent to Ant Group or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Ant Group for the purpose of discussing and improving the Work. \u201c\u8d21\u732e\u5185\u5bb9\u201d\u7cfb\u6307\u7531\u60a8\u6709\u610f\u5730\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u4ee5\u4fbf\u88ab\u5305\u542b\u6216\u8bb0\u8f7d\u5728\u4efb\u4f55\u8682\u8681\u96c6\u56e2\u62e5\u6709\u6216\u7ba1\u7406\u7684\u4ea7\u54c1\u6216\u9879\u76ee\uff08\u201c\u4f5c\u54c1\u201d\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4efb\u4f55\u5728\u9644\u5f55B\u4e2d\u5217\u4e3e\u7684\u4f5c\u54c1\uff09\u4e2d\u7684\u4efb\u4f55\u539f\u521b\u4f5c\u54c1\uff0c\u5305\u62ec\u5bf9\u65e2\u5b58\u4f5c\u54c1\u7684\u4efb\u4f55\u4fee\u6539\u548c\u589e\u52a0\u3002\u4e3a\u672c\u5b9a\u4e49\u4e4b\u76ee\u7684\uff0c\u201c\u63d0\u4ea4\u201d\u7cfb\u6307\u5411\u8682\u8681\u96c6\u56e2\u6216\u5176\u4ee3\u8868\u8fdb\u884c\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u7535\u5b50\u6216\u4e66\u9762\u4ea4\u6d41\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u8ba8\u8bba\u548c\u6539\u5584\u4f5c\u54c1\u4e3a\u76ee\u7684\uff0c\u901a\u8fc7\u8682\u8681\u96c6\u56e2\u7ba1\u7406\u7684\uff08\u6216\u4ee5\u8682\u8681\u96c6\u56e2\u540d\u4e49\u7ba1\u7406\u7684\uff09\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u3001\u6e90\u4ee3\u7801\u63a7\u5236\u7cfb\u7edf\u548c\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u8fdb\u884c\u7684\u4ea4\u6d41\u3002 Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. \u8457\u4f5c\u6743\u8bb8\u53ef\u7684\u6388\u4e88\u3002\u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\u7684\u8457\u4f5c\u6743\u8bb8\u53ef\uff0c\u4ee5\u590d\u5236\u3001\u884d\u751f\u3001\u516c\u5f00\u5c55\u793a\u3001\u516c\u5f00\u6267\u884c\u3001\u8f6c\u6388\u6743\u548c\u53d1\u5e03\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u548c\u8be5\u7b49\u884d\u751f\u4f5c\u54c1\u3002 Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Ant Group and to recipients of documentation and software distributed by Ant Group a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. \u4e13\u5229\u8bb8\u53ef\u7684\u6388\u4e88\u3002 \u53d7\u9650\u4e8e\u672c\u534f\u8bae\u7684\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u60a8\u5728\u6b64\u6388\u4e88\u8682\u8681\u96c6\u56e2\u4ee5\u53ca\u8682\u8681\u96c6\u56e2\u53d1\u5e03\u6587\u6863\u548c\u8f6f\u4ef6\u7684\u63a5\u6536\u65b9\u6c38\u4e45\u6027\u7684\u3001\u5168\u7403\u8303\u56f4\u5185\u7684\u3001\u975e\u6392\u4ed6\u7684\u3001\u5b8c\u5168\u65e0\u987b\u8bb8\u53ef\u8d39\u7684\u3001\u5b8c\u5168\u65e0\u987b\u7248\u6743\u8d39\u7684\u548c\u4e0d\u53ef\u64a4\u9500\uff08\u672c\u8282\u89c4\u5b9a\u7684\u60c5\u5f62\u9664\u5916\uff09\u7684\u4e13\u5229\u8bb8\u53ef\uff0c\u4ee5\u5f00\u53d1\u3001\u5229\u7528\u3001\u8981\u7ea6\u51fa\u552e\u3001\u51fa\u552e\u3001\u5bfc\u5165\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8f6c\u8ba9\u4f5c\u54c1\uff0c\u4f46\u8be5\u8bb8\u53ef\u4ec5\u9002\u7528\u4e8e\u60a8\u6709\u6743\u8bb8\u53ef\u7684\uff0c\u4e14\u5fc5\u7136\u4f1a\u88ab\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u4fb5\u6743\uff08\u8d21\u732e\u5185\u5bb9\u5355\u72ec\u6784\u6210\u4fb5\u6743\u3001\u6216\u4e0e\u8d21\u732e\u5185\u5bb9\u7684\u76f8\u5173\u4f5c\u54c1\u4e00\u540c\u6784\u6210\u4fb5\u6743\uff09\u7684\u4e13\u5229\u7533\u8bf7\u8303\u56f4\u3002\u5982\u679c\u4efb\u4f55\u5b9e\u4f53\u9488\u5bf9\u60a8\u6216\u5176\u4ed6\u5b9e\u4f53\u63d0\u8d77\u4e13\u5229\u8bc9\u8bbc\uff08\u5305\u62ec\u8bc9\u8bbc\u4e2d\u7684\u4ea4\u53c9\u8bf7\u6c42\u6216\u53cd\u8bc9\uff09\uff0c\u4e3b\u5f20\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff08\u6216\u60a8\u53c2\u4e0e\u8d21\u732e\u7684\u4f5c\u54c1\uff09\u9020\u6210\u4e86\u76f4\u63a5\u6027\u6216\u8f85\u52a9\u6027\u7684\u4e13\u5229\u4fb5\u6743\uff0c\u5219\u4efb\u4f55\u6839\u636e\u672c\u534f\u8bae\u9488\u5bf9\u8be5\u8d21\u732e\u5185\u5bb9\u6216\u4f5c\u54c1\u6388\u4e88\u8be5\u5b9e\u4f53\u7684\u4e13\u5229\u8bb8\u53ef\u5e94\u5f53\u5728\u8d77\u8bc9\u4e4b\u65e5\u7ec8\u6b62\u3002 You represent that you are legally entitled to grant the above license. You represent further that each employee of the Corporation designated on Schedule A below (or in a subsequent written modification to that Schedule) is authorized to submit Contributions on behalf of the Corporation. \u60a8\u4fdd\u8bc1\u60a8\u4f9d\u6cd5\u6709\u6743\u6388\u4e88\u4e0a\u8ff0\u8bb8\u53ef\u3002\u60a8\u8fdb\u4e00\u6b65\u4fdd\u8bc1\u4e0b\u6587\u9644\u8868A\uff08\u8be5\u9644\u8868\u53ef\u901a\u8fc7\u4e66\u9762\u65b9\u5f0f\u8fdb\u884c\u540e\u7eed\u66f4\u6539\uff09\u6240\u6307\u5b9a\u7684\u4efb\u610f\u516c\u53f8\u5458\u5de5\u5747\u6709\u6743\u4ee5\u516c\u53f8\u540d\u4e49\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u3002 You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. \u60a8\u4fdd\u8bc1\u60a8\u6240\u6709\u7684\u8d21\u732e\u5185\u5bb9\u5747\u4e3a\u60a8\u7684\u539f\u521b\u4f5c\u54c1\uff08\u5173\u4e8e\u4e3a\u4ed6\u4eba\u63d0\u4ea4\u4f5c\u54c1\u7684\u89c4\u5b9a\uff0c\u53ef\u53c2\u89c1\u7b2c7\u8282\uff09\u3002\u60a8\u4fdd\u8bc1\u60a8\u63d0\u4ea4\u7684\u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4efb\u4f55\u7b2c\u4e09\u65b9\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u6216\u5546\u6807\uff09\u7684\u5168\u90e8\u7ec6\u8282\uff0c\u53ea\u8981\u8be5\u7b49\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\u4e3a\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u4e14\u4e0e\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u7684\u4efb\u4f55\u90e8\u5206\u76f8\u5173\u3002 You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. \u5728\u60a8\u81ea\u613f\u63d0\u4f9b\u652f\u6301\u7684\u8303\u56f4\u4e4b\u5916\uff0c\u60a8\u65e0\u9700\u5bf9\u60a8\u7684\u8d21\u732e\u5185\u5bb9\u63d0\u4f9b\u652f\u6301\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u514d\u8d39\u652f\u6301\u6216\u6536\u8d39\u652f\u6301\uff0c\u4e5f\u53ef\u4ee5\u5b8c\u5168\u4e0d\u63d0\u4f9b\u652f\u6301\u3002\u9664\u975e\u9002\u7528\u6cd5\u5f8b\u53e6\u6709\u89c4\u5b9a\u6216\u53e6\u6709\u4e66\u9762\u7ea6\u5b9a\uff0c\u60a8\u201c\u6309\u7167\u73b0\u72b6\u201d\u63d0\u4f9b\u60a8\u7684\u8d21\u732e\u5185\u5bb9\uff0c\u800c\u4e0d\u5bf9\u5176\u63d0\u4f9b\u4efb\u4f55\u7c7b\u578b\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\uff0c\u65e0\u8bba\u660e\u793a\u8fd8\u662f\u9ed8\u793a\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e3a\u4efb\u4f55\u7279\u5b9a\u76ee\u7684\u5bf9\u6240\u6709\u6743\u3001\u65e0\u4fb5\u6743\u3001\u9002\u9500\u6027\u6216\u9002\u5f53\u6027\u7684\u4fdd\u8bc1\u6216\u6761\u4ef6\u3002 Should You wish to submit work that is not Your original creation, You may submit it to Ant Group separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". \u5982\u679c\u60a8\u5e0c\u671b\u63d0\u4ea4\u5e76\u975e\u60a8\u539f\u521b\u7684\u4f5c\u54c1\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u8d21\u732e\u5185\u5bb9\u4e4b\u5916\u5355\u72ec\u5411\u8682\u8681\u96c6\u56e2\u63d0\u4ea4\uff0c\u6807\u6ce8\u5173\u4e8e\u5176\u6765\u6e90\u548c\u60a8\u4e2a\u4eba\u6240\u77e5\u6089\u7684\u4efb\u4f55\u8bb8\u53ef\u6216\u5176\u4ed6\u9650\u5236\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u76f8\u5173\u4e13\u5229\u3001\u5546\u6807\u548c\u8bb8\u53ef\u534f\u8bae\uff09\u7684\u5b8c\u6574\u4fe1\u606f\uff0c\u5e76\u4ee5\u663e\u8457\u65b9\u5f0f\u6807\u660e\u8be5\u4f5c\u54c1\u5c5e\u4e8e\u201c\u4ee5\u7b2c\u4e09\u65b9\u540d\u4e49\u63d0\u4ea4\uff1a\u3010\u586b\u5199\u59d3\u540d\u3011\u201d\u3002 You agree to notify Ant Group of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect. \u60a8\u540c\u610f\u5728\u60a8\u83b7\u6089\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u4e0a\u8ff0\u4fdd\u8bc1\u5728\u4efb\u4f55\u65b9\u9762\u4e0d\u51c6\u786e\u7684\u4e8b\u5b9e\u6216\u60c5\u51b5\u4e4b\u65f6\u901a\u77e5\u8682\u8681\u96c6\u56e2\u3002 This Agreement will be governed by and construed in accordance with the laws of the People's Republic of China excluding that body of laws known as conflict of laws. The parties expressly agree that the United Nations Convention on Contracts for the International Sale of Goods will not apply. Any legal action or proceeding arising under this Agreement will be brought exclusively in the courts located in Hangzhou, China, and the parties hereby irrevocably consent to the personal jurisdiction and venue therein. \u672c\u534f\u8bae\u53d7\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6cd5\u5f8b\u7ba1\u8f96\uff0c\u5e76\u4f9d\u636e\u5176\u8fdb\u884c\u89e3\u91ca\uff0c\u4f46\u51b2\u7a81\u6cd5\u89c4\u5219\u9664\u5916\u3002\u534f\u8bae\u5404\u65b9\u660e\u786e\u540c\u610f\u6392\u9664\u300a\u8054\u5408\u56fd\u56fd\u9645\u8d27\u7269\u9500\u552e\u5408\u540c\u516c\u7ea6\u300b\u7684\u9002\u7528\u3002\u4efb\u4f55\u7531\u672c\u534f\u8bae\u4ea7\u751f\u7684\u6cd5\u5f8b\u8bc9\u8bbc\u6216\u7a0b\u5e8f\u5747\u5e94\u6392\u4ed6\u6027\u5730\u63d0\u4ea4\u81f3\u4e2d\u56fd\u676d\u5dde\u7684\u6cd5\u9662\u8fdb\u884c\u5ba1\u7406\uff0c\u4e14\u5404\u65b9\u5728\u6b64\u4e0d\u53ef\u64a4\u9500\u5730\u540c\u610f\u8be5\u7b49\u5173\u4e8e\u5c5e\u4eba\u7ba1\u8f96\u548c\u6cd5\u9662\u5730\u7684\u5b89\u6392\u3002 For your reading convenience, this Agreement is written in parallel English and Chinese sections. To the extent there is a conflict between the English and Chinese sections, the English sections shall govern. \u4e3a\u4e86\u60a8\u7684\u9605\u8bfb\u65b9\u4fbf\uff0c\u672c\u534f\u8bae\u540c\u65f6\u63d0\u4f9b\u4e86\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u3002\u5982\u679c\u82f1\u6587\u548c\u4e2d\u6587\u6bb5\u843d\u6709\u77db\u76fe\uff0c\u5219\u4ee5\u82f1\u6587\u6bb5\u843d\u4e3a\u51c6\u3002 Please sign\u8bf7\u7b7e\u7f72: _ _ _ _ _ _ Date\u65e5\u671f: _ ___ Company Name\u516c\u53f8\u540d\u79f0: _ _ _ _ _ _ ______ Full name\u5168\u540d: _ _ _ _ _ _ _ ____ Title\u804c\u52a1: _ _ _ _ _ _ _ ____ Mailing Address\u4fe1\u4ef6\u5730\u5740: _ _ _ _ _ _ ______ Country\u56fd\u5bb6: _ _ _ _ _ _ _ ____ Telephone\u7535\u8bdd: _ _ _ _ _ _ _ ____ E-Mail\u7535\u5b50\u90ae\u7bb1: _ _ _ _ _ _ _ _____ Schedule A\u9644\u5f55A: Please provide an initial list of designated employees authorized to submit Contributions on behalf of the Corporation: \u8bf7\u63d0\u4f9b\u4e00\u4efd\u6709\u6743\u4ee5\u516c\u53f8\u540d\u4e49\u63d0\u4ea4\u8d21\u732e\u5185\u5bb9\u7684\u6307\u5b9a\u5458\u5de5\u7684\u521d\u59cb\u540d\u5355\uff1a Schedule B \u9644\u5f55B: Description of Initial Contribution: \u63cf\u8ff0\u521d\u59cb\u8d21\u732e\u5185\u5bb9\uff1a","title":"\u4f01\u4e1a CLA"}]}