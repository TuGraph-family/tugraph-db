// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax="proto2";
package lgraph.management;

option cc_generic_services = true;
option java_outer_classname = "TuGraphDBManagement";

enum ResponseCode {
      SUCCESS = 0;
      FAILED = 1;
}

message Job {
      required string db_id = 1;
      required int32 job_id = 2;
      required int64 start_time = 3;
      required string period = 4;
      required string procedure_name = 5;
      required string procedure_type = 6;
      required string status = 7;
      required int64 runtime = 8;
      required string user = 9;
      required int64 create_time = 10;
}

message AlgoResult {
      required int32 job_id = 1;
      required string result = 2;
}

message CreateJobRequest {
      required int64 start_time = 1;
      required string period = 2;
      required string procedure_name = 3;
      required string procedure_type = 4;
      required string user = 5;
      required int64 create_time = 6;
}

message CreateJobResponse {
      required int32 job_id = 1;
      required ResponseCode response_code = 2;
}

message GetJobStatusRequest {
      optional int32 job_id = 1;
}

message GetJobStatusResponse {
      repeated Job job = 2;
      required ResponseCode response_code = 1;
}

message GetAlgoResultRequest {
      required int32 job_id = 1;
}

message GetAlgoResultResponse {
      required AlgoResult algo_result = 1;
      required ResponseCode response_code = 2;
}

message UpdateJobStatusRequest {
      required int32 job_id = 1;
      required string status = 2;
      optional int64 runtime = 3;
      optional string result = 4;
}

message UpdateJobStatusResponse {
      required ResponseCode response_code = 1;
}

message DeleteJobRequest {
      required int32 job_id = 1;
}

message DeleteJobResponse {
      required ResponseCode response_code = 1;
}

message JobManagementRequest {
      required string db_host = 1;
      required string db_port = 2;
      oneof Req {
            CreateJobRequest create_job_request = 3;
            GetJobStatusRequest get_job_status_request = 4;
            GetAlgoResultRequest get_algo_result_request = 5;
            UpdateJobStatusRequest update_job_status_request = 6;
            DeleteJobRequest delete_job_request = 7;
      };
};

message JobManagementResponse {
      required ResponseCode response_code = 1;
      oneof Resp {
            CreateJobResponse create_job_response = 2;
            GetJobStatusResponse get_job_status_response = 3;
            GetAlgoResultResponse get_algo_result_response = 4;
            UpdateJobStatusResponse update_job_status_response = 5;
            DeleteJobResponse delete_job_response = 6;
      };
};

message HeartbeatRequest {
      required string request_msg = 1;
      required int32 heartbeat_count = 2;
};

message HeartbeatResponse {
      required string response_msg = 1;
      required int32 heartbeat_count = 2;
};

service JobManagementService {
      rpc handleRequest(JobManagementRequest) returns (JobManagementResponse);
};

service HeartbeatService {
      rpc detectHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}
