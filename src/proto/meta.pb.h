// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_INCLUDED_meta_2eproto
#define PROTOBUF_INCLUDED_meta_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_meta_2eproto 

namespace protobuf_meta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_meta_2eproto
namespace meta {
class FullTextIndexUpdate;
class FullTextIndexUpdateDefaultTypeInternal;
extern FullTextIndexUpdateDefaultTypeInternal _FullTextIndexUpdate_default_instance_;
class GraphDBMetaInfo;
class GraphDBMetaInfoDefaultTypeInternal;
extern GraphDBMetaInfoDefaultTypeInternal _GraphDBMetaInfo_default_instance_;
class VectorIndexManifest;
class VectorIndexManifestDefaultTypeInternal;
extern VectorIndexManifestDefaultTypeInternal _VectorIndexManifest_default_instance_;
class VertexFullTextIndex;
class VertexFullTextIndexDefaultTypeInternal;
extern VertexFullTextIndexDefaultTypeInternal _VertexFullTextIndex_default_instance_;
class VertexPropertyIndex;
class VertexPropertyIndexDefaultTypeInternal;
extern VertexPropertyIndexDefaultTypeInternal _VertexPropertyIndex_default_instance_;
class VertexVectorIndex;
class VertexVectorIndexDefaultTypeInternal;
extern VertexVectorIndexDefaultTypeInternal _VertexVectorIndex_default_instance_;
}  // namespace meta
namespace google {
namespace protobuf {
template<> ::meta::FullTextIndexUpdate* Arena::CreateMaybeMessage<::meta::FullTextIndexUpdate>(Arena*);
template<> ::meta::GraphDBMetaInfo* Arena::CreateMaybeMessage<::meta::GraphDBMetaInfo>(Arena*);
template<> ::meta::VectorIndexManifest* Arena::CreateMaybeMessage<::meta::VectorIndexManifest>(Arena*);
template<> ::meta::VertexFullTextIndex* Arena::CreateMaybeMessage<::meta::VertexFullTextIndex>(Arena*);
template<> ::meta::VertexPropertyIndex* Arena::CreateMaybeMessage<::meta::VertexPropertyIndex>(Arena*);
template<> ::meta::VertexVectorIndex* Arena::CreateMaybeMessage<::meta::VertexVectorIndex>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace meta {

enum VectorDistanceType {
  L2 = 0,
  IP = 1,
  COSINE = 2,
  VectorDistanceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VectorDistanceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VectorDistanceType_IsValid(int value);
const VectorDistanceType VectorDistanceType_MIN = L2;
const VectorDistanceType VectorDistanceType_MAX = COSINE;
const int VectorDistanceType_ARRAYSIZE = VectorDistanceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VectorDistanceType_descriptor();
inline const ::std::string& VectorDistanceType_Name(VectorDistanceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VectorDistanceType_descriptor(), value);
}
inline bool VectorDistanceType_Parse(
    const ::std::string& name, VectorDistanceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorDistanceType>(
    VectorDistanceType_descriptor(), name, value);
}
enum VectorIndexType {
  HNSW = 0,
  IVF_FLAT = 1,
  VectorIndexType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VectorIndexType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VectorIndexType_IsValid(int value);
const VectorIndexType VectorIndexType_MIN = HNSW;
const VectorIndexType VectorIndexType_MAX = IVF_FLAT;
const int VectorIndexType_ARRAYSIZE = VectorIndexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VectorIndexType_descriptor();
inline const ::std::string& VectorIndexType_Name(VectorIndexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VectorIndexType_descriptor(), value);
}
inline bool VectorIndexType_Parse(
    const ::std::string& name, VectorIndexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorIndexType>(
    VectorIndexType_descriptor(), name, value);
}
enum UpdateType {
  Add = 0,
  Delete = 1,
  UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UpdateType_IsValid(int value);
const UpdateType UpdateType_MIN = Add;
const UpdateType UpdateType_MAX = Delete;
const int UpdateType_ARRAYSIZE = UpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateType_descriptor();
inline const ::std::string& UpdateType_Name(UpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateType_descriptor(), value);
}
inline bool UpdateType_Parse(
    const ::std::string& name, UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateType>(
    UpdateType_descriptor(), name, value);
}
// ===================================================================

class VertexPropertyIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:meta.VertexPropertyIndex) */ {
 public:
  VertexPropertyIndex();
  virtual ~VertexPropertyIndex();

  VertexPropertyIndex(const VertexPropertyIndex& from);

  inline VertexPropertyIndex& operator=(const VertexPropertyIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VertexPropertyIndex(VertexPropertyIndex&& from) noexcept
    : VertexPropertyIndex() {
    *this = ::std::move(from);
  }

  inline VertexPropertyIndex& operator=(VertexPropertyIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexPropertyIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexPropertyIndex* internal_default_instance() {
    return reinterpret_cast<const VertexPropertyIndex*>(
               &_VertexPropertyIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VertexPropertyIndex* other);
  friend void swap(VertexPropertyIndex& a, VertexPropertyIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VertexPropertyIndex* New() const final {
    return CreateMaybeMessage<VertexPropertyIndex>(NULL);
  }

  VertexPropertyIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VertexPropertyIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VertexPropertyIndex& from);
  void MergeFrom(const VertexPropertyIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexPropertyIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string label = 3;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string property = 5;
  void clear_property();
  static const int kPropertyFieldNumber = 5;
  const ::std::string& property() const;
  void set_property(const ::std::string& value);
  #if LANG_CXX11
  void set_property(::std::string&& value);
  #endif
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  ::std::string* mutable_property();
  ::std::string* release_property();
  void set_allocated_property(::std::string* property);

  // bool is_unique = 2;
  void clear_is_unique();
  static const int kIsUniqueFieldNumber = 2;
  bool is_unique() const;
  void set_is_unique(bool value);

  // uint32 label_id = 4;
  void clear_label_id();
  static const int kLabelIdFieldNumber = 4;
  ::google::protobuf::uint32 label_id() const;
  void set_label_id(::google::protobuf::uint32 value);

  // uint32 property_id = 6;
  void clear_property_id();
  static const int kPropertyIdFieldNumber = 6;
  ::google::protobuf::uint32 property_id() const;
  void set_property_id(::google::protobuf::uint32 value);

  // uint32 index_id = 7;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 7;
  ::google::protobuf::uint32 index_id() const;
  void set_index_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.VertexPropertyIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  bool is_unique_;
  ::google::protobuf::uint32 label_id_;
  ::google::protobuf::uint32 property_id_;
  ::google::protobuf::uint32 index_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VertexFullTextIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:meta.VertexFullTextIndex) */ {
 public:
  VertexFullTextIndex();
  virtual ~VertexFullTextIndex();

  VertexFullTextIndex(const VertexFullTextIndex& from);

  inline VertexFullTextIndex& operator=(const VertexFullTextIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VertexFullTextIndex(VertexFullTextIndex&& from) noexcept
    : VertexFullTextIndex() {
    *this = ::std::move(from);
  }

  inline VertexFullTextIndex& operator=(VertexFullTextIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexFullTextIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexFullTextIndex* internal_default_instance() {
    return reinterpret_cast<const VertexFullTextIndex*>(
               &_VertexFullTextIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VertexFullTextIndex* other);
  friend void swap(VertexFullTextIndex& a, VertexFullTextIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VertexFullTextIndex* New() const final {
    return CreateMaybeMessage<VertexFullTextIndex>(NULL);
  }

  VertexFullTextIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VertexFullTextIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VertexFullTextIndex& from);
  void MergeFrom(const VertexFullTextIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexFullTextIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 3;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 3;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_labels(int index, ::std::string&& value);
  #endif
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  #if LANG_CXX11
  void add_labels(::std::string&& value);
  #endif
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // repeated string properties = 4;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::std::string& properties(int index) const;
  ::std::string* mutable_properties(int index);
  void set_properties(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_properties(int index, ::std::string&& value);
  #endif
  void set_properties(int index, const char* value);
  void set_properties(int index, const char* value, size_t size);
  ::std::string* add_properties();
  void add_properties(const ::std::string& value);
  #if LANG_CXX11
  void add_properties(::std::string&& value);
  #endif
  void add_properties(const char* value);
  void add_properties(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& properties() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_properties();

  // repeated uint32 label_ids = 5;
  int label_ids_size() const;
  void clear_label_ids();
  static const int kLabelIdsFieldNumber = 5;
  ::google::protobuf::uint32 label_ids(int index) const;
  void set_label_ids(int index, ::google::protobuf::uint32 value);
  void add_label_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      label_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_label_ids();

  // repeated uint32 property_ids = 6;
  int property_ids_size() const;
  void clear_property_ids();
  static const int kPropertyIdsFieldNumber = 6;
  ::google::protobuf::uint32 property_ids(int index) const;
  void set_property_ids(int index, ::google::protobuf::uint32 value);
  void add_property_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      property_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_property_ids();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // uint32 index_id = 7;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 7;
  ::google::protobuf::uint32 index_id() const;
  void set_index_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.VertexFullTextIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> properties_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > label_ids_;
  mutable int _label_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > property_ids_;
  mutable int _property_ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 index_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VertexVectorIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:meta.VertexVectorIndex) */ {
 public:
  VertexVectorIndex();
  virtual ~VertexVectorIndex();

  VertexVectorIndex(const VertexVectorIndex& from);

  inline VertexVectorIndex& operator=(const VertexVectorIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VertexVectorIndex(VertexVectorIndex&& from) noexcept
    : VertexVectorIndex() {
    *this = ::std::move(from);
  }

  inline VertexVectorIndex& operator=(VertexVectorIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexVectorIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexVectorIndex* internal_default_instance() {
    return reinterpret_cast<const VertexVectorIndex*>(
               &_VertexVectorIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VertexVectorIndex* other);
  friend void swap(VertexVectorIndex& a, VertexVectorIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VertexVectorIndex* New() const final {
    return CreateMaybeMessage<VertexVectorIndex>(NULL);
  }

  VertexVectorIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VertexVectorIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VertexVectorIndex& from);
  void MergeFrom(const VertexVectorIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexVectorIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string property = 4;
  void clear_property();
  static const int kPropertyFieldNumber = 4;
  const ::std::string& property() const;
  void set_property(const ::std::string& value);
  #if LANG_CXX11
  void set_property(::std::string&& value);
  #endif
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  ::std::string* mutable_property();
  ::std::string* release_property();
  void set_allocated_property(::std::string* property);

  // string index_dir = 10;
  void clear_index_dir();
  static const int kIndexDirFieldNumber = 10;
  const ::std::string& index_dir() const;
  void set_index_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_index_dir(::std::string&& value);
  #endif
  void set_index_dir(const char* value);
  void set_index_dir(const char* value, size_t size);
  ::std::string* mutable_index_dir();
  ::std::string* release_index_dir();
  void set_allocated_index_dir(::std::string* index_dir);

  // uint32 label_id = 3;
  void clear_label_id();
  static const int kLabelIdFieldNumber = 3;
  ::google::protobuf::uint32 label_id() const;
  void set_label_id(::google::protobuf::uint32 value);

  // uint32 property_id = 5;
  void clear_property_id();
  static const int kPropertyIdFieldNumber = 5;
  ::google::protobuf::uint32 property_id() const;
  void set_property_id(::google::protobuf::uint32 value);

  // uint32 sharding_num = 6;
  void clear_sharding_num();
  static const int kShardingNumFieldNumber = 6;
  ::google::protobuf::uint32 sharding_num() const;
  void set_sharding_num(::google::protobuf::uint32 value);

  // uint32 dimensions = 7;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 7;
  ::google::protobuf::uint32 dimensions() const;
  void set_dimensions(::google::protobuf::uint32 value);

  // .meta.VectorIndexType index_type = 8;
  void clear_index_type();
  static const int kIndexTypeFieldNumber = 8;
  ::meta::VectorIndexType index_type() const;
  void set_index_type(::meta::VectorIndexType value);

  // .meta.VectorDistanceType distance_type = 9;
  void clear_distance_type();
  static const int kDistanceTypeFieldNumber = 9;
  ::meta::VectorDistanceType distance_type() const;
  void set_distance_type(::meta::VectorDistanceType value);

  // uint32 hnsw_m = 11;
  void clear_hnsw_m();
  static const int kHnswMFieldNumber = 11;
  ::google::protobuf::uint32 hnsw_m() const;
  void set_hnsw_m(::google::protobuf::uint32 value);

  // uint32 hnsw_ef_construction = 12;
  void clear_hnsw_ef_construction();
  static const int kHnswEfConstructionFieldNumber = 12;
  ::google::protobuf::uint32 hnsw_ef_construction() const;
  void set_hnsw_ef_construction(::google::protobuf::uint32 value);

  // uint32 hnsw_ef_search = 13;
  void clear_hnsw_ef_search();
  static const int kHnswEfSearchFieldNumber = 13;
  ::google::protobuf::uint32 hnsw_ef_search() const;
  void set_hnsw_ef_search(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.VertexVectorIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  ::google::protobuf::internal::ArenaStringPtr index_dir_;
  ::google::protobuf::uint32 label_id_;
  ::google::protobuf::uint32 property_id_;
  ::google::protobuf::uint32 sharding_num_;
  ::google::protobuf::uint32 dimensions_;
  int index_type_;
  int distance_type_;
  ::google::protobuf::uint32 hnsw_m_;
  ::google::protobuf::uint32 hnsw_ef_construction_;
  ::google::protobuf::uint32 hnsw_ef_search_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VectorIndexManifest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:meta.VectorIndexManifest) */ {
 public:
  VectorIndexManifest();
  virtual ~VectorIndexManifest();

  VectorIndexManifest(const VectorIndexManifest& from);

  inline VectorIndexManifest& operator=(const VectorIndexManifest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VectorIndexManifest(VectorIndexManifest&& from) noexcept
    : VectorIndexManifest() {
    *this = ::std::move(from);
  }

  inline VectorIndexManifest& operator=(VectorIndexManifest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorIndexManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorIndexManifest* internal_default_instance() {
    return reinterpret_cast<const VectorIndexManifest*>(
               &_VectorIndexManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VectorIndexManifest* other);
  friend void swap(VectorIndexManifest& a, VectorIndexManifest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VectorIndexManifest* New() const final {
    return CreateMaybeMessage<VectorIndexManifest>(NULL);
  }

  VectorIndexManifest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VectorIndexManifest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VectorIndexManifest& from);
  void MergeFrom(const VectorIndexManifest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorIndexManifest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string chunk_ids = 1;
  int chunk_ids_size() const;
  void clear_chunk_ids();
  static const int kChunkIdsFieldNumber = 1;
  const ::std::string& chunk_ids(int index) const;
  ::std::string* mutable_chunk_ids(int index);
  void set_chunk_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_chunk_ids(int index, ::std::string&& value);
  #endif
  void set_chunk_ids(int index, const char* value);
  void set_chunk_ids(int index, const char* value, size_t size);
  ::std::string* add_chunk_ids();
  void add_chunk_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_chunk_ids(::std::string&& value);
  #endif
  void add_chunk_ids(const char* value);
  void add_chunk_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& chunk_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_chunk_ids();

  // @@protoc_insertion_point(class_scope:meta.VectorIndexManifest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> chunk_ids_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphDBMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:meta.GraphDBMetaInfo) */ {
 public:
  GraphDBMetaInfo();
  virtual ~GraphDBMetaInfo();

  GraphDBMetaInfo(const GraphDBMetaInfo& from);

  inline GraphDBMetaInfo& operator=(const GraphDBMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphDBMetaInfo(GraphDBMetaInfo&& from) noexcept
    : GraphDBMetaInfo() {
    *this = ::std::move(from);
  }

  inline GraphDBMetaInfo& operator=(GraphDBMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphDBMetaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDBMetaInfo* internal_default_instance() {
    return reinterpret_cast<const GraphDBMetaInfo*>(
               &_GraphDBMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GraphDBMetaInfo* other);
  friend void swap(GraphDBMetaInfo& a, GraphDBMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphDBMetaInfo* New() const final {
    return CreateMaybeMessage<GraphDBMetaInfo>(NULL);
  }

  GraphDBMetaInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphDBMetaInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GraphDBMetaInfo& from);
  void MergeFrom(const GraphDBMetaInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDBMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string graph_name = 1;
  void clear_graph_name();
  static const int kGraphNameFieldNumber = 1;
  const ::std::string& graph_name() const;
  void set_graph_name(const ::std::string& value);
  #if LANG_CXX11
  void set_graph_name(::std::string&& value);
  #endif
  void set_graph_name(const char* value);
  void set_graph_name(const char* value, size_t size);
  ::std::string* mutable_graph_name();
  ::std::string* release_graph_name();
  void set_allocated_graph_name(::std::string* graph_name);

  // uint32 graph_id = 2;
  void clear_graph_id();
  static const int kGraphIdFieldNumber = 2;
  ::google::protobuf::uint32 graph_id() const;
  void set_graph_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.GraphDBMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr graph_name_;
  ::google::protobuf::uint32 graph_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FullTextIndexUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:meta.FullTextIndexUpdate) */ {
 public:
  FullTextIndexUpdate();
  virtual ~FullTextIndexUpdate();

  FullTextIndexUpdate(const FullTextIndexUpdate& from);

  inline FullTextIndexUpdate& operator=(const FullTextIndexUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullTextIndexUpdate(FullTextIndexUpdate&& from) noexcept
    : FullTextIndexUpdate() {
    *this = ::std::move(from);
  }

  inline FullTextIndexUpdate& operator=(FullTextIndexUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FullTextIndexUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullTextIndexUpdate* internal_default_instance() {
    return reinterpret_cast<const FullTextIndexUpdate*>(
               &_FullTextIndexUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FullTextIndexUpdate* other);
  friend void swap(FullTextIndexUpdate& a, FullTextIndexUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullTextIndexUpdate* New() const final {
    return CreateMaybeMessage<FullTextIndexUpdate>(NULL);
  }

  FullTextIndexUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FullTextIndexUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FullTextIndexUpdate& from);
  void MergeFrom(const FullTextIndexUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullTextIndexUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // repeated string values = 4;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 4;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .meta.UpdateType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::meta::UpdateType type() const;
  void set_type(::meta::UpdateType value);

  // @@protoc_insertion_point(class_scope:meta.FullTextIndexUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::int64 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VertexPropertyIndex

// string name = 1;
inline void VertexPropertyIndex::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexPropertyIndex::name() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.name)
  return name_.GetNoArena();
}
inline void VertexPropertyIndex::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.name)
}
#if LANG_CXX11
inline void VertexPropertyIndex::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexPropertyIndex.name)
}
#endif
inline void VertexPropertyIndex::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexPropertyIndex.name)
}
inline void VertexPropertyIndex::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexPropertyIndex.name)
}
inline ::std::string* VertexPropertyIndex::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexPropertyIndex.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexPropertyIndex::release_name() {
  // @@protoc_insertion_point(field_release:meta.VertexPropertyIndex.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexPropertyIndex::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexPropertyIndex.name)
}

// bool is_unique = 2;
inline void VertexPropertyIndex::clear_is_unique() {
  is_unique_ = false;
}
inline bool VertexPropertyIndex::is_unique() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.is_unique)
  return is_unique_;
}
inline void VertexPropertyIndex::set_is_unique(bool value) {
  
  is_unique_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.is_unique)
}

// string label = 3;
inline void VertexPropertyIndex::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexPropertyIndex::label() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.label)
  return label_.GetNoArena();
}
inline void VertexPropertyIndex::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.label)
}
#if LANG_CXX11
inline void VertexPropertyIndex::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexPropertyIndex.label)
}
#endif
inline void VertexPropertyIndex::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexPropertyIndex.label)
}
inline void VertexPropertyIndex::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexPropertyIndex.label)
}
inline ::std::string* VertexPropertyIndex::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexPropertyIndex.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexPropertyIndex::release_label() {
  // @@protoc_insertion_point(field_release:meta.VertexPropertyIndex.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexPropertyIndex::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexPropertyIndex.label)
}

// uint32 label_id = 4;
inline void VertexPropertyIndex::clear_label_id() {
  label_id_ = 0u;
}
inline ::google::protobuf::uint32 VertexPropertyIndex::label_id() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.label_id)
  return label_id_;
}
inline void VertexPropertyIndex::set_label_id(::google::protobuf::uint32 value) {
  
  label_id_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.label_id)
}

// string property = 5;
inline void VertexPropertyIndex::clear_property() {
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexPropertyIndex::property() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.property)
  return property_.GetNoArena();
}
inline void VertexPropertyIndex::set_property(const ::std::string& value) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.property)
}
#if LANG_CXX11
inline void VertexPropertyIndex::set_property(::std::string&& value) {
  
  property_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexPropertyIndex.property)
}
#endif
inline void VertexPropertyIndex::set_property(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexPropertyIndex.property)
}
inline void VertexPropertyIndex::set_property(const char* value, size_t size) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexPropertyIndex.property)
}
inline ::std::string* VertexPropertyIndex::mutable_property() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexPropertyIndex.property)
  return property_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexPropertyIndex::release_property() {
  // @@protoc_insertion_point(field_release:meta.VertexPropertyIndex.property)
  
  return property_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexPropertyIndex::set_allocated_property(::std::string* property) {
  if (property != NULL) {
    
  } else {
    
  }
  property_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexPropertyIndex.property)
}

// uint32 property_id = 6;
inline void VertexPropertyIndex::clear_property_id() {
  property_id_ = 0u;
}
inline ::google::protobuf::uint32 VertexPropertyIndex::property_id() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.property_id)
  return property_id_;
}
inline void VertexPropertyIndex::set_property_id(::google::protobuf::uint32 value) {
  
  property_id_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.property_id)
}

// uint32 index_id = 7;
inline void VertexPropertyIndex::clear_index_id() {
  index_id_ = 0u;
}
inline ::google::protobuf::uint32 VertexPropertyIndex::index_id() const {
  // @@protoc_insertion_point(field_get:meta.VertexPropertyIndex.index_id)
  return index_id_;
}
inline void VertexPropertyIndex::set_index_id(::google::protobuf::uint32 value) {
  
  index_id_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexPropertyIndex.index_id)
}

// -------------------------------------------------------------------

// VertexFullTextIndex

// string name = 1;
inline void VertexFullTextIndex::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexFullTextIndex::name() const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.name)
  return name_.GetNoArena();
}
inline void VertexFullTextIndex::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.name)
}
#if LANG_CXX11
inline void VertexFullTextIndex::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexFullTextIndex.name)
}
#endif
inline void VertexFullTextIndex::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexFullTextIndex.name)
}
inline void VertexFullTextIndex::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexFullTextIndex.name)
}
inline ::std::string* VertexFullTextIndex::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexFullTextIndex.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexFullTextIndex::release_name() {
  // @@protoc_insertion_point(field_release:meta.VertexFullTextIndex.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexFullTextIndex::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexFullTextIndex.name)
}

// string path = 2;
inline void VertexFullTextIndex::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexFullTextIndex::path() const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.path)
  return path_.GetNoArena();
}
inline void VertexFullTextIndex::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.path)
}
#if LANG_CXX11
inline void VertexFullTextIndex::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexFullTextIndex.path)
}
#endif
inline void VertexFullTextIndex::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexFullTextIndex.path)
}
inline void VertexFullTextIndex::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexFullTextIndex.path)
}
inline ::std::string* VertexFullTextIndex::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexFullTextIndex.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexFullTextIndex::release_path() {
  // @@protoc_insertion_point(field_release:meta.VertexFullTextIndex.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexFullTextIndex::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexFullTextIndex.path)
}

// repeated string labels = 3;
inline int VertexFullTextIndex::labels_size() const {
  return labels_.size();
}
inline void VertexFullTextIndex::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& VertexFullTextIndex::labels(int index) const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.labels)
  return labels_.Get(index);
}
inline ::std::string* VertexFullTextIndex::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:meta.VertexFullTextIndex.labels)
  return labels_.Mutable(index);
}
inline void VertexFullTextIndex::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VertexFullTextIndex::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VertexFullTextIndex::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.VertexFullTextIndex.labels)
}
inline void VertexFullTextIndex::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.VertexFullTextIndex.labels)
}
inline ::std::string* VertexFullTextIndex::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:meta.VertexFullTextIndex.labels)
  return labels_.Add();
}
inline void VertexFullTextIndex::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:meta.VertexFullTextIndex.labels)
}
#if LANG_CXX11
inline void VertexFullTextIndex::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:meta.VertexFullTextIndex.labels)
}
#endif
inline void VertexFullTextIndex::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:meta.VertexFullTextIndex.labels)
}
inline void VertexFullTextIndex::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:meta.VertexFullTextIndex.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VertexFullTextIndex::labels() const {
  // @@protoc_insertion_point(field_list:meta.VertexFullTextIndex.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VertexFullTextIndex::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:meta.VertexFullTextIndex.labels)
  return &labels_;
}

// repeated string properties = 4;
inline int VertexFullTextIndex::properties_size() const {
  return properties_.size();
}
inline void VertexFullTextIndex::clear_properties() {
  properties_.Clear();
}
inline const ::std::string& VertexFullTextIndex::properties(int index) const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.properties)
  return properties_.Get(index);
}
inline ::std::string* VertexFullTextIndex::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:meta.VertexFullTextIndex.properties)
  return properties_.Mutable(index);
}
inline void VertexFullTextIndex::set_properties(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.properties)
  properties_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VertexFullTextIndex::set_properties(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.properties)
  properties_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VertexFullTextIndex::set_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.VertexFullTextIndex.properties)
}
inline void VertexFullTextIndex::set_properties(int index, const char* value, size_t size) {
  properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.VertexFullTextIndex.properties)
}
inline ::std::string* VertexFullTextIndex::add_properties() {
  // @@protoc_insertion_point(field_add_mutable:meta.VertexFullTextIndex.properties)
  return properties_.Add();
}
inline void VertexFullTextIndex::add_properties(const ::std::string& value) {
  properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:meta.VertexFullTextIndex.properties)
}
#if LANG_CXX11
inline void VertexFullTextIndex::add_properties(::std::string&& value) {
  properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:meta.VertexFullTextIndex.properties)
}
#endif
inline void VertexFullTextIndex::add_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:meta.VertexFullTextIndex.properties)
}
inline void VertexFullTextIndex::add_properties(const char* value, size_t size) {
  properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:meta.VertexFullTextIndex.properties)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VertexFullTextIndex::properties() const {
  // @@protoc_insertion_point(field_list:meta.VertexFullTextIndex.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VertexFullTextIndex::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:meta.VertexFullTextIndex.properties)
  return &properties_;
}

// repeated uint32 label_ids = 5;
inline int VertexFullTextIndex::label_ids_size() const {
  return label_ids_.size();
}
inline void VertexFullTextIndex::clear_label_ids() {
  label_ids_.Clear();
}
inline ::google::protobuf::uint32 VertexFullTextIndex::label_ids(int index) const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.label_ids)
  return label_ids_.Get(index);
}
inline void VertexFullTextIndex::set_label_ids(int index, ::google::protobuf::uint32 value) {
  label_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.label_ids)
}
inline void VertexFullTextIndex::add_label_ids(::google::protobuf::uint32 value) {
  label_ids_.Add(value);
  // @@protoc_insertion_point(field_add:meta.VertexFullTextIndex.label_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VertexFullTextIndex::label_ids() const {
  // @@protoc_insertion_point(field_list:meta.VertexFullTextIndex.label_ids)
  return label_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VertexFullTextIndex::mutable_label_ids() {
  // @@protoc_insertion_point(field_mutable_list:meta.VertexFullTextIndex.label_ids)
  return &label_ids_;
}

// repeated uint32 property_ids = 6;
inline int VertexFullTextIndex::property_ids_size() const {
  return property_ids_.size();
}
inline void VertexFullTextIndex::clear_property_ids() {
  property_ids_.Clear();
}
inline ::google::protobuf::uint32 VertexFullTextIndex::property_ids(int index) const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.property_ids)
  return property_ids_.Get(index);
}
inline void VertexFullTextIndex::set_property_ids(int index, ::google::protobuf::uint32 value) {
  property_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.property_ids)
}
inline void VertexFullTextIndex::add_property_ids(::google::protobuf::uint32 value) {
  property_ids_.Add(value);
  // @@protoc_insertion_point(field_add:meta.VertexFullTextIndex.property_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VertexFullTextIndex::property_ids() const {
  // @@protoc_insertion_point(field_list:meta.VertexFullTextIndex.property_ids)
  return property_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VertexFullTextIndex::mutable_property_ids() {
  // @@protoc_insertion_point(field_mutable_list:meta.VertexFullTextIndex.property_ids)
  return &property_ids_;
}

// uint32 index_id = 7;
inline void VertexFullTextIndex::clear_index_id() {
  index_id_ = 0u;
}
inline ::google::protobuf::uint32 VertexFullTextIndex::index_id() const {
  // @@protoc_insertion_point(field_get:meta.VertexFullTextIndex.index_id)
  return index_id_;
}
inline void VertexFullTextIndex::set_index_id(::google::protobuf::uint32 value) {
  
  index_id_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexFullTextIndex.index_id)
}

// -------------------------------------------------------------------

// VertexVectorIndex

// string name = 1;
inline void VertexVectorIndex::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexVectorIndex::name() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.name)
  return name_.GetNoArena();
}
inline void VertexVectorIndex::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.name)
}
#if LANG_CXX11
inline void VertexVectorIndex::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexVectorIndex.name)
}
#endif
inline void VertexVectorIndex::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexVectorIndex.name)
}
inline void VertexVectorIndex::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexVectorIndex.name)
}
inline ::std::string* VertexVectorIndex::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexVectorIndex.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexVectorIndex::release_name() {
  // @@protoc_insertion_point(field_release:meta.VertexVectorIndex.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexVectorIndex::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexVectorIndex.name)
}

// string label = 2;
inline void VertexVectorIndex::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexVectorIndex::label() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.label)
  return label_.GetNoArena();
}
inline void VertexVectorIndex::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.label)
}
#if LANG_CXX11
inline void VertexVectorIndex::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexVectorIndex.label)
}
#endif
inline void VertexVectorIndex::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexVectorIndex.label)
}
inline void VertexVectorIndex::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexVectorIndex.label)
}
inline ::std::string* VertexVectorIndex::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexVectorIndex.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexVectorIndex::release_label() {
  // @@protoc_insertion_point(field_release:meta.VertexVectorIndex.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexVectorIndex::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexVectorIndex.label)
}

// uint32 label_id = 3;
inline void VertexVectorIndex::clear_label_id() {
  label_id_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::label_id() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.label_id)
  return label_id_;
}
inline void VertexVectorIndex::set_label_id(::google::protobuf::uint32 value) {
  
  label_id_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.label_id)
}

// string property = 4;
inline void VertexVectorIndex::clear_property() {
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexVectorIndex::property() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.property)
  return property_.GetNoArena();
}
inline void VertexVectorIndex::set_property(const ::std::string& value) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.property)
}
#if LANG_CXX11
inline void VertexVectorIndex::set_property(::std::string&& value) {
  
  property_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexVectorIndex.property)
}
#endif
inline void VertexVectorIndex::set_property(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexVectorIndex.property)
}
inline void VertexVectorIndex::set_property(const char* value, size_t size) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexVectorIndex.property)
}
inline ::std::string* VertexVectorIndex::mutable_property() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexVectorIndex.property)
  return property_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexVectorIndex::release_property() {
  // @@protoc_insertion_point(field_release:meta.VertexVectorIndex.property)
  
  return property_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexVectorIndex::set_allocated_property(::std::string* property) {
  if (property != NULL) {
    
  } else {
    
  }
  property_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexVectorIndex.property)
}

// uint32 property_id = 5;
inline void VertexVectorIndex::clear_property_id() {
  property_id_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::property_id() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.property_id)
  return property_id_;
}
inline void VertexVectorIndex::set_property_id(::google::protobuf::uint32 value) {
  
  property_id_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.property_id)
}

// uint32 sharding_num = 6;
inline void VertexVectorIndex::clear_sharding_num() {
  sharding_num_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::sharding_num() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.sharding_num)
  return sharding_num_;
}
inline void VertexVectorIndex::set_sharding_num(::google::protobuf::uint32 value) {
  
  sharding_num_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.sharding_num)
}

// uint32 dimensions = 7;
inline void VertexVectorIndex::clear_dimensions() {
  dimensions_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::dimensions() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.dimensions)
  return dimensions_;
}
inline void VertexVectorIndex::set_dimensions(::google::protobuf::uint32 value) {
  
  dimensions_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.dimensions)
}

// .meta.VectorIndexType index_type = 8;
inline void VertexVectorIndex::clear_index_type() {
  index_type_ = 0;
}
inline ::meta::VectorIndexType VertexVectorIndex::index_type() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.index_type)
  return static_cast< ::meta::VectorIndexType >(index_type_);
}
inline void VertexVectorIndex::set_index_type(::meta::VectorIndexType value) {
  
  index_type_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.index_type)
}

// .meta.VectorDistanceType distance_type = 9;
inline void VertexVectorIndex::clear_distance_type() {
  distance_type_ = 0;
}
inline ::meta::VectorDistanceType VertexVectorIndex::distance_type() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.distance_type)
  return static_cast< ::meta::VectorDistanceType >(distance_type_);
}
inline void VertexVectorIndex::set_distance_type(::meta::VectorDistanceType value) {
  
  distance_type_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.distance_type)
}

// string index_dir = 10;
inline void VertexVectorIndex::clear_index_dir() {
  index_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VertexVectorIndex::index_dir() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.index_dir)
  return index_dir_.GetNoArena();
}
inline void VertexVectorIndex::set_index_dir(const ::std::string& value) {
  
  index_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.index_dir)
}
#if LANG_CXX11
inline void VertexVectorIndex::set_index_dir(::std::string&& value) {
  
  index_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.VertexVectorIndex.index_dir)
}
#endif
inline void VertexVectorIndex::set_index_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.VertexVectorIndex.index_dir)
}
inline void VertexVectorIndex::set_index_dir(const char* value, size_t size) {
  
  index_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.VertexVectorIndex.index_dir)
}
inline ::std::string* VertexVectorIndex::mutable_index_dir() {
  
  // @@protoc_insertion_point(field_mutable:meta.VertexVectorIndex.index_dir)
  return index_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VertexVectorIndex::release_index_dir() {
  // @@protoc_insertion_point(field_release:meta.VertexVectorIndex.index_dir)
  
  return index_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VertexVectorIndex::set_allocated_index_dir(::std::string* index_dir) {
  if (index_dir != NULL) {
    
  } else {
    
  }
  index_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_dir);
  // @@protoc_insertion_point(field_set_allocated:meta.VertexVectorIndex.index_dir)
}

// uint32 hnsw_m = 11;
inline void VertexVectorIndex::clear_hnsw_m() {
  hnsw_m_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::hnsw_m() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.hnsw_m)
  return hnsw_m_;
}
inline void VertexVectorIndex::set_hnsw_m(::google::protobuf::uint32 value) {
  
  hnsw_m_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.hnsw_m)
}

// uint32 hnsw_ef_construction = 12;
inline void VertexVectorIndex::clear_hnsw_ef_construction() {
  hnsw_ef_construction_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::hnsw_ef_construction() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.hnsw_ef_construction)
  return hnsw_ef_construction_;
}
inline void VertexVectorIndex::set_hnsw_ef_construction(::google::protobuf::uint32 value) {
  
  hnsw_ef_construction_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.hnsw_ef_construction)
}

// uint32 hnsw_ef_search = 13;
inline void VertexVectorIndex::clear_hnsw_ef_search() {
  hnsw_ef_search_ = 0u;
}
inline ::google::protobuf::uint32 VertexVectorIndex::hnsw_ef_search() const {
  // @@protoc_insertion_point(field_get:meta.VertexVectorIndex.hnsw_ef_search)
  return hnsw_ef_search_;
}
inline void VertexVectorIndex::set_hnsw_ef_search(::google::protobuf::uint32 value) {
  
  hnsw_ef_search_ = value;
  // @@protoc_insertion_point(field_set:meta.VertexVectorIndex.hnsw_ef_search)
}

// -------------------------------------------------------------------

// VectorIndexManifest

// repeated string chunk_ids = 1;
inline int VectorIndexManifest::chunk_ids_size() const {
  return chunk_ids_.size();
}
inline void VectorIndexManifest::clear_chunk_ids() {
  chunk_ids_.Clear();
}
inline const ::std::string& VectorIndexManifest::chunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:meta.VectorIndexManifest.chunk_ids)
  return chunk_ids_.Get(index);
}
inline ::std::string* VectorIndexManifest::mutable_chunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:meta.VectorIndexManifest.chunk_ids)
  return chunk_ids_.Mutable(index);
}
inline void VectorIndexManifest::set_chunk_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:meta.VectorIndexManifest.chunk_ids)
  chunk_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VectorIndexManifest::set_chunk_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:meta.VectorIndexManifest.chunk_ids)
  chunk_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VectorIndexManifest::set_chunk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  chunk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.VectorIndexManifest.chunk_ids)
}
inline void VectorIndexManifest::set_chunk_ids(int index, const char* value, size_t size) {
  chunk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.VectorIndexManifest.chunk_ids)
}
inline ::std::string* VectorIndexManifest::add_chunk_ids() {
  // @@protoc_insertion_point(field_add_mutable:meta.VectorIndexManifest.chunk_ids)
  return chunk_ids_.Add();
}
inline void VectorIndexManifest::add_chunk_ids(const ::std::string& value) {
  chunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:meta.VectorIndexManifest.chunk_ids)
}
#if LANG_CXX11
inline void VectorIndexManifest::add_chunk_ids(::std::string&& value) {
  chunk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:meta.VectorIndexManifest.chunk_ids)
}
#endif
inline void VectorIndexManifest::add_chunk_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  chunk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:meta.VectorIndexManifest.chunk_ids)
}
inline void VectorIndexManifest::add_chunk_ids(const char* value, size_t size) {
  chunk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:meta.VectorIndexManifest.chunk_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VectorIndexManifest::chunk_ids() const {
  // @@protoc_insertion_point(field_list:meta.VectorIndexManifest.chunk_ids)
  return chunk_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VectorIndexManifest::mutable_chunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:meta.VectorIndexManifest.chunk_ids)
  return &chunk_ids_;
}

// -------------------------------------------------------------------

// GraphDBMetaInfo

// string graph_name = 1;
inline void GraphDBMetaInfo::clear_graph_name() {
  graph_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphDBMetaInfo::graph_name() const {
  // @@protoc_insertion_point(field_get:meta.GraphDBMetaInfo.graph_name)
  return graph_name_.GetNoArena();
}
inline void GraphDBMetaInfo::set_graph_name(const ::std::string& value) {
  
  graph_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:meta.GraphDBMetaInfo.graph_name)
}
#if LANG_CXX11
inline void GraphDBMetaInfo::set_graph_name(::std::string&& value) {
  
  graph_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:meta.GraphDBMetaInfo.graph_name)
}
#endif
inline void GraphDBMetaInfo::set_graph_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  graph_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:meta.GraphDBMetaInfo.graph_name)
}
inline void GraphDBMetaInfo::set_graph_name(const char* value, size_t size) {
  
  graph_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:meta.GraphDBMetaInfo.graph_name)
}
inline ::std::string* GraphDBMetaInfo::mutable_graph_name() {
  
  // @@protoc_insertion_point(field_mutable:meta.GraphDBMetaInfo.graph_name)
  return graph_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphDBMetaInfo::release_graph_name() {
  // @@protoc_insertion_point(field_release:meta.GraphDBMetaInfo.graph_name)
  
  return graph_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphDBMetaInfo::set_allocated_graph_name(::std::string* graph_name) {
  if (graph_name != NULL) {
    
  } else {
    
  }
  graph_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_name);
  // @@protoc_insertion_point(field_set_allocated:meta.GraphDBMetaInfo.graph_name)
}

// uint32 graph_id = 2;
inline void GraphDBMetaInfo::clear_graph_id() {
  graph_id_ = 0u;
}
inline ::google::protobuf::uint32 GraphDBMetaInfo::graph_id() const {
  // @@protoc_insertion_point(field_get:meta.GraphDBMetaInfo.graph_id)
  return graph_id_;
}
inline void GraphDBMetaInfo::set_graph_id(::google::protobuf::uint32 value) {
  
  graph_id_ = value;
  // @@protoc_insertion_point(field_set:meta.GraphDBMetaInfo.graph_id)
}

// -------------------------------------------------------------------

// FullTextIndexUpdate

// .meta.UpdateType type = 1;
inline void FullTextIndexUpdate::clear_type() {
  type_ = 0;
}
inline ::meta::UpdateType FullTextIndexUpdate::type() const {
  // @@protoc_insertion_point(field_get:meta.FullTextIndexUpdate.type)
  return static_cast< ::meta::UpdateType >(type_);
}
inline void FullTextIndexUpdate::set_type(::meta::UpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:meta.FullTextIndexUpdate.type)
}

// int64 id = 2;
inline void FullTextIndexUpdate::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FullTextIndexUpdate::id() const {
  // @@protoc_insertion_point(field_get:meta.FullTextIndexUpdate.id)
  return id_;
}
inline void FullTextIndexUpdate::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:meta.FullTextIndexUpdate.id)
}

// repeated string fields = 3;
inline int FullTextIndexUpdate::fields_size() const {
  return fields_.size();
}
inline void FullTextIndexUpdate::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& FullTextIndexUpdate::fields(int index) const {
  // @@protoc_insertion_point(field_get:meta.FullTextIndexUpdate.fields)
  return fields_.Get(index);
}
inline ::std::string* FullTextIndexUpdate::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:meta.FullTextIndexUpdate.fields)
  return fields_.Mutable(index);
}
inline void FullTextIndexUpdate::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:meta.FullTextIndexUpdate.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FullTextIndexUpdate::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:meta.FullTextIndexUpdate.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FullTextIndexUpdate::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.FullTextIndexUpdate.fields)
}
inline void FullTextIndexUpdate::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.FullTextIndexUpdate.fields)
}
inline ::std::string* FullTextIndexUpdate::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:meta.FullTextIndexUpdate.fields)
  return fields_.Add();
}
inline void FullTextIndexUpdate::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:meta.FullTextIndexUpdate.fields)
}
#if LANG_CXX11
inline void FullTextIndexUpdate::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:meta.FullTextIndexUpdate.fields)
}
#endif
inline void FullTextIndexUpdate::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:meta.FullTextIndexUpdate.fields)
}
inline void FullTextIndexUpdate::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:meta.FullTextIndexUpdate.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FullTextIndexUpdate::fields() const {
  // @@protoc_insertion_point(field_list:meta.FullTextIndexUpdate.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FullTextIndexUpdate::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:meta.FullTextIndexUpdate.fields)
  return &fields_;
}

// repeated string values = 4;
inline int FullTextIndexUpdate::values_size() const {
  return values_.size();
}
inline void FullTextIndexUpdate::clear_values() {
  values_.Clear();
}
inline const ::std::string& FullTextIndexUpdate::values(int index) const {
  // @@protoc_insertion_point(field_get:meta.FullTextIndexUpdate.values)
  return values_.Get(index);
}
inline ::std::string* FullTextIndexUpdate::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:meta.FullTextIndexUpdate.values)
  return values_.Mutable(index);
}
inline void FullTextIndexUpdate::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:meta.FullTextIndexUpdate.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FullTextIndexUpdate::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:meta.FullTextIndexUpdate.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FullTextIndexUpdate::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.FullTextIndexUpdate.values)
}
inline void FullTextIndexUpdate::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.FullTextIndexUpdate.values)
}
inline ::std::string* FullTextIndexUpdate::add_values() {
  // @@protoc_insertion_point(field_add_mutable:meta.FullTextIndexUpdate.values)
  return values_.Add();
}
inline void FullTextIndexUpdate::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:meta.FullTextIndexUpdate.values)
}
#if LANG_CXX11
inline void FullTextIndexUpdate::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:meta.FullTextIndexUpdate.values)
}
#endif
inline void FullTextIndexUpdate::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:meta.FullTextIndexUpdate.values)
}
inline void FullTextIndexUpdate::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:meta.FullTextIndexUpdate.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FullTextIndexUpdate::values() const {
  // @@protoc_insertion_point(field_list:meta.FullTextIndexUpdate.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FullTextIndexUpdate::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:meta.FullTextIndexUpdate.values)
  return &values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::meta::VectorDistanceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::meta::VectorDistanceType>() {
  return ::meta::VectorDistanceType_descriptor();
}
template <> struct is_proto_enum< ::meta::VectorIndexType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::meta::VectorIndexType>() {
  return ::meta::VectorIndexType_descriptor();
}
template <> struct is_proto_enum< ::meta::UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::meta::UpdateType>() {
  return ::meta::UpdateType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_meta_2eproto
