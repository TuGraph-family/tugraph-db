
// Generated from src/cypher/grammar/Lcypher.g4 by ANTLR 4.12.0


#include "LcypherVisitor.h"

#include "LcypherParser.h"


using namespace antlrcpp;
using namespace parser;

using namespace antlr4;

namespace {

struct LcypherParserStaticData final {
  LcypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LcypherParserStaticData(const LcypherParserStaticData&) = delete;
  LcypherParserStaticData(LcypherParserStaticData&&) = delete;
  LcypherParserStaticData& operator=(const LcypherParserStaticData&) = delete;
  LcypherParserStaticData& operator=(LcypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lcypherParserOnceFlag;
LcypherParserStaticData *lcypherParserStaticData = nullptr;

void lcypherParserInitialize() {
  assert(lcypherParserStaticData == nullptr);
  auto staticData = std::make_unique<LcypherParserStaticData>(
    std::vector<std::string>{
      "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", "oC_Union",
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "oC_UpdatingClause",
      "oC_ReadingClause", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction",
      "oC_Create", "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem",
      "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem",
      "oC_With", "oC_Return", "oC_ReturnBody", "oC_ReturnItems", "oC_ReturnItem",
      "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Hint", "oC_Where",
      "oC_Pattern", "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement",
      "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern",
      "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes",
      "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName",
      "oC_RelTypeName", "oC_Expression", "oC_OrExpression", "oC_XorExpression",
      "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression",
      "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression",
      "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression",
      "oC_ListOperatorExpression", "oC_StringOperatorExpression", "oC_NullOperatorExpression",
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral",
      "oC_ListLiteral", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression",
      "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation",
      "oC_FunctionName", "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation",
      "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension",
      "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression",
      "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", "oC_MapLiteral",
      "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral",
      "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", "oC_ReservedWord",
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'",
      "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'",
      "'>'", "'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", "'\\u3008'",
      "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", "'\\uFF1E'",
      "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'",
      "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "EXPLAIN", "PROFILE",
      "UNION", "ALL", "OPTIONAL_", "MATCH", "UNWIND", "AS", "MERGE", "ON",
      "CREATE", "SET", "DETACH", "DELETE_", "REMOVE", "CALL", "YIELD", "WITH",
      "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING",
      "ASC", "DESCENDING", "DESC", "USING", "JOIN", "START", "WHERE", "OR",
      "XOR", "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "REGEXP",
      "IS", "NULL_", "COUNT", "ANY", "NONE", "SINGLE", "TRUE_", "FALSE_",
      "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral",
      "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter",
      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit",
      "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "FILTER",
      "EXTRACT", "UnescapedSymbolicName", "CONSTRAINT", "DO", "FOR", "REQUIRE",
      "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP", "IdentifierStart",
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment"
    }
  );
  static const int32_t serializedATNSegment[] = {
	4,1,133,1588,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
	7,98,2,99,7,99,1,0,3,0,202,8,0,1,0,1,0,3,0,206,8,0,1,0,3,0,209,8,0,1,
	0,3,0,212,8,0,1,0,1,0,1,1,1,1,1,1,3,1,219,8,1,1,1,1,1,1,1,3,1,224,8,1,
	1,1,3,1,227,8,1,1,2,1,2,3,2,231,8,2,1,3,1,3,3,3,235,8,3,1,3,5,3,238,8,
	3,10,3,12,3,241,9,3,1,4,1,4,1,4,1,4,3,4,247,8,4,1,4,1,4,1,4,3,4,252,8,
	4,1,4,3,4,255,8,4,1,5,1,5,3,5,259,8,5,1,6,1,6,3,6,263,8,6,5,6,265,8,6,
	10,6,12,6,268,9,6,1,6,1,6,1,6,3,6,273,8,6,5,6,275,8,6,10,6,12,6,278,9,
	6,1,6,1,6,3,6,282,8,6,1,6,5,6,285,8,6,10,6,12,6,288,9,6,1,6,3,6,291,8,
	6,1,6,3,6,294,8,6,3,6,296,8,6,1,7,1,7,3,7,300,8,7,5,7,302,8,7,10,7,12,
	7,305,9,7,1,7,1,7,3,7,309,8,7,5,7,311,8,7,10,7,12,7,314,9,7,1,7,1,7,3,
	7,318,8,7,4,7,320,8,7,11,7,12,7,321,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,331,
	8,8,1,9,1,9,1,9,3,9,336,8,9,1,10,1,10,3,10,340,8,10,1,10,1,10,3,10,344,
	8,10,1,10,1,10,3,10,348,8,10,1,10,5,10,351,8,10,10,10,12,10,354,9,10,
	1,10,3,10,357,8,10,1,10,3,10,360,8,10,1,11,1,11,3,11,364,8,11,1,11,1,
	11,1,11,1,11,1,11,1,11,1,12,1,12,3,12,374,8,12,1,12,1,12,1,12,5,12,379,
	8,12,10,12,12,12,382,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
	1,13,3,13,394,8,13,1,14,1,14,3,14,398,8,14,1,14,1,14,1,15,1,15,3,15,404,
	8,15,1,15,1,15,1,15,5,15,409,8,15,10,15,12,15,412,9,15,1,16,1,16,3,16,
	416,8,16,1,16,1,16,3,16,420,8,16,1,16,1,16,1,16,1,16,3,16,426,8,16,1,
	16,1,16,3,16,430,8,16,1,16,1,16,1,16,1,16,3,16,436,8,16,1,16,1,16,3,16,
	440,8,16,1,16,1,16,1,16,1,16,3,16,446,8,16,1,16,1,16,3,16,450,8,16,1,
	17,1,17,3,17,454,8,17,1,17,1,17,3,17,458,8,17,1,17,1,17,3,17,462,8,17,
	1,17,1,17,3,17,466,8,17,1,17,5,17,469,8,17,10,17,12,17,472,9,17,1,18,
	1,18,1,18,1,18,3,18,478,8,18,1,18,1,18,3,18,482,8,18,1,18,5,18,485,8,
	18,10,18,12,18,488,9,18,1,19,1,19,1,19,1,19,3,19,494,8,19,1,20,1,20,1,
	20,1,20,3,20,500,8,20,1,20,1,20,1,20,3,20,505,8,20,1,21,1,21,1,21,1,21,
	3,21,511,8,21,1,21,1,21,1,21,1,21,3,21,517,8,21,1,22,1,22,1,22,3,22,522,
	8,22,1,22,1,22,3,22,526,8,22,1,22,5,22,529,8,22,10,22,12,22,532,9,22,
	3,22,534,8,22,1,22,3,22,537,8,22,1,22,3,22,540,8,22,1,23,1,23,1,23,1,
	23,1,23,3,23,547,8,23,1,23,1,23,1,24,1,24,3,24,553,8,24,1,24,3,24,556,
	8,24,1,24,1,24,1,24,3,24,561,8,24,1,24,3,24,564,8,24,1,25,1,25,3,25,568,
	8,25,1,25,3,25,571,8,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,579,8,26,1,
	26,1,26,3,26,583,8,26,1,26,1,26,3,26,587,8,26,1,27,1,27,3,27,591,8,27,
	1,27,1,27,3,27,595,8,27,1,27,5,27,598,8,27,10,27,12,27,601,9,27,1,27,
	1,27,3,27,605,8,27,1,27,1,27,3,27,609,8,27,1,27,5,27,612,8,27,10,27,12,
	27,615,9,27,3,27,617,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,626,
	8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,635,8,29,1,29,5,29,638,8,
	29,10,29,12,29,641,9,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,
	1,32,3,32,653,8,32,1,32,3,32,656,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
	33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,672,8,33,1,34,1,34,1,34,1,
	34,1,35,1,35,3,35,680,8,35,1,35,1,35,3,35,684,8,35,1,35,5,35,687,8,35,
	10,35,12,35,690,9,35,1,36,1,36,3,36,694,8,36,1,36,1,36,3,36,698,8,36,
	1,36,1,36,1,36,3,36,703,8,36,1,37,1,37,1,38,1,38,3,38,709,8,38,1,38,5,
	38,712,8,38,10,38,12,38,715,9,38,1,38,1,38,1,38,1,38,3,38,721,8,38,1,
	39,1,39,3,39,725,8,39,1,39,1,39,3,39,729,8,39,3,39,731,8,39,1,39,1,39,
	3,39,735,8,39,3,39,737,8,39,1,39,1,39,3,39,741,8,39,3,39,743,8,39,1,39,
	1,39,1,40,1,40,3,40,749,8,40,1,40,1,40,1,41,1,41,3,41,755,8,41,1,41,1,
	41,3,41,759,8,41,1,41,3,41,762,8,41,1,41,3,41,765,8,41,1,41,1,41,3,41,
	769,8,41,1,41,1,41,1,41,1,41,3,41,775,8,41,1,41,1,41,3,41,779,8,41,1,
	41,3,41,782,8,41,1,41,3,41,785,8,41,1,41,1,41,1,41,1,41,3,41,791,8,41,
	1,41,3,41,794,8,41,1,41,3,41,797,8,41,1,41,1,41,3,41,801,8,41,1,41,1,
	41,1,41,1,41,3,41,807,8,41,1,41,3,41,810,8,41,1,41,3,41,813,8,41,1,41,
	1,41,3,41,817,8,41,1,42,1,42,3,42,821,8,42,1,42,1,42,3,42,825,8,42,3,
	42,827,8,42,1,42,1,42,3,42,831,8,42,3,42,833,8,42,1,42,3,42,836,8,42,
	1,42,1,42,3,42,840,8,42,3,42,842,8,42,1,42,1,42,1,43,1,43,3,43,848,8,
	43,1,44,1,44,3,44,852,8,44,1,44,1,44,3,44,856,8,44,1,44,1,44,3,44,860,
	8,44,1,44,3,44,863,8,44,1,44,5,44,866,8,44,10,44,12,44,869,9,44,1,45,
	1,45,3,45,873,8,45,1,45,5,45,876,8,45,10,45,12,45,879,9,45,1,46,1,46,
	3,46,883,8,46,1,46,1,46,1,47,1,47,3,47,889,8,47,1,47,1,47,3,47,893,8,
	47,3,47,895,8,47,1,47,1,47,3,47,899,8,47,1,47,1,47,3,47,903,8,47,3,47,
	905,8,47,3,47,907,8,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,
	51,1,51,5,51,920,8,51,10,51,12,51,923,9,51,1,52,1,52,1,52,1,52,1,52,5,
	52,930,8,52,10,52,12,52,933,9,52,1,53,1,53,1,53,1,53,1,53,5,53,940,8,
	53,10,53,12,53,943,9,53,1,54,1,54,3,54,947,8,54,5,54,949,8,54,10,54,12,
	54,952,9,54,1,54,1,54,1,55,1,55,3,55,958,8,55,1,55,5,55,961,8,55,10,55,
	12,55,964,9,55,1,56,1,56,3,56,968,8,56,1,56,1,56,3,56,972,8,56,1,56,1,
	56,3,56,976,8,56,1,56,1,56,3,56,980,8,56,1,56,5,56,983,8,56,10,56,12,
	56,986,9,56,1,57,1,57,3,57,990,8,57,1,57,1,57,3,57,994,8,57,1,57,1,57,
	3,57,998,8,57,1,57,1,57,3,57,1002,8,57,1,57,1,57,3,57,1006,8,57,1,57,
	1,57,3,57,1010,8,57,1,57,5,57,1013,8,57,10,57,12,57,1016,9,57,1,58,1,
	58,3,58,1020,8,58,1,58,1,58,3,58,1024,8,58,1,58,5,58,1027,8,58,10,58,
	12,58,1030,9,58,1,59,1,59,3,59,1034,8,59,5,59,1036,8,59,10,59,12,59,1039,
	9,59,1,59,1,59,1,60,1,60,1,60,1,60,5,60,1047,8,60,10,60,12,60,1050,9,
	60,1,61,1,61,1,61,3,61,1055,8,61,1,61,1,61,3,61,1059,8,61,1,61,1,61,1,
	61,1,61,1,61,3,61,1066,8,61,1,61,1,61,3,61,1070,8,61,1,61,1,61,3,61,1074,
	8,61,1,61,3,61,1077,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
	1,62,1,62,1,62,3,62,1091,8,62,1,62,3,62,1094,8,62,1,62,1,62,1,63,1,63,
	1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1108,8,63,1,64,1,64,3,64,
	1112,8,64,1,64,5,64,1115,8,64,10,64,12,64,1118,9,64,1,64,3,64,1121,8,
	64,1,64,3,64,1124,8,64,1,65,1,65,1,65,1,65,1,65,3,65,1131,8,65,1,65,1,
	65,3,65,1135,8,65,1,65,1,65,3,65,1139,8,65,1,65,1,65,1,65,1,65,1,65,3,
	65,1146,8,65,1,65,1,65,3,65,1150,8,65,1,65,1,65,3,65,1154,8,65,1,65,1,
	65,1,65,1,65,3,65,1160,8,65,1,65,1,65,3,65,1164,8,65,1,65,1,65,3,65,1168,
	8,65,1,65,1,65,1,65,1,65,3,65,1174,8,65,1,65,1,65,3,65,1178,8,65,1,65,
	1,65,3,65,1182,8,65,1,65,1,65,1,65,1,65,3,65,1188,8,65,1,65,1,65,3,65,
	1192,8,65,1,65,1,65,3,65,1196,8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,
	1204,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1212,8,66,1,67,1,67,1,68,
	1,68,3,68,1218,8,68,1,68,1,68,3,68,1222,8,68,1,68,1,68,3,68,1226,8,68,
	1,68,1,68,3,68,1230,8,68,5,68,1232,8,68,10,68,12,68,1235,9,68,3,68,1237,
	8,68,1,68,1,68,1,69,1,69,3,69,1243,8,69,1,69,1,69,1,69,3,69,1248,8,69,
	1,69,1,69,1,69,3,69,1253,8,69,1,69,1,69,1,69,3,69,1258,8,69,1,69,1,69,
	1,69,3,69,1263,8,69,1,69,1,69,1,69,3,69,1268,8,69,1,69,3,69,1271,8,69,
	1,70,1,70,3,70,1275,8,70,1,70,1,70,3,70,1279,8,70,1,70,1,70,1,71,1,71,
	3,71,1285,8,71,1,71,4,71,1288,8,71,11,71,12,71,1289,1,72,1,72,3,72,1294,
	8,72,1,72,3,72,1297,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,3,74,
	1307,8,74,1,74,1,74,3,74,1311,8,74,1,74,1,74,3,74,1315,8,74,3,74,1317,
	8,74,1,74,1,74,3,74,1321,8,74,1,74,1,74,3,74,1325,8,74,1,74,1,74,3,74,
	1329,8,74,5,74,1331,8,74,10,74,12,74,1334,9,74,3,74,1336,8,74,1,74,1,
	74,1,75,1,75,1,75,1,75,3,75,1344,8,75,1,76,1,76,3,76,1348,8,76,1,76,1,
	76,3,76,1352,8,76,1,76,1,76,3,76,1356,8,76,1,76,1,76,3,76,1360,8,76,1,
	76,1,76,3,76,1364,8,76,5,76,1366,8,76,10,76,12,76,1369,9,76,3,76,1371,
	8,76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,5,80,
	1385,8,80,10,80,12,80,1388,9,80,1,81,1,81,3,81,1392,8,81,1,81,1,81,3,
	81,1396,8,81,1,81,1,81,3,81,1400,8,81,1,81,3,81,1403,8,81,1,81,3,81,1406,
	8,81,1,81,1,81,1,82,1,82,3,82,1412,8,82,1,82,1,82,3,82,1416,8,82,1,82,
	1,82,3,82,1420,8,82,3,82,1422,8,82,1,82,1,82,3,82,1426,8,82,1,82,1,82,
	3,82,1430,8,82,1,82,1,82,3,82,1434,8,82,3,82,1436,8,82,1,82,1,82,3,82,
	1440,8,82,1,82,1,82,3,82,1444,8,82,1,82,1,82,1,83,1,83,3,83,1450,8,83,
	1,83,1,83,1,84,1,84,3,84,1456,8,84,1,84,4,84,1459,8,84,11,84,12,84,1460,
	1,84,1,84,3,84,1465,8,84,1,84,1,84,3,84,1469,8,84,1,84,4,84,1472,8,84,
	11,84,12,84,1473,3,84,1476,8,84,1,84,3,84,1479,8,84,1,84,1,84,3,84,1483,
	8,84,1,84,3,84,1486,8,84,1,84,3,84,1489,8,84,1,84,1,84,1,85,1,85,3,85,
	1495,8,85,1,85,1,85,3,85,1499,8,85,1,85,1,85,3,85,1503,8,85,1,85,1,85,
	1,86,1,86,1,87,1,87,3,87,1511,8,87,1,88,1,88,3,88,1515,8,88,1,88,1,88,
	3,88,1519,8,88,1,88,1,88,3,88,1523,8,88,1,88,1,88,3,88,1527,8,88,1,88,
	1,88,3,88,1531,8,88,1,88,1,88,3,88,1535,8,88,1,88,1,88,3,88,1539,8,88,
	1,88,1,88,3,88,1543,8,88,5,88,1545,8,88,10,88,12,88,1548,9,88,3,88,1550,
	8,88,1,88,1,88,1,89,1,89,1,89,3,89,1557,8,89,1,90,1,90,3,90,1561,8,90,
	1,90,4,90,1564,8,90,11,90,12,90,1565,1,91,1,91,1,92,1,92,1,93,1,93,1,
	94,1,94,3,94,1576,8,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,
	99,1,99,0,0,100,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
	40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
	86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
	124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
	160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
	196,198,0,10,1,0,70,73,1,0,13,14,1,0,93,94,1,0,103,105,1,0,113,114,4,
	0,89,92,106,106,115,117,130,130,6,0,48,60,63,73,77,85,87,88,93,100,118,
	127,2,0,19,19,27,30,2,0,20,20,31,34,2,0,14,14,35,45,1812,0,201,1,0,0,
	0,2,226,1,0,0,0,4,230,1,0,0,0,6,232,1,0,0,0,8,254,1,0,0,0,10,258,1,0,
	0,0,12,295,1,0,0,0,14,319,1,0,0,0,16,330,1,0,0,0,18,335,1,0,0,0,20,339,
	1,0,0,0,22,361,1,0,0,0,24,371,1,0,0,0,26,393,1,0,0,0,28,395,1,0,0,0,30,
	401,1,0,0,0,32,449,1,0,0,0,34,453,1,0,0,0,36,473,1,0,0,0,38,493,1,0,0,
	0,40,495,1,0,0,0,42,506,1,0,0,0,44,533,1,0,0,0,46,546,1,0,0,0,48,550,
	1,0,0,0,50,565,1,0,0,0,52,575,1,0,0,0,54,616,1,0,0,0,56,625,1,0,0,0,58,
	627,1,0,0,0,60,642,1,0,0,0,62,646,1,0,0,0,64,650,1,0,0,0,66,671,1,0,0,
	0,68,673,1,0,0,0,70,677,1,0,0,0,72,702,1,0,0,0,74,704,1,0,0,0,76,720,
	1,0,0,0,78,722,1,0,0,0,80,746,1,0,0,0,82,816,1,0,0,0,84,818,1,0,0,0,86,
	847,1,0,0,0,88,849,1,0,0,0,90,870,1,0,0,0,92,880,1,0,0,0,94,886,1,0,0,
	0,96,908,1,0,0,0,98,910,1,0,0,0,100,912,1,0,0,0,102,914,1,0,0,0,104,924,
	1,0,0,0,106,934,1,0,0,0,108,950,1,0,0,0,110,955,1,0,0,0,112,965,1,0,0,
	0,114,987,1,0,0,0,116,1017,1,0,0,0,118,1037,1,0,0,0,120,1042,1,0,0,0,
	122,1076,1,0,0,0,124,1090,1,0,0,0,126,1107,1,0,0,0,128,1109,1,0,0,0,130,
	1203,1,0,0,0,132,1211,1,0,0,0,134,1213,1,0,0,0,136,1215,1,0,0,0,138,1270,
	1,0,0,0,140,1272,1,0,0,0,142,1282,1,0,0,0,144,1291,1,0,0,0,146,1298,1,
	0,0,0,148,1304,1,0,0,0,150,1343,1,0,0,0,152,1345,1,0,0,0,154,1374,1,0,
	0,0,156,1376,1,0,0,0,158,1378,1,0,0,0,160,1386,1,0,0,0,162,1389,1,0,0,
	0,164,1409,1,0,0,0,166,1447,1,0,0,0,168,1475,1,0,0,0,170,1492,1,0,0,0,
	172,1506,1,0,0,0,174,1510,1,0,0,0,176,1512,1,0,0,0,178,1553,1,0,0,0,180,
	1558,1,0,0,0,182,1567,1,0,0,0,184,1569,1,0,0,0,186,1571,1,0,0,0,188,1575,
	1,0,0,0,190,1577,1,0,0,0,192,1579,1,0,0,0,194,1581,1,0,0,0,196,1583,1,
	0,0,0,198,1585,1,0,0,0,200,202,5,131,0,0,201,200,1,0,0,0,201,202,1,0,
	0,0,202,203,1,0,0,0,203,208,3,2,1,0,204,206,5,131,0,0,205,204,1,0,0,0,
	205,206,1,0,0,0,206,207,1,0,0,0,207,209,5,1,0,0,208,205,1,0,0,0,208,209,
	1,0,0,0,209,211,1,0,0,0,210,212,5,131,0,0,211,210,1,0,0,0,211,212,1,0,
	0,0,212,213,1,0,0,0,213,214,5,0,0,1,214,1,1,0,0,0,215,227,3,4,2,0,216,
	218,5,46,0,0,217,219,5,131,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,
	1,0,0,0,220,227,3,4,2,0,221,223,5,47,0,0,222,224,5,131,0,0,223,222,1,
	0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,227,3,4,2,0,226,215,1,0,0,0,
	226,216,1,0,0,0,226,221,1,0,0,0,227,3,1,0,0,0,228,231,3,6,3,0,229,231,
	3,42,21,0,230,228,1,0,0,0,230,229,1,0,0,0,231,5,1,0,0,0,232,239,3,10,
	5,0,233,235,5,131,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,
	236,238,3,8,4,0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,
	1,0,0,0,240,7,1,0,0,0,241,239,1,0,0,0,242,243,5,48,0,0,243,244,5,131,
	0,0,244,246,5,49,0,0,245,247,5,131,0,0,246,245,1,0,0,0,246,247,1,0,0,
	0,247,248,1,0,0,0,248,255,3,10,5,0,249,251,5,48,0,0,250,252,5,131,0,0,
	251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,255,3,10,5,0,254,
	242,1,0,0,0,254,249,1,0,0,0,255,9,1,0,0,0,256,259,3,12,6,0,257,259,3,
	14,7,0,258,256,1,0,0,0,258,257,1,0,0,0,259,11,1,0,0,0,260,262,3,18,9,
	0,261,263,5,131,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,
	260,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,
	0,0,0,268,266,1,0,0,0,269,296,3,50,25,0,270,272,3,18,9,0,271,273,5,131,
	0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,270,1,0,0,0,275,
	278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,1,
	0,0,0,279,286,3,16,8,0,280,282,5,131,0,0,281,280,1,0,0,0,281,282,1,0,
	0,0,282,283,1,0,0,0,283,285,3,16,8,0,284,281,1,0,0,0,285,288,1,0,0,0,
	286,284,1,0,0,0,286,287,1,0,0,0,287,293,1,0,0,0,288,286,1,0,0,0,289,291,
	5,131,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,3,50,
	25,0,293,290,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,266,1,0,0,0,
	295,276,1,0,0,0,296,13,1,0,0,0,297,299,3,18,9,0,298,300,5,131,0,0,299,
	298,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,297,1,0,0,0,302,305,1,
	0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,312,1,0,0,0,305,303,1,0,0,0,
	306,308,3,16,8,0,307,309,5,131,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,
	311,1,0,0,0,310,306,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,
	0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,317,3,48,24,0,316,318,5,131,
	0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,303,1,0,0,0,320,
	321,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,3,
	12,6,0,324,15,1,0,0,0,325,331,3,28,14,0,326,331,3,24,12,0,327,331,3,34,
	17,0,328,331,3,30,15,0,329,331,3,36,18,0,330,325,1,0,0,0,330,326,1,0,
	0,0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,17,1,0,0,0,332,
	336,3,20,10,0,333,336,3,22,11,0,334,336,3,40,20,0,335,332,1,0,0,0,335,
	333,1,0,0,0,335,334,1,0,0,0,336,19,1,0,0,0,337,338,5,50,0,0,338,340,5,
	131,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,5,51,
	0,0,342,344,5,131,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,
	345,352,3,70,35,0,346,348,5,131,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,
	349,1,0,0,0,349,351,3,66,33,0,350,347,1,0,0,0,351,354,1,0,0,0,352,350,
	1,0,0,0,352,353,1,0,0,0,353,359,1,0,0,0,354,352,1,0,0,0,355,357,5,131,
	0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,3,68,34,0,
	359,356,1,0,0,0,359,360,1,0,0,0,360,21,1,0,0,0,361,363,5,52,0,0,362,364,
	5,131,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,3,100,
	50,0,366,367,5,131,0,0,367,368,5,53,0,0,368,369,5,131,0,0,369,370,3,172,
	86,0,370,23,1,0,0,0,371,373,5,54,0,0,372,374,5,131,0,0,373,372,1,0,0,
	0,373,374,1,0,0,0,374,375,1,0,0,0,375,380,3,72,36,0,376,377,5,131,0,0,
	377,379,3,26,13,0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,
	381,1,0,0,0,381,25,1,0,0,0,382,380,1,0,0,0,383,384,5,55,0,0,384,385,5,
	131,0,0,385,386,5,51,0,0,386,387,5,131,0,0,387,394,3,30,15,0,388,389,
	5,55,0,0,389,390,5,131,0,0,390,391,5,56,0,0,391,392,5,131,0,0,392,394,
	3,30,15,0,393,383,1,0,0,0,393,388,1,0,0,0,394,27,1,0,0,0,395,397,5,56,
	0,0,396,398,5,131,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,
	399,400,3,70,35,0,400,29,1,0,0,0,401,403,5,57,0,0,402,404,5,131,0,0,403,
	402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,410,3,32,16,0,406,407,
	5,2,0,0,407,409,3,32,16,0,408,406,1,0,0,0,409,412,1,0,0,0,410,408,1,0,
	0,0,410,411,1,0,0,0,411,31,1,0,0,0,412,410,1,0,0,0,413,415,3,180,90,0,
	414,416,5,131,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,
	419,5,3,0,0,418,420,5,131,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,
	1,0,0,0,421,422,3,100,50,0,422,450,1,0,0,0,423,425,3,172,86,0,424,426,
	5,131,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,429,5,3,
	0,0,428,430,5,131,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,
	431,432,3,100,50,0,432,450,1,0,0,0,433,435,3,172,86,0,434,436,5,131,0,
	0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,439,5,4,0,0,438,
	440,5,131,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,442,
	3,100,50,0,442,450,1,0,0,0,443,445,3,172,86,0,444,446,5,131,0,0,445,444,
	1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,3,90,45,0,448,450,1,0,
	0,0,449,413,1,0,0,0,449,423,1,0,0,0,449,433,1,0,0,0,449,443,1,0,0,0,450,
	33,1,0,0,0,451,452,5,58,0,0,452,454,5,131,0,0,453,451,1,0,0,0,453,454,
	1,0,0,0,454,455,1,0,0,0,455,457,5,59,0,0,456,458,5,131,0,0,457,456,1,
	0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,470,3,100,50,0,460,462,5,131,
	0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,465,5,2,0,0,464,
	466,5,131,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,469,
	3,100,50,0,468,461,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,
	0,0,0,471,35,1,0,0,0,472,470,1,0,0,0,473,474,5,60,0,0,474,475,5,131,0,
	0,475,486,3,38,19,0,476,478,5,131,0,0,477,476,1,0,0,0,477,478,1,0,0,0,
	478,479,1,0,0,0,479,481,5,2,0,0,480,482,5,131,0,0,481,480,1,0,0,0,481,
	482,1,0,0,0,482,483,1,0,0,0,483,485,3,38,19,0,484,477,1,0,0,0,485,488,
	1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,37,1,0,0,0,488,486,1,0,0,
	0,489,490,3,172,86,0,490,491,3,90,45,0,491,494,1,0,0,0,492,494,3,180,
	90,0,493,489,1,0,0,0,493,492,1,0,0,0,494,39,1,0,0,0,495,496,5,61,0,0,
	496,497,5,131,0,0,497,504,3,152,76,0,498,500,5,131,0,0,499,498,1,0,0,
	0,499,500,1,0,0,0,500,501,1,0,0,0,501,502,5,62,0,0,502,503,5,131,0,0,
	503,505,3,44,22,0,504,499,1,0,0,0,504,505,1,0,0,0,505,41,1,0,0,0,506,
	507,5,61,0,0,507,510,5,131,0,0,508,511,3,152,76,0,509,511,3,154,77,0,
	510,508,1,0,0,0,510,509,1,0,0,0,511,516,1,0,0,0,512,513,5,131,0,0,513,
	514,5,62,0,0,514,515,5,131,0,0,515,517,3,44,22,0,516,512,1,0,0,0,516,
	517,1,0,0,0,517,43,1,0,0,0,518,534,5,5,0,0,519,530,3,46,23,0,520,522,
	5,131,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,525,5,2,
	0,0,524,526,5,131,0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,
	527,529,3,46,23,0,528,521,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,
	531,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,533,518,1,0,0,0,533,519,1,
	0,0,0,534,539,1,0,0,0,535,537,5,131,0,0,536,535,1,0,0,0,536,537,1,0,0,
	0,537,538,1,0,0,0,538,540,3,68,34,0,539,536,1,0,0,0,539,540,1,0,0,0,540,
	45,1,0,0,0,541,542,3,156,78,0,542,543,5,131,0,0,543,544,5,53,0,0,544,
	545,5,131,0,0,545,547,1,0,0,0,546,541,1,0,0,0,546,547,1,0,0,0,547,548,
	1,0,0,0,548,549,3,172,86,0,549,47,1,0,0,0,550,555,5,63,0,0,551,553,5,
	131,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,556,5,64,
	0,0,555,552,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,131,0,0,
	558,563,3,52,26,0,559,561,5,131,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,
	562,1,0,0,0,562,564,3,68,34,0,563,560,1,0,0,0,563,564,1,0,0,0,564,49,
	1,0,0,0,565,570,5,65,0,0,566,568,5,131,0,0,567,566,1,0,0,0,567,568,1,
	0,0,0,568,569,1,0,0,0,569,571,5,64,0,0,570,567,1,0,0,0,570,571,1,0,0,
	0,571,572,1,0,0,0,572,573,5,131,0,0,573,574,3,52,26,0,574,51,1,0,0,0,
	575,578,3,54,27,0,576,577,5,131,0,0,577,579,3,58,29,0,578,576,1,0,0,0,
	578,579,1,0,0,0,579,582,1,0,0,0,580,581,5,131,0,0,581,583,3,60,30,0,582,
	580,1,0,0,0,582,583,1,0,0,0,583,586,1,0,0,0,584,585,5,131,0,0,585,587,
	3,62,31,0,586,584,1,0,0,0,586,587,1,0,0,0,587,53,1,0,0,0,588,599,5,5,
	0,0,589,591,5,131,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,
	592,594,5,2,0,0,593,595,5,131,0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,
	596,1,0,0,0,596,598,3,56,28,0,597,590,1,0,0,0,598,601,1,0,0,0,599,597,
	1,0,0,0,599,600,1,0,0,0,600,617,1,0,0,0,601,599,1,0,0,0,602,613,3,56,
	28,0,603,605,5,131,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,
	0,606,608,5,2,0,0,607,609,5,131,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,
	610,1,0,0,0,610,612,3,56,28,0,611,604,1,0,0,0,612,615,1,0,0,0,613,611,
	1,0,0,0,613,614,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,616,588,1,0,0,
	0,616,602,1,0,0,0,617,55,1,0,0,0,618,619,3,100,50,0,619,620,5,131,0,0,
	620,621,5,53,0,0,621,622,5,131,0,0,622,623,3,172,86,0,623,626,1,0,0,0,
	624,626,3,100,50,0,625,618,1,0,0,0,625,624,1,0,0,0,626,57,1,0,0,0,627,
	628,5,66,0,0,628,629,5,131,0,0,629,630,5,67,0,0,630,631,5,131,0,0,631,
	639,3,64,32,0,632,634,5,2,0,0,633,635,5,131,0,0,634,633,1,0,0,0,634,635,
	1,0,0,0,635,636,1,0,0,0,636,638,3,64,32,0,637,632,1,0,0,0,638,641,1,0,
	0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,59,1,0,0,0,641,639,1,0,0,0,642,
	643,5,68,0,0,643,644,5,131,0,0,644,645,3,100,50,0,645,61,1,0,0,0,646,
	647,5,69,0,0,647,648,5,131,0,0,648,649,3,100,50,0,649,63,1,0,0,0,650,
	655,3,100,50,0,651,653,5,131,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,
	654,1,0,0,0,654,656,7,0,0,0,655,652,1,0,0,0,655,656,1,0,0,0,656,65,1,
	0,0,0,657,658,5,74,0,0,658,659,5,131,0,0,659,660,5,75,0,0,660,661,5,131,
	0,0,661,662,5,55,0,0,662,663,5,131,0,0,663,672,3,172,86,0,664,665,5,74,
	0,0,665,666,5,131,0,0,666,667,5,76,0,0,667,668,5,131,0,0,668,669,5,55,
	0,0,669,670,5,131,0,0,670,672,3,172,86,0,671,657,1,0,0,0,671,664,1,0,
	0,0,672,67,1,0,0,0,673,674,5,77,0,0,674,675,5,131,0,0,675,676,3,100,50,
	0,676,69,1,0,0,0,677,688,3,72,36,0,678,680,5,131,0,0,679,678,1,0,0,0,
	679,680,1,0,0,0,680,681,1,0,0,0,681,683,5,2,0,0,682,684,5,131,0,0,683,
	682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,3,72,36,0,686,679,
	1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,71,1,0,0,
	0,690,688,1,0,0,0,691,693,3,172,86,0,692,694,5,131,0,0,693,692,1,0,0,
	0,693,694,1,0,0,0,694,695,1,0,0,0,695,697,5,3,0,0,696,698,5,131,0,0,697,
	696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,3,74,37,0,700,703,
	1,0,0,0,701,703,3,74,37,0,702,691,1,0,0,0,702,701,1,0,0,0,703,73,1,0,
	0,0,704,705,3,76,38,0,705,75,1,0,0,0,706,713,3,78,39,0,707,709,5,131,
	0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,3,80,40,0,
	711,708,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,721,
	1,0,0,0,715,713,1,0,0,0,716,717,5,6,0,0,717,718,3,76,38,0,718,719,5,7,
	0,0,719,721,1,0,0,0,720,706,1,0,0,0,720,716,1,0,0,0,721,77,1,0,0,0,722,
	724,5,6,0,0,723,725,5,131,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,730,
	1,0,0,0,726,728,3,172,86,0,727,729,5,131,0,0,728,727,1,0,0,0,728,729,
	1,0,0,0,729,731,1,0,0,0,730,726,1,0,0,0,730,731,1,0,0,0,731,736,1,0,0,
	0,732,734,3,90,45,0,733,735,5,131,0,0,734,733,1,0,0,0,734,735,1,0,0,0,
	735,737,1,0,0,0,736,732,1,0,0,0,736,737,1,0,0,0,737,742,1,0,0,0,738,740,
	3,86,43,0,739,741,5,131,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,743,1,
	0,0,0,742,738,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,5,7,0,0,
	745,79,1,0,0,0,746,748,3,82,41,0,747,749,5,131,0,0,748,747,1,0,0,0,748,
	749,1,0,0,0,749,750,1,0,0,0,750,751,3,78,39,0,751,81,1,0,0,0,752,754,
	3,194,97,0,753,755,5,131,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,
	1,0,0,0,756,758,3,198,99,0,757,759,5,131,0,0,758,757,1,0,0,0,758,759,
	1,0,0,0,759,761,1,0,0,0,760,762,3,84,42,0,761,760,1,0,0,0,761,762,1,0,
	0,0,762,764,1,0,0,0,763,765,5,131,0,0,764,763,1,0,0,0,764,765,1,0,0,0,
	765,766,1,0,0,0,766,768,3,198,99,0,767,769,5,131,0,0,768,767,1,0,0,0,
	768,769,1,0,0,0,769,770,1,0,0,0,770,771,3,196,98,0,771,817,1,0,0,0,772,
	774,3,194,97,0,773,775,5,131,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,
	776,1,0,0,0,776,778,3,198,99,0,777,779,5,131,0,0,778,777,1,0,0,0,778,
	779,1,0,0,0,779,781,1,0,0,0,780,782,3,84,42,0,781,780,1,0,0,0,781,782,
	1,0,0,0,782,784,1,0,0,0,783,785,5,131,0,0,784,783,1,0,0,0,784,785,1,0,
	0,0,785,786,1,0,0,0,786,787,3,198,99,0,787,817,1,0,0,0,788,790,3,198,
	99,0,789,791,5,131,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,
	0,792,794,3,84,42,0,793,792,1,0,0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,
	797,5,131,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,800,
	3,198,99,0,799,801,5,131,0,0,800,799,1,0,0,0,800,801,1,0,0,0,801,802,
	1,0,0,0,802,803,3,196,98,0,803,817,1,0,0,0,804,806,3,198,99,0,805,807,
	5,131,0,0,806,805,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,810,3,84,
	42,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,813,5,131,0,
	0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,3,198,99,0,
	815,817,1,0,0,0,816,752,1,0,0,0,816,772,1,0,0,0,816,788,1,0,0,0,816,804,
	1,0,0,0,817,83,1,0,0,0,818,820,5,8,0,0,819,821,5,131,0,0,820,819,1,0,
	0,0,820,821,1,0,0,0,821,826,1,0,0,0,822,824,3,172,86,0,823,825,5,131,
	0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,822,1,0,0,0,826,
	827,1,0,0,0,827,832,1,0,0,0,828,830,3,88,44,0,829,831,5,131,0,0,830,829,
	1,0,0,0,830,831,1,0,0,0,831,833,1,0,0,0,832,828,1,0,0,0,832,833,1,0,0,
	0,833,835,1,0,0,0,834,836,3,94,47,0,835,834,1,0,0,0,835,836,1,0,0,0,836,
	841,1,0,0,0,837,839,3,86,43,0,838,840,5,131,0,0,839,838,1,0,0,0,839,840,
	1,0,0,0,840,842,1,0,0,0,841,837,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,
	0,843,844,5,9,0,0,844,85,1,0,0,0,845,848,3,176,88,0,846,848,3,178,89,
	0,847,845,1,0,0,0,847,846,1,0,0,0,848,87,1,0,0,0,849,851,5,10,0,0,850,
	852,5,131,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,867,
	3,98,49,0,854,856,5,131,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,857,1,
	0,0,0,857,859,5,11,0,0,858,860,5,10,0,0,859,858,1,0,0,0,859,860,1,0,0,
	0,860,862,1,0,0,0,861,863,5,131,0,0,862,861,1,0,0,0,862,863,1,0,0,0,863,
	864,1,0,0,0,864,866,3,98,49,0,865,855,1,0,0,0,866,869,1,0,0,0,867,865,
	1,0,0,0,867,868,1,0,0,0,868,89,1,0,0,0,869,867,1,0,0,0,870,877,3,92,46,
	0,871,873,5,131,0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,
	876,3,92,46,0,875,872,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,
	1,0,0,0,878,91,1,0,0,0,879,877,1,0,0,0,880,882,5,10,0,0,881,883,5,131,
	0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,885,3,96,48,0,
	885,93,1,0,0,0,886,888,5,5,0,0,887,889,5,131,0,0,888,887,1,0,0,0,888,
	889,1,0,0,0,889,894,1,0,0,0,890,892,3,184,92,0,891,893,5,131,0,0,892,
	891,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,890,1,0,0,0,894,895,1,
	0,0,0,895,906,1,0,0,0,896,898,5,12,0,0,897,899,5,131,0,0,898,897,1,0,
	0,0,898,899,1,0,0,0,899,904,1,0,0,0,900,902,3,184,92,0,901,903,5,131,
	0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,0,904,900,1,0,0,0,904,
	905,1,0,0,0,905,907,1,0,0,0,906,896,1,0,0,0,906,907,1,0,0,0,907,95,1,
	0,0,0,908,909,3,188,94,0,909,97,1,0,0,0,910,911,3,188,94,0,911,99,1,0,
	0,0,912,913,3,102,51,0,913,101,1,0,0,0,914,921,3,104,52,0,915,916,5,131,
	0,0,916,917,5,78,0,0,917,918,5,131,0,0,918,920,3,104,52,0,919,915,1,0,
	0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,103,1,0,0,0,923,
	921,1,0,0,0,924,931,3,106,53,0,925,926,5,131,0,0,926,927,5,79,0,0,927,
	928,5,131,0,0,928,930,3,106,53,0,929,925,1,0,0,0,930,933,1,0,0,0,931,
	929,1,0,0,0,931,932,1,0,0,0,932,105,1,0,0,0,933,931,1,0,0,0,934,941,3,
	108,54,0,935,936,5,131,0,0,936,937,5,80,0,0,937,938,5,131,0,0,938,940,
	3,108,54,0,939,935,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,
	0,0,0,942,107,1,0,0,0,943,941,1,0,0,0,944,946,5,81,0,0,945,947,5,131,
	0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,944,1,0,0,0,949,
	952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,950,1,
	0,0,0,953,954,3,110,55,0,954,109,1,0,0,0,955,962,3,112,56,0,956,958,5,
	131,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,961,3,138,
	69,0,960,957,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,
	963,111,1,0,0,0,964,962,1,0,0,0,965,984,3,114,57,0,966,968,5,131,0,0,
	967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,971,5,13,0,0,970,
	972,5,131,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,983,
	3,114,57,0,974,976,5,131,0,0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,
	1,0,0,0,977,979,5,14,0,0,978,980,5,131,0,0,979,978,1,0,0,0,979,980,1,
	0,0,0,980,981,1,0,0,0,981,983,3,114,57,0,982,967,1,0,0,0,982,975,1,0,
	0,0,983,986,1,0,0,0,984,982,1,0,0,0,984,985,1,0,0,0,985,113,1,0,0,0,986,
	984,1,0,0,0,987,1014,3,116,58,0,988,990,5,131,0,0,989,988,1,0,0,0,989,
	990,1,0,0,0,990,991,1,0,0,0,991,993,5,5,0,0,992,994,5,131,0,0,993,992,
	1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,1013,3,116,58,0,996,998,5,
	131,0,0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,5,15,
	0,0,1000,1002,5,131,0,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,
	1,0,0,0,1003,1013,3,116,58,0,1004,1006,5,131,0,0,1005,1004,1,0,0,0,1005,
	1006,1,0,0,0,1006,1007,1,0,0,0,1007,1009,5,16,0,0,1008,1010,5,131,0,0,
	1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,3,116,
	58,0,1012,989,1,0,0,0,1012,997,1,0,0,0,1012,1005,1,0,0,0,1013,1016,1,
	0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,115,1,0,0,0,1016,1014,
	1,0,0,0,1017,1028,3,118,59,0,1018,1020,5,131,0,0,1019,1018,1,0,0,0,1019,
	1020,1,0,0,0,1020,1021,1,0,0,0,1021,1023,5,17,0,0,1022,1024,5,131,0,0,
	1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,1027,3,118,
	59,0,1026,1019,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,
	1,0,0,0,1029,117,1,0,0,0,1030,1028,1,0,0,0,1031,1033,7,1,0,0,1032,1034,
	5,131,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,
	1031,1,0,0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1037,1038,1,0,0,0,1038,
	1040,1,0,0,0,1039,1037,1,0,0,0,1040,1041,3,120,60,0,1041,119,1,0,0,0,
	1042,1048,3,128,64,0,1043,1047,3,124,62,0,1044,1047,3,122,61,0,1045,1047,
	3,126,63,0,1046,1043,1,0,0,0,1046,1044,1,0,0,0,1046,1045,1,0,0,0,1047,
	1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,121,1,0,0,0,1050,
	1048,1,0,0,0,1051,1052,5,131,0,0,1052,1054,5,82,0,0,1053,1055,5,131,0,
	0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1077,3,128,
	64,0,1057,1059,5,131,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,
	1,0,0,0,1060,1061,5,8,0,0,1061,1062,3,100,50,0,1062,1063,5,9,0,0,1063,
	1077,1,0,0,0,1064,1066,5,131,0,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,
	1066,1067,1,0,0,0,1067,1069,5,8,0,0,1068,1070,3,100,50,0,1069,1068,1,
	0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1073,5,12,0,0,1072,1074,
	3,100,50,0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,
	1077,5,9,0,0,1076,1051,1,0,0,0,1076,1058,1,0,0,0,1076,1065,1,0,0,0,1077,
	123,1,0,0,0,1078,1079,5,131,0,0,1079,1080,5,83,0,0,1080,1081,5,131,0,
	0,1081,1091,5,63,0,0,1082,1083,5,131,0,0,1083,1084,5,84,0,0,1084,1085,
	5,131,0,0,1085,1091,5,63,0,0,1086,1087,5,131,0,0,1087,1091,5,85,0,0,1088,
	1089,5,131,0,0,1089,1091,5,86,0,0,1090,1078,1,0,0,0,1090,1082,1,0,0,0,
	1090,1086,1,0,0,0,1090,1088,1,0,0,0,1091,1093,1,0,0,0,1092,1094,5,131,
	0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1096,3,
	128,64,0,1096,125,1,0,0,0,1097,1098,5,131,0,0,1098,1099,5,87,0,0,1099,
	1100,5,131,0,0,1100,1108,5,88,0,0,1101,1102,5,131,0,0,1102,1103,5,87,
	0,0,1103,1104,5,131,0,0,1104,1105,5,81,0,0,1105,1106,5,131,0,0,1106,1108,
	5,88,0,0,1107,1097,1,0,0,0,1107,1101,1,0,0,0,1108,127,1,0,0,0,1109,1116,
	3,130,65,0,1110,1112,5,131,0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,
	1113,1,0,0,0,1113,1115,3,166,83,0,1114,1111,1,0,0,0,1115,1118,1,0,0,0,
	1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1123,1,0,0,0,1118,1116,1,0,0,
	0,1119,1121,5,131,0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,
	0,0,0,1122,1124,3,90,45,0,1123,1120,1,0,0,0,1123,1124,1,0,0,0,1124,129,
	1,0,0,0,1125,1204,3,132,66,0,1126,1204,3,178,89,0,1127,1204,3,168,84,
	0,1128,1130,5,89,0,0,1129,1131,5,131,0,0,1130,1129,1,0,0,0,1130,1131,
	1,0,0,0,1131,1132,1,0,0,0,1132,1134,5,6,0,0,1133,1135,5,131,0,0,1134,
	1133,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1138,5,5,0,0,1137,
	1139,5,131,0,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,0,0,0,
	1140,1204,5,7,0,0,1141,1204,3,162,81,0,1142,1204,3,164,82,0,1143,1145,
	5,49,0,0,1144,1146,5,131,0,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,
	1147,1,0,0,0,1147,1149,5,6,0,0,1148,1150,5,131,0,0,1149,1148,1,0,0,0,
	1149,1150,1,0,0,0,1150,1151,1,0,0,0,1151,1153,3,144,72,0,1152,1154,5,
	131,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,
	5,7,0,0,1156,1204,1,0,0,0,1157,1159,5,90,0,0,1158,1160,5,131,0,0,1159,
	1158,1,0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,0,0,1161,1163,5,6,0,0,1162,
	1164,5,131,0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,
	1165,1167,3,144,72,0,1166,1168,5,131,0,0,1167,1166,1,0,0,0,1167,1168,
	1,0,0,0,1168,1169,1,0,0,0,1169,1170,5,7,0,0,1170,1204,1,0,0,0,1171,1173,
	5,91,0,0,1172,1174,5,131,0,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,
	1175,1,0,0,0,1175,1177,5,6,0,0,1176,1178,5,131,0,0,1177,1176,1,0,0,0,
	1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,1181,3,144,72,0,1180,1182,5,
	131,0,0,1181,1180,1,0,0,0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1184,
	5,7,0,0,1184,1204,1,0,0,0,1185,1187,5,92,0,0,1186,1188,5,131,0,0,1187,
	1186,1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1191,5,6,0,0,1190,
	1192,5,131,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,
	1193,1195,3,144,72,0,1194,1196,5,131,0,0,1195,1194,1,0,0,0,1195,1196,
	1,0,0,0,1196,1197,1,0,0,0,1197,1198,5,7,0,0,1198,1204,1,0,0,0,1199,1204,
	3,142,71,0,1200,1204,3,140,70,0,1201,1204,3,148,74,0,1202,1204,3,172,
	86,0,1203,1125,1,0,0,0,1203,1126,1,0,0,0,1203,1127,1,0,0,0,1203,1128,
	1,0,0,0,1203,1141,1,0,0,0,1203,1142,1,0,0,0,1203,1143,1,0,0,0,1203,1157,
	1,0,0,0,1203,1171,1,0,0,0,1203,1185,1,0,0,0,1203,1199,1,0,0,0,1203,1200,
	1,0,0,0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,1204,131,1,0,0,0,1205,1212,
	3,174,87,0,1206,1212,5,101,0,0,1207,1212,3,134,67,0,1208,1212,5,88,0,
	0,1209,1212,3,176,88,0,1210,1212,3,136,68,0,1211,1205,1,0,0,0,1211,1206,
	1,0,0,0,1211,1207,1,0,0,0,1211,1208,1,0,0,0,1211,1209,1,0,0,0,1211,1210,
	1,0,0,0,1212,133,1,0,0,0,1213,1214,7,2,0,0,1214,135,1,0,0,0,1215,1217,
	5,8,0,0,1216,1218,5,131,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,
	1236,1,0,0,0,1219,1221,3,100,50,0,1220,1222,5,131,0,0,1221,1220,1,0,0,
	0,1221,1222,1,0,0,0,1222,1233,1,0,0,0,1223,1225,5,2,0,0,1224,1226,5,131,
	0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,1229,3,
	100,50,0,1228,1230,5,131,0,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,
	1232,1,0,0,0,1231,1223,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,
	1234,1,0,0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1236,1219,1,0,0,0,1236,
	1237,1,0,0,0,1237,1238,1,0,0,0,1238,1239,5,9,0,0,1239,137,1,0,0,0,1240,
	1242,5,3,0,0,1241,1243,5,131,0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,
	1243,1244,1,0,0,0,1244,1271,3,112,56,0,1245,1247,5,18,0,0,1246,1248,5,
	131,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1271,
	3,112,56,0,1250,1252,5,19,0,0,1251,1253,5,131,0,0,1252,1251,1,0,0,0,1252,
	1253,1,0,0,0,1253,1254,1,0,0,0,1254,1271,3,112,56,0,1255,1257,5,20,0,
	0,1256,1258,5,131,0,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,
	0,0,0,1259,1271,3,112,56,0,1260,1262,5,21,0,0,1261,1263,5,131,0,0,1262,
	1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1271,3,112,56,0,
	1265,1267,5,22,0,0,1266,1268,5,131,0,0,1267,1266,1,0,0,0,1267,1268,1,
	0,0,0,1268,1269,1,0,0,0,1269,1271,3,112,56,0,1270,1240,1,0,0,0,1270,1245,
	1,0,0,0,1270,1250,1,0,0,0,1270,1255,1,0,0,0,1270,1260,1,0,0,0,1270,1265,
	1,0,0,0,1271,139,1,0,0,0,1272,1274,5,6,0,0,1273,1275,5,131,0,0,1274,1273,
	1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1278,3,100,50,0,1277,
	1279,5,131,0,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,
	1280,1281,5,7,0,0,1281,141,1,0,0,0,1282,1287,3,78,39,0,1283,1285,5,131,
	0,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1288,3,
	80,40,0,1287,1284,1,0,0,0,1288,1289,1,0,0,0,1289,1287,1,0,0,0,1289,1290,
	1,0,0,0,1290,143,1,0,0,0,1291,1296,3,146,73,0,1292,1294,5,131,0,0,1293,
	1292,1,0,0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,1297,3,68,34,0,
	1296,1293,1,0,0,0,1296,1297,1,0,0,0,1297,145,1,0,0,0,1298,1299,3,172,
	86,0,1299,1300,5,131,0,0,1300,1301,5,82,0,0,1301,1302,5,131,0,0,1302,
	1303,3,100,50,0,1303,147,1,0,0,0,1304,1306,3,150,75,0,1305,1307,5,131,
	0,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,1310,5,
	6,0,0,1309,1311,5,131,0,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1316,
	1,0,0,0,1312,1314,5,64,0,0,1313,1315,5,131,0,0,1314,1313,1,0,0,0,1314,
	1315,1,0,0,0,1315,1317,1,0,0,0,1316,1312,1,0,0,0,1316,1317,1,0,0,0,1317,
	1335,1,0,0,0,1318,1320,3,100,50,0,1319,1321,5,131,0,0,1320,1319,1,0,0,
	0,1320,1321,1,0,0,0,1321,1332,1,0,0,0,1322,1324,5,2,0,0,1323,1325,5,131,
	0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,1326,1328,3,
	100,50,0,1327,1329,5,131,0,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,
	1331,1,0,0,0,1330,1322,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,
	1333,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,1335,1318,1,0,0,0,1335,
	1336,1,0,0,0,1336,1337,1,0,0,0,1337,1338,5,7,0,0,1338,149,1,0,0,0,1339,
	1340,3,160,80,0,1340,1341,3,190,95,0,1341,1344,1,0,0,0,1342,1344,5,95,
	0,0,1343,1339,1,0,0,0,1343,1342,1,0,0,0,1344,151,1,0,0,0,1345,1347,3,
	158,79,0,1346,1348,5,131,0,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,
	1349,1,0,0,0,1349,1351,5,6,0,0,1350,1352,5,131,0,0,1351,1350,1,0,0,0,
	1351,1352,1,0,0,0,1352,1370,1,0,0,0,1353,1355,3,100,50,0,1354,1356,5,
	131,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1367,1,0,0,0,1357,1359,
	5,2,0,0,1358,1360,5,131,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,
	1361,1,0,0,0,1361,1363,3,100,50,0,1362,1364,5,131,0,0,1363,1362,1,0,0,
	0,1363,1364,1,0,0,0,1364,1366,1,0,0,0,1365,1357,1,0,0,0,1366,1369,1,0,
	0,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1371,1,0,0,0,1369,1367,1,
	0,0,0,1370,1353,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1373,
	5,7,0,0,1373,153,1,0,0,0,1374,1375,3,158,79,0,1375,155,1,0,0,0,1376,1377,
	3,190,95,0,1377,157,1,0,0,0,1378,1379,3,160,80,0,1379,1380,3,190,95,0,
	1380,159,1,0,0,0,1381,1382,3,190,95,0,1382,1383,5,23,0,0,1383,1385,1,
	0,0,0,1384,1381,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,
	1,0,0,0,1387,161,1,0,0,0,1388,1386,1,0,0,0,1389,1391,5,8,0,0,1390,1392,
	5,131,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,
	1402,3,144,72,0,1394,1396,5,131,0,0,1395,1394,1,0,0,0,1395,1396,1,0,0,
	0,1396,1397,1,0,0,0,1397,1399,5,11,0,0,1398,1400,5,131,0,0,1399,1398,
	1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1403,3,100,50,0,1402,
	1395,1,0,0,0,1402,1403,1,0,0,0,1403,1405,1,0,0,0,1404,1406,5,131,0,0,
	1405,1404,1,0,0,0,1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1408,5,9,0,
	0,1408,163,1,0,0,0,1409,1411,5,8,0,0,1410,1412,5,131,0,0,1411,1410,1,
	0,0,0,1411,1412,1,0,0,0,1412,1421,1,0,0,0,1413,1415,3,172,86,0,1414,1416,
	5,131,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,1417,
	1419,5,3,0,0,1418,1420,5,131,0,0,1419,1418,1,0,0,0,1419,1420,1,0,0,0,
	1420,1422,1,0,0,0,1421,1413,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,
	0,1423,1425,3,142,71,0,1424,1426,5,131,0,0,1425,1424,1,0,0,0,1425,1426,
	1,0,0,0,1426,1435,1,0,0,0,1427,1429,5,77,0,0,1428,1430,5,131,0,0,1429,
	1428,1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,1431,1433,3,100,50,0,
	1432,1434,5,131,0,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,1436,1,0,
	0,0,1435,1427,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,0,1437,1439,5,
	11,0,0,1438,1440,5,131,0,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1441,
	1,0,0,0,1441,1443,3,100,50,0,1442,1444,5,131,0,0,1443,1442,1,0,0,0,1443,
	1444,1,0,0,0,1444,1445,1,0,0,0,1445,1446,5,9,0,0,1446,165,1,0,0,0,1447,
	1449,5,23,0,0,1448,1450,5,131,0,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,
	1450,1451,1,0,0,0,1451,1452,3,182,91,0,1452,167,1,0,0,0,1453,1458,5,96,
	0,0,1454,1456,5,131,0,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1457,
	1,0,0,0,1457,1459,3,170,85,0,1458,1455,1,0,0,0,1459,1460,1,0,0,0,1460,
	1458,1,0,0,0,1460,1461,1,0,0,0,1461,1476,1,0,0,0,1462,1464,5,96,0,0,1463,
	1465,5,131,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,
	1466,1471,3,100,50,0,1467,1469,5,131,0,0,1468,1467,1,0,0,0,1468,1469,
	1,0,0,0,1469,1470,1,0,0,0,1470,1472,3,170,85,0,1471,1468,1,0,0,0,1472,
	1473,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,
	1453,1,0,0,0,1475,1462,1,0,0,0,1476,1485,1,0,0,0,1477,1479,5,131,0,0,
	1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,1482,5,97,
	0,0,1481,1483,5,131,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1484,
	1,0,0,0,1484,1486,3,100,50,0,1485,1478,1,0,0,0,1485,1486,1,0,0,0,1486,
	1488,1,0,0,0,1487,1489,5,131,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,
	1489,1490,1,0,0,0,1490,1491,5,98,0,0,1491,169,1,0,0,0,1492,1494,5,99,
	0,0,1493,1495,5,131,0,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,1496,
	1,0,0,0,1496,1498,3,100,50,0,1497,1499,5,131,0,0,1498,1497,1,0,0,0,1498,
	1499,1,0,0,0,1499,1500,1,0,0,0,1500,1502,5,100,0,0,1501,1503,5,131,0,
	0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1505,3,100,
	50,0,1505,171,1,0,0,0,1506,1507,3,190,95,0,1507,173,1,0,0,0,1508,1511,
	3,186,93,0,1509,1511,3,184,92,0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,
	175,1,0,0,0,1512,1514,5,24,0,0,1513,1515,5,131,0,0,1514,1513,1,0,0,0,
	1514,1515,1,0,0,0,1515,1549,1,0,0,0,1516,1518,3,182,91,0,1517,1519,5,
	131,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,1522,
	5,10,0,0,1521,1523,5,131,0,0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,
	1524,1,0,0,0,1524,1526,3,100,50,0,1525,1527,5,131,0,0,1526,1525,1,0,0,
	0,1526,1527,1,0,0,0,1527,1546,1,0,0,0,1528,1530,5,2,0,0,1529,1531,5,131,
	0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1534,3,
	182,91,0,1533,1535,5,131,0,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,
	1536,1,0,0,0,1536,1538,5,10,0,0,1537,1539,5,131,0,0,1538,1537,1,0,0,0,
	1538,1539,1,0,0,0,1539,1540,1,0,0,0,1540,1542,3,100,50,0,1541,1543,5,
	131,0,0,1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1528,
	1,0,0,0,1545,1548,1,0,0,0,1546,1544,1,0,0,0,1546,1547,1,0,0,0,1547,1550,
	1,0,0,0,1548,1546,1,0,0,0,1549,1516,1,0,0,0,1549,1550,1,0,0,0,1550,1551,
	1,0,0,0,1551,1552,5,25,0,0,1552,177,1,0,0,0,1553,1556,5,26,0,0,1554,1557,
	3,190,95,0,1555,1557,5,104,0,0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1557,
	179,1,0,0,0,1558,1563,3,130,65,0,1559,1561,5,131,0,0,1560,1559,1,0,0,
	0,1560,1561,1,0,0,0,1561,1562,1,0,0,0,1562,1564,3,166,83,0,1563,1560,
	1,0,0,0,1564,1565,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,181,
	1,0,0,0,1567,1568,3,188,94,0,1568,183,1,0,0,0,1569,1570,7,3,0,0,1570,
	185,1,0,0,0,1571,1572,7,4,0,0,1572,187,1,0,0,0,1573,1576,3,190,95,0,1574,
	1576,3,192,96,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,189,1,0,0,0,
	1577,1578,7,5,0,0,1578,191,1,0,0,0,1579,1580,7,6,0,0,1580,193,1,0,0,0,
	1581,1582,7,7,0,0,1582,195,1,0,0,0,1583,1584,7,8,0,0,1584,197,1,0,0,0,
	1585,1586,7,9,0,0,1586,199,1,0,0,0,291,201,205,208,211,218,223,226,230,
	234,239,246,251,254,258,262,266,272,276,281,286,290,293,295,299,303,308,
	312,317,321,330,335,339,343,347,352,356,359,363,373,380,393,397,403,410,
	415,419,425,429,435,439,445,449,453,457,461,465,470,477,481,486,493,499,
	504,510,516,521,525,530,533,536,539,546,552,555,560,563,567,570,578,582,
	586,590,594,599,604,608,613,616,625,634,639,652,655,671,679,683,688,693,
	697,702,708,713,720,724,728,730,734,736,740,742,748,754,758,761,764,768,
	774,778,781,784,790,793,796,800,806,809,812,816,820,824,826,830,832,835,
	839,841,847,851,855,859,862,867,872,877,882,888,892,894,898,902,904,906,
	921,931,941,946,950,957,962,967,971,975,979,982,984,989,993,997,1001,
	1005,1009,1012,1014,1019,1023,1028,1033,1037,1046,1048,1054,1058,1065,
	1069,1073,1076,1090,1093,1107,1111,1116,1120,1123,1130,1134,1138,1145,
	1149,1153,1159,1163,1167,1173,1177,1181,1187,1191,1195,1203,1211,1217,
	1221,1225,1229,1233,1236,1242,1247,1252,1257,1262,1267,1270,1274,1278,
	1284,1289,1293,1296,1306,1310,1314,1316,1320,1324,1328,1332,1335,1343,
	1347,1351,1355,1359,1363,1367,1370,1386,1391,1395,1399,1402,1405,1411,
	1415,1419,1421,1425,1429,1433,1435,1439,1443,1449,1455,1460,1464,1468,
	1473,1475,1478,1482,1485,1488,1494,1498,1502,1510,1514,1518,1522,1526,
	1530,1534,1538,1542,1546,1549,1556,1560,1565,1575
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) {
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lcypherParserStaticData = staticData.release();
}

}

LcypherParser::LcypherParser(TokenStream *input) : LcypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

LcypherParser::LcypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  LcypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *lcypherParserStaticData->atn, lcypherParserStaticData->decisionToDFA, lcypherParserStaticData->sharedContextCache, options);
}

LcypherParser::~LcypherParser() {
  delete _interpreter;
}

const atn::ATN& LcypherParser::getATN() const {
  return *lcypherParserStaticData->atn;
}

std::string LcypherParser::getGrammarFileName() const {
  return "Lcypher.g4";
}

const std::vector<std::string>& LcypherParser::getRuleNames() const {
  return lcypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& LcypherParser::getVocabulary() const {
  return lcypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LcypherParser::getSerializedATN() const {
  return lcypherParserStaticData->serializedATN;
}


//----------------- OC_CypherContext ------------------------------------------------------------------

LcypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_StatementContext* LcypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<LcypherParser::OC_StatementContext>(0);
}

tree::TerminalNode* LcypherParser::OC_CypherContext::EOF() {
  return getToken(LcypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CypherContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_CypherContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Cypher;
}


std::any LcypherParser::OC_CypherContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Cypher(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CypherContext* LcypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 0, LcypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(200);
      match(LcypherParser::SP);
    }
    setState(203);
    oC_Statement();
    setState(208);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      setState(205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(204);
        match(LcypherParser::SP);
      }
      setState(207);
      match(LcypherParser::T__0);
      break;
    }

    default:
      break;
    }
    setState(211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(210);
      match(LcypherParser::SP);
    }
    setState(213);
    match(LcypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

LcypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_QueryContext* LcypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<LcypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::EXPLAIN() {
  return getToken(LcypherParser::EXPLAIN, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::PROFILE() {
  return getToken(LcypherParser::PROFILE, 0);
}


size_t LcypherParser::OC_StatementContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Statement;
}


std::any LcypherParser::OC_StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Statement(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StatementContext* LcypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 2, LcypherParser::RuleOC_Statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH:
      case LcypherParser::UNWIND:
      case LcypherParser::MERGE:
      case LcypherParser::CREATE:
      case LcypherParser::SET:
      case LcypherParser::DETACH:
      case LcypherParser::DELETE_:
      case LcypherParser::REMOVE:
      case LcypherParser::CALL:
      case LcypherParser::WITH:
      case LcypherParser::RETURN: {
        enterOuterAlt(_localctx, 1);
        setState(215);
        oC_Query();
        break;
      }

      case LcypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 2);
        setState(216);
        match(LcypherParser::EXPLAIN);
        setState(218);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(217);
          match(LcypherParser::SP);
        }
        setState(220);
        oC_Query();
        break;
      }

      case LcypherParser::PROFILE: {
        enterOuterAlt(_localctx, 3);
        setState(221);
        match(LcypherParser::PROFILE);
        setState(223);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(222);
          match(LcypherParser::SP);
        }
        setState(225);
        oC_Query();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

LcypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RegularQueryContext* LcypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<LcypherParser::OC_RegularQueryContext>(0);
}

LcypherParser::OC_StandaloneCallContext* LcypherParser::OC_QueryContext::oC_StandaloneCall() {
  return getRuleContext<LcypherParser::OC_StandaloneCallContext>(0);
}


size_t LcypherParser::OC_QueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Query;
}


std::any LcypherParser::OC_QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Query(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_QueryContext* LcypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 4, LcypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(230);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(228);
      oC_RegularQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(229);
      oC_StandaloneCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

LcypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SingleQueryContext* LcypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<LcypherParser::OC_SingleQueryContext>(0);
}

std::vector<LcypherParser::OC_UnionContext *> LcypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<LcypherParser::OC_UnionContext>();
}

LcypherParser::OC_UnionContext* LcypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<LcypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RegularQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RegularQuery;
}


std::any LcypherParser::OC_RegularQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RegularQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RegularQueryContext* LcypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 6, LcypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(232);
    oC_SingleQuery();
    setState(239);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(234);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(233);
          match(LcypherParser::SP);
        }
        setState(236);
        oC_Union(); 
      }
      setState(241);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

LcypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_UnionContext::UNION() {
  return getToken(LcypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_UnionContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

LcypherParser::OC_SingleQueryContext* LcypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<LcypherParser::OC_SingleQueryContext>(0);
}


size_t LcypherParser::OC_UnionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Union;
}


std::any LcypherParser::OC_UnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Union(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnionContext* LcypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 8, LcypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(254);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(242);
      match(LcypherParser::UNION);
      setState(243);
      match(LcypherParser::SP);
      setState(244);
      match(LcypherParser::ALL);
      setState(246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(245);
        match(LcypherParser::SP);
      }
      setState(248);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(249);
      match(LcypherParser::UNION);
      setState(251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(250);
        match(LcypherParser::SP);
      }
      setState(253);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

LcypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<LcypherParser::OC_SinglePartQueryContext>(0);
}

LcypherParser::OC_MultiPartQueryContext* LcypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<LcypherParser::OC_MultiPartQueryContext>(0);
}


size_t LcypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SingleQuery;
}


std::any LcypherParser::OC_SingleQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SingleQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SingleQueryContext* LcypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 10, LcypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(258);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(256);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(257);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

LcypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ReturnContext* LcypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<LcypherParser::OC_ReturnContext>(0);
}

std::vector<LcypherParser::OC_ReadingClauseContext *> LcypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<LcypherParser::OC_ReadingClauseContext>();
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_UpdatingClauseContext *> LcypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<LcypherParser::OC_UpdatingClauseContext>();
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_UpdatingClauseContext>(i);
}


size_t LcypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SinglePartQuery;
}


std::any LcypherParser::OC_SinglePartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SinglePartQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 12, LcypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(295);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(266);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2313724308561592320) != 0)) {
        setState(260);
        oC_ReadingClause();
        setState(262);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(261);
          match(LcypherParser::SP);
        }
        setState(268);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(269);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(276);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2313724308561592320) != 0)) {
        setState(270);
        oC_ReadingClause();
        setState(272);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(271);
          match(LcypherParser::SP);
        }
        setState(278);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(279);
      oC_UpdatingClause();
      setState(286);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(281);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(280);
            match(LcypherParser::SP);
          }
          setState(283);
          oC_UpdatingClause(); 
        }
        setState(288);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
      }
      setState(293);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
      case 1: {
        setState(290);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(289);
          match(LcypherParser::SP);
        }
        setState(292);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

LcypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<LcypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<LcypherParser::OC_WithContext *> LcypherParser::OC_MultiPartQueryContext::oC_With() {
  return getRuleContexts<LcypherParser::OC_WithContext>();
}

LcypherParser::OC_WithContext* LcypherParser::OC_MultiPartQueryContext::oC_With(size_t i) {
  return getRuleContext<LcypherParser::OC_WithContext>(i);
}

std::vector<LcypherParser::OC_ReadingClauseContext *> LcypherParser::OC_MultiPartQueryContext::oC_ReadingClause() {
  return getRuleContexts<LcypherParser::OC_ReadingClauseContext>();
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::OC_MultiPartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_ReadingClauseContext>(i);
}

std::vector<LcypherParser::OC_UpdatingClauseContext *> LcypherParser::OC_MultiPartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<LcypherParser::OC_UpdatingClauseContext>();
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::OC_MultiPartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MultiPartQuery;
}


std::any LcypherParser::OC_MultiPartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiPartQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MultiPartQueryContext* LcypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 14, LcypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(319); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(303);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 2313724308561592320) != 0)) {
                setState(297);
                oC_ReadingClause();
                setState(299);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(298);
                  match(LcypherParser::SP);
                }
                setState(305);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(312);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 2251799813685248000) != 0)) {
                setState(306);
                oC_UpdatingClause();
                setState(308);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(307);
                  match(LcypherParser::SP);
                }
                setState(314);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(315);
              oC_With();
              setState(317);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(316);
                match(LcypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(321); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(323);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

LcypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_CreateContext* LcypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<LcypherParser::OC_CreateContext>(0);
}

LcypherParser::OC_MergeContext* LcypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<LcypherParser::OC_MergeContext>(0);
}

LcypherParser::OC_DeleteContext* LcypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<LcypherParser::OC_DeleteContext>(0);
}

LcypherParser::OC_SetContext* LcypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<LcypherParser::OC_SetContext>(0);
}

LcypherParser::OC_RemoveContext* LcypherParser::OC_UpdatingClauseContext::oC_Remove() {
  return getRuleContext<LcypherParser::OC_RemoveContext>(0);
}


size_t LcypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return LcypherParser::RuleOC_UpdatingClause;
}


std::any LcypherParser::OC_UpdatingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_UpdatingClause(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 16, LcypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(330);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(325);
        oC_Create();
        break;
      }

      case LcypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(326);
        oC_Merge();
        break;
      }

      case LcypherParser::DETACH:
      case LcypherParser::DELETE_: {
        enterOuterAlt(_localctx, 3);
        setState(327);
        oC_Delete();
        break;
      }

      case LcypherParser::SET: {
        enterOuterAlt(_localctx, 4);
        setState(328);
        oC_Set();
        break;
      }

      case LcypherParser::REMOVE: {
        enterOuterAlt(_localctx, 5);
        setState(329);
        oC_Remove();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

LcypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_MatchContext* LcypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<LcypherParser::OC_MatchContext>(0);
}

LcypherParser::OC_UnwindContext* LcypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<LcypherParser::OC_UnwindContext>(0);
}

LcypherParser::OC_InQueryCallContext* LcypherParser::OC_ReadingClauseContext::oC_InQueryCall() {
  return getRuleContext<LcypherParser::OC_InQueryCallContext>(0);
}


size_t LcypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReadingClause;
}


std::any LcypherParser::OC_ReadingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReadingClause(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 18, LcypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(335);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(332);
        oC_Match();
        break;
      }

      case LcypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(333);
        oC_Unwind();
        break;
      }

      case LcypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(334);
        oC_InQueryCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

LcypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MatchContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

LcypherParser::OC_PatternContext* LcypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<LcypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_MatchContext::OPTIONAL_() {
  return getToken(LcypherParser::OPTIONAL_, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MatchContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_HintContext *> LcypherParser::OC_MatchContext::oC_Hint() {
  return getRuleContexts<LcypherParser::OC_HintContext>();
}

LcypherParser::OC_HintContext* LcypherParser::OC_MatchContext::oC_Hint(size_t i) {
  return getRuleContext<LcypherParser::OC_HintContext>(i);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}


size_t LcypherParser::OC_MatchContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Match;
}


std::any LcypherParser::OC_MatchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Match(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MatchContext* LcypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 20, LcypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::OPTIONAL_) {
      setState(337);
      match(LcypherParser::OPTIONAL_);
      setState(338);
      match(LcypherParser::SP);
    }
    setState(341);
    match(LcypherParser::MATCH);
    setState(343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(342);
      match(LcypherParser::SP);
    }
    setState(345);
    oC_Pattern();
    setState(352);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(347);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(346);
          match(LcypherParser::SP);
        }
        setState(349);
        oC_Hint(); 
      }
      setState(354);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
    setState(359);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(356);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(355);
        match(LcypherParser::SP);
      }
      setState(358);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

LcypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::UNWIND() {
  return getToken(LcypherParser::UNWIND, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnwindContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_UnwindContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Unwind;
}


std::any LcypherParser::OC_UnwindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Unwind(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnwindContext* LcypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 22, LcypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(361);
    match(LcypherParser::UNWIND);
    setState(363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(362);
      match(LcypherParser::SP);
    }
    setState(365);
    oC_Expression();
    setState(366);
    match(LcypherParser::SP);
    setState(367);
    match(LcypherParser::AS);
    setState(368);
    match(LcypherParser::SP);
    setState(369);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

LcypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MergeContext::MERGE() {
  return getToken(LcypherParser::MERGE, 0);
}

LcypherParser::OC_PatternPartContext* LcypherParser::OC_MergeContext::oC_PatternPart() {
  return getRuleContext<LcypherParser::OC_PatternPartContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MergeContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_MergeActionContext *> LcypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<LcypherParser::OC_MergeActionContext>();
}

LcypherParser::OC_MergeActionContext* LcypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<LcypherParser::OC_MergeActionContext>(i);
}


size_t LcypherParser::OC_MergeContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Merge;
}


std::any LcypherParser::OC_MergeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Merge(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MergeContext* LcypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 24, LcypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(371);
    match(LcypherParser::MERGE);
    setState(373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(372);
      match(LcypherParser::SP);
    }
    setState(375);
    oC_PatternPart();
    setState(380);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(376);
        match(LcypherParser::SP);
        setState(377);
        oC_MergeAction(); 
      }
      setState(382);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

LcypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MergeActionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

LcypherParser::OC_SetContext* LcypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<LcypherParser::OC_SetContext>(0);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}


size_t LcypherParser::OC_MergeActionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MergeAction;
}


std::any LcypherParser::OC_MergeActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MergeAction(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MergeActionContext* LcypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 26, LcypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(393);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(383);
      match(LcypherParser::ON);
      setState(384);
      match(LcypherParser::SP);
      setState(385);
      match(LcypherParser::MATCH);
      setState(386);
      match(LcypherParser::SP);
      setState(387);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(388);
      match(LcypherParser::ON);
      setState(389);
      match(LcypherParser::SP);
      setState(390);
      match(LcypherParser::CREATE);
      setState(391);
      match(LcypherParser::SP);
      setState(392);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

LcypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CreateContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

LcypherParser::OC_PatternContext* LcypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<LcypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_CreateContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_CreateContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Create;
}


std::any LcypherParser::OC_CreateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Create(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CreateContext* LcypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 28, LcypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(395);
    match(LcypherParser::CREATE);
    setState(397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(396);
      match(LcypherParser::SP);
    }
    setState(399);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

LcypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SetContext::SET() {
  return getToken(LcypherParser::SET, 0);
}

std::vector<LcypherParser::OC_SetItemContext *> LcypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<LcypherParser::OC_SetItemContext>();
}

LcypherParser::OC_SetItemContext* LcypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<LcypherParser::OC_SetItemContext>(i);
}

tree::TerminalNode* LcypherParser::OC_SetContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_SetContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Set;
}


std::any LcypherParser::OC_SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Set(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SetContext* LcypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 30, LcypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(401);
    match(LcypherParser::SET);
    setState(403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(402);
      match(LcypherParser::SP);
    }
    setState(405);
    oC_SetItem();
    setState(410);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__1) {
      setState(406);
      match(LcypherParser::T__1);
      setState(407);
      oC_SetItem();
      setState(412);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

LcypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<LcypherParser::OC_PropertyExpressionContext>(0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_SetItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_SetItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_SetItemContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}


size_t LcypherParser::OC_SetItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SetItem;
}


std::any LcypherParser::OC_SetItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SetItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SetItemContext* LcypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 32, LcypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(449);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(413);
      oC_PropertyExpression();
      setState(415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(414);
        match(LcypherParser::SP);
      }
      setState(417);
      match(LcypherParser::T__2);
      setState(419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(418);
        match(LcypherParser::SP);
      }
      setState(421);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(423);
      oC_Variable();
      setState(425);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(424);
        match(LcypherParser::SP);
      }
      setState(427);
      match(LcypherParser::T__2);
      setState(429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(428);
        match(LcypherParser::SP);
      }
      setState(431);
      oC_Expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(433);
      oC_Variable();
      setState(435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(434);
        match(LcypherParser::SP);
      }
      setState(437);
      match(LcypherParser::T__3);
      setState(439);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(438);
        match(LcypherParser::SP);
      }
      setState(441);
      oC_Expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(443);
      oC_Variable();
      setState(445);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(444);
        match(LcypherParser::SP);
      }
      setState(447);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

LcypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::DELETE_() {
  return getToken(LcypherParser::DELETE_, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::DETACH() {
  return getToken(LcypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_DeleteContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_DeleteContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Delete;
}


std::any LcypherParser::OC_DeleteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Delete(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DeleteContext* LcypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 34, LcypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::DETACH) {
      setState(451);
      match(LcypherParser::DETACH);
      setState(452);
      match(LcypherParser::SP);
    }
    setState(455);
    match(LcypherParser::DELETE_);
    setState(457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(456);
      match(LcypherParser::SP);
    }
    setState(459);
    oC_Expression();
    setState(470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(461);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(460);
          match(LcypherParser::SP);
        }
        setState(463);
        match(LcypherParser::T__1);
        setState(465);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(464);
          match(LcypherParser::SP);
        }
        setState(467);
        oC_Expression(); 
      }
      setState(472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveContext ------------------------------------------------------------------

LcypherParser::OC_RemoveContext::OC_RemoveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_RemoveContext::REMOVE() {
  return getToken(LcypherParser::REMOVE, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RemoveContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RemoveContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_RemoveItemContext *> LcypherParser::OC_RemoveContext::oC_RemoveItem() {
  return getRuleContexts<LcypherParser::OC_RemoveItemContext>();
}

LcypherParser::OC_RemoveItemContext* LcypherParser::OC_RemoveContext::oC_RemoveItem(size_t i) {
  return getRuleContext<LcypherParser::OC_RemoveItemContext>(i);
}


size_t LcypherParser::OC_RemoveContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Remove;
}


std::any LcypherParser::OC_RemoveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Remove(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RemoveContext* LcypherParser::oC_Remove() {
  OC_RemoveContext *_localctx = _tracker.createInstance<OC_RemoveContext>(_ctx, getState());
  enterRule(_localctx, 36, LcypherParser::RuleOC_Remove);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(473);
    match(LcypherParser::REMOVE);
    setState(474);
    match(LcypherParser::SP);
    setState(475);
    oC_RemoveItem();
    setState(486);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(477);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(476);
          match(LcypherParser::SP);
        }
        setState(479);
        match(LcypherParser::T__1);
        setState(481);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(480);
          match(LcypherParser::SP);
        }
        setState(483);
        oC_RemoveItem(); 
      }
      setState(488);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveItemContext ------------------------------------------------------------------

LcypherParser::OC_RemoveItemContext::OC_RemoveItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_RemoveItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_RemoveItemContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::OC_RemoveItemContext::oC_PropertyExpression() {
  return getRuleContext<LcypherParser::OC_PropertyExpressionContext>(0);
}


size_t LcypherParser::OC_RemoveItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RemoveItem;
}


std::any LcypherParser::OC_RemoveItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RemoveItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RemoveItemContext* LcypherParser::oC_RemoveItem() {
  OC_RemoveItemContext *_localctx = _tracker.createInstance<OC_RemoveItemContext>(_ctx, getState());
  enterRule(_localctx, 38, LcypherParser::RuleOC_RemoveItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(493);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(489);
      oC_Variable();
      setState(490);
      oC_NodeLabels();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(492);
      oC_PropertyExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_InQueryCallContext ------------------------------------------------------------------

LcypherParser::OC_InQueryCallContext::OC_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::CALL() {
  return getToken(LcypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_InQueryCallContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::OC_InQueryCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::YIELD() {
  return getToken(LcypherParser::YIELD, 0);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::OC_InQueryCallContext::oC_YieldItems() {
  return getRuleContext<LcypherParser::OC_YieldItemsContext>(0);
}


size_t LcypherParser::OC_InQueryCallContext::getRuleIndex() const {
  return LcypherParser::RuleOC_InQueryCall;
}


std::any LcypherParser::OC_InQueryCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_InQueryCall(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_InQueryCallContext* LcypherParser::oC_InQueryCall() {
  OC_InQueryCallContext *_localctx = _tracker.createInstance<OC_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 40, LcypherParser::RuleOC_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(495);
    match(LcypherParser::CALL);
    setState(496);
    match(LcypherParser::SP);
    setState(497);
    oC_ExplicitProcedureInvocation();
    setState(504);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      setState(499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(498);
        match(LcypherParser::SP);
      }
      setState(501);
      match(LcypherParser::YIELD);
      setState(502);
      match(LcypherParser::SP);
      setState(503);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StandaloneCallContext ------------------------------------------------------------------

LcypherParser::OC_StandaloneCallContext::OC_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::CALL() {
  return getToken(LcypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_StandaloneCallContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::OC_StandaloneCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

LcypherParser::OC_ImplicitProcedureInvocationContext* LcypherParser::OC_StandaloneCallContext::oC_ImplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ImplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::YIELD() {
  return getToken(LcypherParser::YIELD, 0);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::OC_StandaloneCallContext::oC_YieldItems() {
  return getRuleContext<LcypherParser::OC_YieldItemsContext>(0);
}


size_t LcypherParser::OC_StandaloneCallContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StandaloneCall;
}


std::any LcypherParser::OC_StandaloneCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StandaloneCall(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StandaloneCallContext* LcypherParser::oC_StandaloneCall() {
  OC_StandaloneCallContext *_localctx = _tracker.createInstance<OC_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 42, LcypherParser::RuleOC_StandaloneCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(LcypherParser::CALL);
    setState(507);
    match(LcypherParser::SP);
    setState(510);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(508);
      oC_ExplicitProcedureInvocation();
      break;
    }

    case 2: {
      setState(509);
      oC_ImplicitProcedureInvocation();
      break;
    }

    default:
      break;
    }
    setState(516);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      setState(512);
      match(LcypherParser::SP);
      setState(513);
      match(LcypherParser::YIELD);
      setState(514);
      match(LcypherParser::SP);
      setState(515);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemsContext ------------------------------------------------------------------

LcypherParser::OC_YieldItemsContext::OC_YieldItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_WhereContext* LcypherParser::OC_YieldItemsContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}

std::vector<LcypherParser::OC_YieldItemContext *> LcypherParser::OC_YieldItemsContext::oC_YieldItem() {
  return getRuleContexts<LcypherParser::OC_YieldItemContext>();
}

LcypherParser::OC_YieldItemContext* LcypherParser::OC_YieldItemsContext::oC_YieldItem(size_t i) {
  return getRuleContext<LcypherParser::OC_YieldItemContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_YieldItemsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_YieldItemsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_YieldItemsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_YieldItems;
}


std::any LcypherParser::OC_YieldItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItems(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::oC_YieldItems() {
  OC_YieldItemsContext *_localctx = _tracker.createInstance<OC_YieldItemsContext>(_ctx, getState());
  enterRule(_localctx, 44, LcypherParser::RuleOC_YieldItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(533);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__4: {
        setState(518);
        match(LcypherParser::T__4);
        break;
      }

      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        setState(519);
        oC_YieldItem();
        setState(530);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(521);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(520);
              match(LcypherParser::SP);
            }
            setState(523);
            match(LcypherParser::T__1);
            setState(525);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(524);
              match(LcypherParser::SP);
            }
            setState(527);
            oC_YieldItem(); 
          }
          setState(532);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(539);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(536);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(535);
        match(LcypherParser::SP);
      }
      setState(538);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemContext ------------------------------------------------------------------

LcypherParser::OC_YieldItemContext::OC_YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_YieldItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_ProcedureResultFieldContext* LcypherParser::OC_YieldItemContext::oC_ProcedureResultField() {
  return getRuleContext<LcypherParser::OC_ProcedureResultFieldContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_YieldItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_YieldItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_YieldItemContext::AS() {
  return getToken(LcypherParser::AS, 0);
}


size_t LcypherParser::OC_YieldItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_YieldItem;
}


std::any LcypherParser::OC_YieldItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_YieldItemContext* LcypherParser::oC_YieldItem() {
  OC_YieldItemContext *_localctx = _tracker.createInstance<OC_YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 46, LcypherParser::RuleOC_YieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      setState(541);
      oC_ProcedureResultField();
      setState(542);
      match(LcypherParser::SP);
      setState(543);
      match(LcypherParser::AS);
      setState(544);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(548);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

LcypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_WithContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_WithContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_WithContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::OC_WithContext::oC_ReturnBody() {
  return getRuleContext<LcypherParser::OC_ReturnBodyContext>(0);
}

tree::TerminalNode* LcypherParser::OC_WithContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}


size_t LcypherParser::OC_WithContext::getRuleIndex() const {
  return LcypherParser::RuleOC_With;
}


std::any LcypherParser::OC_WithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_With(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_WithContext* LcypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 48, LcypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(550);
    match(LcypherParser::WITH);
    setState(555);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(552);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(551);
        match(LcypherParser::SP);
      }
      setState(554);
      match(LcypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(557);
    match(LcypherParser::SP);
    setState(558);
    oC_ReturnBody();
    setState(563);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(560);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(559);
        match(LcypherParser::SP);
      }
      setState(562);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

LcypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::RETURN() {
  return getToken(LcypherParser::RETURN, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::OC_ReturnContext::oC_ReturnBody() {
  return getRuleContext<LcypherParser::OC_ReturnBodyContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}


size_t LcypherParser::OC_ReturnContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Return;
}


std::any LcypherParser::OC_ReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Return(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnContext* LcypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 50, LcypherParser::RuleOC_Return);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(565);
    match(LcypherParser::RETURN);
    setState(570);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      setState(567);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(566);
        match(LcypherParser::SP);
      }
      setState(569);
      match(LcypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(572);
    match(LcypherParser::SP);
    setState(573);
    oC_ReturnBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnBodyContext ------------------------------------------------------------------

LcypherParser::OC_ReturnBodyContext::OC_ReturnBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ReturnItemsContext* LcypherParser::OC_ReturnBodyContext::oC_ReturnItems() {
  return getRuleContext<LcypherParser::OC_ReturnItemsContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnBodyContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnBodyContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_OrderContext* LcypherParser::OC_ReturnBodyContext::oC_Order() {
  return getRuleContext<LcypherParser::OC_OrderContext>(0);
}

LcypherParser::OC_SkipContext* LcypherParser::OC_ReturnBodyContext::oC_Skip() {
  return getRuleContext<LcypherParser::OC_SkipContext>(0);
}

LcypherParser::OC_LimitContext* LcypherParser::OC_ReturnBodyContext::oC_Limit() {
  return getRuleContext<LcypherParser::OC_LimitContext>(0);
}


size_t LcypherParser::OC_ReturnBodyContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnBody;
}


std::any LcypherParser::OC_ReturnBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnBody(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::oC_ReturnBody() {
  OC_ReturnBodyContext *_localctx = _tracker.createInstance<OC_ReturnBodyContext>(_ctx, getState());
  enterRule(_localctx, 52, LcypherParser::RuleOC_ReturnBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(575);
    oC_ReturnItems();
    setState(578);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      setState(576);
      match(LcypherParser::SP);
      setState(577);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(582);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(580);
      match(LcypherParser::SP);
      setState(581);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(586);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(584);
      match(LcypherParser::SP);
      setState(585);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnItemsContext ------------------------------------------------------------------

LcypherParser::OC_ReturnItemsContext::OC_ReturnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_ReturnItemContext *> LcypherParser::OC_ReturnItemsContext::oC_ReturnItem() {
  return getRuleContexts<LcypherParser::OC_ReturnItemContext>();
}

LcypherParser::OC_ReturnItemContext* LcypherParser::OC_ReturnItemsContext::oC_ReturnItem(size_t i) {
  return getRuleContext<LcypherParser::OC_ReturnItemContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnItemsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ReturnItemsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnItems;
}


std::any LcypherParser::OC_ReturnItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnItems(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnItemsContext* LcypherParser::oC_ReturnItems() {
  OC_ReturnItemsContext *_localctx = _tracker.createInstance<OC_ReturnItemsContext>(_ctx, getState());
  enterRule(_localctx, 54, LcypherParser::RuleOC_ReturnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(616);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(588);
        match(LcypherParser::T__4);
        setState(599);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(590);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(589);
              match(LcypherParser::SP);
            }
            setState(592);
            match(LcypherParser::T__1);
            setState(594);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(593);
              match(LcypherParser::SP);
            }
            setState(596);
            oC_ReturnItem(); 
          }
          setState(601);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
        }
        break;
      }

      case LcypherParser::T__5:
      case LcypherParser::T__7:
      case LcypherParser::T__12:
      case LcypherParser::T__13:
      case LcypherParser::T__23:
      case LcypherParser::T__25:
      case LcypherParser::ALL:
      case LcypherParser::NOT:
      case LcypherParser::NULL_:
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_:
      case LcypherParser::EXISTS:
      case LcypherParser::CASE:
      case LcypherParser::StringLiteral:
      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger:
      case LcypherParser::HexLetter:
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(602);
        oC_ReturnItem();
        setState(613);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(604);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(603);
              match(LcypherParser::SP);
            }
            setState(606);
            match(LcypherParser::T__1);
            setState(608);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(607);
              match(LcypherParser::SP);
            }
            setState(610);
            oC_ReturnItem(); 
          }
          setState(615);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnItemContext ------------------------------------------------------------------

LcypherParser::OC_ReturnItemContext::OC_ReturnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ReturnItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_ReturnItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_ReturnItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnItem;
}


std::any LcypherParser::OC_ReturnItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnItemContext* LcypherParser::oC_ReturnItem() {
  OC_ReturnItemContext *_localctx = _tracker.createInstance<OC_ReturnItemContext>(_ctx, getState());
  enterRule(_localctx, 56, LcypherParser::RuleOC_ReturnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(625);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(618);
      oC_Expression();
      setState(619);
      match(LcypherParser::SP);
      setState(620);
      match(LcypherParser::AS);
      setState(621);
      match(LcypherParser::SP);
      setState(622);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(624);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

LcypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_OrderContext::ORDER() {
  return getToken(LcypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrderContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_OrderContext::BY() {
  return getToken(LcypherParser::BY, 0);
}

std::vector<LcypherParser::OC_SortItemContext *> LcypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<LcypherParser::OC_SortItemContext>();
}

LcypherParser::OC_SortItemContext* LcypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<LcypherParser::OC_SortItemContext>(i);
}


size_t LcypherParser::OC_OrderContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Order;
}


std::any LcypherParser::OC_OrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Order(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_OrderContext* LcypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 58, LcypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(627);
    match(LcypherParser::ORDER);
    setState(628);
    match(LcypherParser::SP);
    setState(629);
    match(LcypherParser::BY);
    setState(630);
    match(LcypherParser::SP);
    setState(631);
    oC_SortItem();
    setState(639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__1) {
      setState(632);
      match(LcypherParser::T__1);
      setState(634);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(633);
        match(LcypherParser::SP);
      }
      setState(636);
      oC_SortItem();
      setState(641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

LcypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SkipContext::L_SKIP() {
  return getToken(LcypherParser::L_SKIP, 0);
}

tree::TerminalNode* LcypherParser::OC_SkipContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_SkipContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Skip;
}


std::any LcypherParser::OC_SkipContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Skip(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SkipContext* LcypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 60, LcypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    match(LcypherParser::L_SKIP);
    setState(643);
    match(LcypherParser::SP);
    setState(644);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

LcypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_LimitContext::LIMIT() {
  return getToken(LcypherParser::LIMIT, 0);
}

tree::TerminalNode* LcypherParser::OC_LimitContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_LimitContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Limit;
}


std::any LcypherParser::OC_LimitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Limit(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LimitContext* LcypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 62, LcypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(646);
    match(LcypherParser::LIMIT);
    setState(647);
    match(LcypherParser::SP);
    setState(648);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

LcypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(LcypherParser::ASCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::ASC() {
  return getToken(LcypherParser::ASC, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(LcypherParser::DESCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::DESC() {
  return getToken(LcypherParser::DESC, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_SortItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SortItem;
}


std::any LcypherParser::OC_SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SortItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SortItemContext* LcypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 64, LcypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(650);
    oC_Expression();
    setState(655);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(652);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(651);
        match(LcypherParser::SP);
      }
      setState(654);
      _la = _input->LA(1);
      if (!(((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_HintContext ------------------------------------------------------------------

LcypherParser::OC_HintContext::OC_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_HintContext::USING() {
  return getToken(LcypherParser::USING, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_HintContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_HintContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_HintContext::JOIN() {
  return getToken(LcypherParser::JOIN, 0);
}

tree::TerminalNode* LcypherParser::OC_HintContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_HintContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* LcypherParser::OC_HintContext::START() {
  return getToken(LcypherParser::START, 0);
}


size_t LcypherParser::OC_HintContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Hint;
}


std::any LcypherParser::OC_HintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Hint(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_HintContext* LcypherParser::oC_Hint() {
  OC_HintContext *_localctx = _tracker.createInstance<OC_HintContext>(_ctx, getState());
  enterRule(_localctx, 66, LcypherParser::RuleOC_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(671);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(657);
      match(LcypherParser::USING);
      setState(658);
      match(LcypherParser::SP);
      setState(659);
      match(LcypherParser::JOIN);
      setState(660);
      match(LcypherParser::SP);
      setState(661);
      match(LcypherParser::ON);
      setState(662);
      match(LcypherParser::SP);
      setState(663);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(664);
      match(LcypherParser::USING);
      setState(665);
      match(LcypherParser::SP);
      setState(666);
      match(LcypherParser::START);
      setState(667);
      match(LcypherParser::SP);
      setState(668);
      match(LcypherParser::ON);
      setState(669);
      match(LcypherParser::SP);
      setState(670);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

LcypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_WhereContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}

tree::TerminalNode* LcypherParser::OC_WhereContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_WhereContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Where;
}


std::any LcypherParser::OC_WhereContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Where(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_WhereContext* LcypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 68, LcypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(673);
    match(LcypherParser::WHERE);
    setState(674);
    match(LcypherParser::SP);
    setState(675);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

LcypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_PatternPartContext *> LcypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<LcypherParser::OC_PatternPartContext>();
}

LcypherParser::OC_PatternPartContext* LcypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Pattern;
}


std::any LcypherParser::OC_PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Pattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternContext* LcypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 70, LcypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(677);
    oC_PatternPart();
    setState(688);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(679);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(678);
          match(LcypherParser::SP);
        }
        setState(681);
        match(LcypherParser::T__1);
        setState(683);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(682);
          match(LcypherParser::SP);
        }
        setState(685);
        oC_PatternPart(); 
      }
      setState(690);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

LcypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_AnonymousPatternPartContext* LcypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<LcypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternPartContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PatternPartContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternPart;
}


std::any LcypherParser::OC_PatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternPart(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternPartContext* LcypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 72, LcypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(702);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(691);
        oC_Variable();
        setState(693);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(692);
          match(LcypherParser::SP);
        }
        setState(695);
        match(LcypherParser::T__2);
        setState(697);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(696);
          match(LcypherParser::SP);
        }
        setState(699);
        oC_AnonymousPatternPart();
        break;
      }

      case LcypherParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(701);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

LcypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}


size_t LcypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AnonymousPatternPart;
}


std::any LcypherParser::OC_AnonymousPatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AnonymousPatternPart(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AnonymousPatternPartContext* LcypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 74, LcypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

LcypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

std::vector<LcypherParser::OC_PatternElementChainContext *> LcypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<LcypherParser::OC_PatternElementChainContext>();
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternElementContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}


size_t LcypherParser::OC_PatternElementContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternElement;
}


std::any LcypherParser::OC_PatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElement(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternElementContext* LcypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 76, LcypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(720);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(706);
      oC_NodePattern();
      setState(713);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(708);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(707);
            match(LcypherParser::SP);
          }
          setState(710);
          oC_PatternElementChain(); 
        }
        setState(715);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(716);
      match(LcypherParser::T__5);
      setState(717);
      oC_PatternElement();
      setState(718);
      match(LcypherParser::T__6);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

LcypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NodePatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

LcypherParser::OC_PropertiesContext* LcypherParser::OC_NodePatternContext::oC_Properties() {
  return getRuleContext<LcypherParser::OC_PropertiesContext>(0);
}


size_t LcypherParser::OC_NodePatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodePattern;
}


std::any LcypherParser::OC_NodePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodePattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodePatternContext* LcypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 78, LcypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(722);
    match(LcypherParser::T__5);
    setState(724);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(723);
      match(LcypherParser::SP);
    }
    setState(730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 2199493148687) != 0)) {
      setState(726);
      oC_Variable();
      setState(728);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(727);
        match(LcypherParser::SP);
      }
    }
    setState(736);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__9) {
      setState(732);
      oC_NodeLabels();
      setState(734);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(733);
        match(LcypherParser::SP);
      }
    }
    setState(742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__23

    || _la == LcypherParser::T__25) {
      setState(738);
      oC_Properties();
      setState(740);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(739);
        match(LcypherParser::SP);
      }
    }
    setState(744);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

LcypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RelationshipPatternContext* LcypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipPatternContext>(0);
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PatternElementChainContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternElementChain;
}


std::any LcypherParser::OC_PatternElementChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElementChain(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 80, LcypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    oC_RelationshipPattern();
    setState(748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(747);
      match(LcypherParser::SP);
    }
    setState(750);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LeftArrowHeadContext* LcypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<LcypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<LcypherParser::OC_DashContext *> LcypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<LcypherParser::OC_DashContext>();
}

LcypherParser::OC_DashContext* LcypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<LcypherParser::OC_DashContext>(i);
}

LcypherParser::OC_RightArrowHeadContext* LcypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<LcypherParser::OC_RightArrowHeadContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_RelationshipDetailContext* LcypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<LcypherParser::OC_RelationshipDetailContext>(0);
}


size_t LcypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipPattern;
}


std::any LcypherParser::OC_RelationshipPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipPattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipPatternContext* LcypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 82, LcypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(816);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(752);
      oC_LeftArrowHead();
      setState(754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(753);
        match(LcypherParser::SP);
      }
      setState(756);
      oC_Dash();
      setState(758);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
      case 1: {
        setState(757);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(760);
        oC_RelationshipDetail();
      }
      setState(764);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(763);
        match(LcypherParser::SP);
      }
      setState(766);
      oC_Dash();
      setState(768);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(767);
        match(LcypherParser::SP);
      }
      setState(770);
      oC_RightArrowHead();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(772);
      oC_LeftArrowHead();
      setState(774);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(773);
        match(LcypherParser::SP);
      }
      setState(776);
      oC_Dash();
      setState(778);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
      case 1: {
        setState(777);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(780);
        oC_RelationshipDetail();
      }
      setState(784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(783);
        match(LcypherParser::SP);
      }
      setState(786);
      oC_Dash();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(788);
      oC_Dash();
      setState(790);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
      case 1: {
        setState(789);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(792);
        oC_RelationshipDetail();
      }
      setState(796);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(795);
        match(LcypherParser::SP);
      }
      setState(798);
      oC_Dash();
      setState(800);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(799);
        match(LcypherParser::SP);
      }
      setState(802);
      oC_RightArrowHead();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(804);
      oC_Dash();
      setState(806);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(805);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(808);
        oC_RelationshipDetail();
      }
      setState(812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(811);
        match(LcypherParser::SP);
      }
      setState(814);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_RelationshipTypesContext* LcypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<LcypherParser::OC_RelationshipTypesContext>(0);
}

LcypherParser::OC_RangeLiteralContext* LcypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<LcypherParser::OC_RangeLiteralContext>(0);
}

LcypherParser::OC_PropertiesContext* LcypherParser::OC_RelationshipDetailContext::oC_Properties() {
  return getRuleContext<LcypherParser::OC_PropertiesContext>(0);
}


size_t LcypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipDetail;
}


std::any LcypherParser::OC_RelationshipDetailContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipDetail(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipDetailContext* LcypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 84, LcypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    match(LcypherParser::T__7);
    setState(820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(819);
      match(LcypherParser::SP);
    }
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 2199493148687) != 0)) {
      setState(822);
      oC_Variable();
      setState(824);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(823);
        match(LcypherParser::SP);
      }
    }
    setState(832);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__9) {
      setState(828);
      oC_RelationshipTypes();
      setState(830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(829);
        match(LcypherParser::SP);
      }
    }
    setState(835);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__4) {
      setState(834);
      oC_RangeLiteral();
    }
    setState(841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__23

    || _la == LcypherParser::T__25) {
      setState(837);
      oC_Properties();
      setState(839);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(838);
        match(LcypherParser::SP);
      }
    }
    setState(843);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertiesContext ------------------------------------------------------------------

LcypherParser::OC_PropertiesContext::OC_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_MapLiteralContext* LcypherParser::OC_PropertiesContext::oC_MapLiteral() {
  return getRuleContext<LcypherParser::OC_MapLiteralContext>(0);
}

LcypherParser::OC_ParameterContext* LcypherParser::OC_PropertiesContext::oC_Parameter() {
  return getRuleContext<LcypherParser::OC_ParameterContext>(0);
}


size_t LcypherParser::OC_PropertiesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Properties;
}


std::any LcypherParser::OC_PropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Properties(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertiesContext* LcypherParser::oC_Properties() {
  OC_PropertiesContext *_localctx = _tracker.createInstance<OC_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 86, LcypherParser::RuleOC_Properties);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(847);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(845);
        oC_MapLiteral();
        break;
      }

      case LcypherParser::T__25: {
        enterOuterAlt(_localctx, 2);
        setState(846);
        oC_Parameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_RelTypeNameContext *> LcypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<LcypherParser::OC_RelTypeNameContext>();
}

LcypherParser::OC_RelTypeNameContext* LcypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<LcypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipTypes;
}


std::any LcypherParser::OC_RelationshipTypesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipTypes(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipTypesContext* LcypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 88, LcypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(849);
    match(LcypherParser::T__9);
    setState(851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(850);
      match(LcypherParser::SP);
    }
    setState(853);
    oC_RelTypeName();
    setState(867);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(855);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(854);
          match(LcypherParser::SP);
        }
        setState(857);
        match(LcypherParser::T__10);
        setState(859);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::T__9) {
          setState(858);
          match(LcypherParser::T__9);
        }
        setState(862);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(861);
          match(LcypherParser::SP);
        }
        setState(864);
        oC_RelTypeName(); 
      }
      setState(869);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

LcypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_NodeLabelContext *> LcypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<LcypherParser::OC_NodeLabelContext>();
}

LcypherParser::OC_NodeLabelContext* LcypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<LcypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodeLabels;
}


std::any LcypherParser::OC_NodeLabelsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabels(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 90, LcypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(870);
    oC_NodeLabel();
    setState(877);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(872);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(871);
          match(LcypherParser::SP);
        }
        setState(874);
        oC_NodeLabel(); 
      }
      setState(879);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

LcypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LabelNameContext* LcypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<LcypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_NodeLabelContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodeLabel;
}


std::any LcypherParser::OC_NodeLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabel(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodeLabelContext* LcypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 92, LcypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(880);
    match(LcypherParser::T__9);
    setState(882);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(881);
      match(LcypherParser::SP);
    }
    setState(884);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

LcypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_IntegerLiteralContext *> LcypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContexts<LcypherParser::OC_IntegerLiteralContext>();
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::OC_RangeLiteralContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<LcypherParser::OC_IntegerLiteralContext>(i);
}


size_t LcypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RangeLiteral;
}


std::any LcypherParser::OC_RangeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RangeLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RangeLiteralContext* LcypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 94, LcypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(886);
    match(LcypherParser::T__4);
    setState(888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(887);
      match(LcypherParser::SP);
    }
    setState(894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 103) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 103)) & 7) != 0)) {
      setState(890);
      oC_IntegerLiteral();
      setState(892);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(891);
        match(LcypherParser::SP);
      }
    }
    setState(906);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__11) {
      setState(896);
      match(LcypherParser::T__11);
      setState(898);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(897);
        match(LcypherParser::SP);
      }
      setState(904);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 103) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 103)) & 7) != 0)) {
        setState(900);
        oC_IntegerLiteral();
        setState(902);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(901);
          match(LcypherParser::SP);
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

LcypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_LabelNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_LabelName;
}


std::any LcypherParser::OC_LabelNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_LabelName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LabelNameContext* LcypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 96, LcypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

LcypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelTypeName;
}


std::any LcypherParser::OC_RelTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelTypeName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelTypeNameContext* LcypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 98, LcypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_OrExpressionContext* LcypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<LcypherParser::OC_OrExpressionContext>(0);
}


size_t LcypherParser::OC_ExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Expression;
}


std::any LcypherParser::OC_ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Expression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ExpressionContext* LcypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 100, LcypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

LcypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_XorExpressionContext *> LcypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<LcypherParser::OC_XorExpressionContext>();
}

LcypherParser::OC_XorExpressionContext* LcypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrExpressionContext::OR() {
  return getTokens(LcypherParser::OR);
}

tree::TerminalNode* LcypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(LcypherParser::OR, i);
}


size_t LcypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_OrExpression;
}


std::any LcypherParser::OC_OrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_OrExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_OrExpressionContext* LcypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 102, LcypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(914);
    oC_XorExpression();
    setState(921);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(915);
        match(LcypherParser::SP);
        setState(916);
        match(LcypherParser::OR);
        setState(917);
        match(LcypherParser::SP);
        setState(918);
        oC_XorExpression(); 
      }
      setState(923);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_AndExpressionContext *> LcypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<LcypherParser::OC_AndExpressionContext>();
}

LcypherParser::OC_AndExpressionContext* LcypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_XorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(LcypherParser::XOR);
}

tree::TerminalNode* LcypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(LcypherParser::XOR, i);
}


size_t LcypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_XorExpression;
}


std::any LcypherParser::OC_XorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_XorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_XorExpressionContext* LcypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, LcypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(924);
    oC_AndExpression();
    setState(931);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(925);
        match(LcypherParser::SP);
        setState(926);
        match(LcypherParser::XOR);
        setState(927);
        match(LcypherParser::SP);
        setState(928);
        oC_AndExpression(); 
      }
      setState(933);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

LcypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_NotExpressionContext *> LcypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<LcypherParser::OC_NotExpressionContext>();
}

LcypherParser::OC_NotExpressionContext* LcypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AndExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AndExpressionContext::AND() {
  return getTokens(LcypherParser::AND);
}

tree::TerminalNode* LcypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(LcypherParser::AND, i);
}


size_t LcypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AndExpression;
}


std::any LcypherParser::OC_AndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AndExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AndExpressionContext* LcypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, LcypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(934);
    oC_NotExpression();
    setState(941);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(935);
        match(LcypherParser::SP);
        setState(936);
        match(LcypherParser::AND);
        setState(937);
        match(LcypherParser::SP);
        setState(938);
        oC_NotExpression(); 
      }
      setState(943);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

LcypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ComparisonExpressionContext* LcypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<LcypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(LcypherParser::NOT);
}

tree::TerminalNode* LcypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(LcypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NotExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NotExpression;
}


std::any LcypherParser::OC_NotExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NotExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NotExpressionContext* LcypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 108, LcypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::NOT) {
      setState(944);
      match(LcypherParser::NOT);
      setState(946);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(945);
        match(LcypherParser::SP);
      }
      setState(952);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(953);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::OC_ComparisonExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<LcypherParser::OC_AddOrSubtractExpressionContext>(0);
}

std::vector<LcypherParser::OC_PartialComparisonExpressionContext *> LcypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression() {
  return getRuleContexts<LcypherParser::OC_PartialComparisonExpressionContext>();
}

LcypherParser::OC_PartialComparisonExpressionContext* LcypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_PartialComparisonExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ComparisonExpression;
}


std::any LcypherParser::OC_ComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ComparisonExpressionContext* LcypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 110, LcypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(955);
    oC_AddOrSubtractExpression();
    setState(962);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(957);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(956);
          match(LcypherParser::SP);
        }
        setState(959);
        oC_PartialComparisonExpression(); 
      }
      setState(964);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

LcypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_MultiplyDivideModuloExpressionContext *> LcypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<LcypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

LcypherParser::OC_MultiplyDivideModuloExpressionContext* LcypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AddOrSubtractExpression;
}


std::any LcypherParser::OC_AddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 112, LcypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(965);
    oC_MultiplyDivideModuloExpression();
    setState(984);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(982);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
        case 1: {
          setState(967);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(966);
            match(LcypherParser::SP);
          }
          setState(969);
          match(LcypherParser::T__12);
          setState(971);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(970);
            match(LcypherParser::SP);
          }
          setState(973);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        case 2: {
          setState(975);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(974);
            match(LcypherParser::SP);
          }
          setState(977);
          match(LcypherParser::T__13);
          setState(979);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(978);
            match(LcypherParser::SP);
          }
          setState(981);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(986);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

LcypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_PowerOfExpressionContext *> LcypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<LcypherParser::OC_PowerOfExpressionContext>();
}

LcypherParser::OC_PowerOfExpressionContext* LcypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MultiplyDivideModuloExpression;
}


std::any LcypherParser::OC_MultiplyDivideModuloExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiplyDivideModuloExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MultiplyDivideModuloExpressionContext* LcypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 114, LcypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(987);
    oC_PowerOfExpression();
    setState(1014);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1012);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
        case 1: {
          setState(989);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(988);
            match(LcypherParser::SP);
          }
          setState(991);
          match(LcypherParser::T__4);
          setState(993);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(992);
            match(LcypherParser::SP);
          }
          setState(995);
          oC_PowerOfExpression();
          break;
        }

        case 2: {
          setState(997);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(996);
            match(LcypherParser::SP);
          }
          setState(999);
          match(LcypherParser::T__14);
          setState(1001);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1000);
            match(LcypherParser::SP);
          }
          setState(1003);
          oC_PowerOfExpression();
          break;
        }

        case 3: {
          setState(1005);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1004);
            match(LcypherParser::SP);
          }
          setState(1007);
          match(LcypherParser::T__15);
          setState(1009);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1008);
            match(LcypherParser::SP);
          }
          setState(1011);
          oC_PowerOfExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1016);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_UnaryAddOrSubtractExpressionContext *> LcypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression() {
  return getRuleContexts<LcypherParser::OC_UnaryAddOrSubtractExpressionContext>();
}

LcypherParser::OC_UnaryAddOrSubtractExpressionContext* LcypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_UnaryAddOrSubtractExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PowerOfExpression;
}


std::any LcypherParser::OC_PowerOfExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PowerOfExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PowerOfExpressionContext* LcypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 116, LcypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1017);
    oC_UnaryAddOrSubtractExpression();
    setState(1028);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1019);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1018);
          match(LcypherParser::SP);
        }
        setState(1021);
        match(LcypherParser::T__16);
        setState(1023);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1022);
          match(LcypherParser::SP);
        }
        setState(1025);
        oC_UnaryAddOrSubtractExpression(); 
      }
      setState(1030);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddOrSubtractExpressionContext ------------------------------------------------------------------

LcypherParser::OC_UnaryAddOrSubtractExpressionContext::OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_StringListNullOperatorExpressionContext* LcypherParser::OC_UnaryAddOrSubtractExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<LcypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnaryAddOrSubtractExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnaryAddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_UnaryAddOrSubtractExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_UnaryAddOrSubtractExpression;
}


std::any LcypherParser::OC_UnaryAddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_UnaryAddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnaryAddOrSubtractExpressionContext* LcypherParser::oC_UnaryAddOrSubtractExpression() {
  OC_UnaryAddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 118, LcypherParser::RuleOC_UnaryAddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__12

    || _la == LcypherParser::T__13) {
      setState(1031);
      _la = _input->LA(1);
      if (!(_la == LcypherParser::T__12

      || _la == LcypherParser::T__13)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1033);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1032);
        match(LcypherParser::SP);
      }
      setState(1039);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1040);
    oC_StringListNullOperatorExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<LcypherParser::OC_StringOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_StringOperatorExpressionContext>();
}

LcypherParser::OC_StringOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_StringOperatorExpressionContext>(i);
}

std::vector<LcypherParser::OC_ListOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_ListOperatorExpressionContext>();
}

LcypherParser::OC_ListOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_ListOperatorExpressionContext>(i);
}

std::vector<LcypherParser::OC_NullOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_NullOperatorExpressionContext>();
}

LcypherParser::OC_NullOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_NullOperatorExpressionContext>(i);
}


size_t LcypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StringListNullOperatorExpression;
}


std::any LcypherParser::OC_StringListNullOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringListNullOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StringListNullOperatorExpressionContext* LcypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 120, LcypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1042);
    oC_PropertyOrLabelsExpression();
    setState(1048);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1046);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
        case 1: {
          setState(1043);
          oC_StringOperatorExpression();
          break;
        }

        case 2: {
          setState(1044);
          oC_ListOperatorExpression();
          break;
        }

        case 3: {
          setState(1045);
          oC_NullOperatorExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1050);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListOperatorExpression;
}


std::any LcypherParser::OC_ListOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListOperatorExpressionContext* LcypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 122, LcypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1076);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1051);
      match(LcypherParser::SP);
      setState(1052);
      match(LcypherParser::IN);
      setState(1054);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1053);
        match(LcypherParser::SP);
      }
      setState(1056);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1058);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1057);
        match(LcypherParser::SP);
      }
      setState(1060);
      match(LcypherParser::T__7);
      setState(1061);
      oC_Expression();
      setState(1062);
      match(LcypherParser::T__8);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1065);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1064);
        match(LcypherParser::SP);
      }
      setState(1067);
      match(LcypherParser::T__7);
      setState(1069);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 562950037332288) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 563083161436033) != 0)) {
        setState(1068);
        oC_Expression();
      }
      setState(1071);
      match(LcypherParser::T__11);
      setState(1073);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 562950037332288) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 563083161436033) != 0)) {
        setState(1072);
        oC_Expression();
      }
      setState(1075);
      match(LcypherParser::T__8);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(LcypherParser::STARTS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(LcypherParser::ENDS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(LcypherParser::CONTAINS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::REGEXP() {
  return getToken(LcypherParser::REGEXP, 0);
}


size_t LcypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StringOperatorExpression;
}


std::any LcypherParser::OC_StringOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StringOperatorExpressionContext* LcypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 124, LcypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1090);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      setState(1078);
      match(LcypherParser::SP);
      setState(1079);
      match(LcypherParser::STARTS);
      setState(1080);
      match(LcypherParser::SP);
      setState(1081);
      match(LcypherParser::WITH);
      break;
    }

    case 2: {
      setState(1082);
      match(LcypherParser::SP);
      setState(1083);
      match(LcypherParser::ENDS);
      setState(1084);
      match(LcypherParser::SP);
      setState(1085);
      match(LcypherParser::WITH);
      break;
    }

    case 3: {
      setState(1086);
      match(LcypherParser::SP);
      setState(1087);
      match(LcypherParser::CONTAINS);
      break;
    }

    case 4: {
      setState(1088);
      match(LcypherParser::SP);
      setState(1089);
      match(LcypherParser::REGEXP);
      break;
    }

    default:
      break;
    }
    setState(1093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1092);
      match(LcypherParser::SP);
    }
    setState(1095);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(LcypherParser::IS, 0);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(LcypherParser::NOT, 0);
}


size_t LcypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NullOperatorExpression;
}


std::any LcypherParser::OC_NullOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NullOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NullOperatorExpressionContext* LcypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 126, LcypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1107);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1097);
      match(LcypherParser::SP);
      setState(1098);
      match(LcypherParser::IS);
      setState(1099);
      match(LcypherParser::SP);
      setState(1100);
      match(LcypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1101);
      match(LcypherParser::SP);
      setState(1102);
      match(LcypherParser::IS);
      setState(1103);
      match(LcypherParser::SP);
      setState(1104);
      match(LcypherParser::NOT);
      setState(1105);
      match(LcypherParser::SP);
      setState(1106);
      match(LcypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AtomContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<LcypherParser::OC_AtomContext>(0);
}

std::vector<LcypherParser::OC_PropertyLookupContext *> LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<LcypherParser::OC_PropertyLookupContext>();
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyLookupContext>(i);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyOrLabelsExpression;
}


std::any LcypherParser::OC_PropertyOrLabelsExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyOrLabelsExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 128, LcypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1109);
    oC_Atom();
    setState(1116);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1111);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1110);
          match(LcypherParser::SP);
        }
        setState(1113);
        oC_PropertyLookup(); 
      }
      setState(1118);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
    }
    setState(1123);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(1120);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1119);
        match(LcypherParser::SP);
      }
      setState(1122);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

LcypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LiteralContext* LcypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<LcypherParser::OC_LiteralContext>(0);
}

LcypherParser::OC_ParameterContext* LcypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<LcypherParser::OC_ParameterContext>(0);
}

LcypherParser::OC_CaseExpressionContext* LcypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<LcypherParser::OC_CaseExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::COUNT() {
  return getToken(LcypherParser::COUNT, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AtomContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ListComprehensionContext* LcypherParser::OC_AtomContext::oC_ListComprehension() {
  return getRuleContext<LcypherParser::OC_ListComprehensionContext>(0);
}

LcypherParser::OC_PatternComprehensionContext* LcypherParser::OC_AtomContext::oC_PatternComprehension() {
  return getRuleContext<LcypherParser::OC_PatternComprehensionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::OC_AtomContext::oC_FilterExpression() {
  return getRuleContext<LcypherParser::OC_FilterExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::ANY() {
  return getToken(LcypherParser::ANY, 0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::NONE() {
  return getToken(LcypherParser::NONE, 0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::SINGLE() {
  return getToken(LcypherParser::SINGLE, 0);
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::OC_AtomContext::oC_RelationshipsPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipsPatternContext>(0);
}

LcypherParser::OC_ParenthesizedExpressionContext* LcypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<LcypherParser::OC_ParenthesizedExpressionContext>(0);
}

LcypherParser::OC_FunctionInvocationContext* LcypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<LcypherParser::OC_FunctionInvocationContext>(0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_AtomContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Atom;
}


std::any LcypherParser::OC_AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Atom(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AtomContext* LcypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 130, LcypherParser::RuleOC_Atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1203);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1125);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1126);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1127);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1128);
      match(LcypherParser::COUNT);
      setState(1130);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1129);
        match(LcypherParser::SP);
      }
      setState(1132);
      match(LcypherParser::T__5);
      setState(1134);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1133);
        match(LcypherParser::SP);
      }
      setState(1136);
      match(LcypherParser::T__4);
      setState(1138);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1137);
        match(LcypherParser::SP);
      }
      setState(1140);
      match(LcypherParser::T__6);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1141);
      oC_ListComprehension();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1142);
      oC_PatternComprehension();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1143);
      match(LcypherParser::ALL);
      setState(1145);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1144);
        match(LcypherParser::SP);
      }
      setState(1147);
      match(LcypherParser::T__5);
      setState(1149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1148);
        match(LcypherParser::SP);
      }
      setState(1151);
      oC_FilterExpression();
      setState(1153);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1152);
        match(LcypherParser::SP);
      }
      setState(1155);
      match(LcypherParser::T__6);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1157);
      match(LcypherParser::ANY);
      setState(1159);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1158);
        match(LcypherParser::SP);
      }
      setState(1161);
      match(LcypherParser::T__5);
      setState(1163);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1162);
        match(LcypherParser::SP);
      }
      setState(1165);
      oC_FilterExpression();
      setState(1167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1166);
        match(LcypherParser::SP);
      }
      setState(1169);
      match(LcypherParser::T__6);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1171);
      match(LcypherParser::NONE);
      setState(1173);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1172);
        match(LcypherParser::SP);
      }
      setState(1175);
      match(LcypherParser::T__5);
      setState(1177);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1176);
        match(LcypherParser::SP);
      }
      setState(1179);
      oC_FilterExpression();
      setState(1181);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1180);
        match(LcypherParser::SP);
      }
      setState(1183);
      match(LcypherParser::T__6);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1185);
      match(LcypherParser::SINGLE);
      setState(1187);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1186);
        match(LcypherParser::SP);
      }
      setState(1189);
      match(LcypherParser::T__5);
      setState(1191);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1190);
        match(LcypherParser::SP);
      }
      setState(1193);
      oC_FilterExpression();
      setState(1195);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1194);
        match(LcypherParser::SP);
      }
      setState(1197);
      match(LcypherParser::T__6);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1199);
      oC_RelationshipsPattern();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1200);
      oC_ParenthesizedExpression();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1201);
      oC_FunctionInvocation();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1202);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

LcypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NumberLiteralContext* LcypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<LcypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* LcypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(LcypherParser::StringLiteral, 0);
}

LcypherParser::OC_BooleanLiteralContext* LcypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<LcypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* LcypherParser::OC_LiteralContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

LcypherParser::OC_MapLiteralContext* LcypherParser::OC_LiteralContext::oC_MapLiteral() {
  return getRuleContext<LcypherParser::OC_MapLiteralContext>(0);
}

LcypherParser::OC_ListLiteralContext* LcypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<LcypherParser::OC_ListLiteralContext>(0);
}


size_t LcypherParser::OC_LiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Literal;
}


std::any LcypherParser::OC_LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Literal(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LiteralContext* LcypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 132, LcypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1211);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger:
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1205);
        oC_NumberLiteral();
        break;
      }

      case LcypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1206);
        match(LcypherParser::StringLiteral);
        break;
      }

      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_: {
        enterOuterAlt(_localctx, 3);
        setState(1207);
        oC_BooleanLiteral();
        break;
      }

      case LcypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1208);
        match(LcypherParser::NULL_);
        break;
      }

      case LcypherParser::T__23: {
        enterOuterAlt(_localctx, 5);
        setState(1209);
        oC_MapLiteral();
        break;
      }

      case LcypherParser::T__7: {
        enterOuterAlt(_localctx, 6);
        setState(1210);
        oC_ListLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

LcypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_BooleanLiteralContext::TRUE_() {
  return getToken(LcypherParser::TRUE_, 0);
}

tree::TerminalNode* LcypherParser::OC_BooleanLiteralContext::FALSE_() {
  return getToken(LcypherParser::FALSE_, 0);
}


size_t LcypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_BooleanLiteral;
}


std::any LcypherParser::OC_BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_BooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_BooleanLiteralContext* LcypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 134, LcypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1213);
    _la = _input->LA(1);
    if (!(_la == LcypherParser::TRUE_

    || _la == LcypherParser::FALSE_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

LcypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListLiteral;
}


std::any LcypherParser::OC_ListLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListLiteralContext* LcypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 136, LcypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1215);
    match(LcypherParser::T__7);
    setState(1217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1216);
      match(LcypherParser::SP);
    }
    setState(1236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 562950037332288) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 563083161436033) != 0)) {
      setState(1219);
      oC_Expression();
      setState(1221);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1220);
        match(LcypherParser::SP);
      }
      setState(1233);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1223);
        match(LcypherParser::T__1);
        setState(1225);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1224);
          match(LcypherParser::SP);
        }
        setState(1227);
        oC_Expression();
        setState(1229);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1228);
          match(LcypherParser::SP);
        }
        setState(1235);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1238);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PartialComparisonExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PartialComparisonExpressionContext::OC_PartialComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::OC_PartialComparisonExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<LcypherParser::OC_AddOrSubtractExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PartialComparisonExpressionContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PartialComparisonExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PartialComparisonExpression;
}


std::any LcypherParser::OC_PartialComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PartialComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PartialComparisonExpressionContext* LcypherParser::oC_PartialComparisonExpression() {
  OC_PartialComparisonExpressionContext *_localctx = _tracker.createInstance<OC_PartialComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 138, LcypherParser::RuleOC_PartialComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1270);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__2: {
        enterOuterAlt(_localctx, 1);
        setState(1240);
        match(LcypherParser::T__2);
        setState(1242);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1241);
          match(LcypherParser::SP);
        }
        setState(1244);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__17: {
        enterOuterAlt(_localctx, 2);
        setState(1245);
        match(LcypherParser::T__17);
        setState(1247);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1246);
          match(LcypherParser::SP);
        }
        setState(1249);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__18: {
        enterOuterAlt(_localctx, 3);
        setState(1250);
        match(LcypherParser::T__18);
        setState(1252);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1251);
          match(LcypherParser::SP);
        }
        setState(1254);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__19: {
        enterOuterAlt(_localctx, 4);
        setState(1255);
        match(LcypherParser::T__19);
        setState(1257);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1256);
          match(LcypherParser::SP);
        }
        setState(1259);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__20: {
        enterOuterAlt(_localctx, 5);
        setState(1260);
        match(LcypherParser::T__20);
        setState(1262);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1261);
          match(LcypherParser::SP);
        }
        setState(1264);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__21: {
        enterOuterAlt(_localctx, 6);
        setState(1265);
        match(LcypherParser::T__21);
        setState(1267);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1266);
          match(LcypherParser::SP);
        }
        setState(1269);
        oC_AddOrSubtractExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ParenthesizedExpression;
}


std::any LcypherParser::OC_ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ParenthesizedExpressionContext* LcypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 140, LcypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1272);
    match(LcypherParser::T__5);
    setState(1274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1273);
      match(LcypherParser::SP);
    }
    setState(1276);
    oC_Expression();
    setState(1278);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1277);
      match(LcypherParser::SP);
    }
    setState(1280);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipsPatternContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipsPatternContext::OC_RelationshipsPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_RelationshipsPatternContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

std::vector<LcypherParser::OC_PatternElementChainContext *> LcypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain() {
  return getRuleContexts<LcypherParser::OC_PatternElementChainContext>();
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipsPatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipsPatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RelationshipsPatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipsPattern;
}


std::any LcypherParser::OC_RelationshipsPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipsPattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::oC_RelationshipsPattern() {
  OC_RelationshipsPatternContext *_localctx = _tracker.createInstance<OC_RelationshipsPatternContext>(_ctx, getState());
  enterRule(_localctx, 142, LcypherParser::RuleOC_RelationshipsPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1282);
    oC_NodePattern();
    setState(1287); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1284);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(1283);
                match(LcypherParser::SP);
              }
              setState(1286);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1289); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

LcypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_IdInCollContext* LcypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<LcypherParser::OC_IdInCollContext>(0);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* LcypherParser::OC_FilterExpressionContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FilterExpression;
}


std::any LcypherParser::OC_FilterExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FilterExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 144, LcypherParser::RuleOC_FilterExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1291);
    oC_IdInColl();
    setState(1296);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      setState(1293);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1292);
        match(LcypherParser::SP);
      }
      setState(1295);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

LcypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_IdInCollContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_IdInCollContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_IdInCollContext::getRuleIndex() const {
  return LcypherParser::RuleOC_IdInColl;
}


std::any LcypherParser::OC_IdInCollContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_IdInColl(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_IdInCollContext* LcypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 146, LcypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1298);
    oC_Variable();
    setState(1299);
    match(LcypherParser::SP);
    setState(1300);
    match(LcypherParser::IN);
    setState(1301);
    match(LcypherParser::SP);
    setState(1302);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

LcypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_FunctionNameContext* LcypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<LcypherParser::OC_FunctionNameContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_FunctionInvocationContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_FunctionInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FunctionInvocation;
}


std::any LcypherParser::OC_FunctionInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FunctionInvocationContext* LcypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 148, LcypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1304);
    oC_FunctionName();
    setState(1306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1305);
      match(LcypherParser::SP);
    }
    setState(1308);
    match(LcypherParser::T__5);
    setState(1310);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1309);
      match(LcypherParser::SP);
    }
    setState(1316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::DISTINCT) {
      setState(1312);
      match(LcypherParser::DISTINCT);
      setState(1314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1313);
        match(LcypherParser::SP);
      }
    }
    setState(1335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 562950037332288) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 563083161436033) != 0)) {
      setState(1318);
      oC_Expression();
      setState(1320);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1319);
        match(LcypherParser::SP);
      }
      setState(1332);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1322);
        match(LcypherParser::T__1);
        setState(1324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1323);
          match(LcypherParser::SP);
        }
        setState(1326);
        oC_Expression();
        setState(1328);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1327);
          match(LcypherParser::SP);
        }
        setState(1334);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1337);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

LcypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NamespaceContext* LcypherParser::OC_FunctionNameContext::oC_Namespace() {
  return getRuleContext<LcypherParser::OC_NamespaceContext>(0);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_FunctionNameContext::EXISTS() {
  return getToken(LcypherParser::EXISTS, 0);
}


size_t LcypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FunctionName;
}


std::any LcypherParser::OC_FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FunctionNameContext* LcypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 150, LcypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1343);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1339);
        oC_Namespace();
        setState(1340);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(1342);
        match(LcypherParser::EXISTS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplicitProcedureInvocationContext ------------------------------------------------------------------

LcypherParser::OC_ExplicitProcedureInvocationContext::OC_ExplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::OC_ExplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<LcypherParser::OC_ProcedureNameContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ExplicitProcedureInvocationContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ExplicitProcedureInvocationContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ExplicitProcedureInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ExplicitProcedureInvocation;
}


std::any LcypherParser::OC_ExplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ExplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::oC_ExplicitProcedureInvocation() {
  OC_ExplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ExplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 152, LcypherParser::RuleOC_ExplicitProcedureInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1345);
    oC_ProcedureName();
    setState(1347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1346);
      match(LcypherParser::SP);
    }
    setState(1349);
    match(LcypherParser::T__5);
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1350);
      match(LcypherParser::SP);
    }
    setState(1370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 562950037332288) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 563083161436033) != 0)) {
      setState(1353);
      oC_Expression();
      setState(1355);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1354);
        match(LcypherParser::SP);
      }
      setState(1367);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1357);
        match(LcypherParser::T__1);
        setState(1359);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1358);
          match(LcypherParser::SP);
        }
        setState(1361);
        oC_Expression();
        setState(1363);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1362);
          match(LcypherParser::SP);
        }
        setState(1369);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1372);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ImplicitProcedureInvocationContext ------------------------------------------------------------------

LcypherParser::OC_ImplicitProcedureInvocationContext::OC_ImplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::OC_ImplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<LcypherParser::OC_ProcedureNameContext>(0);
}


size_t LcypherParser::OC_ImplicitProcedureInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ImplicitProcedureInvocation;
}


std::any LcypherParser::OC_ImplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ImplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ImplicitProcedureInvocationContext* LcypherParser::oC_ImplicitProcedureInvocation() {
  OC_ImplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ImplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 154, LcypherParser::RuleOC_ImplicitProcedureInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1374);
    oC_ProcedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureResultFieldContext ------------------------------------------------------------------

LcypherParser::OC_ProcedureResultFieldContext::OC_ProcedureResultFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ProcedureResultFieldContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_ProcedureResultFieldContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ProcedureResultField;
}


std::any LcypherParser::OC_ProcedureResultFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureResultField(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ProcedureResultFieldContext* LcypherParser::oC_ProcedureResultField() {
  OC_ProcedureResultFieldContext *_localctx = _tracker.createInstance<OC_ProcedureResultFieldContext>(_ctx, getState());
  enterRule(_localctx, 156, LcypherParser::RuleOC_ProcedureResultField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1376);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureNameContext ------------------------------------------------------------------

LcypherParser::OC_ProcedureNameContext::OC_ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NamespaceContext* LcypherParser::OC_ProcedureNameContext::oC_Namespace() {
  return getRuleContext<LcypherParser::OC_NamespaceContext>(0);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ProcedureNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_ProcedureNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ProcedureName;
}


std::any LcypherParser::OC_ProcedureNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::oC_ProcedureName() {
  OC_ProcedureNameContext *_localctx = _tracker.createInstance<OC_ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 158, LcypherParser::RuleOC_ProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1378);
    oC_Namespace();
    setState(1379);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NamespaceContext ------------------------------------------------------------------

LcypherParser::OC_NamespaceContext::OC_NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_SymbolicNameContext *> LcypherParser::OC_NamespaceContext::oC_SymbolicName() {
  return getRuleContexts<LcypherParser::OC_SymbolicNameContext>();
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_NamespaceContext::oC_SymbolicName(size_t i) {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(i);
}


size_t LcypherParser::OC_NamespaceContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Namespace;
}


std::any LcypherParser::OC_NamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Namespace(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NamespaceContext* LcypherParser::oC_Namespace() {
  OC_NamespaceContext *_localctx = _tracker.createInstance<OC_NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 160, LcypherParser::RuleOC_Namespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1386);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1381);
        oC_SymbolicName();
        setState(1382);
        match(LcypherParser::T__22); 
      }
      setState(1388);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListComprehensionContext ------------------------------------------------------------------

LcypherParser::OC_ListComprehensionContext::OC_ListComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::OC_ListComprehensionContext::oC_FilterExpression() {
  return getRuleContext<LcypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListComprehensionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListComprehensionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListComprehensionContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_ListComprehensionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListComprehension;
}


std::any LcypherParser::OC_ListComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListComprehension(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListComprehensionContext* LcypherParser::oC_ListComprehension() {
  OC_ListComprehensionContext *_localctx = _tracker.createInstance<OC_ListComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 162, LcypherParser::RuleOC_ListComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1389);
    match(LcypherParser::T__7);
    setState(1391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1390);
      match(LcypherParser::SP);
    }
    setState(1393);
    oC_FilterExpression();
    setState(1402);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
    case 1: {
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1394);
        match(LcypherParser::SP);
      }
      setState(1397);
      match(LcypherParser::T__10);
      setState(1399);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1398);
        match(LcypherParser::SP);
      }
      setState(1401);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1405);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1404);
      match(LcypherParser::SP);
    }
    setState(1407);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternComprehensionContext ------------------------------------------------------------------

LcypherParser::OC_PatternComprehensionContext::OC_PatternComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::OC_PatternComprehensionContext::oC_RelationshipsPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipsPatternContext>(0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_PatternComprehensionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_PatternComprehensionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternComprehensionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternComprehensionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_PatternComprehensionContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PatternComprehensionContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}


size_t LcypherParser::OC_PatternComprehensionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternComprehension;
}


std::any LcypherParser::OC_PatternComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternComprehension(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternComprehensionContext* LcypherParser::oC_PatternComprehension() {
  OC_PatternComprehensionContext *_localctx = _tracker.createInstance<OC_PatternComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 164, LcypherParser::RuleOC_PatternComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1409);
    match(LcypherParser::T__7);
    setState(1411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1410);
      match(LcypherParser::SP);
    }
    setState(1421);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 2199493148687) != 0)) {
      setState(1413);
      oC_Variable();
      setState(1415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1414);
        match(LcypherParser::SP);
      }
      setState(1417);
      match(LcypherParser::T__2);
      setState(1419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1418);
        match(LcypherParser::SP);
      }
    }
    setState(1423);
    oC_RelationshipsPattern();
    setState(1425);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1424);
      match(LcypherParser::SP);
    }
    setState(1435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::WHERE) {
      setState(1427);
      match(LcypherParser::WHERE);
      setState(1429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1428);
        match(LcypherParser::SP);
      }
      setState(1431);
      oC_Expression();
      setState(1433);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1432);
        match(LcypherParser::SP);
      }
    }
    setState(1437);
    match(LcypherParser::T__10);
    setState(1439);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1438);
      match(LcypherParser::SP);
    }
    setState(1441);
    oC_Expression();
    setState(1443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1442);
      match(LcypherParser::SP);
    }
    setState(1445);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

LcypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<LcypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PropertyLookupContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyLookup;
}


std::any LcypherParser::OC_PropertyLookupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyLookup(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 166, LcypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1447);
    match(LcypherParser::T__22);
    setState(1449);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1448);
      match(LcypherParser::SP);
    }

    setState(1451);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

LcypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::END() {
  return getToken(LcypherParser::END, 0);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(LcypherParser::ELSE, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(LcypherParser::CASE, 0);
}

std::vector<LcypherParser::OC_CaseAlternativesContext *> LcypherParser::OC_CaseExpressionContext::oC_CaseAlternatives() {
  return getRuleContexts<LcypherParser::OC_CaseAlternativesContext>();
}

LcypherParser::OC_CaseAlternativesContext* LcypherParser::OC_CaseExpressionContext::oC_CaseAlternatives(size_t i) {
  return getRuleContext<LcypherParser::OC_CaseAlternativesContext>(i);
}


size_t LcypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_CaseExpression;
}


std::any LcypherParser::OC_CaseExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CaseExpressionContext* LcypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 168, LcypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1475);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(1453);
      match(LcypherParser::CASE);
      setState(1458); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1455);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(1454);
                  match(LcypherParser::SP);
                }
                setState(1457);
                oC_CaseAlternatives();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1460); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(1462);
      match(LcypherParser::CASE);
      setState(1464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1463);
        match(LcypherParser::SP);
      }
      setState(1466);
      oC_Expression();
      setState(1471); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1468);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(1467);
                  match(LcypherParser::SP);
                }
                setState(1470);
                oC_CaseAlternatives();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1473); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(1485);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
    case 1: {
      setState(1478);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1477);
        match(LcypherParser::SP);
      }
      setState(1480);
      match(LcypherParser::ELSE);
      setState(1482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1481);
        match(LcypherParser::SP);
      }
      setState(1484);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1487);
      match(LcypherParser::SP);
    }
    setState(1490);
    match(LcypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativesContext ------------------------------------------------------------------

LcypherParser::OC_CaseAlternativesContext::OC_CaseAlternativesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::WHEN() {
  return getToken(LcypherParser::WHEN, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_CaseAlternativesContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_CaseAlternativesContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::THEN() {
  return getToken(LcypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CaseAlternativesContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_CaseAlternativesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_CaseAlternatives;
}


std::any LcypherParser::OC_CaseAlternativesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseAlternatives(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CaseAlternativesContext* LcypherParser::oC_CaseAlternatives() {
  OC_CaseAlternativesContext *_localctx = _tracker.createInstance<OC_CaseAlternativesContext>(_ctx, getState());
  enterRule(_localctx, 170, LcypherParser::RuleOC_CaseAlternatives);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1492);
    match(LcypherParser::WHEN);
    setState(1494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1493);
      match(LcypherParser::SP);
    }
    setState(1496);
    oC_Expression();
    setState(1498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1497);
      match(LcypherParser::SP);
    }
    setState(1500);
    match(LcypherParser::THEN);
    setState(1502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1501);
      match(LcypherParser::SP);
    }
    setState(1504);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

LcypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_VariableContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Variable;
}


std::any LcypherParser::OC_VariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Variable(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_VariableContext* LcypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 172, LcypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1506);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

LcypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_DoubleLiteralContext* LcypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<LcypherParser::OC_DoubleLiteralContext>(0);
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<LcypherParser::OC_IntegerLiteralContext>(0);
}


size_t LcypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NumberLiteral;
}


std::any LcypherParser::OC_NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NumberLiteralContext* LcypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 174, LcypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1510);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1508);
        oC_DoubleLiteral();
        break;
      }

      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(1509);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MapLiteralContext ------------------------------------------------------------------

LcypherParser::OC_MapLiteralContext::OC_MapLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MapLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MapLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_PropertyKeyNameContext *> LcypherParser::OC_MapLiteralContext::oC_PropertyKeyName() {
  return getRuleContexts<LcypherParser::OC_PropertyKeyNameContext>();
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::OC_MapLiteralContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_MapLiteralContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_MapLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_MapLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MapLiteral;
}


std::any LcypherParser::OC_MapLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MapLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MapLiteralContext* LcypherParser::oC_MapLiteral() {
  OC_MapLiteralContext *_localctx = _tracker.createInstance<OC_MapLiteralContext>(_ctx, getState());
  enterRule(_localctx, 176, LcypherParser::RuleOC_MapLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1512);
    match(LcypherParser::T__23);
    setState(1514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1513);
      match(LcypherParser::SP);
    }
    setState(1549);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 297237300058759167) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 40959) != 0)) {
      setState(1516);
      oC_PropertyKeyName();
      setState(1518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1517);
        match(LcypherParser::SP);
      }
      setState(1520);
      match(LcypherParser::T__9);
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1521);
        match(LcypherParser::SP);
      }
      setState(1524);
      oC_Expression();
      setState(1526);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1525);
        match(LcypherParser::SP);
      }
      setState(1546);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1528);
        match(LcypherParser::T__1);
        setState(1530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1529);
          match(LcypherParser::SP);
        }
        setState(1532);
        oC_PropertyKeyName();
        setState(1534);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1533);
          match(LcypherParser::SP);
        }
        setState(1536);
        match(LcypherParser::T__9);
        setState(1538);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1537);
          match(LcypherParser::SP);
        }
        setState(1540);
        oC_Expression();
        setState(1542);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1541);
          match(LcypherParser::SP);
        }
        setState(1548);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1551);
    match(LcypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

LcypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(LcypherParser::DecimalInteger, 0);
}


size_t LcypherParser::OC_ParameterContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Parameter;
}


std::any LcypherParser::OC_ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Parameter(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ParameterContext* LcypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 178, LcypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1553);
    match(LcypherParser::T__25);
    setState(1556);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        setState(1554);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::DecimalInteger: {
        setState(1555);
        match(LcypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AtomContext* LcypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<LcypherParser::OC_AtomContext>(0);
}

std::vector<LcypherParser::OC_PropertyLookupContext *> LcypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<LcypherParser::OC_PropertyLookupContext>();
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::OC_PropertyExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PropertyExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PropertyExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyExpression;
}


std::any LcypherParser::OC_PropertyExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 180, LcypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1558);
    oC_Atom();
    setState(1563); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1560);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(1559);
                match(LcypherParser::SP);
              }
              setState(1562);
              oC_PropertyLookup();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1565); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

LcypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyKeyName;
}


std::any LcypherParser::OC_PropertyKeyNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyKeyName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 182, LcypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

LcypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::HexInteger() {
  return getToken(LcypherParser::HexInteger, 0);
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::OctalInteger() {
  return getToken(LcypherParser::OctalInteger, 0);
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(LcypherParser::DecimalInteger, 0);
}


size_t LcypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_IntegerLiteral;
}


std::any LcypherParser::OC_IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_IntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 184, LcypherParser::RuleOC_IntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1569);
    _la = _input->LA(1);
    if (!(((((_la - 103) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 103)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

LcypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_DoubleLiteralContext::ExponentDecimalReal() {
  return getToken(LcypherParser::ExponentDecimalReal, 0);
}

tree::TerminalNode* LcypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(LcypherParser::RegularDecimalReal, 0);
}


size_t LcypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_DoubleLiteral;
}


std::any LcypherParser::OC_DoubleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_DoubleLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DoubleLiteralContext* LcypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 186, LcypherParser::RuleOC_DoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    _la = _input->LA(1);
    if (!(_la == LcypherParser::ExponentDecimalReal

    || _la == LcypherParser::RegularDecimalReal)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

LcypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

LcypherParser::OC_ReservedWordContext* LcypherParser::OC_SchemaNameContext::oC_ReservedWord() {
  return getRuleContext<LcypherParser::OC_ReservedWordContext>(0);
}


size_t LcypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SchemaName;
}


std::any LcypherParser::OC_SchemaNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SchemaName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SchemaNameContext* LcypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 188, LcypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1575);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1573);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::UNION:
      case LcypherParser::ALL:
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH:
      case LcypherParser::UNWIND:
      case LcypherParser::AS:
      case LcypherParser::MERGE:
      case LcypherParser::ON:
      case LcypherParser::CREATE:
      case LcypherParser::SET:
      case LcypherParser::DETACH:
      case LcypherParser::DELETE_:
      case LcypherParser::REMOVE:
      case LcypherParser::WITH:
      case LcypherParser::DISTINCT:
      case LcypherParser::RETURN:
      case LcypherParser::ORDER:
      case LcypherParser::BY:
      case LcypherParser::L_SKIP:
      case LcypherParser::LIMIT:
      case LcypherParser::ASCENDING:
      case LcypherParser::ASC:
      case LcypherParser::DESCENDING:
      case LcypherParser::DESC:
      case LcypherParser::WHERE:
      case LcypherParser::OR:
      case LcypherParser::XOR:
      case LcypherParser::AND:
      case LcypherParser::NOT:
      case LcypherParser::IN:
      case LcypherParser::STARTS:
      case LcypherParser::ENDS:
      case LcypherParser::CONTAINS:
      case LcypherParser::IS:
      case LcypherParser::NULL_:
      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_:
      case LcypherParser::EXISTS:
      case LcypherParser::CASE:
      case LcypherParser::ELSE:
      case LcypherParser::END:
      case LcypherParser::WHEN:
      case LcypherParser::THEN:
      case LcypherParser::CONSTRAINT:
      case LcypherParser::DO:
      case LcypherParser::FOR:
      case LcypherParser::REQUIRE:
      case LcypherParser::UNIQUE:
      case LcypherParser::MANDATORY:
      case LcypherParser::SCALAR:
      case LcypherParser::OF:
      case LcypherParser::ADD:
      case LcypherParser::DROP: {
        enterOuterAlt(_localctx, 2);
        setState(1574);
        oC_ReservedWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

LcypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(LcypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(LcypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(LcypherParser::HexLetter, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::COUNT() {
  return getToken(LcypherParser::COUNT, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::FILTER() {
  return getToken(LcypherParser::FILTER, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::EXTRACT() {
  return getToken(LcypherParser::EXTRACT, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::ANY() {
  return getToken(LcypherParser::ANY, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::NONE() {
  return getToken(LcypherParser::NONE, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::SINGLE() {
  return getToken(LcypherParser::SINGLE, 0);
}


size_t LcypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SymbolicName;
}


std::any LcypherParser::OC_SymbolicNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SymbolicName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 190, LcypherParser::RuleOC_SymbolicName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    _la = _input->LA(1);
    if (!(((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 2199493148687) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReservedWordContext ------------------------------------------------------------------

LcypherParser::OC_ReservedWordContext::OC_ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ASC() {
  return getToken(LcypherParser::ASC, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ASCENDING() {
  return getToken(LcypherParser::ASCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::BY() {
  return getToken(LcypherParser::BY, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DELETE_() {
  return getToken(LcypherParser::DELETE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DESC() {
  return getToken(LcypherParser::DESC, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DESCENDING() {
  return getToken(LcypherParser::DESCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DETACH() {
  return getToken(LcypherParser::DETACH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::EXISTS() {
  return getToken(LcypherParser::EXISTS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::LIMIT() {
  return getToken(LcypherParser::LIMIT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MERGE() {
  return getToken(LcypherParser::MERGE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OPTIONAL_() {
  return getToken(LcypherParser::OPTIONAL_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ORDER() {
  return getToken(LcypherParser::ORDER, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::REMOVE() {
  return getToken(LcypherParser::REMOVE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::RETURN() {
  return getToken(LcypherParser::RETURN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::SET() {
  return getToken(LcypherParser::SET, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::L_SKIP() {
  return getToken(LcypherParser::L_SKIP, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNION() {
  return getToken(LcypherParser::UNION, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNWIND() {
  return getToken(LcypherParser::UNWIND, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::AND() {
  return getToken(LcypherParser::AND, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CONTAINS() {
  return getToken(LcypherParser::CONTAINS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ENDS() {
  return getToken(LcypherParser::ENDS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::IS() {
  return getToken(LcypherParser::IS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::NOT() {
  return getToken(LcypherParser::NOT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OR() {
  return getToken(LcypherParser::OR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::STARTS() {
  return getToken(LcypherParser::STARTS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::XOR() {
  return getToken(LcypherParser::XOR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::FALSE_() {
  return getToken(LcypherParser::FALSE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::TRUE_() {
  return getToken(LcypherParser::TRUE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CONSTRAINT() {
  return getToken(LcypherParser::CONSTRAINT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DO() {
  return getToken(LcypherParser::DO, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::FOR() {
  return getToken(LcypherParser::FOR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::REQUIRE() {
  return getToken(LcypherParser::REQUIRE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNIQUE() {
  return getToken(LcypherParser::UNIQUE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CASE() {
  return getToken(LcypherParser::CASE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WHEN() {
  return getToken(LcypherParser::WHEN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::THEN() {
  return getToken(LcypherParser::THEN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ELSE() {
  return getToken(LcypherParser::ELSE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::END() {
  return getToken(LcypherParser::END, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MANDATORY() {
  return getToken(LcypherParser::MANDATORY, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::SCALAR() {
  return getToken(LcypherParser::SCALAR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OF() {
  return getToken(LcypherParser::OF, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ADD() {
  return getToken(LcypherParser::ADD, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DROP() {
  return getToken(LcypherParser::DROP, 0);
}


size_t LcypherParser::OC_ReservedWordContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReservedWord;
}


std::any LcypherParser::OC_ReservedWordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReservedWord(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReservedWordContext* LcypherParser::oC_ReservedWord() {
  OC_ReservedWordContext *_localctx = _tracker.createInstance<OC_ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 192, LcypherParser::RuleOC_ReservedWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1579);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6917810502617792512) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -18014261578046465) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

LcypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return LcypherParser::RuleOC_LeftArrowHead;
}


std::any LcypherParser::OC_LeftArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_LeftArrowHead(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LeftArrowHeadContext* LcypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 194, LcypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1581);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013790208) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

LcypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RightArrowHead;
}


std::any LcypherParser::OC_RightArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RightArrowHead(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RightArrowHeadContext* LcypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 196, LcypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32213303296) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

LcypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_DashContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Dash;
}


std::any LcypherParser::OC_DashContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Dash(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DashContext* LcypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 198, LcypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384455680) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void LcypherParser::initialize() {
  ::antlr4::internal::call_once(lcypherParserOnceFlag, lcypherParserInitialize);
}
