"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[51106],{18031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(74848),o=t(28453);const i={},a="Bolt High Availability Cluster Mode Practice",l={id:"installation&running/bolt_cluster_practice",title:"Bolt High Availability Cluster Mode Practice",description:"This document primarily explains how to connect to and use a high availability cluster via the Bolt protocol.",source:"@site/versions/version-4.5.2/en-US/source/5.installation&running/10.bolt_cluster_practice.md",sourceDirName:"5.installation&running",slug:"/installation&running/bolt_cluster_practice",permalink:"/tugraph-db/en/4.5.2/installation&running/bolt_cluster_practice",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bolt High Availability Cluster Mode",permalink:"/tugraph-db/en/4.5.2/installation&running/bolt_cluster"},next:{title:"Data Importing",permalink:"/tugraph-db/en/4.5.2/utility-tools/data-import"}},s={},d=[{value:"Create Cluster",id:"create-cluster",level:2},{value:"Preparation Steps",id:"preparation-steps",level:3},{value:"Node Configuration",id:"node-configuration",level:3},{value:"Start the Service",id:"start-the-service",level:3},{value:"View Cluster Member Information",id:"view-cluster-member-information",level:3},{value:"View Node Raft Status Information",id:"view-node-raft-status-information",level:3},{value:"Remove/Add Nodes",id:"removeadd-nodes",level:2},{value:"Remove Node",id:"remove-node",level:3},{value:"Add New Node",id:"add-new-node",level:3},{value:"Add Learner Node",id:"add-learner-node",level:2},{value:"Bolt Client Connection Example",id:"bolt-client-connection-example",level:2},{value:"Python",id:"python",level:3}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"bolt-high-availability-cluster-mode-practice",children:"Bolt High Availability Cluster Mode Practice"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"This document primarily explains how to connect to and use a high availability cluster via the Bolt protocol."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"create-cluster",children:"Create Cluster"}),"\n",(0,r.jsx)(n.p,{children:"The following is an example of creating a cluster with three nodes."}),"\n",(0,r.jsx)(n.h3,{id:"preparation-steps",children:"Preparation Steps"}),"\n",(0,r.jsx)(n.p,{children:"Pull the image on each node and start the Docker container."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Pull the Image"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"docker pull tugraph/tugraph-runtime-centos7:latest\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Start the Docker Container."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"docker run --net=host -itd -v /root/tugraph/data:/var/lib/lgraph/data  -v /root/tugraph/log:/var/log/lgraph_log \\\n--name tugraph_ha ${REPOSITORY}:${VERSION} /bin/bash\n"})}),"\n",(0,r.jsx)(n.h3,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Modify the configuration file on each node. By default, the configuration file is located at /usr/local/etc/lgraph.json inside the container."}),"\n",(0,r.jsx)(n.p,{children:"Node 1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "directory" : "/var/lib/lgraph/data",\n  "host" : "172.20.10.52",\n  "port" : 7070,\n  "bolt_port": 7687,\n  "bolt_raft_port":8000,\n  "bolt_raft_node_id":1,\n  "bolt_raft_init_peers":[\n    {"bolt_raft_node_id":1,"ip":"172.20.10.52","bolt_raft_port":8000,"bolt_port":7687},\n    {"bolt_raft_node_id":2,"ip":"172.20.10.53","bolt_raft_port":8000,"bolt_port":7687},\n    {"bolt_raft_node_id":3,"ip":"172.20.10.54","bolt_raft_port":8000,"bolt_port":7687}\n  ],\n  "verbose" : 1,\n  "log_dir" : "/var/log/lgraph_log",\n  "disable_auth" : false,\n  "ssl_auth" : false,\n  "server_key" : "/usr/local/etc/lgraph/server-key.pem",\n  "server_cert" : "/usr/local/etc/lgraph/server-cert.pem",\n  "web" : "/usr/local/share/lgraph/browser-resource"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Node 2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "directory" : "/var/lib/lgraph/data",\n  "host" : "172.20.10.53",\n  "port" : 7070,\n  "bolt_port": 7687,\n  "bolt_raft_port":8000,\n  "bolt_raft_node_id":2,\n  "bolt_raft_init_peers":[\n    {"bolt_raft_node_id":1,"ip":"172.20.10.52","bolt_raft_port":8000,"bolt_port":7687},\n    {"bolt_raft_node_id":2,"ip":"172.20.10.53","bolt_raft_port":8000,"bolt_port":7687},\n    {"bolt_raft_node_id":3,"ip":"172.20.10.54","bolt_raft_port":8000,"bolt_port":7687}\n  ],\n  "verbose" : 1,\n  "log_dir" : "/var/log/lgraph_log",\n  "disable_auth" : false,\n  "ssl_auth" : false,\n  "server_key" : "/usr/local/etc/lgraph/server-key.pem",\n  "server_cert" : "/usr/local/etc/lgraph/server-cert.pem",\n  "web" : "/usr/local/share/lgraph/browser-resource"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Node 3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "directory" : "/var/lib/lgraph/data",\n  "host" : "172.20.10.54",\n  "port" : 7070,\n  "bolt_port": 7687,\n  "bolt_raft_port":8000,\n  "bolt_raft_node_id":3,\n  "bolt_raft_init_peers":[\n    {"bolt_raft_node_id":1,"ip":"172.20.10.52","bolt_raft_port":8000,"bolt_port":7687},\n    {"bolt_raft_node_id":2,"ip":"172.20.10.53","bolt_raft_port":8000,"bolt_port":7687},\n    {"bolt_raft_node_id":3,"ip":"172.20.10.54","bolt_raft_port":8000,"bolt_port":7687}\n  ],\n  "verbose" : 1,\n  "log_dir" : "/var/log/lgraph_log",\n  "disable_auth" : false,\n  "ssl_auth" : false,\n  "server_key" : "/usr/local/etc/lgraph/server-key.pem",\n  "server_cert" : "/usr/local/etc/lgraph/server-cert.pem",\n  "web" : "/usr/local/share/lgraph/browser-resource"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Configuration Instructions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"port"}),": web port\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bolt_port"}),": External port for Bolt client connections."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bolt_raft_port"}),": For internal cluster use, this is the port used for communication between nodes in the Raft cluster. Bolt clients should not connect to this port."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bolt_raft_node_id"}),": Raft cluster node ID, which must be unique for each node in the entire cluster."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bolt_raft_init_peers"}),": Used during the initial setup of the Raft cluster, it contains each node's bolt_raft_node_id, ip, bolt_raft_port, and bolt_port. This allows every node to know the communication details of the other nodes, enabling them to communicate with each other."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The four core configuration parameters for a Raft cluster are bolt_port, bolt_raft_port, bolt_raft_node_id, and bolt_raft_init_peers."}),"\n",(0,r.jsx)(n.p,{children:"Please note that configuration options used when creating a cluster via the RPC protocol, such as enable_ha and ha_node_join_group_s, should not appear in the configuration file used to create a High Availability (HA) cluster via Bolt."}),"\n",(0,r.jsx)(n.h3,{id:"start-the-service",children:"Start the Service"}),"\n",(0,r.jsx)(n.p,{children:"To start the service in the tugraph_ha container, you need to follow these steps:\n1.Enter the Container:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"docker exec -it tugrapn_ha bash\n"})}),"\n",(0,r.jsx)(n.p,{children:"2.Start the Service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"lgraph_server -c /usr/local/etc/lgraph.json -d start\n"})}),"\n",(0,r.jsx)(n.h3,{id:"view-cluster-member-information",children:"View Cluster Member Information"}),"\n",(0,r.jsx)(n.p,{children:"You can send a request to any node in the cluster to return the member list and leader information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"CALL db.bolt.listRaftNodes()"})}),"\n",(0,r.jsx)(n.h3,{id:"view-node-raft-status-information",children:"View Node Raft Status Information"}),"\n",(0,r.jsx)(n.p,{children:"You can send a request to any node in the cluster to return its own raft status information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"CALL db.bolt.getRaftStatus()"})}),"\n",(0,r.jsx)(n.h2,{id:"removeadd-nodes",children:"Remove/Add Nodes"}),"\n",(0,r.jsx)(n.p,{children:"Below is a simulation of an unexpected service stop for a node (by killing that node's service process), removing the stopped node, and adding a new node."}),"\n",(0,r.jsx)(n.h3,{id:"remove-node",children:"Remove Node"}),"\n",(0,r.jsx)(n.p,{children:"Remove the instance with node ID 3 from the cluster. This can only be executed on the leader node."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"CALL db.bolt.removeRaftNode(3)\n"})}),"\n",(0,r.jsx)(n.p,{children:"After removal, you can check the cluster member information again to see that the instance with ID 3 has been cleared."}),"\n",(0,r.jsx)(n.h3,{id:"add-new-node",children:"Add New Node"}),"\n",(0,r.jsx)(n.p,{children:'Add an instance with node ID 4. For initialization, refer to the "Preparation" section on creating a cluster. At this point, don\'t start the lgraph_server service yet.'}),"\n",(0,r.jsx)(n.p,{children:"Add a new node to the cluster with node ID 4, IP 172.20.10.41, bolt_port 7687, bolt_raft_port 8000. Adding a new node can only be executed on the leader node."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:" CALL db.bolt.addRaftNode(4, '172.20.10.41', 7687, 8000)\n"})}),"\n",(0,r.jsx)(n.p,{children:"It's important to note that after executing addRaftNode to add a new node, you need to manually perform an offline full data synchronization before starting the lgraph_server service on the new node. Once this process is complete and the new node service is started and running, any further incremental data writes will be automatically synchronized. Full data synchronization can be done by replacing the tugraph directory mounted during the execution of the docker run command. The specific steps are as follows:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Stop the new node's container."}),"\n",(0,r.jsx)(n.li,{children:"Replace the tugraph directory from any working service node with the tugraph directory mounted during the docker run command for the new node."}),"\n",(0,r.jsx)(n.li,{children:"Start the new node's container."}),"\n",(0,r.jsx)(n.li,{children:"Enter the container and modify the configuration file. Here is an example configuration:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:' {\n"directory" : "/var/lib/lgraph/data",\n"host" : "172.20.10.41",\n"port" : 7070,\n"bolt_port": 7687,\n"bolt_raft_port":8000,\n"bolt_raft_node_id":4,\n"bolt_raft_init_peers":[\n{"bolt_raft_node_id":1,"ip":"172.20.10.52","bolt_raft_port":8000,"bolt_port":7687},\n{"bolt_raft_node_id":2,"ip":"172.20.10.53","bolt_raft_port":8000,"bolt_port":7687},\n{"bolt_raft_node_id":4,"ip":"172.20.10.41","bolt_raft_port":8000,"bolt_port":7687}\n],\n"verbose" : 1,\n"log_dir" : "/var/log/lgraph_log",\n"disable_auth" : false,\n"ssl_auth" : false,\n"server_key" : "/usr/local/etc/lgraph/server-key.pem",\n"server_cert" : "/usr/local/etc/lgraph/server-cert.pem",\n"web" : "/usr/local/share/lgraph/browser-resource"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"5.Start the service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"lgraph_server -c /usr/local/etc/lgraph.json -d start\n"})}),"\n",(0,r.jsx)(n.h2,{id:"add-learner-node",children:"Add Learner Node"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"CALL db.bolt.addRaftLearnerNode(5, '172.20.10.42', 7687, 8000)\n"})}),"\n",(0,r.jsx)(n.p,{children:'This can only be executed on the leader node. The specific process can refer to the above "Add Node" steps. The learner node does not participate in elections or voting, but only synchronizes data.'}),"\n",(0,r.jsx)(n.h2,{id:"bolt-client-connection-example",children:"Bolt Client Connection Example"}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"from neo4j import GraphDatabase\n\ndef custom_resolver(address):\n    if address == ('mycluster.com', 9999):\n        return [\n            ('172.20.10.52', 7687),\n            ('172.20.10.53', 7687),\n            ('172.20.10.54', 7687)\n        ]\n    else:\n        return [address]\n\n\nif __name__ == '__main__':\n    driver = GraphDatabase.driver(\n        \"neo4j://mycluster.com:9999\",\n        auth=(\"admin\", \"73@TuGraph\"),\n        resolver=custom_resolver\n    )\n    session = driver.session(database=\"default\")\n    session.run(\"CALL db.dropDB()\")\n    session.run(\"CALL db.createVertexLabel('person', 'id' , 'id', 'INT32', false, 'count', 'INT64', false)\")\n    session.run(\"create (n1:person {id:1, count:0})\")\n    session.close()\n    driver.close()\n"})}),"\n",(0,r.jsx)(n.p,{children:"mycluster.com:9999 is a fictitious domain address. The third argument in the GraphDatabase driver initialization is to pass a custom resolver custom_resolver. The logic in custom_resolver is to return three cluster addresses when the domain address is mycluster.com:9999."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);