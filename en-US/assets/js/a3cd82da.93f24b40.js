"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[82609],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var o=t(96540);const r={},i=o.createContext(r);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(i.Provider,{value:n},e.children)}},75271:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var o=t(74848),r=t(28453);const i={},l="Bolt High Availability Cluster Mode",d={id:"installation&running/bolt_cluster",title:"Bolt High Availability Cluster Mode",description:"This document primarily describes configuring a cluster mode that can be connected by a Neo4j Bolt client.",source:"@site/versions/version-4.5.2/en-US/source/5.installation&running/9.bolt_cluster.md",sourceDirName:"5.installation&running",slug:"/installation&running/bolt_cluster",permalink:"/tugraph-db/en-US/en/4.5.2/installation&running/bolt_cluster",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"High Availability mode",permalink:"/tugraph-db/en-US/en/4.5.2/installation&running/high-availability-mode"},next:{title:"Bolt High Availability Cluster Mode Practice",permalink:"/tugraph-db/en-US/en/4.5.2/installation&running/bolt_cluster_practice"}},a={},s=[{value:"Create a 3-node cluster",id:"create-a-3-node-cluster",level:2},{value:"Node 1 Configuration",id:"node-1-configuration",level:3},{value:"Node 2 Configuration",id:"node-2-configuration",level:3},{value:"Node 3 Configuration",id:"node-3-configuration",level:3},{value:"Configuration Instructions",id:"configuration-instructions",level:3},{value:"Cluster operation statements",id:"cluster-operation-statements",level:2},{value:"Check cluster member information",id:"check-cluster-member-information",level:3},{value:"Check the Raft state information of a node",id:"check-the-raft-state-information-of-a-node",level:3},{value:"Add a new node to the cluster",id:"add-a-new-node-to-the-cluster",level:3},{value:"Add a learner node to the cluster",id:"add-a-learner-node-to-the-cluster",level:3},{value:"Remove a member node from the cluster",id:"remove-a-member-node-from-the-cluster",level:3},{value:"Connect the Bolt client to the instance.",id:"connect-the-bolt-client-to-the-instance",level:2},{value:"python",id:"python",level:3}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"bolt-high-availability-cluster-mode",children:"Bolt High Availability Cluster Mode"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"This document primarily describes configuring a cluster mode that can be connected by a Neo4j Bolt client."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"create-a-3-node-cluster",children:"Create a 3-node cluster"}),"\n",(0,o.jsx)(n.h3,{id:"node-1-configuration",children:"Node 1 Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "host": "127.0.0.1",\n  "port": 7070,\n  "bolt_port":7687,\n  "bolt_raft_port":8000,\n  "bolt_raft_node_id":1,\n  "bolt_raft_init_peers":[\n        {"bolt_raft_node_id":1,"ip":"127.0.0.1","bolt_raft_port":8000,"bolt_port":7687}, \n        {"bolt_raft_node_id":2,"ip":"127.0.0.1","bolt_raft_port":8001,"bolt_port":7688}, \n        {"bolt_raft_node_id":3,"ip":"127.0.0.1","bolt_raft_port":8002,"bolt_port":7689}\n  ],\n  "verbose": 1,\n  "log_dir": "log"\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"node-2-configuration",children:"Node 2 Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "host": "127.0.0.1",\n  "port": 7070,\n  "bolt_port":7688,\n  "bolt_raft_port":8001,\n  "bolt_raft_node_id":2,\n  "bolt_raft_init_peers":[\n        {"bolt_raft_node_id":1,"ip":"127.0.0.1","bolt_raft_port":8000,"bolt_port":7687}, \n        {"bolt_raft_node_id":2,"ip":"127.0.0.1","bolt_raft_port":8001,"bolt_port":7688}, \n        {"bolt_raft_node_id":3,"ip":"127.0.0.1","bolt_raft_port":8002,"bolt_port":7689}\n  ],\n  "verbose": 1,\n  "log_dir": "log"\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"node-3-configuration",children:"Node 3 Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "host": "127.0.0.1",\n  "port": 7070,\n  "bolt_port":7689,\n  "bolt_raft_port":8002,\n  "bolt_raft_node_id":3,\n  "bolt_raft_init_peers":[\n        {"bolt_raft_node_id":1,"ip":"127.0.0.1","bolt_raft_port":8000,"bolt_port":7687}, \n        {"bolt_raft_node_id":2,"ip":"127.0.0.1","bolt_raft_port":8001,"bolt_port":7688}, \n        {"bolt_raft_node_id":3,"ip":"127.0.0.1","bolt_raft_port":8002,"bolt_port":7689}\n  ],\n  "verbose": 1,\n  "log_dir": "log"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then, simply start the three lgraph_servers normally."}),"\n",(0,o.jsx)(n.h3,{id:"configuration-instructions",children:"Configuration Instructions"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"port"}),": web port."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bolt_port"}),": For external use, the port for the Neo4j Bolt client connection."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bolt_raft_port"}),": For internal cluster use, the port used for communication within the Raft cluster. The Bolt client should not connect to this port."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bolt_raft_node_id"}),": The Raft cluster node ID, which must be unique for each node in the entire cluster."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bolt_raft_init_peers"}),": When initializing the Raft cluster for the first time, records are kept of each node's ",(0,o.jsx)(n.code,{children:"bolt_raft_node_id"}),", ",(0,o.jsx)(n.code,{children:"ip"}),", ",(0,o.jsx)(n.code,{children:"bolt_raft_port"}),", and ",(0,o.jsx)(n.code,{children:"bolt_port"}),", allowing each node to know the communication information of other nodes and to communicate with each other."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The four core configuration parameters for the Raft cluster are",(0,o.jsx)(n.code,{children:"bolt_port"}),",",(0,o.jsx)(n.code,{children:"bolt_raft_port"}),",",(0,o.jsx)(n.code,{children:"bolt_raft_node_id"}),",",(0,o.jsx)(n.code,{children:"bolt_raft_init_peers"}),"\u3002"]}),"\n",(0,o.jsx)(n.h2,{id:"cluster-operation-statements",children:"Cluster operation statements"}),"\n",(0,o.jsx)(n.h3,{id:"check-cluster-member-information",children:"Check cluster member information"}),"\n",(0,o.jsx)(n.p,{children:"It can be sent to any node in the cluster and will return the member list along with leader information."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"CALL db.bolt.listRaftNodes()"})}),"\n",(0,o.jsx)(n.h3,{id:"check-the-raft-state-information-of-a-node",children:"Check the Raft state information of a node"}),"\n",(0,o.jsx)(n.p,{children:"It can be sent to any node in the cluster, and it will return the Raft state information for each node."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"CALL db.bolt.getRaftStatus()"})}),"\n",(0,o.jsx)(n.h3,{id:"add-a-new-node-to-the-cluster",children:"Add a new node to the cluster"}),"\n",(0,o.jsx)(n.p,{children:"Add a new node to the cluster with the node ID 4, IP address 100.88.118.28, bolt_port 50003, and bolt_raft_port 60003."}),"\n",(0,o.jsx)(n.p,{children:"Can only be sent to the leader node."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"CALL db.bolt.addRaftNode(4, '100.88.118.28', 50003, 60003)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"add-a-learner-node-to-the-cluster",children:"Add a learner node to the cluster"}),"\n",(0,o.jsx)(n.p,{children:"Add a new learner node (does not participate in election voting, only synchronizes data) with node ID 4, IP address 100.88.118.28, bolt_port 50003, and bolt_raft_port 60003."}),"\n",(0,o.jsx)(n.p,{children:"Can only be sent to the leader node."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"CALL db.bolt.addRaftLearnerNode(4, '100.88.118.28', 50003, 60003)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"remove-a-member-node-from-the-cluster",children:"Remove a member node from the cluster"}),"\n",(0,o.jsx)(n.p,{children:"Remove the instance with node ID 4 from the cluster. This can only be sent to the leader node."}),"\n",(0,o.jsx)(n.p,{children:"Can only be sent to the leader node."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"CALL db.bolt.removeRaftNode(4)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"connect-the-bolt-client-to-the-instance",children:"Connect the Bolt client to the instance."}),"\n",(0,o.jsx)(n.h3,{id:"python",children:"python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"from neo4j import GraphDatabase\n\ndef custom_resolver(address):\n    if address == ('mycluster.com', 9999):\n        return [\n            ('127.0.0.1', 7687),\n            ('127.0.0.1', 7688),\n            ('127.0.0.1', 7689)\n        ]\n    else:\n        return [address]\n\n\nif __name__ == '__main__':\n    driver = GraphDatabase.driver(\n        \"neo4j://mycluster.com:9999\",\n        auth=(\"admin\", \"73@TuGraph\"),\n        resolver=custom_resolver\n    )\n    session = driver.session(database=\"default\")\n    session.run(\"CALL db.dropDB()\")\n    session.run(\"CALL db.createVertexLabel('person', 'id' , 'id', 'INT32', false, 'count', 'INT64', false)\")\n    session.run(\"create (n1:person {id:1, count:0})\")\n    session.close()\n    driver.close()\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"mycluster.com:9999"})," is a non-existent, fake domain address. The third parameter for initializing the GraphDatabase driver is a ",(0,o.jsx)(n.code,{children:"custom_resolver"}),". The logic within custom_resolver is to return three cluster addresses when the domain address is ",(0,o.jsx)(n.code,{children:"mycluster.com:9999"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);