"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[79716],{7215:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=r(74848),a=r(28453);const s={},o="TuGraph C++ SDK",i={id:"developer-manual/client-tools/cpp-client",title:"TuGraph C++ SDK",description:"This document is the usage instruction of TuGraph C++ SDK",source:"@site/versions/version-3.5.1/en-US/source/5.developer-manual/4.client-tools/2.cpp-client.md",sourceDirName:"5.developer-manual/4.client-tools",slug:"/developer-manual/client-tools/cpp-client",permalink:"/tugraph-db/en-US/en/3.5.1/developer-manual/client-tools/cpp-client",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TuGraph Python SDK",permalink:"/tugraph-db/en-US/en/3.5.1/developer-manual/client-tools/python-client"},next:{title:"TuGraph Java SDK",permalink:"/tugraph-db/en-US/en/3.5.1/developer-manual/client-tools/java-client"}},l={},d=[{value:"1.Instructions",id:"1instructions",level:2},{value:"2.Demo",id:"2demo",level:2},{value:"2.1.Instantiate the client object",id:"21instantiate-the-client-object",level:3},{value:"2.2.Call cypher",id:"22call-cypher",level:3},{value:"2.3.Call stored procedure",id:"23call-stored-procedure",level:3},{value:"2.4.Load stored procedure",id:"24load-stored-procedure",level:3},{value:"2.5.Import from a byte stream schema",id:"25import-from-a-byte-stream-schema",level:3},{value:"2.6.Import node and edge data from a byte stream",id:"26import-node-and-edge-data-from-a-byte-stream",level:3},{value:"2.7.Import schema from a file",id:"27import-schema-from-a-file",level:3},{value:"2.8.Import edge data from a file",id:"28import-edge-data-from-a-file",level:3}];function c(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"tugraph-c-sdk",children:"TuGraph C++ SDK"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"This document is the usage instruction of TuGraph C++ SDK"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"1instructions",children:"1.Instructions"}),"\n",(0,n.jsx)(t.p,{children:"C++ Client can use RPC to connect to lgraph_server to import data, execute stored procedures, call Cypher and other operations."}),"\n",(0,n.jsx)(t.h2,{id:"2demo",children:"2.Demo"}),"\n",(0,n.jsx)(t.h3,{id:"21instantiate-the-client-object",children:"2.1.Instantiate the client object"}),"\n",(0,n.jsx)(t.p,{children:"Introduce dependencies and instantiate"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'RpcClient client3("0.0.0.0:19099", "admin", "73@TuGraph");\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"RpcClient(const std::string& url, const std::string& user, const std::string& password);\n@param url: tugraph host looks like ip:port\n@param user: login user name\n@param password: login password\n"})}),"\n",(0,n.jsx)(t.h3,{id:"22call-cypher",children:"2.2.Call cypher"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:"    std::string str;\n    bool ret = client.CallCypher(str,\n        \"CALL db.createVertexLabel('actor', 'name', 'name', string, false, 'age', int8, true)\");\n\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool CallCypher(std::string& result, const std::string& cypher,\n        const std::string& graph = "default",\n        bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param cypher: inquire statement.\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})}),"\n",(0,n.jsx)(t.h3,{id:"23call-stored-procedure",children:"2.3.Call stored procedure"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'    std::string str;\n    bool ret = client.CallPlugin(str, "CPP", "test_plugin1", "bcefg");\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool CallPlugin(std::string& result, const std::string& plugin_type,\n        const std::string& plugin_name, const std::string& param,\n        double plugin_time_out = 0.0, bool in_process = false,\n        const std::string& graph = "default", bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param plugin_type: the plugin type, currently supported CPP and PY\n    @param plugin_name: plugin name\n    @param param: the execution parameters\n    @param plugin_timeout: Maximum execution time, overruns will be interrupted\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})}),"\n",(0,n.jsx)(t.h3,{id:"24load-stored-procedure",children:"2.4.Load stored procedure"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'    std::string str;\n    bool ret = client.LoadPlugin(str, code_sleep, "PY", "python_plugin1", "PY", "this is a test plugin",\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool LoadPlugin(std::string& result, const std::string& source_file,\n        const std::string& plugin_type, const std::string& plugin_name,\n        const std::string& code_type, const std::string& plugin_description,\n        bool read_only, const std::string& graph = "default", bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param source_file: the source_file contain plugin code\n    @param plugin_type: the plugin type, currently supported CPP and PY\n    @param plugin_name: plugin name\n    @param code_type: code type, currently supported PY, SO, CPP, ZIP\n    @param plugin_description: plugin description\n    @param read_only: plugin is read only or not\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})}),"\n",(0,n.jsx)(t.h3,{id:"25import-from-a-byte-stream-schema",children:"2.5.Import from a byte stream schema"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'    std::string str;\n    bool ret = client.ImportSchemaFromContent(str, sImportContent["schema"]);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool ImportSchemaFromContent(std::string& result, const std::string& schema,\n        const std::string& graph = "default", bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param schema: the schema to be imported\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})}),"\n",(0,n.jsx)(t.h3,{id:"26import-node-and-edge-data-from-a-byte-stream",children:"2.6.Import node and edge data from a byte stream"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'    std::string str;\n    ret = client.ImportDataFromContent(str, sImportContent["person_desc"], sImportContent["person"],",");\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool ImportDataFromContent(std::string& result, const std::string& desc,\n        const std::string& data, const std::string& delimiter,\n        bool continue_on_error = false, int thread_nums = 8,\n        const std::string& graph = "default", bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param desc: data format description\n    @param data: the data to be imported\n    @param delimiter: data separator\n    @param continueOnError: whether to continue when importing data fails\n    @param threadNums: maximum number of threads\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})}),"\n",(0,n.jsx)(t.h3,{id:"27import-schema-from-a-file",children:"2.7.Import schema from a file"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'    std::string conf_file("./yago.conf");\n    std::string str;\n    ret = client.ImportSchemaFromFile(str, conf_file);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool ImportSchemaFromFile(std::string& result, const std::string& schema_file,\n        const std::string& graph = "default", bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param schemaFile: the schema_file contain schema\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})}),"\n",(0,n.jsx)(t.h3,{id:"28import-edge-data-from-a-file",children:"2.8.Import edge data from a file"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-C++",children:'    std::string conf_file("./yago.conf");\n    std::string str;\n    ret = client.ImportDataFromFile(str, conf_file, ",");\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    bool ImportDataFromFile(std::string& result, const std::string& conf_file,\n        const std::string& delimiter, bool continue_on_error = false,\n        int thread_nums = 8, int skip_packages = 0,\n        const std::string& graph = "default", bool json_format = true,\n        double timeout = 0);\n    @param result: the result returned by the service.\n    @param conf_file: data file contain format description and data\n    @param delimiter: data separator\n    @param continue_on_error: whether to continue when importing data fails\n    @param thread_nums: maximum number of threads\n    @param skip_packages: skip packages number\n    @param graph: the graph to query.\n    @param json_format: The result is returned in JSON format\n    @param timeout: Maximum execution time, overruns will be interrupted\n    @return: whether the command is executed successfully\n'})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(96540);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);