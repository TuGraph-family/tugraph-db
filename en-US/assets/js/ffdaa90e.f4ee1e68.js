"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[68249],{28079:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=t(74848),a=t(28453);const s={},o="Examples of geospatial data type usage",r={id:"best-practices/spatial",title:"Examples of geospatial data type usage",description:"1. Introduction",source:"@site/versions/version-4.5.1/en-US/source/13.best-practices/5.spatial.md",sourceDirName:"13.best-practices",slug:"/best-practices/spatial",permalink:"/tugraph-db/en-US/en/4.5.1/best-practices/spatial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Environment and version selection",permalink:"/tugraph-db/en-US/en/4.5.1/best-practices/selection"},next:{title:"FAQ",permalink:"/tugraph-db/en-US/en/4.5.1/faq"}},d={},l=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"2. Background Knowledge",id:"2-background-knowledge",level:2},{value:"2.1 WGS84 Coordinate System (EPSG:4326)",id:"21-wgs84-coordinate-system-epsg4326",level:3},{value:"2.2 Cartesian Coordinate System (EPSG:7203)",id:"22-cartesian-coordinate-system-epsg7203",level:3},{value:"2.3 Data Storage Formats",id:"23-data-storage-formats",level:3},{value:"2.4 Common functions",id:"24-common-functions",level:3},{value:"3. Data Types",id:"3-data-types",level:2},{value:"4. Function Introduction",id:"4-function-introduction",level:2},{value:"5. Food Exploration",id:"5-food-exploration",level:2},{value:"5.1 Personalized Recommendations Based on Geographic Location",id:"51-personalized-recommendations-based-on-geographic-location",level:3},{value:"5.2 Data Model Design",id:"52-data-model-design",level:3},{value:"5.3 Building the Food Exploration Query",id:"53-building-the-food-exploration-query",level:3},{value:"6. Outlook",id:"6-outlook",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"examples-of-geospatial-data-type-usage",children:"Examples of geospatial data type usage"})}),"\n",(0,i.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,i.jsx)(n.p,{children:"TuGraph, a graph database jointly developed by Ant Group and Tsinghua University, has built a comprehensive graph technology system that includes graph storage, graph calculation, graph learning, and a graph development platform, owning a leading-scale graph cluster in the industry.  In recent years, geospatial capabilities have demonstrated significant application value in graph databases. They not only enhance the expressive power of data but also facilitate the fusion analysis of cross-domain data, especially displaying strong practical value in critical fields such as social networks, map exploration, and urban planning. TuGraph is also gradually supporting geospatial capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"2-background-knowledge",children:"2. Background Knowledge"}),"\n",(0,i.jsxs)(n.p,{children:["EPSG(",(0,i.jsx)(n.a,{href:"https://epsg.io/",children:"EPSG.io: Coordinate Systems Worldwide"}),") is a standardized collection of geospatial reference system identifiers, used to identify different geospatial reference systems, including coordinate systems, geographic coordinate systems, projected coordinate systems, etc. We commonly use EPSG codes to represent the coordinate systems of data, and here we introduce two of the most common geospatial coordinate systems, which are also the types supported by most databases."]}),"\n",(0,i.jsx)(n.h3,{id:"21-wgs84-coordinate-system-epsg4326",children:"2.1 WGS84 Coordinate System (EPSG:4326)"}),"\n",(0,i.jsxs)(n.p,{children:["Global Positioning System: WGS84 is the foundation of the Global Positioning System (GPS), allowing GPS receivers around the world to determine precise positions. Almost all modern GPS devices provide location information based on the WGS84 coordinate system. Map Making and Geographic Information Systems (GIS): In the field of map making and GIS, WGS84 is widely used to define positions on Earth. This includes various types of map creation, spatial data analysis, and management, etc. ",(0,i.jsx)(n.img,{alt:"image.png",src:t(80682).A+"",width:"821",height:"390"})]}),"\n",(0,i.jsx)(n.h3,{id:"22-cartesian-coordinate-system-epsg7203",children:"2.2 Cartesian Coordinate System (EPSG:7203)"}),"\n",(0,i.jsxs)(n.p,{children:["The Cartesian coordinate system, also known as the rectilinear or orthogonal coordinate system, is the most basic and widely applied coordinate system. It defines a plane with two axes and a space with three axes that are perpendicular to each other, extensively applied in mathematics, physics, engineering, astronomy, and many other fields. ",(0,i.jsx)(n.img,{alt:"image.png",src:t(46897).A+"",width:"560",height:"560"})]}),"\n",(0,i.jsx)(n.h3,{id:"23-data-storage-formats",children:"2.3 Data Storage Formats"}),"\n",(0,i.jsx)(n.p,{children:"OGC (Open Geospatial Consortium) has defined standard representation formats for spatial data, namely WKT and WKB formats, for exchanging and storing spatial data between different systems and platforms, which have now been widely adopted. WKT (Well-Known Text) format is a text markup language that is easy to read and write for humans, while WKB (Well-Known Binary) format uses a series of bytes to encode spatial data, which is more suitable for storage in computers."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"WKT:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"POINT(<x> <y>)\nLINESTRING(<x1> <y1>, <x2><y2>, ...)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The WKT format data is as shown above, first specifying the spatial data type, then specifying the coordinates in parentheses, with a pair of coordinates representing a point, separated by commas between each coordinate pair. For Polygon type data, the first coordinate pair needs to be the same as the last coordinate pair to form a closed surface."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"WKB:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(68281).A+"",width:"858",height:"264"})}),"\n",(0,i.jsx)(n.p,{children:"The encoding for the EWKB format is explained as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Positions 0 - 1: Encoding method;"}),"\n",(0,i.jsxs)(n.li,{children:["Positions 2 - 5: Spatial data type;\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"0100: point"}),"\n",(0,i.jsx)(n.li,{children:"0200: linestring"}),"\n",(0,i.jsx)(n.li,{children:"0300: polygon"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Positions 6 - 9: Data dimension;\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"0020: two-dimensional"}),"\n",(0,i.jsx)(n.li,{children:"0030: three-dimensional"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Positions 10 - 17: EPSG code of the coordinate system;"}),"\n",(0,i.jsx)(n.li,{children:"Positions 18 - n: 16-bit hex representation of pairs of double-type coordinates."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"24-common-functions",children:"2.4 Common functions"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Signature"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"dbms.graph.createGraph"})}),(0,i.jsx)(n.td,{children:"create a subgraph"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"dbms.graph.createGraph(graph_name::STRING, description::STRING, max_size_GB::INTEGER) :: (::VOID)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"db.createVertexLabel"})}),(0,i.jsx)(n.td,{children:"create a vertex label"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"db.createVertexLabel(label_name::STRING,field_specs::LIST) :: (::VOID)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"db.getLabelSchema"})}),(0,i.jsx)(n.td,{children:"get the schema of label"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"db.getLabelSchema(label_type::STRING,label_name::STRING) :: (name::STRING,type::STRING,optional::BOOLEAN)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"db.deleteLabel"})}),(0,i.jsx)(n.td,{children:"delete vertex label"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"db.deleteLabel(label_type::STRING,label_name::STRING) :: (::VOID)"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["\u66f4\u5b8c\u6574\u8be6\u7ec6\u7684\u51fd\u6570\u4f7f\u7528\u4ee5\u53ca\u63d2\u5165\u6570\u636e\u7684\u8bed\u53e5\uff0c\u53ef\u4ee5\u53c2\u8003 ",(0,i.jsx)(n.a,{href:"/tugraph-db/en-US/en/4.5.1/query/cypher",children:"Cypher API"})]}),"\n",(0,i.jsx)(n.h2,{id:"3-data-types",children:"3. Data Types"}),"\n",(0,i.jsx)(n.p,{children:"Currently, in TuGraph, we support three types of spatial data: Point, Linestring, and Polygon."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Point: POINT(2.0, 2.0, 7203)"}),"\n",(0,i.jsx)(n.li,{children:"Linestring: LINESTRING(0 2,1 1,2 0)"}),"\n",(0,i.jsx)(n.li,{children:"Polygon: POLYGON((0 0,0 7,4 2,2 0,0 0))"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Coordinates are of double type. Examples for creating graph models and inserting data as follows:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create a vertex to mark food locations"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CALL db.createVertexLabel('food', 'id', 'id', int64, false, 'name', string, true,'pointTest',point,true) \n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(35073).A+"",width:"932",height:"322"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Insert data to mark food points"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" CREATE (n:food {id:10001, name: 'aco Bell',pointTest:point(3.0,4.0,7203)}) RETURN n\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(15669).A+"",width:"1112",height:"706"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create a vertex with polyline attributes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CALL db.createVertexLabel('lineTest', 'id', 'id', int64, false, 'name', string, true,'linestringTest',linestring,true)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(37192).A+"",width:"953",height:"432"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Insert data for vertex with linestring attributes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CREATE (n:lineTest {id:102, name: 'Tom',linestringTest:linestringwkt('LINESTRING(0 2,1 1,2 0)', 7203)}) RETURN n\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(15415).A+"",width:"1777",height:"854"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create a vertex with polygon attributes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CALL db.createVertexLabel('polygonTest', 'id', 'id', int64, false, 'name', string, true,'polygonTest',polygon,true)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(27726).A+"",width:"922",height:"389"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Inser data for vertex with polygon attributes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CREATE (n:polygonTest {id:103, name: 'polygonTest',polygonTest:polygonwkt('POLYGON((0 0,0 7,4 2,2 0,0 0))', 7203)}) RETURN n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"4-function-introduction",children:"4. Function Introduction"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Function Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Input Parameters"}),(0,i.jsx)(n.th,{children:"Return Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Distance()"}),(0,i.jsx)(n.td,{children:"Calculate the distance between two spatial data (requires the same coordinate system)"}),(0,i.jsx)(n.td,{children:"Spatial data1, Spatial data2"}),(0,i.jsx)(n.td,{children:"double"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Disjoint()"}),(0,i.jsx)(n.td,{children:"Determine whether two spatial data intersect (under development)"}),(0,i.jsx)(n.td,{children:"Spatial data1, Spatial data2"}),(0,i.jsx)(n.td,{children:"bool"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"WithinBBox()"}),(0,i.jsx)(n.td,{children:"Determine whether a spatial data is within a given rectangular area (under development)"}),(0,i.jsx)(n.td,{children:"Spatial data, Point1"}),(0,i.jsx)(n.td,{children:"bool"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"5-food-exploration",children:"5. Food Exploration"}),"\n",(0,i.jsx)(n.h3,{id:"51-personalized-recommendations-based-on-geographic-location",children:"5.1 Personalized Recommendations Based on Geographic Location"}),"\n",(0,i.jsx)(n.p,{children:'In this section, we will explore how to use the TuGraph graph database\'s geospatial capabilities to create a vivid and interesting food exploration application that connects "people" and "food" through geographical locations to achieve personalized food recommendations. Imagine, no matter where you are, with just a gentle tap, the tempting food around you is at a glance \u2013 this is precisely the charm of the scene we\'re about to build.'}),"\n",(0,i.jsx)(n.h3,{id:"52-data-model-design",children:"5.2 Data Model Design"}),"\n",(0,i.jsx)(n.p,{children:"We first define two core types of vertex:\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Food vertex: Each restaurant or snack shop can serve as a Food node, with attributes that include but are not limited to the name, address, rating, food category, etc. Notably, we will attach geographic coordinate information to every Food node to record its precise location accurately."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" CALL db.createVertexLabel('food', 'id', 'id', int64, false, 'name', string, true,'pointTest',point,true,'mark',double,true)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Prepare data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CREATE (n:food {id:10001, name: 'Starbucks',pointTest:point(1.0,1.0,7203),mark:4.8}) RETURN n\nCREATE (n:food {id:10002, name: 'KFC',pointTest:point(2.0,1.0,7203),mark:4.5}) RETURN n\nCREATE (n:food {id:10003, name: 'Pizza Hut',pointTest:point(2.0,5.0,7203),mark:4.5}) RETURN n\nCREATE (n:food {id:10004, name: 'Taco Bell',pointTest:point(3.0,4.0,7203),mark:4.7}) RETURN n\nCREATE (n:food {id:10005, name: 'Pizza Fusion',pointTest:point(5.0,3.0,7203),mark:4.9}) RETURN n\nCREATE (n:food {id:10006, name: 'HaiDiLao Hot Pot',pointTest:point(2.0,2.0,7203),mark:4.8}) RETURN n\nCREATE (n:food {id:10007, name: 'Lao Sze Chuan',pointTest:point(4.0,3.0,7203),mark:4.7}) RETURN n\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Person vertex: Represents the user of the application, with attributes including username, current location, etc. The user's current location is also represented by geographic coordinates, facilitating subsequent geospatial queries."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" CALL db.createVertexLabel('person', 'id', 'id', int64, false, 'name', string, true,'pointTest',point,true)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Prepare data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" CREATE (n:person {id:1, name: 'Tom',pointTest:point(3.0,3.0,7203)}) RETURN n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"53-building-the-food-exploration-query",children:"5.3 Building the Food Exploration Query"}),"\n",(0,i.jsx)(n.p,{children:"The ability to find food within a distance of 2.5 based on the user's current location, and sort by distance in ascending order allows users to have a better experience by seeing the distance and rating."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Query Statement"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"match (n:person{id:1}),(m:food) with n.pointTest as p1,m.pointTest as p2,m.name as food,m.mark as mark\nCALL spatial.distance(p1,p2) YIELD distance \nWHERE distance<2.5\nRETURN food,distance,mark ORDER by distance\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image.png",src:t(42701).A+"",width:"1786",height:"821"})}),"\n",(0,i.jsx)(n.p,{children:'This query first matches a specific Person node (taking the user "Tom" as an example) and then finds all Food nodes. Using the custom distance function, the query calculates the straight-line distance between the current location of the Person node and each Food node, filtering out food within a distance of 2.5. Finally, the results are sorted by distance in ascending order, and the rating is provided as a reference to offer users the best possible recommendations.'}),"\n",(0,i.jsx)(n.h2,{id:"6-outlook",children:"6. Outlook"}),"\n",(0,i.jsx)(n.p,{children:"The aforementioned sections not only showcase TuGraph's capabilities in handling geospatial data but also depict an attractive food exploration scenario, proving the great potential of graph databases in providing personalized services that combine geographic location information. Whether it's finding a relaxing spot for the weekend or exploring unique cuisines during travel, such applications are set to greatly enrich people's life experiences.\nTuGraph will continue to implement Disjoint() and WithinBBox() functions, enriching more use cases. Of course, everyone is welcome to participate and collaborate in developing geospatial functionalities."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},80682:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/EPSG_4326-ebcf508237a6a659deda1c1c05da731b.png"},46897:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/EPSG_7203-813d52c83637ec9bff32110935eb851d.png"},68281:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/WKB-fe5482c2e6681a0467a03cbf55761578.png"},15669:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/createFoodData-42a1476e438f5b07b017a493510a074f.png"},15415:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/createLineTestData-d6b3f97eeae6bc43b1db36b3ac1536d4.png"},35073:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/createVertexLabel-6b5834819d1f4d20958b9ba6f13ebbde.png"},27726:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/createVertexLabel_PolygonTest-6c36f0248cb4843d13546b71df5b0eb1.png"},37192:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/createVertexLabel_lineTest-b37d40db2f4c254af64535f30a2842c5.png"},42701:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/querryFood-bd53767c9a6b584a1ba73dae4f429efb.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);