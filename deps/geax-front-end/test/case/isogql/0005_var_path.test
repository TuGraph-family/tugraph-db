def var_path: isogql = {
    // original data
    match p = (n1 where @id = 1)-[r1]->(n2)-[r2]->(n3)
    RETURN p order by p;

    // return path
    match p = (n where @id = 1)-[r]->{0,2}(m)
    RETURN p order by p;

    match p = (n where @id = 1)-[r]->{1,2}(m) RETURN p order by p;

    // length(path)
    match p = (n where @id = 1)-[r]->{0,2}(m) RETURN p, length(p) order by p;
    match p = (n where @id = 1)-[r]->{1,2}(m) RETURN p, length(p) order by p;

    // return path and edge properties
    match p = (n where @id = 1)-[r]->{1,2}(m) RETURN p, r.p_string order by p;

    // return path, vertex and edge properties
    match p = (n where @id = 1)-[r]->{1,2}(m) RETURN p, r.p_string, m.p_long order by p;
    match p = (n where @id = 1)-[r]->{0,2}(m) RETURN p, r.p_string, m.p_long order by p;

    // no path defined
    match (n where @id = 1)-[r]->{1,2}(m) RETURN n.@id, m.@id order by n.@id, m.@id;
    // equal min and max hop
    match (n where @id = 1)-[r]->{2,2}(m) RETURN n.@id, m.@id order by n.@id, m.@id;

    // undirected path
    match p = (n where @id = 10)-[r]-{1,2}(m) RETURN p order by p;

    // multiple hop range
    match p = (n1 where @id = 10)-[r1]-{1,1}(n2)-[r2]-{1,1}(n3) RETURN p order by p;

    // mix
    match p = (n1 where @id = 10)-[r1]-{1,1}(n2)-[r2]-(n3) RETURN p order by p;

    // filter last node
    // filter move out
    match p = (n where @id = 1)-[r]->{1,2}(m where @id >= 100) RETURN p order by p;
    match p = (n where @id = 1)-[r]->{1,2}(m where @id >= 100) RETURN p, m.@id order by p;
    match p = (n where @id = 1)-[r]->{0,2}(m where @id >= 10) RETURN p order by p;
    match p = (n where @id = 1)-[r]->{0,2}(m where @id >= 10) RETURN p, m.@id order by p;

    // disable push down filter
    match p = (n where @id = 1)-[r]->{1,2}(m) where m.@id >= 100 RETURN p order by p;
    match p = (n where @id = 1)-[r]->{0,2}(m) where m.@id >= 10 RETURN p order by p;

    // no path defined
    MATCH p=(c where @id=1)-[r]-{,2}(a where @id = 1) RETURN p,a,c;
    MATCH (c where @id=1)-[r]-{,2}(a where @id = 1) RETURN a,c;

    // edge value
    MATCH p = (a where @id=1)-[r]->{,2}(c where @id = 10) RETURN r.@timestamp,p;
    MATCH p = (a where @id=1)-[r]->{,2}(c where @id = 10) RETURN r,p;
    MATCH (a where @id=1)-[r]->{,2}(c where @id = 10) RETURN r.@timestamp;

    // questioned path primary
    MATCH p = (n where @id = 1)-[r]->?(m) RETURN p order by p;
}

def var_path_error: isogql->(2100) = {
    match p = (n where @id = 1)-[r]->{1,2}(m) RETURN p, length(n) order by p;
}

def var_add_data: gql = {
    INSERT ()-[:edge_n1_n2{p_long:111, p_double:11.1, p_string:"1->10|1", @src_id:1, @dst_id:10, @timestamp:1}]->();
}

def var_same_dst_path: isogql = {
    match p = (n:node1 where @id=1)-[r]->{0,2}(m) return p;
}

def large_hop_range: isogql = {
    match (n where @id = 1)-[r]->{1, 10}(m)
    return count(distinct m)
}

def var_delete_data: gql = {
    DELETE r MATCH ()-[r:edge_n1_n2{@src_id:1, @dst_id:10, @timestamp:1}]->();
}