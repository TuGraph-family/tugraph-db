// CASE LIST
// |-- 0 init
// |-- 1 Default WALK
// |-- 2 WALK
// |-- 3 TRAIL
// |-- 4 SIMPLE
// |-- 5 ACYCLIC
//
//  +------A-----+   edge_n5_n5   +-------B------+   edge_n5_n5   +-------C------+
//  | node5 1101 | -------------> | node5 1102   | -------------> | node5 1103   |
//  +------------+                +--------------+                +--------------+
//                                              edge_n5_n5         |      ^
//                                    +----------------------------+      | edge_n5_n5
//                                    |                                   |
//                                    v                                   |
//                              +-------D------+   edge_n5_n5   +-------E------+
//                              |  node5 1104  | -------------> |  node5 1105  |
//                              +--------------+                +--------------+
//
//                              +-------A------+   edge_n5_n5   +-------B------+
//                              |  node5 2101  | -------------> |  node5 2102  |
//                              |              | <------------- |              |
//                              +--------------+                +--------------+
//
//                              +-------A------+  edge_n5_n5
//                              |  node5 3101  | --------+
//                              +--------------+         |
//                                    ^                  |
//                                    |                  |
//                                    +------------------+
//
//  +------A-----+   edge_n5_n5  +-------B------+  edge_n5_n5   +-------D------+ edge_n5_n5  +-------E------+
//  | node5 6101 | ------------> | node5 6102   | ------------> | node5 6104   |-----------> | node5 6105   |
//  +------------+               +--------------+               +--------------+             +--------------+
//         |                                                             ^
//         |                                                             |
//         |    edge_n5_n5       +-------C------+  edge_n5_n5            |
//         +-------------------->|  node5 6103  | -----------------------+
//                               +--------------+
//
def init_dataset: gql = {
    // 0.init
    // insert node
    INSERT (:node5{@id:1101, p_long:1101, p_double:110.1, p_string:"A_1101"}), (:node5{@id:1102, p_long:1102, p_double:110.2, p_string:"B_1102"}), (:node5{@id:1103, p_long:1103, p_double:110.3, p_string:"C_1103"}), (:node5{@id:1104, p_long:1104, p_double:110.4, p_string:"D_1104"}), (:node5{@id:1105, p_long:1105, p_double:110.5, p_string:"E_1105"});
    INSERT (:node5{@id:2101, p_long:2101, p_double:210.1, p_string:"A_2101"}), (:node5{@id:2102, p_long:2102, p_double:210.2, p_string:"B_2102"});
    INSERT (:node5{@id:3101, p_long:3101, p_double:310.1, p_string:"A_3101"});
    INSERT (:node5{@id:6101, p_long:6101, p_double:610.1, p_string:"A_6101"}), (:node5{@id:6102, p_long:6102, p_double:610.2, p_string:"B_6102"}), (:node5{@id:6103, p_long:6103, p_double:610.3, p_string:"C_6103"}), (:node5{@id:6104, p_long:6104, p_double:610.4, p_string:"D_6104"}), (:node5{@id:6105, p_long:6105, p_double:610.5, p_string:"E_6105"});
    select n.@id, n.p_long, n.p_double, n.p_string match (n:node5 where @id in (1101,1102,1103,1104,1105,2101,2102,3101,6101,6102,6103,6104,6105)) order by n.@id;

    // insert edge
    INSERT ()-[:edge_n5_n5{p_long:1101, p_double:1101.2, p_string:"A-B", @src_id:1101, @dst_id:1102, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:1102, p_double:1102.3, p_string:"B-C", @src_id:1102, @dst_id:1103, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:1103, p_double:1103.4, p_string:"C-D", @src_id:1103, @dst_id:1104, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:1104, p_double:1104.5, p_string:"D-E", @src_id:1104, @dst_id:1105, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:1105, p_double:1105.3, p_string:"E-C", @src_id:1105, @dst_id:1103, @timestamp:0}]->();
    select r1, r2, r3, r4, r5 match (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)-[r5]->(x);

    INSERT ()-[:edge_n5_n5{p_long:2101, p_double:2101.2, p_string:"A-B", @src_id:2101, @dst_id:2102, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:2102, p_double:2102.1, p_string:"B-A", @src_id:2102, @dst_id:2101, @timestamp:0}]->();
    select a, r, b match (a where @id in [2101, 2102])-[r]->(b);
    select a, r, b match (a where @id = 2101)-[r]-(b);

    INSERT ()-[:edge_n5_n5{p_long:3101, p_double:3101.0, p_string:"A-A", @src_id:3101, @dst_id:3101, @timestamp:0}]->();
    select a, r, b match (a where @id = 3101)-[r]->(b);
    // TODO(suosi): There some thing is wrong
    //select a, r, b match (a where @id = 3101)-[r]-(b);

    INSERT ()-[:edge_n5_n5{p_long:6101, p_double:6101.2, p_string:"A-B", @src_id:6101, @dst_id:6102, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:6101, p_double:6101.3, p_string:"A-C", @src_id:6101, @dst_id:6103, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:6102, p_double:6102.4, p_string:"B-D", @src_id:6102, @dst_id:6104, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:6103, p_double:6103.4, p_string:"C-D", @src_id:6103, @dst_id:6104, @timestamp:0}]->(), ()-[:edge_n5_n5{p_long:6104, p_double:6104.5, p_string:"D-E", @src_id:6104, @dst_id:6105, @timestamp:0}]->();
    select r1, r2, r3 match (a where @id = 6101)-[r1]->(b_or_c)-[r2]->(d)-[r3]->(e);
}

def default_walk: isogql = {
    // no repeat
    MATCH (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)
    RETURN r1, r2, r3, r4, e.@id;

    // middle node repeat
    match (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)-[r5]->(xc)
    RETURN r1, r2, r3, r4, r5, c.@id, xc.@id;
    match (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)<-[r4]-(b)
    RETURN r1, r2, r3, r4, c.@id, xc.@id;

    // edge and node repeat
    match (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)-[xr1]->(xd)
    RETURN r1, r2, r3, xr1, c.@id, xc.@id, d.@id, xd.@id;

    // begin node repeat
    match (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)
    RETURN r1, r2, r3, c.@id, xc.@id;

    // edge and node repeat
    match (a where @id = 1101)-[r1]->(b)<-[xr1]-(xa)
    RETURN r1, xr1, a.@id, xa.@id;

    // undirected edge: edge and node repeat
    match (a where @id = 1101)-[r1]-(b)-[r2_or_r1]-(c_or_a)
    RETURN r1, r2_or_r1, a.@id, c_or_a.@id;

    // bidirectional edge: begin node repeat
    match (a where @id = 2101)-[r1]->(b)-[r2]->(xa)
    RETURN a, r1, b, r2, xa;

    // index: edge r3, node b_or_d repeat
    match (d:node5 where p_long = 1104)-[r1]->(e)-[r2]->(c)-[r3]-(b_or_d)
    RETURN d, r1, e, r2, c, r3, b_or_d;

    // variable path
    match p = (d where @id = 1104)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = (b where @id = 1102)-[r]->{0,4}(x)
    RETURN r.p_string;
    match p = (A where @id = 2101)-[r]->{1,3}(X)
    RETURN r.p_string;
    match p = (a where @id = 6101)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = (d where @id = 1104)-[r]-{0,3}(x)
    RETURN r.p_string;
    match p = (c where @id = 1103)-[r1]->{1,3}(xc)<-[r2]-(b)
    RETURN p;

    // self-edge
    MATCH (a:node5 where @id = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = (a:node5 where @id = 3101)-[r]-(b)-(x)
    RETURN p;
    MATCH p = (a:node5 where @id = 3101)-{0,3}(b)
    RETURN p;
    MATCH (a:node5 where p_long = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = (a:node5 where p_long = 3101)-[r]-(b)-(x)
    RETURN p;
}

def walk: isogql = {
    // no repeat
    MATCH WALK (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)
    RETURN r1, r2, r3, r4, e.@id;

    // middle node repeat
    match WALK (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)-[r5]->(xc)
    RETURN r1, r2, r3, r4, r5, c.@id, xc.@id;
    match WALK (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)<-[r4]-(b)
    RETURN r1, r2, r3, r4, c.@id, xc.@id;

    // edge and node repeat
    match WALK (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)-[xr1]->(xd)
    RETURN r1, r2, r3, xr1, c.@id, xc.@id, d.@id, xd.@id;

    // begin node repeat
    match WALK (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)
    RETURN r1, r2, r3, c.@id, xc.@id;

    // edge and node repeat
    match WALK (a where @id = 1101)-[r1]->(b)<-[xr1]-(xa)
    RETURN r1, xr1, a.@id, xa.@id;

    // undirected edge: edge and node repeat
    match WALK (a where @id = 1101)-[r1]-(b)-[r2_or_r1]-(c_or_a)
    RETURN r1, r2_or_r1, a.@id, c_or_a.@id;

    // bidirectional edge: begin node repeat
    match WALK (a where @id = 2101)-[r1]->(b)-[r2]->(xa)
    RETURN a, r1, b, r2, xa;

    // index: edge r3, node b_or_d repeat
    match WALK (d:node5 where p_long = 1104)-[r1]->(e)-[r2]->(c)-[r3]-(b_or_d)
    RETURN d, r1, e, r2, c, r3, b_or_d;

    // variable path
    match p = WALK (d where @id = 1104)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = WALK (b where @id = 1102)-[r]->{0,4}(x)
    RETURN r.p_string;
    match p = WALK (A where @id = 2101)-[r]->{1,3}(X)
    RETURN r.p_string;
    match p = WALK (a where @id = 6101)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = WALK (d where @id = 1104)-[r]-{0,3}(x)
    RETURN r.p_string;
    match p = WALK (c where @id = 1103)-[r1]->{1,3}(xc)<-[r2]-(b)
    RETURN p;

    // self-edge
    MATCH WALK (a:node5 where @id = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = WALK (a:node5 where @id = 3101)-[r]-(b)-(x)
    RETURN p;
    MATCH p = WALK (a:node5 where @id = 3101)-{0,3}(b)
    RETURN p;
    MATCH WALK (a:node5 where p_long = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = WALK (a:node5 where p_long = 3101)-[r]-(b)-(x)
    RETURN p;
}


def trail: isogql = {
    // no repeat
    MATCH TRAIL (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)
    RETURN r1, r2, r3, r4, e.@id;

    // middle node repeat
    match TRAIL (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)-[r5]->(xc)
    RETURN r1, r2, r3, r4, r5, c.@id, xc.@id;
    match TRAIL (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)<-[r4]-(b)
    RETURN r1, r2, r3, r4, c.@id, xc.@id;

    // edge and node repeat
    match TRAIL (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)-[xr1]->(xd)
    RETURN r1, r2, r3, xr1, c.@id, xc.@id, d.@id, xd.@id;

    // begin node repeat
    match TRAIL (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)
    RETURN r1, r2, r3, c.@id, xc.@id;

    // edge and node repeat
    match TRAIL (a where @id = 1101)-[r1]->(b)<-[xr1]-(xa)
    RETURN r1, xr1, a.@id, xa.@id;

    // undirected edge: edge and node repeat
    match TRAIL (a where @id = 1101)-[r1]-(b)-[r2_or_r1]-(c_or_a)
    RETURN r1, r2_or_r1, a.@id, c_or_a.@id;

    // bidirectional edge: begin node repeat
    match TRAIL (a where @id = 2101)-[r1]->(b)-[r2]->(xa)
    RETURN a, r1, b, r2, xa;

    // index: edge r3, node b_or_d repeat
    match TRAIL (d:node5 where p_long = 1104)-[r1]->(e)-[r2]->(c)-[r3]-(b_or_d)
    RETURN d, r1, e, r2, c, r3, b_or_d;

    // variable path
    match p = TRAIL (d where @id = 1104)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = TRAIL (b where @id = 1102)-[r]->{0,4}(x)
    RETURN r.p_string;
    match p = TRAIL (A where @id = 2101)-[r]->{1,3}(X)
    RETURN r.p_string;
    match p = TRAIL (a where @id = 6101)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = TRAIL (d where @id = 1104)-[r]-{0,3}(x)
    RETURN r.p_string;
    match p = TRAIL (c where @id = 1103)-[r1]->{1,3}(xc)<-[r2]-(b)
    RETURN p;

    // self-edge
    MATCH TRAIL (a:node5 where @id = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = TRAIL (a:node5 where @id = 3101)-[r]-(b)-(x)
    RETURN p;
    MATCH p = TRAIL (a:node5 where @id = 3101)-{0,3}(b)
    RETURN p;
    MATCH TRAIL (a:node5 where p_long = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = TRAIL (a:node5 where p_long = 3101)-[r]-(b)-(x)
    RETURN p;
}

def simple: isogql = {
    // no repeat
    MATCH SIMPLE (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)
    RETURN r1, r2, r3, r4, e.@id;

    // middle node repeat
    match SIMPLE (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)-[r5]->(xc)
    RETURN r1, r2, r3, r4, r5, c.@id, xc.@id;
    match SIMPLE (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)<-[r4]-(b)
    RETURN r1, r2, r3, r4, c.@id, xc.@id;

    // edge and node repeat
    match SIMPLE (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)-[xr1]->(xd)
    RETURN r1, r2, r3, xr1, c.@id, xc.@id, d.@id, xd.@id;

    // begin node repeat
    match SIMPLE (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)
    RETURN r1, r2, r3, c.@id, xc.@id;

    // edge and node repeat
    match SIMPLE (a where @id = 1101)-[r1]->(b)<-[xr1]-(xa)
    RETURN r1, xr1, a.@id, xa.@id;

    // undirected edge: edge and node repeat
    match SIMPLE (a where @id = 1101)-[r1]-(b)-[r2_or_r1]-(c_or_a)
    RETURN r1, r2_or_r1, a.@id, c_or_a.@id;

    // bidirectional edge: begin node repeat
    match SIMPLE (a where @id = 2101)-[r1]->(b)-[r2]->(xa)
    RETURN a, r1, b, r2, xa;

    // index: edge r3, node b_or_d repeat
    match SIMPLE (d:node5 where p_long = 1104)-[r1]->(e)-[r2]->(c)-[r3]-(b_or_d)
    RETURN d, r1, e, r2, c, r3, b_or_d;

    // variable path
    match p = SIMPLE (d where @id = 1104)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = SIMPLE (b where @id = 1102)-[r]->{0,4}(x)
    RETURN r.p_string;
    match p = SIMPLE (A where @id = 2101)-[r]->{1,3}(X)
    RETURN r.p_string;
    match p = SIMPLE (a where @id = 6101)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = SIMPLE (d where @id = 1104)-[r]-{0,3}(x)
    RETURN r.p_string;
    match p = SIMPLE (c where @id = 1103)-[r1]->{1,3}(xc)<-[r2]-(b)
    RETURN p;

    // self-edge
    MATCH SIMPLE (a:node5 where @id = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = SIMPLE (a:node5 where @id = 3101)-[r]-(b)-(x)
    RETURN p;
    MATCH p = SIMPLE (a:node5 where @id = 3101)-{0,3}(b)
    RETURN p;
    MATCH SIMPLE (a:node5 where p_long = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = SIMPLE (a:node5 where p_long = 3101)-[r]-(b)-(x)
    RETURN p;
}

def acyclic: isogql = {
    // no repeat
    MATCH ACYCLIC (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)
    RETURN r1, r2, r3, r4, e.@id;

    // middle node repeat
    match ACYCLIC (a where @id = 1101)-[r1]->(b)-[r2]->(c)-[r3]->(d)-[r4]->(e)-[r5]->(xc)
    RETURN r1, r2, r3, r4, r5, c.@id, xc.@id;
    match ACYCLIC (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)<-[r4]-(b)
    RETURN r1, r2, r3, r4, c.@id, xc.@id;

    // edge and node repeat
    match ACYCLIC (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)-[xr1]->(xd)
    RETURN r1, r2, r3, xr1, c.@id, xc.@id, d.@id, xd.@id;

    // begin node repeat
    match ACYCLIC (c where @id = 1103)-[r1]->(d)-[r2]->(e)-[r3]->(xc)
    RETURN r1, r2, r3, c.@id, xc.@id;

    // edge and node repeat
    match ACYCLIC (a where @id = 1101)-[r1]->(b)<-[xr1]-(xa)
    RETURN r1, xr1, a.@id, xa.@id;

    // undirected edge: edge and node repeat
    match ACYCLIC (a where @id = 1101)-[r1]-(b)-[r2_or_r1]-(c_or_a)
    RETURN r1, r2_or_r1, a.@id, c_or_a.@id;

    // bidirectional edge: begin node repeat
    match ACYCLIC (a where @id = 2101)-[r1]->(b)-[r2]->(xa)
    RETURN a, r1, b, r2, xa;

    // index: edge r3, node b_or_d repeat
    match ACYCLIC (d:node5 where p_long = 1104)-[r1]->(e)-[r2]->(c)-[r3]-(b_or_d)
    RETURN d, r1, e, r2, c, r3, b_or_d;

    // variable path
    match p = ACYCLIC (d where @id = 1104)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = ACYCLIC (b where @id = 1102)-[r]->{0,4}(x)
    RETURN r.p_string;
    match p = ACYCLIC (A where @id = 2101)-[r]->{1,3}(X)
    RETURN r.p_string;
    match p = ACYCLIC (a where @id = 6101)-[r]->{0,3}(x)
    RETURN r.p_string;
    match p = ACYCLIC (d where @id = 1104)-[r]-{0,3}(x)
    RETURN r.p_string;
    match p = ACYCLIC (c where @id = 1103)-[r1]->{1,3}(xc)<-[r2]-(b)
    RETURN p;

    // self-edge
    MATCH ACYCLIC (a:node5 where @id = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = ACYCLIC (a:node5 where @id = 3101)-[r]-(b)-(x)
    RETURN p;
    MATCH p = ACYCLIC (a:node5 where @id = 3101)-{0,3}(b)
    RETURN p;
    MATCH ACYCLIC (a:node5 where p_long = 3101)-[r]-(b)
    RETURN a, r, b;
    MATCH p = ACYCLIC (a:node5 where p_long = 3101)-[r]-(b)-(x)
    RETURN p;
}


def delete: gql = {
    DELETE n MATCH (n:node5{@id:1101});
    DELETE n MATCH (n:node5{@id:1102});
    DELETE n MATCH (n:node5{@id:1103});
    DELETE n MATCH (n:node5{@id:1104});
    DELETE n MATCH (n:node5{@id:1105});
    DELETE n MATCH (n:node5{@id:2101});
    DELETE n MATCH (n:node5{@id:2102});
    DELETE n MATCH (n:node5{@id:3101});
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:1101, @dst_id:1102, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:1102, @dst_id:1103, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:1103, @dst_id:1104, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:1104, @dst_id:1105, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:1105, @dst_id:1103, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:2101, @dst_id:2102, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:2102, @dst_id:2101, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:3101, @dst_id:3101, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:6101, @dst_id:6102, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:6101, @dst_id:6103, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:6102, @dst_id:6104, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:6103, @dst_id:1104, @timestamp:0}]->();
    DELETE r MATCH ()-[r:edge_n5_n5{@src_id:6104, @dst_id:1105, @timestamp:0}]->();

    DELETE n MATCH (n:node5{@id:1101});
    DELETE n MATCH (n:node5{@id:1102});
    DELETE n MATCH (n:node5{@id:1103});
    DELETE n MATCH (n:node5{@id:1104});
    DELETE n MATCH (n:node5{@id:1105});
    DELETE n MATCH (n:node5{@id:2101});
    DELETE n MATCH (n:node5{@id:2102});
    DELETE n MATCH (n:node5{@id:3101});
    DELETE n MATCH (n:node5{@id:6101});
    DELETE n MATCH (n:node5{@id:6102});
    DELETE n MATCH (n:node5{@id:6103});
    DELETE n MATCH (n:node5{@id:6104});
}
