# 1 base
# 2 as
# 3 agg
# 4 rowCmpExpr
# 5 path_mode
# 6 inner_table
# 7 list
# 8 exp
# 9 clause
# 10 comparison
# 11 logical
# 12 bit
# 13 priority
# 14 func
# 15 null
# 16 star
# 17 where
# 18 in
# 19 between
# 20 like
# 21 hint
# 22 orderby
# 23 label_ref
# 24 label_ref
# 25 graphpattern
# 26 rowkey

## base
return 1;
return 1
return 1;
# return 1;return 1;
# return 1;return 1
# return 1;return 1;return 1;
# return 1;return 1;return 1
return 1
return -1
return 9223372036854775807
return -9223372036854775807
return +1
return +-1
return 1.1
return "1"
return '1'
return "a"
return 'a'
return true
return false
return a
return a.b
return max( 1 )
return min(1)
return avg(1 )
return count( 1)
return (1)
return count(DISTINCT 1)
return count(distinct 1)
return sum(distinct 1)
return avg(distinct 1)
return max(distinct 1)
return min(distinct 1)
return 1 + 1
return 1 - 1
return 1 * 1
return 1 / 1
return 1 % 1
# return 1 from __node1
--error
return 1 where 1 + 1
return 1 group by 1
return 1 order by 1
--error
return 1 having 1 - 1
return 1 limit 1
# return 1 limit 1,1
return 1 + 2 + 3 + 4
return 1 - 2 - 3 - 4
return 1 * 2 * 3 * 4
return 1 / 2 / 3 / 4
return 1 * 2 + 3 + 4
return 1 + 2 * 3 + 4
return 1 + 2 + 3 * 4
return 1 + 2 / 3 * 4
return 1 * 2 + 3 * 4 - 5/6
return 1 - -1
return 1 + -1
return 1 * -1
return 1 / -1
return 1 - +1
return 1 + +1
return 1 * +1
return 1 / +1
return -1 * +2 + -3 * 4 - 5/+6 - -1
return 1 + 2 + (3 + 4)
return 1 + 2 * (3 + 4)
return 1 + 2 * -(3 + 4)
return (1 + 3) * +2 + -(3 + 4)
return 'abcd'
return 'ab cd'
return 'ab', 'cd'
return "abcd"
return "ab cd"
return "ab \"cd"
return "a'bc'd"
return 'a\"bc\"d'
return 'ab\\ncd'
return 'ab\\tcd'
return 'ab\\rcd'
return 'ab\\bcd'
return 'ab\\fcd'
return 'ab\\01cd'
return 'ab\\cd'

## as
return 1 as A
return 9223372036854775807 as A
return +1 as A
return 1.1 as A
return "1" as A
return '1' as A
return "a" as A
return 'a' as a
return true as A
return false as A
return a as A
return a.b as A
return max( 1 ) as A
return min(1) as A
return avg(1 ) as A
return count( 1) AS A
return max(DISTINCT 1 ) as A
return min(DISTINCT 1) as A
return avg(DISTINCT 1 ) as A
return count(DISTINCT  1) AS A
return (1) as A
return 1 + 2 + 3 + 4 as A
return 1 - 2 - 3 - 4 as A
return 1 * 2 * 3 * 4 as A
return 1 / 2 / 3 / 4 as A

## agg
#
return count(distinct 1)
return sum(distinct 1)
return avg(distinct 1)
return max(distinct 1)
return min(distinct 1)
return count(distinct1)
return sum(distinct1)
return avg(distinct1)
return max(distinct1)
return min(distinct1)
return count(distinct 1, 2)
# return sum(distinct 1, 2)
# return avg(distinct 1, 2)
# return max(distinct 1, 2)
# return min(distinct 1, 2)
return count(distinct A)
return sum(distinct A)
return avg(distinct A)
return max(distinct A)
return min(distinct A)
return count(distinctA)
return sum(distinctA)
return avg(distinctA)
return max(distinctA)
return min(distinctA)
return count(distinct A, B)
# return sum(distinct A, B)
# return avg(distinct A, B)
# return max(distinct A, B)
# return min(distinct A, B)
return count(distinct A.B)
return sum(distinct A.B)
return avg(distinct A.B)
return max(distinct A.B)
return min(distinct A.B)
return count(distinctA.B)
return sum(distinctA.B)
return avg(distinctA.B)
return max(distinctA.B)
return min(distinctA.B)
return count(distinct A.B, C.D)
# return sum(distinct A.B, C.D)
# return avg(distinct A.B, C.D)
# return max(distinct A.B, C.D)
# return min(distinct A.B, C.D)

## rowCmpExpr
return ROW(1, 2) > ROW(2, 2)
return ROW(1) > ROW(2)


## path_mode
match WALK (n)-[r]->(m) return n.@id
match TRAIL (n)-[r]->(m) return n.@id
match SIMPLE (n)-[r]->(m) return n.@id
match ACYCLIC (n)-[r]->(m) return n.@id
match ACYCLIC (n)-[r]-(m) return n.@id
match ACYCLIC (m) return n.@id
match ACYCLIC ()-[r]-() return n.@id
match WALK (n)-[r]->(m) return n.@id
match TRAIL (n)-[r]->(m) return n.@id
match SIMPLE (n)-[r]->(m) return n.@id
match ACYCLIC (n)-[r]->(m) return n.@id
match ACYCLIC (n)-[r]-(m) return n.@id
match ACYCLIC (m) return n.@id
match ACYCLIC ()-[r]-() return n.@id

## inner_table
# return * from __all_gql_statistic_info

## list
return [1]
return [1,2,3]
return [a,b,c]
return [1.1, 1.2, 1.3]
return [1+1, 1+2, 1+3]
return [true, false, true]
# return [1,2,3][1..3]
# return [1,2,3][..3]
# return [1,2,3][1..]
return [ [1,2,3] ]
return [ [1,2,3], 1 ]
return [x in [1,2,3]]
return [x in [1,2,3] ]
match (n where @id in (1,2,3)) return n.@id
match (n where @id in [1,2,3]) return n.@id
match (n:node1|node2 {@id:10}) return 1
# return range(0, 10)[3]
# return range(0, 10)[-3]
# return range(0, 10)[0..3]
# return range(0, 10)[0..-5]
# return range(0, 10)[-5..]
# return range(0, 10)[..4]
# return range(0, 10)[15]
# return range(0, 10)[5..15]

## exp
return 01
return -01
return 001
return -001
# double
return 0.00000001
return 1.00000000
return 0.00000001
return 000000.00000001
return 1.
# string
return 'ab\t\t\t\tcd'
return 'ab\r\r\r\rcd'
return 'ab\b\b\b\bcd'
return 'ab\f\f\f\fcd'
return ''
return ""
# bool
return true, true
return true, false
return false, true
return false, false
# column
return AAAA
return AAAA_
return AAAA1
return AAAA#
return AAAA_BBBB
return AAAA#BBBB
return AAAA.BBBB
# negative
return ++--+-1
return -(+(-(-(+(-1)))))
return -A
return -1.1
return -A.B
return -false
return -true
# agg_func
return max(((1)))
return max(DISTINCT ((1)))
return max(count(avg(min(1))))
return max(DISTINCT count(avg(min(1))))
return max(DISTINCT count(DISTINCT avg(min(1))))
return max(DISTINCT count(DISTINCT avg(DISTINCT min(1))))
return max(DISTINCT count(DISTINCT avg(DISTINCT min(DISTINCT 1))))
return max(1) + min(1) * count(1) / avg(1)
return max(DISTINCT 1) + min(1) * count(1) / avg(1)
return max(DISTINCT 1) + min(DISTINCT 1) * count(1) / avg(1)
return max(DISTINCT 1) + min(DISTINCT 1) * count(DISTINCT 1) / avg(1)
return max(DISTINCT 1) + min(DISTINCT 1) * count(DISTINCT 1) / avg(DISTINCT 1)
return max(max(1) + min(1) * count(1) / avg(1))
return max(DISTINCT max(1) + min(1) * count(1) / avg(1))
return max(DISTINCT max(DISTINCT 1) + min(1) * count(1) / avg(1))
return max(DISTINCT max(DISTINCT 1) + min(DISTINCT 1) * count(1) / avg(1))
return max(DISTINCT max(DISTINCT 1) + min(DISTINCT 1) * count(DISTINCT 1) / avg(1))
return max(DISTINCT max(DISTINCT 1) + min(DISTINCT 1) * count(DISTINCT 1) / avg(DISTINCT 1))
return max(1 + 1 - 1 * 1 / 1)
return max(DISTINCT 1 + 1 - 1 * 1 / 1)
return max(((A)))
return max(DISTINCT ((A)))
return max(count(avg(min(A))))
return max(DISTINCT count(avg(min(A))))
return max(DISTINCT count(DISTINCT avg(min(A))))
return max(DISTINCT count(DISTINCT avg(DISTINCT min(A))))
return max(DISTINCT count(DISTINCT avg(DISTINCT min(DISTINCT A))))
return max(A) + min(A) * count(A) / avg(A)
return max(DISTINCT A) + min(A) * count(A) / avg(A)
return max(DISTINCT A) + min(DISTINCT A) * count(A) / avg(A)
return max(DISTINCT A) + min(DISTINCT A) * count(DISTINCT A) / avg(A)
return max(DISTINCT A) + min(DISTINCT A) * count(DISTINCT A) / avg(DISTINCT A)
return max(max(A) + min(A) * count(A) / avg(A))
return max(DISTINCT max(A) + min(A) * count(A) / avg(A))
return max(DISTINCT max(DISTINCT A) + min(A) * count(A) / avg(A))
return max(DISTINCT max(DISTINCT A) + min(DISTINCT A) * count(A) / avg(A))
return max(DISTINCT max(DISTINCT A) + min(DISTINCT A) * count(DISTINCT A) / avg(A))
return max(DISTINCT max(DISTINCT A) + min(DISTINCT A) * count(DISTINCT A) / avg(DISTINCT A))
return max(A + A - A * A / A)
return max(DISTINCT A + A - A * A / A)
return max(((A.B)))
return max(DISTINCT ((A.B)))
return max(count(avg(min(A.B))))
return max(DISTINCT count(avg(min(A.B))))
return max(DISTINCT count(DISTINCT avg(min(A.B))))
return max(DISTINCT count(DISTINCT avg(DISTINCT min(A.B))))
return max(DISTINCT count(DISTINCT avg(DISTINCT min(DISTINCT A.B))))
return max(A.B) + min(A.B) * count(A.B) / avg(A.B)
return max(DISTINCT A.B) + min(A.B) * count(A.B) / avg(A.B)
return max(DISTINCT A.B) + min(DISTINCT A.B) * count(A.B) / avg(A.B)
return max(DISTINCT A.B) + min(DISTINCT A.B) * count(DISTINCT A.B) / avg(A.B)
return max(DISTINCT A.B) + min(DISTINCT A.B) * count(DISTINCT A.B) / avg(DISTINCT A.B)
return max(max(A.B) + min(A.B) * count(A.B) / avg(A.B))
return max(DISTINCT max(A.B) + min(A.B) * count(A.B) / avg(A.B))
return max(DISTINCT max(DISTINCT A.B) + min(A.B) * count(A.B) / avg(A.B))
return max(DISTINCT max(DISTINCT A.B) + min(DISTINCT A.B) * count(A.B) / avg(A.B))
return max(DISTINCT max(DISTINCT A.B) + min(DISTINCT A.B) * count(DISTINCT A.B) / avg(A.B))
return max(DISTINCT max(DISTINCT A.B) + min(DISTINCT A.B) * count(DISTINCT A.B) / avg(DISTINCT A.B))
return max(A.B + A.B - A.B * A.B / A.B)
return max(DISTINCT A.B + A.B - A.B * A.B / A.B)
# arithmetic
return 1 + 1
return 1 + 0.1
return 1 + A
return 1 + A.B
return 1 + false
return 1 + +1
return 1 + +0.1
return 1 + +A
return 1 + +A.B
return 1 + +false
return 1 - 1
return 1 - 0.1
return 1 - A
return 1 - A.B
return 1 - false
return 1 - - 1
return 1 - - 0.1
return 1 - - A
return 1 - - A.B
return 1 - - false

## clause
return 1, 0.1, a, a.b, max(1), false
# return 1 from __table
# return 1 group by 1, 0.1, a, a.b, max(1), false
# return 1 order by 1, 0.1, a, a.b, max(1), false
--error
return 1 having 1+0.1
return 1 limit 1
# return 1 limit 1,1
# return 1, 0.1, 'aa', aa, aa.b, avg(1) from __A where c-1*0.3/b.b group by aa having xxx order by 1 limit 1, 3

## comparison
return 1 <=> 1
return 1 != 1
return 1 <> 1
return 1 > 1
return 1 >= 1
return 1 < 1
return 1 <= 1
# <=>
return (1 <=> 1) <=> 1
return 1 <=> (1 <=> 1)
return (1 <=> 1) <=> (1 <=> 1)
# !=
return (1 != 1) != 1
return 1 != (1 != 1)
return (1 != 1) != (1 != 1)
return 1 != !1
return !1 != !1
# <>
return (1 <> 1) <> 1
return 1 <> (1 <> 1)
return (1 <> 1) <> (1 <> 1)
# >
return (1 > 1) > 1
return 1 > (1 > 1)
return (1 > 1) > (1 > 1)
# >=
return (1 >= 1) >= 1
return 1 >= (1 >= 1)
return (1 >= 1) >= (1 >= 1)
# <
return (1 < 1) < 1
return 1 < (1 < 1)
return (1 < 1) < (1 < 1)
# <=
return (1 <= 1) <= 1
return 1 <= (1 <= 1)
return (1 <= 1) <= (1 <= 1)

## logical
return 1 or 1
# return 1 || 1
return 1 and 1
# return 1 && 1
return not 1
return ! 1
return 1 xor 1
return 1 or 2 or 3
# return 1 || 2 || 3
return 1 and 2 and 3
# return 1 && 2 && 3
return 1 xor 2 xor 3
return not 1
return not not 1
return ! 1
return !! 1
# return not 10 xor !11 and 12 || 21 && 22 or 30
return 1 or 1;
return 1 and 1;
return 1 xor 1;
return 1  or  1;
return 1  and  1;
return 1  xor  1;
# return 1 || 1;
# return 1 && 1;
# return 1||1;
# return 1&&1;

## bit
return 1 | 1
return 1 & 1
return 1 ^ 1
return 1 << 1
return 1 >> 1
return ~1
return ~~1

## priority
# return e1 << f0^f1*f2 + !f3 * -f4  | d2 > d3 & d4 and c3 <  c4 and b3 or a2 or a3

## func
# return func()
# return func(1 + 1)
# return func(1, 1)
# return func(1, 1, 1)
# return func(func2())
# return func(func2(func3()))
return concat("a", "b", "c")
return concat("a")
return concat_ws(",", "a", "b", "c")
return concat_ws(",", "a")
return instr("abcbc", "bc", 3)
return instr("abcbc", "bc")
return findstr("abcbc", "BC", false)
return findstr("abcbc", "BC")
return toInteger(1)
return toBool(1)
return toDouble(1)
return toString(1)
return toDate(1)
return toDatetime(1)

## null
return 1 is null
return not 1 is null
# return X(1) is null
return 1 + 1 is null
return (1 + 1) is null
return 1 is not null
return not 1 is not null
# return X(1) is not null
return 1 + 1 is not null
return (1 + 1) is not null

## star
return *
# return *,*
# return *,1
# return 1,*

## where
--error
return * where 1 = 1
--error
return * where A = 1
--error
return * where A.a = 1
--error
return * where A = 1 and B=2
--error
return 1 where 1 = 1
--error
return 1 where A = 1
--error
return 1 where A.a = 1
--error
return 1 where A = 1 and B=2

## in
return A.a in (1)
return A.a in (1, 1.1, true, '1111')
return A.a not in (1)
return A.a not in (1, 1.1, true, '1111')
--error
return * where b in (1)
--error
return * where b in (1, 1.1, true, '1111')
--error
return * where b not in (1)
--error
return * where b not in (1, 1.1, true, '1111')
--error
return 1 where b in (1)
--error
return 1 where b in (1, 1.1, true, '1111')
--error
return 1 where b not in (1)
--error
return 1 where b not in (1, 1.1, true, '1111')
return 1 in (1)
return A.a in [1, 2, 3]
return A.a in (1, 2, 3)

## between
return A.a between 1 and 2
return A.a between 1 + 1 and false
return A.a not between 1 and 2
return A.a not between 1 + 1 and false
--error
return * where b between 1 and 2
--error
return * where b between 1 + 1 and false
--error
return * where b not between 1 and 2
--error
return * where b not between 1 + 1 and false
--error
return 1 where b between 1 and 2

## like
# return A.a like 'BBB'
# return A.a not like 'A'

## hint
return /*+ READ_CONSISTENCY( STRONG ) */ 1
return /*+READ_CONSISTENCY(NONE)*/ 1
return /*+READ_CONSISTENCY(xxx), READ_CONSISTENCY(bbb) */ 1
return /*+READ_CONSISTENCY(xxx), READ_CONSISTENCY(bbb), READ_CONSISTENCY(ccc) */ 1
# return /*+OP_CONCURRENT(3)*/ 1
# return /*+ ALLOW_ANONYMOUS_TABLE( true ) */ 1
# return /*+ allow_anonymous_table( false ) */ 1
# return /*+ READ_CONSISTENCY( xxx ), allow_anonymous_table( false ) */ 1
# return /*+ ALLOW_anonYMOUS_TABLE( true ), READ_CONSISTENCY( xxx ) */ 1
# return /*+ ALLOW_anonYMOUS_TABLE( true ), READ_CONSISTENCY( xxx ), OP_CONCURRENT(3) */ 1

## orderby
return 1 order by a;
return 1 order by a desc;
return 1 order by a asc;
return 1 order by a, b desc;
return 1 order by a, b asc;
return 1 order by a desc, b desc;
return 1 order by a asc, b asc;
return 1 order by a asc, b desc;

## label_ref
match (NODE_TYPE_REF:NODE_TYPE {k1:'v1'}) return 1
match (:NODE_TYPE {k1:'v1'}) return 1
match (NODE_TYPE_REF {k1:'v1'}) return 1
match (:NODE_TYPE1)->(:NODE_TYPE2) return 1
match (NODE_TYPE_REF1)->(NODE_TYPE_REF2) return 1
match (NODE_TYPE_REF)->(:NODE_TYPE) return 1
match (:NODE_TYPE)->(NODE_TYPE_REF) return 1
match (NODE_TYPE_REF1)-[NODE_TYPE_REF2]-(NODE_TYPE_REF3) return 1
match (:NODE_TYPE1)-[:NODE_TYPE2]-(:NODE_TYPE3) return 1
match (NODE_TYPE_REF1:NODE_TYPE1)-[NODE_TYPE_REF2:NODE_TYPE2]-(NODE_TYPE_REF3:NODE_TYPE3) return 1

## graphpattern
# vertex
match (n where id = 1) return n
# path
match p = (n where id = 1)-[r]->(m) return p
# hybrid
match p = (n where id = 1)-[r]->(m) order by m.id return p
match p = (n where id = 1)-[r]->(m) order by m.id return p, n, r, m

## rowkey
return @id
match (n) where @b > 1 return @id
match (n) return @id group by @b
match (n) order by @b return @id
# match (n) having @b > 1 return @id
match (n {@b:1}) return @id
match (n where @b > 1) return @id

# functions
## cast
return cast(1 as bool)

## windowing
return RANK() OVER(partition by a_id, b_id order by a_id DESC, b_id ASC) as e2_scan_sum_amt;
return SUM(ALL e1_amt) OVER(partition by b_id order by b_id) as e1_scan_sum_amt;
return SUM(ALL e1_amt) OVER(partition by b_id) as e1_scan_sum_amt;

## sum(distinct by)
return SUM(e.amt distinct by e.src_id, e.dst_id);
return SUM(f.amt distinct by f) as two_hop_amt;

## keywords
return 1 as match;
return n.match;
