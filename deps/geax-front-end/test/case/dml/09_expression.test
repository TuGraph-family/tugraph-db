RETURN 1 & 1;
RETURN 1 & 0;
RETURN 0 & 1;
RETURN 0 & 0;
RETURN 1 & 1, 1 & 0, 0 & 1, 0 & 0;
RETURN 1 | 1;
RETURN 1 | 0;
RETURN 0 | 1;
RETURN 0 | 0;
RETURN 1 | 1, 1 | 0, 0 | 1, 0 | 0;
RETURN 1 ^ 1;
RETURN 1 ^ 0;
RETURN 0 ^ 1;
RETURN 0 ^ 0;
RETURN 1 ^ 1, 1 ^ 0, 0 ^ 1, 0 ^ 0;
RETURN 1 << 1;
RETURN 1 << 0;
RETURN 1 << 63;
RETURN 1 >> 1;
RETURN 1 >> 0;
RETURN 1  >>0, 1  , 0^1 , 0 ^0,1,2;
RETURN 1 >> 0 AS result;

RETURN CASE WHEN true THEN 5 ELSE 0 END;
RETURN CASE WHEN false THEN 5 ELSE 0 END;
RETURN CASE WHEN false THEN 5 END;
RETURN CASE WHEN true THEN 5 END;
RETURN CASE WHEN true THEN 6 ELSE 0 END AS result;
RETURN CASE WHEN true THEN 6 ELSE 0 END AS result, 1, 5;
RETURN CASE WHEN true THEN 6 ELSE 0 END, 1, 5;
RETURN CASE WHEN false THEN 6 WHEN true THEN 5 WHEN false THEN 3 END AS result;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_long WHEN 12 THEN 0 ELSE 1 end, n.p_string;
MATCH (n where @id = 12) RETURN CASE true WHEN true THEN 1 ELSE 0 END AS code, CASE false WHEN false THEN 0 ELSE 1 END AS code2;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN 6.0 THEN "true" ELSE "false" END  AS equal_to_6;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN 3.0 THEN "true" ELSE "false" END, n.p_long;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN 3.0 THEN "true" END AS equal_to_3;
MATCH (n where @id = 12) RETURN n.not_exist_p, CASE n.not_exist_p WHEN 1 THEN "equal_to_1" ELSE "other_value" END AS not_exist_p_code;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN 6 THEN "true" ELSE "false" END AS diffrent_data_type;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN true THEN true ELSE false END AS diffrent_data_type;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN 6.0 THEN true ELSE 6 END;
MATCH (n where @id = 12) RETURN n.p_double, CASE n.p_double WHEN n.p_double THEN n.p_long ELSE n.p_string END;
MATCH (n where @id = 12) RETURN n.p_double, CASE CASE n.p_double WHEN n.p_double THEN n.p_long ELSE n.p_string END WHEN 12 THEN "equal_to_12" ELSE "not_equal_to_12" END;
MATCH (n where @id = 12) RETURN n.p_double, CASE CASE n.p_double WHEN n.p_double THEN n.p_long ELSE n.p_string END WHEN 12 THEN "equal_to_12" ELSE "not_equal_to_12" END  AS code;
MATCH (n where @id in [12,1]) RETURN n.p_double, n.p_long, CASE 12 WHEN n.p_long THEN CASE n.p_double WHEN 6.0 THEN "p_long_12_p_double_6.0" ELSE "p_long_12_p_double_not_6.0" END ELSE "p_long_not_12" END  AS code;
MATCH (n where @id in [12,1]) RETURN n.p_double, n.p_long, CASE 12 WHEN n.p_long THEN "p_long_12" ELSE CASE n.p_double WHEN 6.0 THEN "p_long_not_12_p_double_6.0" ELSE "p_long_not_12_p_double_not_6.0" END END  AS code;
MATCH (n where @id in [12,1,3]) RETURN n.p_double, n.p_long, CASE n.p_long WHEN CASE 5 WHEN 5 THEN 12 END THEN "p_long_12" ELSE "p_long_not_12" END AS code;
MATCH (n where @id = 12) RETURN n.p_long, CASE n.p_long WHEN 10, 12 THEN "true" ELSE "false" END AS equal_to_10_or_12;
MATCH (n where @id = 12) RETURN n.p_long, CASE n.p_long WHEN 10, 11 THEN "true" ELSE "false" END AS equal_to_10_or_11;

RETURN ABS(2);
RETURN ABS(1.2-2.0), 1.2-2.0;
RETURN ABS(2.1);
RETURN ABS(2.0);
RETURN ABS(2), ABS(2.0), ABS(1-2), ABS(2.0), 2-5;
RETURN LOG(1);
RETURN LOG(1.0);
RETURN LOG(2);
RETURN LOG(1 - 2);
RETURN LOG(1), LOG(1.0), LOG(2), LOG(1 - 2);
RETURN ROUND(1.1);
RETURN ROUND(1.5);
RETURN ROUND(1.7);
RETURN ROUND(0.0);
RETURN ROUND(0);
RETURN ROUND(0-1.1);
RETURN ROUND(0-1.5);
RETURN ROUND(0-1.7);
RETURN ROUND(0-0.0);
RETURN ROUND(0-0);
RETURN ROUND(1.1), ROUND(1.5), ROUND(1.7), ROUND(0.0), ROUND(0), ROUND(0-1.1), ROUND(0-1.5), ROUND(0-1.7), ROUND(0-0.0), ROUND(0-0);
RETURN CEIL(1.1);
RETURN CEIL(1.5);
RETURN CEIL(1.7);
RETURN CEIL(0.0);
RETURN CEIL(0);
RETURN CEIL(0-1.1);
RETURN CEIL(0-1.5);
RETURN CEIL(0-1.7);
RETURN CEIL(0-0.0);
RETURN CEIL(0-0);
RETURN CEIL(1.1), CEIL(1.5), CEIL(1.7), CEIL(0.0), CEIL(0), CEIL(0-1.1), CEIL(0-1.5), CEIL(0-1.7), CEIL(0-0.0), CEIL(0-0);
RETURN FLOOR(1.1);
RETURN FLOOR(1.5);
RETURN FLOOR(1.7);
RETURN FLOOR(0.0);
RETURN FLOOR(0);
RETURN FLOOR(0-1.1);
RETURN FLOOR(0-1.5);
RETURN FLOOR(0-1.7);
RETURN FLOOR(0-0.0);
RETURN FLOOR(0-0);
RETURN FLOOR(1.1), FLOOR(1.5), FLOOR(1.7), FLOOR(0.0), FLOOR(0), FLOOR(0-1.1), FLOOR(0-1.5), FLOOR(0-1.7), FLOOR(0-0.0), FLOOR(0-0);

RETURN range(1, 10);
RETURN range(0-10, 1);
RETURN range(10, 10);
RETURN range(0-10, 10, 2);
RETURN range(1, 10, 1000);
RETURN head(range(0,10));
RETURN last(range(0,10));
RETURN size(range(0,10));
RETURN tail(range(0,10));
RETURN reverse(range(0,10));
RETURN range(1,4) + [4,5,6];
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN m;
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN e;
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN keys(m);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN labels(m);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN label(m);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN keys(e);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN labels(e);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN label(e);

RETURN UPPER("abc");
RETURN UPPER("");
RETURN LOWER("ABC");
RETURN LOWER("");
RETURN LOWER(UPPER("aBc"));
RETURN LENGTH("1234567");
RETURN CHARACTER_LENGTH("1234567");
RETURN CHARACTER_LENGTH("");
#RETURN SUBSTRING("abc1234", 5);
#RETURN SUBSTRING("abc1234", 5, 2);
RETURN SUBSTR("abc1234", 5);
RETURN SUBSTR("abc1234", 5, 2);
#RETURN SUBSTRING("", 5);
#RETURN SUBSTRING("", 5, 2);
#RETURN SUBSTRING("abc1234", 8);
#RETURN SUBSTRING("abc1234", 8, 2);
#RETURN SUBSTRING("abc1234", 5, 100);
#RETURN SUBSTRING("abc1234", 5, 0);
RETURN SUBSTR("abc1234", -5);
RETURN SUBSTR("abc1234", -5, 2);
RETURN SUBSTR("abc1234", -8);
RETURN SUBSTR("abc1234", -8, 2);
RETURN SUBSTR("abc1234", -5, 100);
RETURN SUBSTR("abc1234", 5, -1);
RETURN TRIM("  abc   ");
RETURN TRIM("abc");
RETURN TRIM("  ");
RETURN TRIM("");
RETURN CONCAT("a", "b", "c");
RETURN CONCAT("a");
RETURN CONCAT("", "a", "");
RETURN CONCAT("", "", "");
RETURN CONCAT_WS(",", "a", "b", "c");
RETURN CONCAT_WS(",", "a");
RETURN CONCAT_WS(",", "a", "", "b");
RETURN CONCAT_WS("", "a", "b");
RETURN CONCAT_WS("", "a", "");
RETURN CONCAT_WS("", "", "b");
RETURN CONCAT_WS("", "", "");
RETURN INSTR("abcbc", "bc", 3);
RETURN INSTR("abcbc", "bc");
RETURN INSTR("", "bc", 3);
RETURN INSTR("", "bc");
RETURN INSTR("abcbc", "", 3);
RETURN INSTR("abcbc", "");
RETURN INSTR("", "");
RETURN FINDSTR("abcbc", "BC", false);
RETURN FINDSTR("abcbc", "BC");
MATCH (n:node1 {@id: 1}) RETURN isBlank(n.non_exist);
RETURN isBlank("");
RETURN isBlank("   ");
RETURN isBlank(" \t \n \f \r  ");
RETURN isBlank("\t\n\f\r");
RETURN isBlank("\t");
RETURN isBlank("\n");
RETURN isBlank("\f");
RETURN isBlank("\r");
RETURN isBlank("\b");
RETURN isBlank(" \t\n\f\rabc\t\n\f\r");
RETURN isBlank("abc");
RETURN isBlank("abc ");
RETURN isBlank(" abc");
MATCH (n:node1 {@id: 1}) RETURN isNotBlank(n.non_exist);
RETURN isNotBlank("");
RETURN isNotBlank("   ");
RETURN isNotBlank(" \t \n \f \r  ");
RETURN isNotBlank("\t\n\f\r");
RETURN isNotBlank("\t");
RETURN isNotBlank("\n");
RETURN isNotBlank("\f");
RETURN isNotBlank("\r");
RETURN isNotBlank("\b");
RETURN isNotBlank(" \t\n\f\rabc\t\n\f\r");
RETURN isNotBlank("abc");
RETURN isNotBlank("abc ");
RETURN isNotBlank(" abc");

RETURN TRIM("", "");

RETURN TOINTEGER("1");
RETURN TODOUBLE("1");
RETURN TOSTRING("1");
RETURN TOBOOL("1");
RETURN TODATE("2001-01-01");
RETURN TODATETIME("2001-01-01 10:30:00");
RETURN TOINTEGER(0);
RETURN TODOUBLE(0);
RETURN TOSTRING(0);
RETURN TOBOOL(0);
RETURN TOINTEGER(1.0);
RETURN TODOUBLE(1.0);
RETURN TOSTRING(1.0);
RETURN TOBOOL(1.0);
RETURN TOINTEGER(true);
RETURN TODOUBLE(true);
RETURN TOSTRING(true);
RETURN TOBOOL(true);
RETURN TODATE(TODATE("2001-01-01"));
RETURN TODATETIME(TODATE("2001-01-01"));
RETURN TOSTRING(TODATE("2001-01-01"));
RETURN TODATE(TODATETIME("2001-01-01 10:30:00"));
RETURN TODATETIME(TODATETIME("2001-01-01 10:30:00"));
RETURN TOSTRING(TODATETIME("2001-01-01 10:30:00"));
match(n where @id = 1000 and p_string like '123_') RETURN n.p_string;
match(n where @id = 1000 and p_string like '123%') RETURN n.p_string;
match(n where @id = 1000 and p_string like '123ab_') RETURN n.p_string;
match(n where @id = 1000 and p_string like '123ab%') RETURN n.p_string;
match(n where @id = 1000 and p_string like '123_bc') RETURN n.p_string;
match(n where @id = 1000 and p_string like '123%bc') RETURN n.p_string;
match(n where @id = 1000 and p_string like '_23abc') RETURN n.p_string;
match(n where @id = 1000 and p_string like '%23abc') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '123_') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '123%') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '123ab_') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '123ab%') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '123_bc') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '123%bc') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '_23abc') RETURN n.p_string;
match(n where @id = 1000 and p_string not like '%23abc') RETURN n.p_string;
MATCH (where @id=1)-[]-(a) WHERE a LIKE '%node1%' RETURN a;
MATCH (where @id=1)-[]-(a) WHERE a NOT LIKE '%node1%' RETURN a;
MATCH (where @id=1)-[]-(a) WHERE a LIKE '%node2%' RETURN a;
MATCH (a where @id=1)-[]-() WHERE a LIKE '%node1%' RETURN a;

RETURN -1;
RETURN - 1;
RETURN -1, - 1;
RETURN ! true;
RETURN !true;
RETURN !(1 = 2);
RETURN !(1 != 2);
RETURN ! true, !true, !(1 = 2), NOT(1 != 2);
RETURN NOT true;
RETURN NOT true;
RETURN NOT(1 = 2);
RETURN NOT(1 != 2);
RETURN NOT true, NOT true, !(1 = 2), NOT(1 != 2);
RETURN ~1;
RETURN ~ 1;
RETURN ~ 1, ~1;
RETURN +1;
RETURN (+1);
RETURN + 2;
RETURN +1 + 2;
RETURN 1 + 2;
RETURN CAST(1 AS STRING);
RETURN CAST(1 AS VARCHAR);
RETURN CAST(1 AS INTEGER);
RETURN CAST(1 AS BOOL);
RETURN CAST(1 AS BOOLEAN);
RETURN CAST(1 AS DOUBLE);
RETURN CAST(1 AS FLOAT);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS STRING);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS VARCHAR);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS INTEGER);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS BOOL);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS BOOLEAN);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS DOUBLE);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_int AS FLOAT);
RETURN CAST(1.0 AS STRING);
RETURN CAST(1.0 AS INTEGER);
RETURN CAST(1.0 AS LONG);
RETURN CAST(1.0 AS BOOL);
RETURN CAST(1.0 AS DOUBLE);
RETURN CAST(1.0 AS FLOAT);
RETURN CAST('123' AS STRING);
RETURN CAST('123' AS INTEGER);
RETURN CAST('123' AS LONG);
RETURN CAST('123' AS BOOL);
RETURN CAST('123' AS DOUBLE);
RETURN CAST('123' AS FLOAT);
RETURN CAST('2000-01-01' AS DATE);
RETURN CAST('2000-01-01 10:00:00' AS DATETIME);
RETURN CAST('1' AS DATETIME);
RETURN CAST(true AS STRING);
RETURN CAST(true AS INTEGER);
RETURN CAST(true AS LONG);
RETURN CAST(true AS BOOL);
RETURN CAST(true AS DOUBLE);
RETURN CAST(true AS FLOAT);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_date AS STRING);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_date AS DATE);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_date AS DATETIME);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_datetime AS STRING);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_datetime AS DATE);
MATCH (n:node6 {@id: 500001}) RETURN CAST(n.p_datetime AS DATETIME);
RETURN TO_DATE("2017-09-25 10:00:00");
RETURN TO_DATE('2017-09-25');
RETURN TO_DATE('I am not a date');
RETURN TO_DATE('1998-03-90');
MATCH(n:node6{@id:300002}) RETURN TO_DATE(n.p_varchar);
MATCH(n:node6{@id:300002}) RETURN TO_DATE(n.p_string);
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy-MM-dd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy/MM/dd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyyMMdd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy-MM-dd HH:mm");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy/MM/dd HH:mm");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyyMMdd HH:mm");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy-MM-dd HH");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy/MM/dd HH");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyyMMdd HH");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy-MM-dd");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy/MM/dd");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyyMMdd");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy-MM");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyy/MM");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "yyyyMM");
RETURN DATE_FORMAT("1998-07-21", "yyyy-MM-dd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21", "yyyy/MM/dd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21", "yyyyMMdd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21", "yyyy-MM-dd HH:mm");
RETURN DATE_FORMAT("1998-07-21", "yyyy/MM/dd HH:mm");
RETURN DATE_FORMAT("1998-07-21", "yyyyMMdd HH:mm");
RETURN DATE_FORMAT("1998-07-21", "yyyy-MM-dd HH");
RETURN DATE_FORMAT("1998-07-21", "yyyy/MM/dd HH");
RETURN DATE_FORMAT("1998-07-21", "yyyyMMdd HH");
RETURN DATE_FORMAT("1998-07-21", "yyyy-MM-dd");
RETURN DATE_FORMAT("1998-07-21", "yyyy/MM/dd");
RETURN DATE_FORMAT("1998-07-21", "yyyyMMdd");
RETURN DATE_FORMAT("1998-07-21", "yyyy-MM");
RETURN DATE_FORMAT("1998-07-21", "yyyy/MM");
RETURN DATE_FORMAT("1998-07-21", "yyyyMM");
RETURN DATE_FORMAT("I am not a datetime", "yyyy-MM-dd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "I am a datetime:yyyy-MM-dd HH:mm:ss");
RETURN DATE_FORMAT("1998-07-21 10:30:25", "erroryyy-M-d HH:mm:ss");
match(n:node6{@id:300002}) RETURN FROM_UNIXTIME(n.p_tinyint);
match(n:node6{@id:300002}) RETURN FROM_UNIXTIME(n.p_smallint);
match(n:node6{@id:300002}) RETURN FROM_UNIXTIME(n.p_int);
match(n:node6{@id:300002}) RETURN FROM_UNIXTIME(n.p_integer);
match(n:node6{@id:300002}) RETURN FROM_UNIXTIME(n.p_long);
match(n:node6{@id:300002}) RETURN FROM_UNIXTIME(n.p_bigint);
RETURN FROM_UNIXTIME(1508234732);
RETURN FROM_UNIXTIME(1508234732, "yyyy-MM-dd HH:mm:ss");
RETURN FROM_UNIXTIME(1508234732, "yyyy/MM/dd HH:mm:ss");
RETURN FROM_UNIXTIME(1508234732, "yyyyMMdd HH:mm:ss");
RETURN FROM_UNIXTIME(1508234732, "yyyy-MM-dd HH:mm");
RETURN FROM_UNIXTIME(1508234732, "yyyy/MM/dd HH:mm");
RETURN FROM_UNIXTIME(1508234732, "yyyyMMdd HH:mm");
RETURN FROM_UNIXTIME(1508234732, "yyyy-MM-dd HH");
RETURN FROM_UNIXTIME(1508234732, "yyyy/MM/dd HH");
RETURN FROM_UNIXTIME(1508234732, "yyyyMMdd HH");
RETURN FROM_UNIXTIME(1508234732, "yyyy-MM-dd");
RETURN FROM_UNIXTIME(1508234732, "yyyy/MM/dd");
RETURN FROM_UNIXTIME(1508234732, "yyyyMMdd");
RETURN FROM_UNIXTIME(1508234732, "yyyy-MM");
RETURN FROM_UNIXTIME(1508234732, "yyyy/MM");
RETURN FROM_UNIXTIME(1508234732, "yyyyMM");
RETURN FROM_UNIXTIME(253402300799);
RETURN FROM_UNIXTIME(253402300800);
RETURN UNIX_TIMESTAMP('2017-10-17 10:05:32');
RETURN UNIX_TIMESTAMP('2017-10-17');
RETURN UNIX_TIMESTAMP('2017-10-17 00:00:00');
match(n:node6{@id:300002}) RETURN UNIX_TIMESTAMP(n.p_varchar);
match(n:node6{@id:300002}) RETURN UNIX_TIMESTAMP(n.p_string);
RETURN UNIX_TIMESTAMP('2017-10-17 80:00:00');
RETURN UNIX_TIMESTAMP('9999-12-31 23:59:59');
RETURN DATE_DIFF("2017-09-10", "2017-09-25");
RETURN DATE_DIFF("2007-12-31", "1970-01-01");
RETURN DATE_DIFF("2010-11-30 23:59:59","2010-12-31");
RETURN DATE_DIFF("2008-01-01", "2007-12-31 23:59:59");
RETURN DATE_DIFF("2007-12-31 01:01:01", "2007-12-31 23:59:59");
RETURN DATE_ADD("2018-05-01", 1);
RETURN DATE_ADD("2018-05-01", -1);
RETURN DATE_ADD("2018-05-01", 100);
RETURN DATE_ADD("2018-05-01", -100);
RETURN DATE_ADD("2018-05-01", 2915244);
RETURN DATE_ADD("2018-05-01", 2915245);
RETURN DATE_ADD("2018-05-01 15:45:00", 1);
RETURN DATE_ADD("2018-05-01 15:45:00", -1);
RETURN DATE_ADD("2018-05-01 15:45:00", 100);
RETURN DATE_ADD("2018-05-01 15:45:00", -100);
RETURN DATE_ADD("2018-05-01 15:45:00", 2915244);
RETURN DATE_ADD("2018-05-01 15:45:00", 2915245);
RETURN DATE_SUB("2018-05-01", 1);
RETURN DATE_SUB("2018-05-01", -1);
RETURN DATE_SUB("2018-05-01", 100);
RETURN DATE_SUB("2018-05-01", -100);
RETURN DATE_SUB("2018-05-01", 737180);
RETURN DATE_SUB("2018-05-01", 737181);
RETURN DATE_SUB("2018-05-01 15:45:00", 1);
RETURN DATE_SUB("2018-05-01 15:45:00", -1);
RETURN DATE_SUB("2018-05-01 15:45:00", 100);
RETURN DATE_SUB("2018-05-01 15:45:00", -100);
RETURN DATE_SUB("2018-05-01 15:45:00", 737180);
RETURN DATE_SUB("2018-05-01 15:45:00", 737181);
MATCH (n:node1 {@id: 1})-[r:edge_n1_n2]->(m) RETURN id(m), m.@id, timestamp(r), r.@timestamp;
MATCH (n:node1 {@id: 1})-[r:edge_n1_n2]->(m) RETURN CAST(id(m) AS STRING), CAST(timestamp(r) AS STRING);

match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN m.xxx;
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.xxx);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.xxx, 1);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.xxx, m.@id);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(1, m.xxx);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.@id, m.xxx);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.xxx, m.yyy, m.zzz);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.xxx, m.yyy, 1, m.zzz);
match (n:node1 {@id:1})-[e:edge_n1_n2]->(m:node2) RETURN coalesce(m.xxx, m.yyy, m.@id, m.zzz);
RETURN NULLIF(5, 5);
RETURN NULLIF(5, 0);
MATCH(n:node6{@id:300001}) RETURN NULLIF(n.p_bool, n.p_boolean);
MATCH(n:node6{@id:300001}) RETURN NULLIF(n.p_bool, n.p_integer);
MATCH(n:node6{@id:300001}) RETURN NULLIF(n.p_bool, n.p_datetime);
MATCH(n:node6{@id:300001}) RETURN NULLIF(n.p_double, n.p_date);
MATCH(n:node6{@id:300001}) RETURN NULLIF(n.p_string, n.p_varchar);
MATCH(n:node6{@id:300001}) RETURN NULLIF(n.p_date, n.p_datetime);
RETURN NULLIF(toDate("1970-01-01"), toDateTime("1970-01-01 00:00:01"));

RETURN ISNULL(5);
MATCH(n:node6{@id:300001}) RETURN ISNULL(n.p_bool);
MATCH(n:node6{@id:300001}) RETURN ISNULL(n.p_integer);
MATCH(n:node6{@id:300001}) RETURN ISNULL(n.not_exist);
MATCH(n:node6{@id:300001}) RETURN ISNULL(toDate("1970-01-01"));
RETURN (1 <=> 1) <=> 1;
RETURN 1 <=> (1 <=> 1);
RETURN (1 <=> 1) <=> (1 <=> 1);
MATCH (n where @id = 1) RETURN n, n.p_long, n.p_string, n.p_long = n.not_exist2, n.p_long <=> n.not_exist2, n.not_exist1 <=> n.not_exist2;
MATCH (n where @id = 1) WHERE n.p_long = n.not_exist2 RETURN n, n.p_long, n.p_string;
MATCH (n where @id = 1) WHERE n.p_long <=> n.not_exist2 RETURN n, n.p_long, n.p_string;
MATCH (n where @id = 1) WHERE n.not_exist1 <=> n.not_exist2 RETURN n, n.p_long, n.p_string;
MATCH (n where @id = 1) WHERE n.p_string <=> "1" RETURN n, n.p_long, n.p_string;

RETURN if(true, 5, 6);
RETURN if(false, 5, 6);
MATCH (n where @id = 1) RETURN n, n.p_long, n.p_double, n.p_string, if(n.p_long, n.p_double, n.p_string);

return 1 % 0;
return 1 MOD 0;

return true and false or true;
return false and false or true;
return false or false and false;
return true or false and true;
return true and false and true;
return 1 + 2 * 3;
return 1 - 2 - 3;
return 1 - 2 + 3;
return 2 / 1 - 1;
return 2 / 1 * 2;
return 2 * 3 / 3;
return 1 != !1;
return 0 = !1;

return mod(1, 0);
return mod(7, 3);
return mod(2.3, 1.2);
return mod(1.8, 0.000000001);

return mod(1.8, 0);

return 1/null;
return null / 0;

MATCH (a where @id in (1, 10, 11, 12))-[r]->(b) where a.@id not in(1, 11) RETURN a.@id,a.@node_type,r.p_string,b.@id;
MATCH (a where @id in (1, 10, 11, 12))-[r]->(b) where a.@id not in(1, 10, 11, 12) RETURN a.@id,a.@node_type,r.p_string,b.@id;
MATCH (a where @id in (1, 10, 11, 12))-[r]->(b) where a.@id not in(1, 12, 13, 14, 100, 110, 120) RETURN a.@id,a.@node_type,r.p_string,b.@id;

MATCH (n where @id in [-1]) RETURN n;
MATCH (n where @id in (-1)) RETURN n;
MATCH (n where @id in (-1, 1, ABS(-10))) RETURN n;
MATCH (n where @id in [-1, 1, ABS(-10), -12]) RETURN n;
MATCH (n where @id in [-1, 1, ABS(-10), -12]) RETURN n, CASE n.@id WHEN 1 THEN [-1, -2, n.p_string] ELSE [-9, 10, 5, n.p_long] END AS res;

return LIST[];
return LIST[1];
return LIST[1,2];
return LIST["hello", "world", 2.3, 100];
return LIST[2.3];

## 参数不匹配的问题只能到实现的时候再检查了
RETURN IF(NULL);
RETURN IF(NULL), 1 + 2;
RETURN IF(5);
RETURN IF(5, 3, 3, 2);
RETURN LENGTH();
RETURN RANGE();
RETURN NOW(3);
RETURN COALESCE();
RETURN FROM_UNIXTIME(1508234732, "yyyyMM", 2);
RETURN FROM_UNIXTIME();
RETURN NULLIF(NULL);

RETURN GeoDistance(116.45, 39.941, 116.451, 39.94);
RETURN GeoDistance(-73.974122, 40.746924, -73.974122, 40.744924);
RETURN GeoDistance(115.392907, 23.062364, 115.392610, 23.061104);
RETURN GeoDistance(116, 39, 116, 40);